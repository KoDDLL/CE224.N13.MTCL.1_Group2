
Lab4_BT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc4  08011798  08011798  00021798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801375c  0801375c  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  0801375c  0801375c  0002375c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013764  08013764  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013764  08013764  00023764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013768  08013768  00023768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0801376c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003034c  2**0
                  CONTENTS
 10 .bss          00006838  2000034c  2000034c  0003034c  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20006b84  20006b84  0003034c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002aad3  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063bb  00000000  00000000  0005ae4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002508  00000000  00000000  00061210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002240  00000000  00000000  00063718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a37e  00000000  00000000  00065958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dcfb  00000000  00000000  0006fcd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d84  00000000  00000000  0009d9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00194755  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000acf0  00000000  00000000  001947a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801177c 	.word	0x0801177c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000350 	.word	0x20000350
 80001ec:	0801177c 	.word	0x0801177c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f002 f8a4 	bl	80030bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 f842 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  	BSP_GYRO_Init();
 8000f78:	f001 f9d8 	bl	800232c <BSP_GYRO_Init>
    BSP_SDRAM_Init();
 8000f7c:	f001 fed4 	bl	8002d28 <BSP_SDRAM_Init>
    MX_GPIO_Init();
 8000f80:	f000 f8a6 	bl	80010d0 <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 8000f84:	f00c ffc8 	bl	800df18 <MX_USB_DEVICE_Init>
      /* USER CODE BEGIN 2 */
    BSP_LCD_Init();//init LCD
 8000f88:	f001 fa36 	bl	80023f8 <BSP_LCD_Init>
      //set the layer buffer address into SDRAM
    BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000f8c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f90:	2001      	movs	r0, #1
 8000f92:	f001 fab3 	bl	80024fc <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);//select on which layer we write
 8000f96:	2001      	movs	r0, #1
 8000f98:	f001 fb14 	bl	80025c4 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();//turn on LCD
 8000f9c:	f001 fcc6 	bl	800292c <BSP_LCD_DisplayOn>
    BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000fa0:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <main+0x74>)
 8000fa2:	f001 fb81 	bl	80026a8 <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <main+0x74>)
 8000fa8:	f001 fb34 	bl	8002614 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f001 fb18 	bl	80025e4 <BSP_LCD_SetTextColor>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb4:	f008 fa98 	bl	80094e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <main+0x78>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <main+0x7c>)
 8000fbe:	f008 fadd 	bl	800957c <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <main+0x80>)
 8000fc6:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000fc8:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <main+0x84>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <main+0x88>)
 8000fce:	f008 fad5 	bl	800957c <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <main+0x8c>)
 8000fd6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fd8:	f008 faaa 	bl	8009530 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x70>
 8000fde:	bf00      	nop
 8000fe0:	ff0000ff 	.word	0xff0000ff
 8000fe4:	08011860 	.word	0x08011860
 8000fe8:	0800113d 	.word	0x0800113d
 8000fec:	20000368 	.word	0x20000368
 8000ff0:	08011884 	.word	0x08011884
 8000ff4:	0800120d 	.word	0x0800120d
 8000ff8:	2000036c 	.word	0x2000036c

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	; 0x50
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0320 	add.w	r3, r7, #32
 8001006:	2230      	movs	r2, #48	; 0x30
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f00d fcd8 	bl	800e9c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <SystemClock_Config+0xcc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <SystemClock_Config+0xcc>)
 800102a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <SystemClock_Config+0xcc>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <SystemClock_Config+0xd0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <SystemClock_Config+0xd0>)
 8001046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <SystemClock_Config+0xd0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001058:	2301      	movs	r3, #1
 800105a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800105c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001062:	2302      	movs	r3, #2
 8001064:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001066:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800106c:	2308      	movs	r3, #8
 800106e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001070:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001074:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001076:	2302      	movs	r3, #2
 8001078:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800107a:	2307      	movs	r3, #7
 800107c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fcd2 	bl	8005a2c <HAL_RCC_OscConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800108e:	f000 f937 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2302      	movs	r3, #2
 8001098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800109e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2105      	movs	r1, #5
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 ff33 	bl	8005f1c <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010bc:	f000 f920 	bl	8001300 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3750      	adds	r7, #80	; 0x50
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_GPIO_Init+0x68>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a16      	ldr	r2, [pc, #88]	; (8001138 <MX_GPIO_Init+0x68>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_GPIO_Init+0x68>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_GPIO_Init+0x68>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <MX_GPIO_Init+0x68>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MX_GPIO_Init+0x68>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_GPIO_Init+0x68>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <MX_GPIO_Init+0x68>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_GPIO_Init+0x68>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001144:	f00c fee8 	bl	800df18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  L3GD20_ReadXYZAngRate(&DATA);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fd9f 	bl	8001c90 <L3GD20_ReadXYZAngRate>

	 if (DATA[0] < -10){
 8001152:	edd7 7a03 	vldr	s15, [r7, #12]
 8001156:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800115a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	d508      	bpl.n	8001176 <StartTask01+0x3a>
	 	 BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"       ^");
 8001164:	4923      	ldr	r1, [pc, #140]	; (80011f4 <StartTask01+0xb8>)
 8001166:	2000      	movs	r0, #0
 8001168:	f001 fbc8 	bl	80028fc <BSP_LCD_DisplayStringAtLine>
	 	 BSP_LCD_DisplayStringAtLine(10, (uint8_t*)"        ");
 800116c:	4922      	ldr	r1, [pc, #136]	; (80011f8 <StartTask01+0xbc>)
 800116e:	200a      	movs	r0, #10
 8001170:	f001 fbc4 	bl	80028fc <BSP_LCD_DisplayStringAtLine>
 8001174:	e019      	b.n	80011aa <StartTask01+0x6e>
	 }
	 else if (DATA[0] > 10){
 8001176:	edd7 7a03 	vldr	s15, [r7, #12]
 800117a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800117e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	dd08      	ble.n	800119a <StartTask01+0x5e>
		 BSP_LCD_DisplayStringAtLine(10, (uint8_t*)"       v");
 8001188:	491c      	ldr	r1, [pc, #112]	; (80011fc <StartTask01+0xc0>)
 800118a:	200a      	movs	r0, #10
 800118c:	f001 fbb6 	bl	80028fc <BSP_LCD_DisplayStringAtLine>
	 	 BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"        ");
 8001190:	4919      	ldr	r1, [pc, #100]	; (80011f8 <StartTask01+0xbc>)
 8001192:	2000      	movs	r0, #0
 8001194:	f001 fbb2 	bl	80028fc <BSP_LCD_DisplayStringAtLine>
 8001198:	e007      	b.n	80011aa <StartTask01+0x6e>
	 }
	 else{
		 BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"        ");
 800119a:	4917      	ldr	r1, [pc, #92]	; (80011f8 <StartTask01+0xbc>)
 800119c:	2000      	movs	r0, #0
 800119e:	f001 fbad 	bl	80028fc <BSP_LCD_DisplayStringAtLine>
		 BSP_LCD_DisplayStringAtLine(10, (uint8_t*)"        ");
 80011a2:	4915      	ldr	r1, [pc, #84]	; (80011f8 <StartTask01+0xbc>)
 80011a4:	200a      	movs	r0, #10
 80011a6:	f001 fba9 	bl	80028fc <BSP_LCD_DisplayStringAtLine>
	 }

	 if (DATA[1] > 10)
 80011aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	dd04      	ble.n	80011c6 <StartTask01+0x8a>
		 BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"             >");
 80011bc:	4910      	ldr	r1, [pc, #64]	; (8001200 <StartTask01+0xc4>)
 80011be:	2005      	movs	r0, #5
 80011c0:	f001 fb9c 	bl	80028fc <BSP_LCD_DisplayStringAtLine>
 80011c4:	e011      	b.n	80011ea <StartTask01+0xae>
	 else if (DATA[1] < -10)
 80011c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ca:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80011ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	d504      	bpl.n	80011e2 <StartTask01+0xa6>
		 BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"<");
 80011d8:	490a      	ldr	r1, [pc, #40]	; (8001204 <StartTask01+0xc8>)
 80011da:	2005      	movs	r0, #5
 80011dc:	f001 fb8e 	bl	80028fc <BSP_LCD_DisplayStringAtLine>
 80011e0:	e003      	b.n	80011ea <StartTask01+0xae>
	 else
		 BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"              ");
 80011e2:	4909      	ldr	r1, [pc, #36]	; (8001208 <StartTask01+0xcc>)
 80011e4:	2005      	movs	r0, #5
 80011e6:	f001 fb89 	bl	80028fc <BSP_LCD_DisplayStringAtLine>

    osDelay(300);
 80011ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011ee:	f008 fa57 	bl	80096a0 <osDelay>
	  L3GD20_ReadXYZAngRate(&DATA);
 80011f2:	e7a9      	b.n	8001148 <StartTask01+0xc>
 80011f4:	080117a8 	.word	0x080117a8
 80011f8:	080117b4 	.word	0x080117b4
 80011fc:	080117c0 	.word	0x080117c0
 8001200:	080117cc 	.word	0x080117cc
 8001204:	080117dc 	.word	0x080117dc
 8001208:	080117e0 	.word	0x080117e0

0800120c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	char X[10], Y[10], Z[10];
	//  	char X[10], Y[10], Z[10];
  /* Infinite loop */
  for(;;)
  {
	  L3GD20_ReadXYZAngRate(&DATA);
 8001214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fd39 	bl	8001c90 <L3GD20_ReadXYZAngRate>

	  sprintf(X, "%f", DATA[0]);
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f9a1 	bl	8000568 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	f107 0020 	add.w	r0, r7, #32
 800122e:	4928      	ldr	r1, [pc, #160]	; (80012d0 <StartTask02+0xc4>)
 8001230:	f00e f838 	bl	800f2a4 <siprintf>
	  sprintf(Y, "%f", DATA[1]);
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f996 	bl	8000568 <__aeabi_f2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	f107 0014 	add.w	r0, r7, #20
 8001244:	4922      	ldr	r1, [pc, #136]	; (80012d0 <StartTask02+0xc4>)
 8001246:	f00e f82d 	bl	800f2a4 <siprintf>
	  sprintf(Z, "%f", DATA[2]);
 800124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f98b 	bl	8000568 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	f107 0008 	add.w	r0, r7, #8
 800125a:	491d      	ldr	r1, [pc, #116]	; (80012d0 <StartTask02+0xc4>)
 800125c:	f00e f822 	bl	800f2a4 <siprintf>

	  CDC_Transmit_HS((uint8_t*)"\n XYZ: ", 8);
 8001260:	2108      	movs	r1, #8
 8001262:	481c      	ldr	r0, [pc, #112]	; (80012d4 <StartTask02+0xc8>)
 8001264:	f00c ff16 	bl	800e094 <CDC_Transmit_HS>
	  HAL_Delay(50);
 8001268:	2032      	movs	r0, #50	; 0x32
 800126a:	f001 ff69 	bl	8003140 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)X, 10);
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	210a      	movs	r1, #10
 8001274:	4618      	mov	r0, r3
 8001276:	f00c ff0d 	bl	800e094 <CDC_Transmit_HS>
	  HAL_Delay(50);
 800127a:	2032      	movs	r0, #50	; 0x32
 800127c:	f001 ff60 	bl	8003140 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)" ", 1);
 8001280:	2101      	movs	r1, #1
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <StartTask02+0xcc>)
 8001284:	f00c ff06 	bl	800e094 <CDC_Transmit_HS>
	  HAL_Delay(50);
 8001288:	2032      	movs	r0, #50	; 0x32
 800128a:	f001 ff59 	bl	8003140 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)Y, 10);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	210a      	movs	r1, #10
 8001294:	4618      	mov	r0, r3
 8001296:	f00c fefd 	bl	800e094 <CDC_Transmit_HS>
	  HAL_Delay(50);
 800129a:	2032      	movs	r0, #50	; 0x32
 800129c:	f001 ff50 	bl	8003140 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)" ", 1);
 80012a0:	2101      	movs	r1, #1
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <StartTask02+0xcc>)
 80012a4:	f00c fef6 	bl	800e094 <CDC_Transmit_HS>
	  HAL_Delay(50);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f001 ff49 	bl	8003140 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)Z, 10);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	210a      	movs	r1, #10
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00c feed 	bl	800e094 <CDC_Transmit_HS>
	  HAL_Delay(50);
 80012ba:	2032      	movs	r0, #50	; 0x32
 80012bc:	f001 ff40 	bl	8003140 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)" ", 1);
 80012c0:	2101      	movs	r1, #1
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <StartTask02+0xcc>)
 80012c4:	f00c fee6 	bl	800e094 <CDC_Transmit_HS>
    osDelay(200);
 80012c8:	20c8      	movs	r0, #200	; 0xc8
 80012ca:	f008 f9e9 	bl	80096a0 <osDelay>
	  L3GD20_ReadXYZAngRate(&DATA);
 80012ce:	e7a1      	b.n	8001214 <StartTask02+0x8>
 80012d0:	080117f0 	.word	0x080117f0
 80012d4:	080117f4 	.word	0x080117f4
 80012d8:	080117fc 	.word	0x080117fc

080012dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ee:	f001 ff07 	bl	8003100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40001000 	.word	0x40001000

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_MspInit+0x54>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_MspInit+0x54>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_MspInit+0x54>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_MspInit+0x54>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_MspInit+0x54>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_MspInit+0x54>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	210f      	movs	r1, #15
 800134e:	f06f 0001 	mvn.w	r0, #1
 8001352:	f001 ffd1 	bl	80032f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	; 0x38
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <HAL_InitTick+0xe4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <HAL_InitTick+0xe4>)
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b30      	ldr	r3, [pc, #192]	; (8001448 <HAL_InitTick+0xe4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001390:	f107 0210 	add.w	r2, r7, #16
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f004 ffca 	bl	8006334 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013aa:	f004 ffaf 	bl	800630c <HAL_RCC_GetPCLK1Freq>
 80013ae:	6378      	str	r0, [r7, #52]	; 0x34
 80013b0:	e004      	b.n	80013bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013b2:	f004 ffab 	bl	800630c <HAL_RCC_GetPCLK1Freq>
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <HAL_InitTick+0xe8>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	3b01      	subs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_InitTick+0xec>)
 80013cc:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_InitTick+0xf0>)
 80013ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_InitTick+0xec>)
 80013d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <HAL_InitTick+0xec>)
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_InitTick+0xec>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_InitTick+0xec>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_InitTick+0xec>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013f0:	4817      	ldr	r0, [pc, #92]	; (8001450 <HAL_InitTick+0xec>)
 80013f2:	f006 f81f 	bl	8007434 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11b      	bne.n	800143c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <HAL_InitTick+0xec>)
 8001406:	f006 f86f 	bl	80074e8 <HAL_TIM_Base_Start_IT>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001410:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001414:	2b00      	cmp	r3, #0
 8001416:	d111      	bne.n	800143c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001418:	2036      	movs	r0, #54	; 0x36
 800141a:	f001 ff89 	bl	8003330 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d808      	bhi.n	8001436 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	2036      	movs	r0, #54	; 0x36
 800142a:	f001 ff65 	bl	80032f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_InitTick+0xf4>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e002      	b.n	800143c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800143c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001440:	4618      	mov	r0, r3
 8001442:	3738      	adds	r7, #56	; 0x38
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	431bde83 	.word	0x431bde83
 8001450:	20000370 	.word	0x20000370
 8001454:	40001000 	.word	0x40001000
 8001458:	20000080 	.word	0x20000080

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <TIM6_DAC_IRQHandler+0x10>)
 800148e:	f006 f89b 	bl	80075c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000370 	.word	0x20000370

0800149c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <OTG_HS_IRQHandler+0x10>)
 80014a2:	f003 f996 	bl	80047d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20006448 	.word	0x20006448

080014b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	return 1;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_kill>:

int _kill(int pid, int sig)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ca:	f00d fa41 	bl	800e950 <__errno>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2216      	movs	r2, #22
 80014d2:	601a      	str	r2, [r3, #0]
	return -1;
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_exit>:

void _exit (int status)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ffe7 	bl	80014c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014f2:	e7fe      	b.n	80014f2 <_exit+0x12>

080014f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00a      	b.n	800151c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001506:	f3af 8000 	nop.w
 800150a:	4601      	mov	r1, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	b2ca      	uxtb	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf0      	blt.n	8001506 <_read+0x12>
	}

return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e009      	b.n	8001554 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf1      	blt.n	8001540 <_write+0x12>
	}
	return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_close>:

int _close(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	return -1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158e:	605a      	str	r2, [r3, #4]
	return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_isatty>:

int _isatty(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	return 1;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
	return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f00d f9a6 	bl	800e950 <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20030000 	.word	0x20030000
 8001630:	00000400 	.word	0x00000400
 8001634:	200003b8 	.word	0x200003b8
 8001638:	20006b88 	.word	0x20006b88

0800163c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800167c:	4c0b      	ldr	r4, [pc, #44]	; (80016ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800168a:	f7ff ffd7 	bl	800163c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168e:	f00d f965 	bl	800e95c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff fc6b 	bl	8000f6c <main>
  bx  lr    
 8001696:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001698:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80016a4:	0801376c 	.word	0x0801376c
  ldr r2, =_sbss
 80016a8:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80016ac:	20006b84 	.word	0x20006b84

080016b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>

080016b2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016b6:	f000 fc87 	bl	8001fc8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80016ba:	20ca      	movs	r0, #202	; 0xca
 80016bc:	f000 f95d 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80016c0:	20c3      	movs	r0, #195	; 0xc3
 80016c2:	f000 f967 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80016c6:	2008      	movs	r0, #8
 80016c8:	f000 f964 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80016cc:	2050      	movs	r0, #80	; 0x50
 80016ce:	f000 f961 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80016d2:	20cf      	movs	r0, #207	; 0xcf
 80016d4:	f000 f951 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 f95b 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80016de:	20c1      	movs	r0, #193	; 0xc1
 80016e0:	f000 f958 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80016e4:	2030      	movs	r0, #48	; 0x30
 80016e6:	f000 f955 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80016ea:	20ed      	movs	r0, #237	; 0xed
 80016ec:	f000 f945 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80016f0:	2064      	movs	r0, #100	; 0x64
 80016f2:	f000 f94f 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80016f6:	2003      	movs	r0, #3
 80016f8:	f000 f94c 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80016fc:	2012      	movs	r0, #18
 80016fe:	f000 f949 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001702:	2081      	movs	r0, #129	; 0x81
 8001704:	f000 f946 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001708:	20e8      	movs	r0, #232	; 0xe8
 800170a:	f000 f936 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800170e:	2085      	movs	r0, #133	; 0x85
 8001710:	f000 f940 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001714:	2000      	movs	r0, #0
 8001716:	f000 f93d 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800171a:	2078      	movs	r0, #120	; 0x78
 800171c:	f000 f93a 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001720:	20cb      	movs	r0, #203	; 0xcb
 8001722:	f000 f92a 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001726:	2039      	movs	r0, #57	; 0x39
 8001728:	f000 f934 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800172c:	202c      	movs	r0, #44	; 0x2c
 800172e:	f000 f931 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f92e 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001738:	2034      	movs	r0, #52	; 0x34
 800173a:	f000 f92b 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800173e:	2002      	movs	r0, #2
 8001740:	f000 f928 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001744:	20f7      	movs	r0, #247	; 0xf7
 8001746:	f000 f918 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800174a:	2020      	movs	r0, #32
 800174c:	f000 f922 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001750:	20ea      	movs	r0, #234	; 0xea
 8001752:	f000 f912 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f91c 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800175c:	2000      	movs	r0, #0
 800175e:	f000 f919 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001762:	20b1      	movs	r0, #177	; 0xb1
 8001764:	f000 f909 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001768:	2000      	movs	r0, #0
 800176a:	f000 f913 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800176e:	201b      	movs	r0, #27
 8001770:	f000 f910 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001774:	20b6      	movs	r0, #182	; 0xb6
 8001776:	f000 f900 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800177a:	200a      	movs	r0, #10
 800177c:	f000 f90a 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001780:	20a2      	movs	r0, #162	; 0xa2
 8001782:	f000 f907 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001786:	20c0      	movs	r0, #192	; 0xc0
 8001788:	f000 f8f7 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800178c:	2010      	movs	r0, #16
 800178e:	f000 f901 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001792:	20c1      	movs	r0, #193	; 0xc1
 8001794:	f000 f8f1 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001798:	2010      	movs	r0, #16
 800179a:	f000 f8fb 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800179e:	20c5      	movs	r0, #197	; 0xc5
 80017a0:	f000 f8eb 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80017a4:	2045      	movs	r0, #69	; 0x45
 80017a6:	f000 f8f5 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80017aa:	2015      	movs	r0, #21
 80017ac:	f000 f8f2 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80017b0:	20c7      	movs	r0, #199	; 0xc7
 80017b2:	f000 f8e2 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80017b6:	2090      	movs	r0, #144	; 0x90
 80017b8:	f000 f8ec 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80017bc:	2036      	movs	r0, #54	; 0x36
 80017be:	f000 f8dc 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80017c2:	20c8      	movs	r0, #200	; 0xc8
 80017c4:	f000 f8e6 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80017c8:	20f2      	movs	r0, #242	; 0xf2
 80017ca:	f000 f8d6 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f8e0 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80017d4:	20b0      	movs	r0, #176	; 0xb0
 80017d6:	f000 f8d0 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80017da:	20c2      	movs	r0, #194	; 0xc2
 80017dc:	f000 f8da 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80017e0:	20b6      	movs	r0, #182	; 0xb6
 80017e2:	f000 f8ca 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80017e6:	200a      	movs	r0, #10
 80017e8:	f000 f8d4 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80017ec:	20a7      	movs	r0, #167	; 0xa7
 80017ee:	f000 f8d1 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80017f2:	2027      	movs	r0, #39	; 0x27
 80017f4:	f000 f8ce 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80017f8:	2004      	movs	r0, #4
 80017fa:	f000 f8cb 	bl	8001994 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80017fe:	202a      	movs	r0, #42	; 0x2a
 8001800:	f000 f8bb 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001804:	2000      	movs	r0, #0
 8001806:	f000 f8c5 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800180a:	2000      	movs	r0, #0
 800180c:	f000 f8c2 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001810:	2000      	movs	r0, #0
 8001812:	f000 f8bf 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001816:	20ef      	movs	r0, #239	; 0xef
 8001818:	f000 f8bc 	bl	8001994 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800181c:	202b      	movs	r0, #43	; 0x2b
 800181e:	f000 f8ac 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f8b6 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001828:	2000      	movs	r0, #0
 800182a:	f000 f8b3 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800182e:	2001      	movs	r0, #1
 8001830:	f000 f8b0 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001834:	203f      	movs	r0, #63	; 0x3f
 8001836:	f000 f8ad 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800183a:	20f6      	movs	r0, #246	; 0xf6
 800183c:	f000 f89d 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001840:	2001      	movs	r0, #1
 8001842:	f000 f8a7 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f8a4 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800184c:	2006      	movs	r0, #6
 800184e:	f000 f8a1 	bl	8001994 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001852:	202c      	movs	r0, #44	; 0x2c
 8001854:	f000 f891 	bl	800197a <ili9341_WriteReg>
  LCD_Delay(200);
 8001858:	20c8      	movs	r0, #200	; 0xc8
 800185a:	f000 fca3 	bl	80021a4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800185e:	2026      	movs	r0, #38	; 0x26
 8001860:	f000 f88b 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001864:	2001      	movs	r0, #1
 8001866:	f000 f895 	bl	8001994 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800186a:	20e0      	movs	r0, #224	; 0xe0
 800186c:	f000 f885 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001870:	200f      	movs	r0, #15
 8001872:	f000 f88f 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001876:	2029      	movs	r0, #41	; 0x29
 8001878:	f000 f88c 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800187c:	2024      	movs	r0, #36	; 0x24
 800187e:	f000 f889 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001882:	200c      	movs	r0, #12
 8001884:	f000 f886 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001888:	200e      	movs	r0, #14
 800188a:	f000 f883 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800188e:	2009      	movs	r0, #9
 8001890:	f000 f880 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001894:	204e      	movs	r0, #78	; 0x4e
 8001896:	f000 f87d 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800189a:	2078      	movs	r0, #120	; 0x78
 800189c:	f000 f87a 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80018a0:	203c      	movs	r0, #60	; 0x3c
 80018a2:	f000 f877 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80018a6:	2009      	movs	r0, #9
 80018a8:	f000 f874 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80018ac:	2013      	movs	r0, #19
 80018ae:	f000 f871 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018b2:	2005      	movs	r0, #5
 80018b4:	f000 f86e 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80018b8:	2017      	movs	r0, #23
 80018ba:	f000 f86b 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018be:	2011      	movs	r0, #17
 80018c0:	f000 f868 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f000 f865 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80018ca:	20e1      	movs	r0, #225	; 0xe1
 80018cc:	f000 f855 	bl	800197a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 f85f 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80018d6:	2016      	movs	r0, #22
 80018d8:	f000 f85c 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80018dc:	201b      	movs	r0, #27
 80018de:	f000 f859 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018e2:	2004      	movs	r0, #4
 80018e4:	f000 f856 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018e8:	2011      	movs	r0, #17
 80018ea:	f000 f853 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80018ee:	2007      	movs	r0, #7
 80018f0:	f000 f850 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80018f4:	2031      	movs	r0, #49	; 0x31
 80018f6:	f000 f84d 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80018fa:	2033      	movs	r0, #51	; 0x33
 80018fc:	f000 f84a 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001900:	2042      	movs	r0, #66	; 0x42
 8001902:	f000 f847 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001906:	2005      	movs	r0, #5
 8001908:	f000 f844 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800190c:	200c      	movs	r0, #12
 800190e:	f000 f841 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001912:	200a      	movs	r0, #10
 8001914:	f000 f83e 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001918:	2028      	movs	r0, #40	; 0x28
 800191a:	f000 f83b 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800191e:	202f      	movs	r0, #47	; 0x2f
 8001920:	f000 f838 	bl	8001994 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001924:	200f      	movs	r0, #15
 8001926:	f000 f835 	bl	8001994 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800192a:	2011      	movs	r0, #17
 800192c:	f000 f825 	bl	800197a <ili9341_WriteReg>
  LCD_Delay(200);
 8001930:	20c8      	movs	r0, #200	; 0xc8
 8001932:	f000 fc37 	bl	80021a4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001936:	2029      	movs	r0, #41	; 0x29
 8001938:	f000 f81f 	bl	800197a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800193c:	202c      	movs	r0, #44	; 0x2c
 800193e:	f000 f81c 	bl	800197a <ili9341_WriteReg>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}

08001946 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800194a:	f000 fb3d 	bl	8001fc8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800194e:	2103      	movs	r1, #3
 8001950:	20d3      	movs	r0, #211	; 0xd3
 8001952:	f000 f82c 	bl	80019ae <ili9341_ReadData>
 8001956:	4603      	mov	r3, r0
 8001958:	b29b      	uxth	r3, r3
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}

0800195e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001962:	2029      	movs	r0, #41	; 0x29
 8001964:	f000 f809 	bl	800197a <ili9341_WriteReg>
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001970:	2028      	movs	r0, #40	; 0x28
 8001972:	f000 f802 	bl	800197a <ili9341_WriteReg>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fbb8 	bl	80020fc <LCD_IO_WriteReg>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fb89 	bl	80020b8 <LCD_IO_WriteData>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	460a      	mov	r2, r1
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	4613      	mov	r3, r2
 80019bc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80019be:	797a      	ldrb	r2, [r7, #5]
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fbbb 	bl	8002140 <LCD_IO_ReadData>
 80019ca:	4603      	mov	r3, r0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80019d8:	23f0      	movs	r3, #240	; 0xf0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80019e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001a04:	f000 fbda 	bl	80021bc <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001a0e:	f107 030f 	add.w	r3, r7, #15
 8001a12:	2201      	movs	r2, #1
 8001a14:	2120      	movs	r1, #32
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fc1c 	bl	8002254 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001a26:	f107 030f 	add.w	r3, r7, #15
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2123      	movs	r1, #35	; 0x23
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fc10 	bl	8002254 <GYRO_IO_Write>
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001a50:	f000 fbb4 	bl	80021bc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	2201      	movs	r2, #1
 8001a58:	210f      	movs	r1, #15
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fc2c 	bl	80022b8 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a70:	1dfb      	adds	r3, r7, #7
 8001a72:	2201      	movs	r2, #1
 8001a74:	2124      	movs	r1, #36	; 0x24
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fc1e 	bl	80022b8 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a86:	1dfb      	adds	r3, r7, #7
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2124      	movs	r1, #36	; 0x24
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 fbe1 	bl	8002254 <GYRO_IO_Write>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001aae:	f107 030f 	add.w	r3, r7, #15
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fbcc 	bl	8002254 <GYRO_IO_Write>
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001ad6:	f107 030f 	add.w	r3, r7, #15
 8001ada:	2201      	movs	r2, #1
 8001adc:	2130      	movs	r1, #48	; 0x30
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fbea 	bl	80022b8 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001ae4:	f107 030e 	add.w	r3, r7, #14
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2122      	movs	r1, #34	; 0x22
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fbe3 	bl	80022b8 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	121b      	asrs	r3, r3, #8
 8001b02:	b25a      	sxtb	r2, r3
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001b10:	7bbb      	ldrb	r3, [r7, #14]
 8001b12:	f023 0320 	bic.w	r3, r3, #32
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	7bbb      	ldrb	r3, [r7, #14]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001b26:	f107 030f 	add.w	r3, r7, #15
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2130      	movs	r1, #48	; 0x30
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fb90 	bl	8002254 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001b34:	f107 030e 	add.w	r3, r7, #14
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2122      	movs	r1, #34	; 0x22
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fb89 	bl	8002254 <GYRO_IO_Write>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b54:	f107 030f 	add.w	r3, r7, #15
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2122      	movs	r1, #34	; 0x22
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fbab 	bl	80022b8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e00c      	b.n	8001b98 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d109      	bne.n	8001b98 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	f023 0308 	bic.w	r3, r3, #8
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b98:	f107 030f 	add.w	r3, r7, #15
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2122      	movs	r1, #34	; 0x22
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fb57 	bl	8002254 <GYRO_IO_Write>
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001bb8:	f107 030f 	add.w	r3, r7, #15
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2122      	movs	r1, #34	; 0x22
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fb79 	bl	80022b8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e009      	b.n	8001bf0 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d106      	bne.n	8001bf0 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	f023 0308 	bic.w	r3, r3, #8
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001bf0:	f107 030f 	add.w	r3, r7, #15
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2122      	movs	r1, #34	; 0x22
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fb2b 	bl	8002254 <GYRO_IO_Write>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001c10:	f107 030f 	add.w	r3, r7, #15
 8001c14:	2201      	movs	r2, #1
 8001c16:	2121      	movs	r1, #33	; 0x21
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fb4d 	bl	80022b8 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001c32:	f107 030f 	add.w	r3, r7, #15
 8001c36:	2201      	movs	r2, #1
 8001c38:	2121      	movs	r1, #33	; 0x21
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fb0a 	bl	8002254 <GYRO_IO_Write>
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001c52:	f107 030f 	add.w	r3, r7, #15
 8001c56:	2201      	movs	r2, #1
 8001c58:	2124      	movs	r1, #36	; 0x24
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fb2c 	bl	80022b8 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	f023 0310 	bic.w	r3, r3, #16
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001c74:	f107 030f 	add.w	r3, r7, #15
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2124      	movs	r1, #36	; 0x24
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fae9 	bl	8002254 <GYRO_IO_Write>
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	0000      	movs	r0, r0
 8001c8c:	0000      	movs	r0, r0
	...

08001c90 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b08b      	sub	sp, #44	; 0x2c
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001cb8:	f107 030f 	add.w	r3, r7, #15
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2123      	movs	r1, #35	; 0x23
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 faf9 	bl	80022b8 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	2206      	movs	r2, #6
 8001ccc:	2128      	movs	r1, #40	; 0x28
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 faf2 	bl	80022b8 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d123      	bne.n	8001d26 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
 8001ce2:	e01c      	b.n	8001d1e <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	3301      	adds	r3, #1
 8001cea:	3328      	adds	r3, #40	; 0x28
 8001cec:	443b      	add	r3, r7
 8001cee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	3328      	adds	r3, #40	; 0x28
 8001cfe:	443b      	add	r3, r7
 8001d00:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	3328      	adds	r3, #40	; 0x28
 8001d12:	443b      	add	r3, r7
 8001d14:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	623b      	str	r3, [r7, #32]
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	dddf      	ble.n	8001ce4 <L3GD20_ReadXYZAngRate+0x54>
 8001d24:	e022      	b.n	8001d6c <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
 8001d2a:	e01c      	b.n	8001d66 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	3328      	adds	r3, #40	; 0x28
 8001d32:	443b      	add	r3, r7
 8001d34:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	3301      	adds	r3, #1
 8001d44:	3328      	adds	r3, #40	; 0x28
 8001d46:	443b      	add	r3, r7
 8001d48:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	3328      	adds	r3, #40	; 0x28
 8001d5a:	443b      	add	r3, r7
 8001d5c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	3301      	adds	r3, #1
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	dddf      	ble.n	8001d2c <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d00c      	beq.n	8001d90 <L3GD20_ReadXYZAngRate+0x100>
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	dc0d      	bgt.n	8001d96 <L3GD20_ReadXYZAngRate+0x106>
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <L3GD20_ReadXYZAngRate+0xf4>
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d003      	beq.n	8001d8a <L3GD20_ReadXYZAngRate+0xfa>
 8001d82:	e008      	b.n	8001d96 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <L3GD20_ReadXYZAngRate+0x170>)
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001d88:	e005      	b.n	8001d96 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <L3GD20_ReadXYZAngRate+0x174>)
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001d8e:	e002      	b.n	8001d96 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <L3GD20_ReadXYZAngRate+0x178>)
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001d94:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
 8001d9a:	e025      	b.n	8001de8 <L3GD20_ReadXYZAngRate+0x158>
  {
    pfData[i]=(float)(RawData[i] * sensitivity * 0.001);
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	3328      	adds	r3, #40	; 0x28
 8001da2:	443b      	add	r3, r7
 8001da4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db8:	ee17 0a90 	vmov	r0, s15
 8001dbc:	f7fe fbd4 	bl	8000568 <__aeabi_f2d>
 8001dc0:	a30d      	add	r3, pc, #52	; (adr r3, 8001df8 <L3GD20_ReadXYZAngRate+0x168>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fc27 	bl	8000618 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	18d4      	adds	r4, r2, r3
 8001dda:	f7fe fef5 	bl	8000bc8 <__aeabi_d2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	6023      	str	r3, [r4, #0]
  for(i=0; i<3; i++)
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	3301      	adds	r3, #1
 8001de6:	623b      	str	r3, [r7, #32]
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	ddd6      	ble.n	8001d9c <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	372c      	adds	r7, #44	; 0x2c
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}
 8001df8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001dfc:	3f50624d 	.word	0x3f50624d
 8001e00:	410c0000 	.word	0x410c0000
 8001e04:	418c0000 	.word	0x418c0000
 8001e08:	428c0000 	.word	0x428c0000

08001e0c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001e10:	4819      	ldr	r0, [pc, #100]	; (8001e78 <SPIx_Init+0x6c>)
 8001e12:	f005 f9d0 	bl	80071b6 <HAL_SPI_GetState>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d12b      	bne.n	8001e74 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <SPIx_Init+0x6c>)
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <SPIx_Init+0x70>)
 8001e20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <SPIx_Init+0x6c>)
 8001e24:	2218      	movs	r2, #24
 8001e26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <SPIx_Init+0x6c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <SPIx_Init+0x6c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <SPIx_Init+0x6c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <SPIx_Init+0x6c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <SPIx_Init+0x6c>)
 8001e42:	2207      	movs	r2, #7
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <SPIx_Init+0x6c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <SPIx_Init+0x6c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <SPIx_Init+0x6c>)
 8001e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <SPIx_Init+0x6c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <SPIx_Init+0x6c>)
 8001e62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e66:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <SPIx_Init+0x6c>)
 8001e6a:	f000 f873 	bl	8001f54 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <SPIx_Init+0x6c>)
 8001e70:	f004 fced 	bl	800684e <HAL_SPI_Init>
  } 
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200003bc 	.word	0x200003bc
 8001e7c:	40015000 	.word	0x40015000

08001e80 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <SPIx_Read+0x38>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f107 0108 	add.w	r1, r7, #8
 8001e9a:	4808      	ldr	r0, [pc, #32]	; (8001ebc <SPIx_Read+0x3c>)
 8001e9c:	f004 fed8 	bl	8006c50 <HAL_SPI_Receive>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001eaa:	f000 f847 	bl	8001f3c <SPIx_Error>
  }
  
  return readvalue;
 8001eae:	68bb      	ldr	r3, [r7, #8]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000070 	.word	0x20000070
 8001ebc:	200003bc 	.word	0x200003bc

08001ec0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <SPIx_Write+0x34>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	1db9      	adds	r1, r7, #6
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <SPIx_Write+0x38>)
 8001ed8:	f004 fd7e 	bl	80069d8 <HAL_SPI_Transmit>
 8001edc:	4603      	mov	r3, r0
 8001ede:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001ee6:	f000 f829 	bl	8001f3c <SPIx_Error>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000070 	.word	0x20000070
 8001ef8:	200003bc 	.word	0x200003bc

08001efc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <SPIx_WriteRead+0x38>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f107 020f 	add.w	r2, r7, #15
 8001f12:	1df9      	adds	r1, r7, #7
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2301      	movs	r3, #1
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <SPIx_WriteRead+0x3c>)
 8001f1a:	f004 ffaa 	bl	8006e72 <HAL_SPI_TransmitReceive>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001f24:	f000 f80a 	bl	8001f3c <SPIx_Error>
  }
  
  return receivedbyte;
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000070 	.word	0x20000070
 8001f38:	200003bc 	.word	0x200003bc

08001f3c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <SPIx_Error+0x14>)
 8001f42:	f004 fd0d 	bl	8006960 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001f46:	f7ff ff61 	bl	8001e0c <SPIx_Init>
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200003bc 	.word	0x200003bc

08001f54 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <SPIx_MspInit+0x6c>)
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <SPIx_MspInit+0x6c>)
 8001f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <SPIx_MspInit+0x6c>)
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <SPIx_MspInit+0x6c>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <SPIx_MspInit+0x6c>)
 8001f82:	f043 0320 	orr.w	r3, r3, #32
 8001f86:	6313      	str	r3, [r2, #48]	; 0x30
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <SPIx_MspInit+0x6c>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001f94:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <SPIx_MspInit+0x70>)
 8001fb2:	f001 fe1f 	bl	8003bf4 <HAL_GPIO_Init>
}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40021400 	.word	0x40021400

08001fc8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001fce:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <LCD_IO_Init+0xe0>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d164      	bne.n	80020a0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001fd6:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <LCD_IO_Init+0xe0>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	4b32      	ldr	r3, [pc, #200]	; (80020ac <LCD_IO_Init+0xe4>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	4a31      	ldr	r2, [pc, #196]	; (80020ac <LCD_IO_Init+0xe4>)
 8001fe6:	f043 0308 	orr.w	r3, r3, #8
 8001fea:	6313      	str	r3, [r2, #48]	; 0x30
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <LCD_IO_Init+0xe4>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	4619      	mov	r1, r3
 8002010:	4827      	ldr	r0, [pc, #156]	; (80020b0 <LCD_IO_Init+0xe8>)
 8002012:	f001 fdef 	bl	8003bf4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <LCD_IO_Init+0xe4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a23      	ldr	r2, [pc, #140]	; (80020ac <LCD_IO_Init+0xe4>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <LCD_IO_Init+0xe4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002036:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002040:	2302      	movs	r3, #2
 8002042:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	4619      	mov	r1, r3
 800204a:	4819      	ldr	r0, [pc, #100]	; (80020b0 <LCD_IO_Init+0xe8>)
 800204c:	f001 fdd2 	bl	8003bf4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <LCD_IO_Init+0xe4>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <LCD_IO_Init+0xe4>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6313      	str	r3, [r2, #48]	; 0x30
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <LCD_IO_Init+0xe4>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800206c:	2304      	movs	r3, #4
 800206e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002078:	2302      	movs	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4619      	mov	r1, r3
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <LCD_IO_Init+0xec>)
 8002084:	f001 fdb6 	bl	8003bf4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002088:	2200      	movs	r2, #0
 800208a:	2104      	movs	r1, #4
 800208c:	4809      	ldr	r0, [pc, #36]	; (80020b4 <LCD_IO_Init+0xec>)
 800208e:	f001 ff5d 	bl	8003f4c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002092:	2201      	movs	r2, #1
 8002094:	2104      	movs	r1, #4
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <LCD_IO_Init+0xec>)
 8002098:	f001 ff58 	bl	8003f4c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800209c:	f7ff feb6 	bl	8001e0c <SPIx_Init>
  }
}
 80020a0:	bf00      	nop
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000414 	.word	0x20000414
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	40020800 	.word	0x40020800

080020b8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c8:	480a      	ldr	r0, [pc, #40]	; (80020f4 <LCD_IO_WriteData+0x3c>)
 80020ca:	f001 ff3f 	bl	8003f4c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80020ce:	2200      	movs	r2, #0
 80020d0:	2104      	movs	r1, #4
 80020d2:	4809      	ldr	r0, [pc, #36]	; (80020f8 <LCD_IO_WriteData+0x40>)
 80020d4:	f001 ff3a 	bl	8003f4c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fef0 	bl	8001ec0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80020e0:	2201      	movs	r2, #1
 80020e2:	2104      	movs	r1, #4
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <LCD_IO_WriteData+0x40>)
 80020e6:	f001 ff31 	bl	8003f4c <HAL_GPIO_WritePin>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	40020800 	.word	0x40020800

080020fc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800210c:	480a      	ldr	r0, [pc, #40]	; (8002138 <LCD_IO_WriteReg+0x3c>)
 800210e:	f001 ff1d 	bl	8003f4c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002112:	2200      	movs	r2, #0
 8002114:	2104      	movs	r1, #4
 8002116:	4809      	ldr	r0, [pc, #36]	; (800213c <LCD_IO_WriteReg+0x40>)
 8002118:	f001 ff18 	bl	8003f4c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fecd 	bl	8001ec0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002126:	2201      	movs	r2, #1
 8002128:	2104      	movs	r1, #4
 800212a:	4804      	ldr	r0, [pc, #16]	; (800213c <LCD_IO_WriteReg+0x40>)
 800212c:	f001 ff0e 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40020c00 	.word	0x40020c00
 800213c:	40020800 	.word	0x40020800

08002140 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	460a      	mov	r2, r1
 800214a:	80fb      	strh	r3, [r7, #6]
 800214c:	4613      	mov	r3, r2
 800214e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002154:	2200      	movs	r2, #0
 8002156:	2104      	movs	r1, #4
 8002158:	4810      	ldr	r0, [pc, #64]	; (800219c <LCD_IO_ReadData+0x5c>)
 800215a:	f001 fef7 	bl	8003f4c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800215e:	2200      	movs	r2, #0
 8002160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002164:	480e      	ldr	r0, [pc, #56]	; (80021a0 <LCD_IO_ReadData+0x60>)
 8002166:	f001 fef1 	bl	8003f4c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fea7 	bl	8001ec0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002172:	797b      	ldrb	r3, [r7, #5]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fe83 	bl	8001e80 <SPIx_Read>
 800217a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800217c:	2201      	movs	r2, #1
 800217e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002182:	4807      	ldr	r0, [pc, #28]	; (80021a0 <LCD_IO_ReadData+0x60>)
 8002184:	f001 fee2 	bl	8003f4c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002188:	2201      	movs	r2, #1
 800218a:	2104      	movs	r1, #4
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <LCD_IO_ReadData+0x5c>)
 800218e:	f001 fedd 	bl	8003f4c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002192:	68fb      	ldr	r3, [r7, #12]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00

080021a4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 ffc7 	bl	8003140 <HAL_Delay>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <GYRO_IO_Init+0x8c>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <GYRO_IO_Init+0x8c>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <GYRO_IO_Init+0x8c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80021de:	2302      	movs	r3, #2
 80021e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	4619      	mov	r1, r3
 80021f4:	4815      	ldr	r0, [pc, #84]	; (800224c <GYRO_IO_Init+0x90>)
 80021f6:	f001 fcfd 	bl	8003bf4 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80021fa:	2201      	movs	r2, #1
 80021fc:	2102      	movs	r1, #2
 80021fe:	4813      	ldr	r0, [pc, #76]	; (800224c <GYRO_IO_Init+0x90>)
 8002200:	f001 fea4 	bl	8003f4c <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <GYRO_IO_Init+0x8c>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <GYRO_IO_Init+0x8c>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6313      	str	r3, [r2, #48]	; 0x30
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <GYRO_IO_Init+0x8c>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002220:	2306      	movs	r3, #6
 8002222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	4619      	mov	r1, r3
 8002236:	4806      	ldr	r0, [pc, #24]	; (8002250 <GYRO_IO_Init+0x94>)
 8002238:	f001 fcdc 	bl	8003bf4 <HAL_GPIO_Init>

  SPIx_Init();
 800223c:	f7ff fde6 	bl	8001e0c <SPIx_Init>
}
 8002240:	bf00      	nop
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	40020800 	.word	0x40020800
 8002250:	40020000 	.word	0x40020000

08002254 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
 8002260:	4613      	mov	r3, r2
 8002262:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002264:	883b      	ldrh	r3, [r7, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d903      	bls.n	8002272 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002270:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002272:	2200      	movs	r2, #0
 8002274:	2102      	movs	r1, #2
 8002276:	480f      	ldr	r0, [pc, #60]	; (80022b4 <GYRO_IO_Write+0x60>)
 8002278:	f001 fe68 	bl	8003f4c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fe3c 	bl	8001efc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002284:	e00a      	b.n	800229c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fe36 	bl	8001efc <SPIx_WriteRead>
    NumByteToWrite--;
 8002290:	883b      	ldrh	r3, [r7, #0]
 8002292:	3b01      	subs	r3, #1
 8002294:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3301      	adds	r3, #1
 800229a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800229c:	883b      	ldrh	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f1      	bne.n	8002286 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80022a2:	2201      	movs	r2, #1
 80022a4:	2102      	movs	r1, #2
 80022a6:	4803      	ldr	r0, [pc, #12]	; (80022b4 <GYRO_IO_Write+0x60>)
 80022a8:	f001 fe50 	bl	8003f4c <HAL_GPIO_WritePin>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40020800 	.word	0x40020800

080022b8 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
 80022c4:	4613      	mov	r3, r2
 80022c6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80022c8:	883b      	ldrh	r3, [r7, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d904      	bls.n	80022d8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80022d4:	70fb      	strb	r3, [r7, #3]
 80022d6:	e003      	b.n	80022e0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022de:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80022e0:	2200      	movs	r2, #0
 80022e2:	2102      	movs	r1, #2
 80022e4:	4810      	ldr	r0, [pc, #64]	; (8002328 <GYRO_IO_Read+0x70>)
 80022e6:	f001 fe31 	bl	8003f4c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fe05 	bl	8001efc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80022f2:	e00c      	b.n	800230e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff fe01 	bl	8001efc <SPIx_WriteRead>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002302:	883b      	ldrh	r3, [r7, #0]
 8002304:	3b01      	subs	r3, #1
 8002306:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3301      	adds	r3, #1
 800230c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800230e:	883b      	ldrh	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ef      	bne.n	80022f4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002314:	2201      	movs	r2, #1
 8002316:	2102      	movs	r1, #2
 8002318:	4803      	ldr	r0, [pc, #12]	; (8002328 <GYRO_IO_Read+0x70>)
 800231a:	f001 fe17 	bl	8003f4c <HAL_GPIO_WritePin>
}  
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40020800 	.word	0x40020800

0800232c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002336:	2300      	movs	r3, #0
 8002338:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800233a:	2300      	movs	r3, #0
 800233c:	703b      	strb	r3, [r7, #0]
 800233e:	2300      	movs	r3, #0
 8002340:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <BSP_GYRO_Init+0xc4>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4798      	blx	r3
 8002348:	4603      	mov	r3, r0
 800234a:	2bd4      	cmp	r3, #212	; 0xd4
 800234c:	d005      	beq.n	800235a <BSP_GYRO_Init+0x2e>
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <BSP_GYRO_Init+0xc4>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4798      	blx	r3
 8002354:	4603      	mov	r3, r0
 8002356:	2bd5      	cmp	r3, #213	; 0xd5
 8002358:	d145      	bne.n	80023e6 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <BSP_GYRO_Init+0xc8>)
 800235c:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <BSP_GYRO_Init+0xc4>)
 800235e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002360:	2308      	movs	r3, #8
 8002362:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002364:	2300      	movs	r3, #0
 8002366:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002368:	2307      	movs	r3, #7
 800236a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 800236c:	2330      	movs	r3, #48	; 0x30
 800236e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002370:	2300      	movs	r3, #0
 8002372:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002374:	2300      	movs	r3, #0
 8002376:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002378:	2310      	movs	r3, #16
 800237a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800237c:	793a      	ldrb	r2, [r7, #4]
 800237e:	797b      	ldrb	r3, [r7, #5]
 8002380:	4313      	orrs	r3, r2
 8002382:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002384:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002386:	4313      	orrs	r3, r2
 8002388:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800238a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800238c:	4313      	orrs	r3, r2
 800238e:	b2db      	uxtb	r3, r3
 8002390:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002392:	7a3a      	ldrb	r2, [r7, #8]
 8002394:	7a7b      	ldrb	r3, [r7, #9]
 8002396:	4313      	orrs	r3, r2
 8002398:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800239a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800239c:	4313      	orrs	r3, r2
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	89bb      	ldrh	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <BSP_GYRO_Init+0xc8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	89ba      	ldrh	r2, [r7, #12]
 80023b4:	4610      	mov	r0, r2
 80023b6:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80023b8:	2300      	movs	r3, #0
 80023ba:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80023bc:	2300      	movs	r3, #0
 80023be:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80023c0:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80023c2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <BSP_GYRO_Init+0xc8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	89ba      	ldrh	r2, [r7, #12]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	4610      	mov	r0, r2
 80023d6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <BSP_GYRO_Init+0xc8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	2010      	movs	r0, #16
 80023e0:	4798      	blx	r3

    ret = GYRO_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	2000003c 	.word	0x2000003c
 80023f4:	20000418 	.word	0x20000418

080023f8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <BSP_LCD_Init+0xbc>)
 80023fe:	4a2e      	ldr	r2, [pc, #184]	; (80024b8 <BSP_LCD_Init+0xc0>)
 8002400:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002402:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002404:	2209      	movs	r2, #9
 8002406:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <BSP_LCD_Init+0xbc>)
 800240a:	2201      	movs	r2, #1
 800240c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002410:	221d      	movs	r2, #29
 8002412:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002416:	2203      	movs	r2, #3
 8002418:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <BSP_LCD_Init+0xbc>)
 800241c:	f240 120d 	movw	r2, #269	; 0x10d
 8002420:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002424:	f240 1243 	movw	r2, #323	; 0x143
 8002428:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <BSP_LCD_Init+0xbc>)
 800242c:	f240 1217 	movw	r2, #279	; 0x117
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002434:	f240 1247 	movw	r2, #327	; 0x147
 8002438:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <BSP_LCD_Init+0xbc>)
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <BSP_LCD_Init+0xbc>)
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <BSP_LCD_Init+0xc4>)
 8002454:	2208      	movs	r2, #8
 8002456:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <BSP_LCD_Init+0xc4>)
 800245a:	22c0      	movs	r2, #192	; 0xc0
 800245c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <BSP_LCD_Init+0xc4>)
 8002460:	2204      	movs	r2, #4
 8002462:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <BSP_LCD_Init+0xc4>)
 8002466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800246c:	4813      	ldr	r0, [pc, #76]	; (80024bc <BSP_LCD_Init+0xc4>)
 800246e:	f003 ff93 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <BSP_LCD_Init+0xbc>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002480:	2200      	movs	r2, #0
 8002482:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800248a:	f000 fa5f 	bl	800294c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800248e:	4809      	ldr	r0, [pc, #36]	; (80024b4 <BSP_LCD_Init+0xbc>)
 8002490:	f001 fd76 	bl	8003f80 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <BSP_LCD_Init+0xc8>)
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <BSP_LCD_Init+0xcc>)
 8002498:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <BSP_LCD_Init+0xc8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80024a2:	f000 fc41 	bl	8002d28 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80024a6:	4808      	ldr	r0, [pc, #32]	; (80024c8 <BSP_LCD_Init+0xd0>)
 80024a8:	f000 f8ce 	bl	8002648 <BSP_LCD_SetFont>

  return LCD_OK;
 80024ac:	2300      	movs	r3, #0
}  
 80024ae:	4618      	mov	r0, r3
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000041c 	.word	0x2000041c
 80024b8:	40016800 	.word	0x40016800
 80024bc:	20000504 	.word	0x20000504
 80024c0:	20000550 	.word	0x20000550
 80024c4:	20000004 	.word	0x20000004
 80024c8:	20000074 	.word	0x20000074

080024cc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <BSP_LCD_GetXSize+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	4798      	blx	r3
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000550 	.word	0x20000550

080024e4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <BSP_LCD_GetYSize+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	4798      	blx	r3
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000550 	.word	0x20000550

080024fc <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b090      	sub	sp, #64	; 0x40
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800250c:	f7ff ffde 	bl	80024cc <BSP_LCD_GetXSize>
 8002510:	4603      	mov	r3, r0
 8002512:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002518:	f7ff ffe4 	bl	80024e4 <BSP_LCD_GetYSize>
 800251c:	4603      	mov	r3, r0
 800251e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002528:	23ff      	movs	r3, #255	; 0xff
 800252a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002542:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002548:	2307      	movs	r3, #7
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800254c:	f7ff ffbe 	bl	80024cc <BSP_LCD_GetXSize>
 8002550:	4603      	mov	r3, r0
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002554:	f7ff ffc6 	bl	80024e4 <BSP_LCD_GetYSize>
 8002558:	4603      	mov	r3, r0
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	f107 030c 	add.w	r3, r7, #12
 8002562:	4619      	mov	r1, r3
 8002564:	4814      	ldr	r0, [pc, #80]	; (80025b8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002566:	f001 fde5 	bl	8004134 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	4913      	ldr	r1, [pc, #76]	; (80025bc <BSP_LCD_LayerDefaultInit+0xc0>)
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3304      	adds	r3, #4
 800257a:	f04f 32ff 	mov.w	r2, #4294967295
 800257e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	490e      	ldr	r1, [pc, #56]	; (80025bc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3308      	adds	r3, #8
 8002590:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002592:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002594:	88fa      	ldrh	r2, [r7, #6]
 8002596:	4909      	ldr	r1, [pc, #36]	; (80025bc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80025a6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80025a8:	4803      	ldr	r0, [pc, #12]	; (80025b8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80025aa:	f001 fe01 	bl	80041b0 <HAL_LTDC_EnableDither>
}
 80025ae:	bf00      	nop
 80025b0:	3740      	adds	r7, #64	; 0x40
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2000041c 	.word	0x2000041c
 80025bc:	20000538 	.word	0x20000538
 80025c0:	20000074 	.word	0x20000074

080025c4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <BSP_LCD_SelectLayer+0x1c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000534 	.word	0x20000534

080025e4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <BSP_LCD_SetTextColor+0x28>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4907      	ldr	r1, [pc, #28]	; (8002610 <BSP_LCD_SetTextColor+0x2c>)
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	20000534 	.word	0x20000534
 8002610:	20000538 	.word	0x20000538

08002614 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <BSP_LCD_SetBackColor+0x2c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4908      	ldr	r1, [pc, #32]	; (8002644 <BSP_LCD_SetBackColor+0x30>)
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3304      	adds	r3, #4
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	601a      	str	r2, [r3, #0]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000534 	.word	0x20000534
 8002644:	20000538 	.word	0x20000538

08002648 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <BSP_LCD_SetFont+0x2c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4908      	ldr	r1, [pc, #32]	; (8002678 <BSP_LCD_SetFont+0x30>)
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	3308      	adds	r3, #8
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	601a      	str	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000534 	.word	0x20000534
 8002678:	20000538 	.word	0x20000538

0800267c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <BSP_LCD_GetFont+0x24>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <BSP_LCD_GetFont+0x28>)
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3308      	adds	r3, #8
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000534 	.word	0x20000534
 80026a4:	20000538 	.word	0x20000538

080026a8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80026a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <BSP_LCD_Clear+0x48>)
 80026b2:	681c      	ldr	r4, [r3, #0]
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <BSP_LCD_Clear+0x48>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <BSP_LCD_Clear+0x4c>)
 80026ba:	2134      	movs	r1, #52	; 0x34
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	335c      	adds	r3, #92	; 0x5c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461e      	mov	r6, r3
 80026c8:	f7ff ff00 	bl	80024cc <BSP_LCD_GetXSize>
 80026cc:	4605      	mov	r5, r0
 80026ce:	f7ff ff09 	bl	80024e4 <BSP_LCD_GetYSize>
 80026d2:	4602      	mov	r2, r0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2300      	movs	r3, #0
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	462a      	mov	r2, r5
 80026e0:	4631      	mov	r1, r6
 80026e2:	4620      	mov	r0, r4
 80026e4:	f000 fae8 	bl	8002cb8 <FillBuffer>
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f0:	20000534 	.word	0x20000534
 80026f4:	2000041c 	.word	0x2000041c

080026f8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	80fb      	strh	r3, [r7, #6]
 8002702:	460b      	mov	r3, r1
 8002704:	80bb      	strh	r3, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <BSP_LCD_DisplayChar+0x80>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	491b      	ldr	r1, [pc, #108]	; (800277c <BSP_LCD_DisplayChar+0x84>)
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3308      	adds	r3, #8
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <BSP_LCD_DisplayChar+0x80>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4c14      	ldr	r4, [pc, #80]	; (800277c <BSP_LCD_DisplayChar+0x84>)
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4423      	add	r3, r4
 8002736:	3308      	adds	r3, #8
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800273c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002740:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <BSP_LCD_DisplayChar+0x80>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4c0d      	ldr	r4, [pc, #52]	; (800277c <BSP_LCD_DisplayChar+0x84>)
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4423      	add	r3, r4
 8002750:	3308      	adds	r3, #8
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	889b      	ldrh	r3, [r3, #4]
 8002756:	3307      	adds	r3, #7
 8002758:	2b00      	cmp	r3, #0
 800275a:	da00      	bge.n	800275e <BSP_LCD_DisplayChar+0x66>
 800275c:	3307      	adds	r3, #7
 800275e:	10db      	asrs	r3, r3, #3
 8002760:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002764:	18ca      	adds	r2, r1, r3
 8002766:	88b9      	ldrh	r1, [r7, #4]
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f9ea 	bl	8002b44 <DrawChar>
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	20000534 	.word	0x20000534
 800277c:	20000538 	.word	0x20000538

08002780 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002780:	b5b0      	push	{r4, r5, r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	60ba      	str	r2, [r7, #8]
 8002788:	461a      	mov	r2, r3
 800278a:	4603      	mov	r3, r0
 800278c:	81fb      	strh	r3, [r7, #14]
 800278e:	460b      	mov	r3, r1
 8002790:	81bb      	strh	r3, [r7, #12]
 8002792:	4613      	mov	r3, r2
 8002794:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002796:	2301      	movs	r3, #1
 8002798:	83fb      	strh	r3, [r7, #30]
 800279a:	2300      	movs	r3, #0
 800279c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80027aa:	e002      	b.n	80027b2 <BSP_LCD_DisplayStringAt+0x32>
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	3301      	adds	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	617a      	str	r2, [r7, #20]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f6      	bne.n	80027ac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80027be:	f7ff fe85 	bl	80024cc <BSP_LCD_GetXSize>
 80027c2:	4601      	mov	r1, r0
 80027c4:	4b4b      	ldr	r3, [pc, #300]	; (80028f4 <BSP_LCD_DisplayStringAt+0x174>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	484b      	ldr	r0, [pc, #300]	; (80028f8 <BSP_LCD_DisplayStringAt+0x178>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4403      	add	r3, r0
 80027d4:	3308      	adds	r3, #8
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	889b      	ldrh	r3, [r3, #4]
 80027da:	fbb1 f3f3 	udiv	r3, r1, r3
 80027de:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d01c      	beq.n	8002820 <BSP_LCD_DisplayStringAt+0xa0>
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	dc33      	bgt.n	8002852 <BSP_LCD_DisplayStringAt+0xd2>
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d002      	beq.n	80027f4 <BSP_LCD_DisplayStringAt+0x74>
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d019      	beq.n	8002826 <BSP_LCD_DisplayStringAt+0xa6>
 80027f2:	e02e      	b.n	8002852 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	1ad1      	subs	r1, r2, r3
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <BSP_LCD_DisplayStringAt+0x174>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	483e      	ldr	r0, [pc, #248]	; (80028f8 <BSP_LCD_DisplayStringAt+0x178>)
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4403      	add	r3, r0
 800280a:	3308      	adds	r3, #8
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	889b      	ldrh	r3, [r3, #4]
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	4413      	add	r3, r2
 800281c:	83fb      	strh	r3, [r7, #30]
      break;
 800281e:	e01b      	b.n	8002858 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	83fb      	strh	r3, [r7, #30]
      break;
 8002824:	e018      	b.n	8002858 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	b299      	uxth	r1, r3
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <BSP_LCD_DisplayStringAt+0x174>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4831      	ldr	r0, [pc, #196]	; (80028f8 <BSP_LCD_DisplayStringAt+0x178>)
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4403      	add	r3, r0
 800283e:	3308      	adds	r3, #8
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	889b      	ldrh	r3, [r3, #4]
 8002844:	fb11 f303 	smulbb	r3, r1, r3
 8002848:	b29a      	uxth	r2, r3
 800284a:	89fb      	ldrh	r3, [r7, #14]
 800284c:	4413      	add	r3, r2
 800284e:	83fb      	strh	r3, [r7, #30]
      break;
 8002850:	e002      	b.n	8002858 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002852:	89fb      	ldrh	r3, [r7, #14]
 8002854:	83fb      	strh	r3, [r7, #30]
      break;
 8002856:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002858:	e01a      	b.n	8002890 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	89b9      	ldrh	r1, [r7, #12]
 8002860:	8bfb      	ldrh	r3, [r7, #30]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff48 	bl	80026f8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002868:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <BSP_LCD_DisplayStringAt+0x174>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4922      	ldr	r1, [pc, #136]	; (80028f8 <BSP_LCD_DisplayStringAt+0x178>)
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3308      	adds	r3, #8
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	889a      	ldrh	r2, [r3, #4]
 800287e:	8bfb      	ldrh	r3, [r7, #30]
 8002880:	4413      	add	r3, r2
 8002882:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3301      	adds	r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
    i++;
 800288a:	8bbb      	ldrh	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2dc      	uxtb	r4, r3
 800289e:	f7ff fe15 	bl	80024cc <BSP_LCD_GetXSize>
 80028a2:	8bb9      	ldrh	r1, [r7, #28]
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <BSP_LCD_DisplayStringAt+0x174>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4d13      	ldr	r5, [pc, #76]	; (80028f8 <BSP_LCD_DisplayStringAt+0x178>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	442b      	add	r3, r5
 80028b4:	3308      	adds	r3, #8
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	889b      	ldrh	r3, [r3, #4]
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	1ac3      	subs	r3, r0, r3
 80028c0:	b299      	uxth	r1, r3
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <BSP_LCD_DisplayStringAt+0x174>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	480c      	ldr	r0, [pc, #48]	; (80028f8 <BSP_LCD_DisplayStringAt+0x178>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4403      	add	r3, r0
 80028d2:	3308      	adds	r3, #8
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	889b      	ldrh	r3, [r3, #4]
 80028d8:	4299      	cmp	r1, r3
 80028da:	bf2c      	ite	cs
 80028dc:	2301      	movcs	r3, #1
 80028de:	2300      	movcc	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	4023      	ands	r3, r4
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1b7      	bne.n	800285a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80028ea:	bf00      	nop
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bdb0      	pop	{r4, r5, r7, pc}
 80028f4:	20000534 	.word	0x20000534
 80028f8:	20000538 	.word	0x20000538

080028fc <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002908:	f7ff feb8 	bl	800267c <BSP_LCD_GetFont>
 800290c:	4603      	mov	r3, r0
 800290e:	88db      	ldrh	r3, [r3, #6]
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	fb12 f303 	smulbb	r3, r2, r3
 8002916:	b299      	uxth	r1, r3
 8002918:	2303      	movs	r3, #3
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	2000      	movs	r0, #0
 800291e:	f7ff ff2f 	bl	8002780 <BSP_LCD_DisplayStringAt>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <BSP_LCD_DisplayOn+0x1c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800293a:	4b03      	ldr	r3, [pc, #12]	; (8002948 <BSP_LCD_DisplayOn+0x1c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4798      	blx	r3
  }
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000550 	.word	0x20000550

0800294c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	; 0x38
 8002950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	4b61      	ldr	r3, [pc, #388]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a60      	ldr	r2, [pc, #384]	; (8002adc <BSP_LCD_MspInit+0x190>)
 800295c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	4b5a      	ldr	r3, [pc, #360]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a59      	ldr	r2, [pc, #356]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b57      	ldr	r3, [pc, #348]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	4b53      	ldr	r3, [pc, #332]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a52      	ldr	r2, [pc, #328]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b50      	ldr	r3, [pc, #320]	; (8002adc <BSP_LCD_MspInit+0x190>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	4b4c      	ldr	r3, [pc, #304]	; (8002adc <BSP_LCD_MspInit+0x190>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a4b      	ldr	r2, [pc, #300]	; (8002adc <BSP_LCD_MspInit+0x190>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b49      	ldr	r3, [pc, #292]	; (8002adc <BSP_LCD_MspInit+0x190>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b45      	ldr	r3, [pc, #276]	; (8002adc <BSP_LCD_MspInit+0x190>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a44      	ldr	r2, [pc, #272]	; (8002adc <BSP_LCD_MspInit+0x190>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b42      	ldr	r3, [pc, #264]	; (8002adc <BSP_LCD_MspInit+0x190>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <BSP_LCD_MspInit+0x190>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a3d      	ldr	r2, [pc, #244]	; (8002adc <BSP_LCD_MspInit+0x190>)
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <BSP_LCD_MspInit+0x190>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a36      	ldr	r2, [pc, #216]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002a04:	f043 0320 	orr.w	r3, r3, #32
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b34      	ldr	r3, [pc, #208]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	4b30      	ldr	r3, [pc, #192]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a2f      	ldr	r2, [pc, #188]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <BSP_LCD_MspInit+0x190>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002a32:	f641 0358 	movw	r3, #6232	; 0x1858
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002a40:	2302      	movs	r3, #2
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002a44:	230e      	movs	r3, #14
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4824      	ldr	r0, [pc, #144]	; (8002ae0 <BSP_LCD_MspInit+0x194>)
 8002a50:	f001 f8d0 	bl	8003bf4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002a54:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4820      	ldr	r0, [pc, #128]	; (8002ae4 <BSP_LCD_MspInit+0x198>)
 8002a62:	f001 f8c7 	bl	8003bf4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002a66:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a70:	4619      	mov	r1, r3
 8002a72:	481d      	ldr	r0, [pc, #116]	; (8002ae8 <BSP_LCD_MspInit+0x19c>)
 8002a74:	f001 f8be 	bl	8003bf4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002a78:	2348      	movs	r3, #72	; 0x48
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a80:	4619      	mov	r1, r3
 8002a82:	481a      	ldr	r0, [pc, #104]	; (8002aec <BSP_LCD_MspInit+0x1a0>)
 8002a84:	f001 f8b6 	bl	8003bf4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a92:	4619      	mov	r1, r3
 8002a94:	4816      	ldr	r0, [pc, #88]	; (8002af0 <BSP_LCD_MspInit+0x1a4>)
 8002a96:	f001 f8ad 	bl	8003bf4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002a9a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4813      	ldr	r0, [pc, #76]	; (8002af4 <BSP_LCD_MspInit+0x1a8>)
 8002aa8:	f001 f8a4 	bl	8003bf4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002aac:	2303      	movs	r3, #3
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002ab0:	2309      	movs	r3, #9
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab8:	4619      	mov	r1, r3
 8002aba:	480a      	ldr	r0, [pc, #40]	; (8002ae4 <BSP_LCD_MspInit+0x198>)
 8002abc:	f001 f89a 	bl	8003bf4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002ac0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aca:	4619      	mov	r1, r3
 8002acc:	4809      	ldr	r0, [pc, #36]	; (8002af4 <BSP_LCD_MspInit+0x1a8>)
 8002ace:	f001 f891 	bl	8003bf4 <HAL_GPIO_Init>
}
 8002ad2:	bf00      	nop
 8002ad4:	3738      	adds	r7, #56	; 0x38
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020c00 	.word	0x40020c00
 8002af0:	40021400 	.word	0x40021400
 8002af4:	40021800 	.word	0x40021800

08002af8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	603a      	str	r2, [r7, #0]
 8002b02:	80fb      	strh	r3, [r7, #6]
 8002b04:	460b      	mov	r3, r1
 8002b06:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <BSP_LCD_DrawPixel+0x44>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <BSP_LCD_DrawPixel+0x48>)
 8002b0e:	2134      	movs	r1, #52	; 0x34
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	335c      	adds	r3, #92	; 0x5c
 8002b18:	681c      	ldr	r4, [r3, #0]
 8002b1a:	88bd      	ldrh	r5, [r7, #4]
 8002b1c:	f7ff fcd6 	bl	80024cc <BSP_LCD_GetXSize>
 8002b20:	4603      	mov	r3, r0
 8002b22:	fb03 f205 	mul.w	r2, r3, r5
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4423      	add	r3, r4
 8002b2e:	461a      	mov	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3c:	20000534 	.word	0x20000534
 8002b40:	2000041c 	.word	0x2000041c

08002b44 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	603a      	str	r2, [r7, #0]
 8002b4e:	80fb      	strh	r3, [r7, #6]
 8002b50:	460b      	mov	r3, r1
 8002b52:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <DrawChar+0x16c>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4953      	ldr	r1, [pc, #332]	; (8002cb4 <DrawChar+0x170>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3308      	adds	r3, #8
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	88db      	ldrh	r3, [r3, #6]
 8002b76:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002b78:	4b4d      	ldr	r3, [pc, #308]	; (8002cb0 <DrawChar+0x16c>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	494d      	ldr	r1, [pc, #308]	; (8002cb4 <DrawChar+0x170>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3308      	adds	r3, #8
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	889b      	ldrh	r3, [r3, #4]
 8002b8e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002b90:	8a3b      	ldrh	r3, [r7, #16]
 8002b92:	3307      	adds	r3, #7
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da00      	bge.n	8002b9a <DrawChar+0x56>
 8002b98:	3307      	adds	r3, #7
 8002b9a:	10db      	asrs	r3, r3, #3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8a3b      	ldrh	r3, [r7, #16]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e076      	b.n	8002c9e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002bb0:	8a3b      	ldrh	r3, [r7, #16]
 8002bb2:	3307      	adds	r3, #7
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	da00      	bge.n	8002bba <DrawChar+0x76>
 8002bb8:	3307      	adds	r3, #7
 8002bba:	10db      	asrs	r3, r3, #3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002bca:	8a3b      	ldrh	r3, [r7, #16]
 8002bcc:	3307      	adds	r3, #7
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da00      	bge.n	8002bd4 <DrawChar+0x90>
 8002bd2:	3307      	adds	r3, #7
 8002bd4:	10db      	asrs	r3, r3, #3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d002      	beq.n	8002be0 <DrawChar+0x9c>
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d004      	beq.n	8002be8 <DrawChar+0xa4>
 8002bde:	e00c      	b.n	8002bfa <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	617b      	str	r3, [r7, #20]
      break;
 8002be6:	e016      	b.n	8002c16 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	3201      	adds	r2, #1
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
      break;
 8002bf8:	e00d      	b.n	8002c16 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	041a      	lsls	r2, r3, #16
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	3301      	adds	r3, #1
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	3202      	adds	r2, #2
 8002c0e:	7812      	ldrb	r2, [r2, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
      break;
 8002c14:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e036      	b.n	8002c8a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002c1c:	8a3a      	ldrh	r2, [r7, #16]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	1ad2      	subs	r2, r2, r3
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	4413      	add	r3, r2
 8002c26:	3b01      	subs	r3, #1
 8002c28:	2201      	movs	r2, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d012      	beq.n	8002c5e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	4413      	add	r3, r2
 8002c40:	b298      	uxth	r0, r3
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <DrawChar+0x16c>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	491b      	ldr	r1, [pc, #108]	; (8002cb4 <DrawChar+0x170>)
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	88bb      	ldrh	r3, [r7, #4]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7ff ff4e 	bl	8002af8 <BSP_LCD_DrawPixel>
 8002c5c:	e012      	b.n	8002c84 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	4413      	add	r3, r2
 8002c66:	b298      	uxth	r0, r3
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <DrawChar+0x16c>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4911      	ldr	r1, [pc, #68]	; (8002cb4 <DrawChar+0x170>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3304      	adds	r3, #4
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	88bb      	ldrh	r3, [r7, #4]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f7ff ff3a 	bl	8002af8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	3301      	adds	r3, #1
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	8a3b      	ldrh	r3, [r7, #16]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d3c4      	bcc.n	8002c1c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002c92:	88bb      	ldrh	r3, [r7, #4]
 8002c94:	3301      	adds	r3, #1
 8002c96:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	8a7b      	ldrh	r3, [r7, #18]
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d384      	bcc.n	8002bb0 <DrawChar+0x6c>
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000534 	.word	0x20000534
 8002cb4:	20000538 	.word	0x20000538

08002cb8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <FillBuffer+0x68>)
 8002cc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ccc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <FillBuffer+0x68>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <FillBuffer+0x68>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <FillBuffer+0x68>)
 8002cdc:	4a11      	ldr	r2, [pc, #68]	; (8002d24 <FillBuffer+0x6c>)
 8002cde:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002ce0:	480f      	ldr	r0, [pc, #60]	; (8002d20 <FillBuffer+0x68>)
 8002ce2:	f000 fcf1 	bl	80036c8 <HAL_DMA2D_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d115      	bne.n	8002d18 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002cec:	68f9      	ldr	r1, [r7, #12]
 8002cee:	480c      	ldr	r0, [pc, #48]	; (8002d20 <FillBuffer+0x68>)
 8002cf0:	f000 fe52 	bl	8003998 <HAL_DMA2D_ConfigLayer>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10e      	bne.n	8002d18 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69f9      	ldr	r1, [r7, #28]
 8002d04:	4806      	ldr	r0, [pc, #24]	; (8002d20 <FillBuffer+0x68>)
 8002d06:	f000 fd32 	bl	800376e <HAL_DMA2D_Start>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002d10:	210a      	movs	r1, #10
 8002d12:	4803      	ldr	r0, [pc, #12]	; (8002d20 <FillBuffer+0x68>)
 8002d14:	f000 fd56 	bl	80037c4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	200004c4 	.word	0x200004c4
 8002d24:	4002b000 	.word	0x4002b000

08002d28 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d2e:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <BSP_SDRAM_Init+0xb0>)
 8002d30:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <BSP_SDRAM_Init+0xb4>)
 8002d34:	2202      	movs	r2, #2
 8002d36:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002d38:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <BSP_SDRAM_Init+0xb4>)
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002d3e:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <BSP_SDRAM_Init+0xb4>)
 8002d40:	2204      	movs	r2, #4
 8002d42:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <BSP_SDRAM_Init+0xb4>)
 8002d46:	2207      	movs	r2, #7
 8002d48:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <BSP_SDRAM_Init+0xb4>)
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <BSP_SDRAM_Init+0xb4>)
 8002d52:	2202      	movs	r2, #2
 8002d54:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002d56:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <BSP_SDRAM_Init+0xb4>)
 8002d58:	2202      	movs	r2, #2
 8002d5a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d70:	2210      	movs	r2, #16
 8002d72:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d7c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002d80:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d8e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002d90:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002da2:	f000 f87f 	bl	8002ea4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002da6:	490d      	ldr	r1, [pc, #52]	; (8002ddc <BSP_SDRAM_Init+0xb4>)
 8002da8:	480a      	ldr	r0, [pc, #40]	; (8002dd4 <BSP_SDRAM_Init+0xac>)
 8002daa:	f003 fcb5 	bl	8006718 <HAL_SDRAM_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002db4:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <BSP_SDRAM_Init+0xb8>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e002      	b.n	8002dc2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <BSP_SDRAM_Init+0xb8>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002dc2:	f240 506a 	movw	r0, #1386	; 0x56a
 8002dc6:	f000 f80d 	bl	8002de4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <BSP_SDRAM_Init+0xb8>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000554 	.word	0x20000554
 8002dd8:	a0000140 	.word	0xa0000140
 8002ddc:	20000588 	.word	0x20000588
 8002de0:	2000007c 	.word	0x2000007c

08002de4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002df8:	2208      	movs	r2, #8
 8002dfa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e0c:	4923      	ldr	r1, [pc, #140]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e0e:	4824      	ldr	r0, [pc, #144]	; (8002ea0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e10:	f003 fcc0 	bl	8006794 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002e14:	2001      	movs	r0, #1
 8002e16:	f000 f993 	bl	8003140 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e22:	2208      	movs	r2, #8
 8002e24:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e36:	4919      	ldr	r1, [pc, #100]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e38:	4819      	ldr	r0, [pc, #100]	; (8002ea0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e3a:	f003 fcab 	bl	8006794 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e40:	2203      	movs	r2, #3
 8002e42:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e46:	2208      	movs	r2, #8
 8002e48:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e5a:	4910      	ldr	r1, [pc, #64]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e5c:	4810      	ldr	r0, [pc, #64]	; (8002ea0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e5e:	f003 fc99 	bl	8006794 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002e62:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002e66:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e70:	2208      	movs	r2, #8
 8002e72:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e7e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e84:	4905      	ldr	r1, [pc, #20]	; (8002e9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e86:	4806      	ldr	r0, [pc, #24]	; (8002ea0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e88:	f003 fc84 	bl	8006794 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4804      	ldr	r0, [pc, #16]	; (8002ea0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e90:	f003 fcb5 	bl	80067fe <HAL_SDRAM_ProgramRefreshRate>
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200005a4 	.word	0x200005a4
 8002ea0:	20000554 	.word	0x20000554

08002ea4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b090      	sub	sp, #64	; 0x40
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80ec 	beq.w	800308e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eba:	4b77      	ldr	r3, [pc, #476]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	4a76      	ldr	r2, [pc, #472]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6393      	str	r3, [r2, #56]	; 0x38
 8002ec6:	4b74      	ldr	r3, [pc, #464]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed6:	4b70      	ldr	r3, [pc, #448]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a6f      	ldr	r2, [pc, #444]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002edc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	4b69      	ldr	r3, [pc, #420]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a68      	ldr	r2, [pc, #416]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b66      	ldr	r3, [pc, #408]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	4b62      	ldr	r3, [pc, #392]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a61      	ldr	r2, [pc, #388]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f14:	f043 0304 	orr.w	r3, r3, #4
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a5a      	ldr	r2, [pc, #360]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b58      	ldr	r3, [pc, #352]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	4b54      	ldr	r3, [pc, #336]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a53      	ldr	r2, [pc, #332]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f4c:	f043 0310 	orr.w	r3, r3, #16
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b51      	ldr	r3, [pc, #324]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a4c      	ldr	r2, [pc, #304]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f68:	f043 0320 	orr.w	r3, r3, #32
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b46      	ldr	r3, [pc, #280]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a45      	ldr	r2, [pc, #276]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b43      	ldr	r3, [pc, #268]	; (8003098 <BSP_SDRAM_MspInit+0x1f4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002fa6:	2360      	movs	r3, #96	; 0x60
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fae:	4619      	mov	r1, r3
 8002fb0:	483a      	ldr	r0, [pc, #232]	; (800309c <BSP_SDRAM_MspInit+0x1f8>)
 8002fb2:	f000 fe1f 	bl	8003bf4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4837      	ldr	r0, [pc, #220]	; (80030a0 <BSP_SDRAM_MspInit+0x1fc>)
 8002fc2:	f000 fe17 	bl	8003bf4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002fc6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4834      	ldr	r0, [pc, #208]	; (80030a4 <BSP_SDRAM_MspInit+0x200>)
 8002fd4:	f000 fe0e 	bl	8003bf4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002fd8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4830      	ldr	r0, [pc, #192]	; (80030a8 <BSP_SDRAM_MspInit+0x204>)
 8002fe6:	f000 fe05 	bl	8003bf4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002fea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	482d      	ldr	r0, [pc, #180]	; (80030ac <BSP_SDRAM_MspInit+0x208>)
 8002ff8:	f000 fdfc 	bl	8003bf4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002ffc:	f248 1333 	movw	r3, #33075	; 0x8133
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003006:	4619      	mov	r1, r3
 8003008:	4829      	ldr	r0, [pc, #164]	; (80030b0 <BSP_SDRAM_MspInit+0x20c>)
 800300a:	f000 fdf3 	bl	8003bf4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 8003010:	2200      	movs	r2, #0
 8003012:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800301a:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 8003024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003028:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800302a:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 800302c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003030:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 8003034:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003038:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 800303c:	2200      	movs	r2, #0
 800303e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 8003042:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003046:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 800304a:	2200      	movs	r2, #0
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800304e:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 8003050:	2203      	movs	r2, #3
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003054:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 8003056:	2200      	movs	r2, #0
 8003058:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 8003062:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <BSP_SDRAM_MspInit+0x214>)
 8003064:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a12      	ldr	r2, [pc, #72]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
 800306c:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003072:	4810      	ldr	r0, [pc, #64]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 8003074:	f000 fa18 	bl	80034a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003078:	480e      	ldr	r0, [pc, #56]	; (80030b4 <BSP_SDRAM_MspInit+0x210>)
 800307a:	f000 f967 	bl	800334c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	210f      	movs	r1, #15
 8003082:	2038      	movs	r0, #56	; 0x38
 8003084:	f000 f938 	bl	80032f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003088:	2038      	movs	r0, #56	; 0x38
 800308a:	f000 f951 	bl	8003330 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800308e:	bf00      	nop
 8003090:	3740      	adds	r7, #64	; 0x40
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	40020400 	.word	0x40020400
 80030a0:	40020800 	.word	0x40020800
 80030a4:	40020c00 	.word	0x40020c00
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40021400 	.word	0x40021400
 80030b0:	40021800 	.word	0x40021800
 80030b4:	200005b4 	.word	0x200005b4
 80030b8:	40026410 	.word	0x40026410

080030bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_Init+0x40>)
 80030c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_Init+0x40>)
 80030d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_Init+0x40>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 f8fc 	bl	80032e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ea:	200f      	movs	r0, #15
 80030ec:	f7fe f93a 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f0:	f7fe f90c 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_IncTick+0x20>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_IncTick+0x24>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4413      	add	r3, r2
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <HAL_IncTick+0x24>)
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000084 	.word	0x20000084
 8003124:	20000614 	.word	0x20000614

08003128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return uwTick;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_GetTick+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000614 	.word	0x20000614

08003140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7ff ffee 	bl	8003128 <HAL_GetTick>
 800314c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d005      	beq.n	8003166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_Delay+0x44>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003166:	bf00      	nop
 8003168:	f7ff ffde 	bl	8003128 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	429a      	cmp	r2, r3
 8003176:	d8f7      	bhi.n	8003168 <HAL_Delay+0x28>
  {
  }
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000084 	.word	0x20000084

08003188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a4:	4013      	ands	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ba:	4a04      	ldr	r2, [pc, #16]	; (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	60d3      	str	r3, [r2, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <__NVIC_GetPriorityGrouping+0x18>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	f003 0307 	and.w	r3, r3, #7
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	db0b      	blt.n	8003216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	4907      	ldr	r1, [pc, #28]	; (8003224 <__NVIC_EnableIRQ+0x38>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2001      	movs	r0, #1
 800320e:	fa00 f202 	lsl.w	r2, r0, r2
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000e100 	.word	0xe000e100

08003228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	2b00      	cmp	r3, #0
 800323a:	db0a      	blt.n	8003252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	490c      	ldr	r1, [pc, #48]	; (8003274 <__NVIC_SetPriority+0x4c>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	440b      	add	r3, r1
 800324c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003250:	e00a      	b.n	8003268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4908      	ldr	r1, [pc, #32]	; (8003278 <__NVIC_SetPriority+0x50>)
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	3b04      	subs	r3, #4
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	440b      	add	r3, r1
 8003266:	761a      	strb	r2, [r3, #24]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000e100 	.word	0xe000e100
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f1c3 0307 	rsb	r3, r3, #7
 8003296:	2b04      	cmp	r3, #4
 8003298:	bf28      	it	cs
 800329a:	2304      	movcs	r3, #4
 800329c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d902      	bls.n	80032ac <NVIC_EncodePriority+0x30>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3b03      	subs	r3, #3
 80032aa:	e000      	b.n	80032ae <NVIC_EncodePriority+0x32>
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	43d9      	mvns	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	4313      	orrs	r3, r2
         );
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3724      	adds	r7, #36	; 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff4c 	bl	8003188 <__NVIC_SetPriorityGrouping>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330a:	f7ff ff61 	bl	80031d0 <__NVIC_GetPriorityGrouping>
 800330e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	6978      	ldr	r0, [r7, #20]
 8003316:	f7ff ffb1 	bl	800327c <NVIC_EncodePriority>
 800331a:	4602      	mov	r2, r0
 800331c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff80 	bl	8003228 <__NVIC_SetPriority>
}
 8003328:	bf00      	nop
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff54 	bl	80031ec <__NVIC_EnableIRQ>
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003358:	f7ff fee6 	bl	8003128 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e099      	b.n	800349c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003388:	e00f      	b.n	80033aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800338a:	f7ff fecd 	bl	8003128 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b05      	cmp	r3, #5
 8003396:	d908      	bls.n	80033aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2203      	movs	r2, #3
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e078      	b.n	800349c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e8      	bne.n	800338a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <HAL_DMA_Init+0x158>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b04      	cmp	r3, #4
 8003402:	d107      	bne.n	8003414 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	4313      	orrs	r3, r2
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0307 	bic.w	r3, r3, #7
 800342a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2b04      	cmp	r3, #4
 800343c:	d117      	bne.n	800346e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8bd 	bl	80035d0 <DMA_CheckFifoParam>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2240      	movs	r2, #64	; 0x40
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800346a:	2301      	movs	r3, #1
 800346c:	e016      	b.n	800349c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f874 	bl	8003564 <DMA_CalcBaseAndBitshift>
 800347c:	4603      	mov	r3, r0
 800347e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	223f      	movs	r2, #63	; 0x3f
 8003486:	409a      	lsls	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	f010803f 	.word	0xf010803f

080034a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e050      	b.n	800355c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d101      	bne.n	80034ca <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	e048      	b.n	800355c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2200      	movs	r2, #0
 80034e8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2221      	movs	r2, #33	; 0x21
 8003508:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f82a 	bl	8003564 <DMA_CalcBaseAndBitshift>
 8003510:	4603      	mov	r3, r0
 8003512:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353c:	223f      	movs	r2, #63	; 0x3f
 800353e:	409a      	lsls	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3b10      	subs	r3, #16
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800357e:	4a13      	ldr	r2, [pc, #76]	; (80035cc <DMA_CalcBaseAndBitshift+0x68>)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d909      	bls.n	80035a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	1d1a      	adds	r2, r3, #4
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	659a      	str	r2, [r3, #88]	; 0x58
 80035a4:	e007      	b.n	80035b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	aaaaaaab 	.word	0xaaaaaaab
 80035cc:	08013378 	.word	0x08013378

080035d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d11f      	bne.n	800362a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d856      	bhi.n	800369e <DMA_CheckFifoParam+0xce>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <DMA_CheckFifoParam+0x28>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	08003609 	.word	0x08003609
 80035fc:	0800361b 	.word	0x0800361b
 8003600:	08003609 	.word	0x08003609
 8003604:	0800369f 	.word	0x0800369f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d046      	beq.n	80036a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e043      	b.n	80036a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003622:	d140      	bne.n	80036a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003628:	e03d      	b.n	80036a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d121      	bne.n	8003678 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d837      	bhi.n	80036aa <DMA_CheckFifoParam+0xda>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <DMA_CheckFifoParam+0x70>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003651 	.word	0x08003651
 8003644:	08003657 	.word	0x08003657
 8003648:	08003651 	.word	0x08003651
 800364c:	08003669 	.word	0x08003669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      break;
 8003654:	e030      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d025      	beq.n	80036ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003666:	e022      	b.n	80036ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003670:	d11f      	bne.n	80036b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003676:	e01c      	b.n	80036b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d903      	bls.n	8003686 <DMA_CheckFifoParam+0xb6>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d003      	beq.n	800368c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003684:	e018      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      break;
 800368a:	e015      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e00b      	b.n	80036b6 <DMA_CheckFifoParam+0xe6>
      break;
 800369e:	bf00      	nop
 80036a0:	e00a      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e008      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
 80036a8:	e006      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e004      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
    }
  } 
  
  return status; 
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop

080036c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e03b      	b.n	8003752 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f833 	bl	800375a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	f023 0107 	bic.w	r1, r3, #7
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003732:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68d1      	ldr	r1, [r2, #12]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	430b      	orrs	r3, r1
 8003740:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af02      	add	r7, sp, #8
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_DMA2D_Start+0x1c>
 8003786:	2302      	movs	r3, #2
 8003788:	e018      	b.n	80037bc <HAL_DMA2D_Start+0x4e>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f989 	bl	8003abc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d056      	beq.n	800388e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80037e0:	f7ff fca2 	bl	8003128 <HAL_GetTick>
 80037e4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80037e6:	e04b      	b.n	8003880 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d023      	beq.n	8003842 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003808:	f043 0202 	orr.w	r2, r3, #2
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	f043 0201 	orr.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2221      	movs	r2, #33	; 0x21
 800382c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0a5      	b.n	800398e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d01a      	beq.n	8003880 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7ff fc6d 	bl	8003128 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <HAL_DMA2D_PollForTransfer+0x9c>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10f      	bne.n	8003880 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2203      	movs	r2, #3
 8003870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e086      	b.n	800398e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ac      	beq.n	80037e8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d061      	beq.n	8003974 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038b0:	f7ff fc3a 	bl	8003128 <HAL_GetTick>
 80038b4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80038b6:	e056      	b.n	8003966 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d02e      	beq.n	8003928 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	f043 0204 	orr.w	r2, r3, #4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	f043 0202 	orr.w	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003904:	f043 0201 	orr.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2229      	movs	r2, #41	; 0x29
 8003912:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e032      	b.n	800398e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d01a      	beq.n	8003966 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7ff fbfa 	bl	8003128 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <HAL_DMA2D_PollForTransfer+0x182>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10f      	bne.n	8003966 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2203      	movs	r2, #3
 8003956:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e013      	b.n	800398e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0a1      	beq.n	80038b8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2212      	movs	r2, #18
 800397a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_DMA2D_ConfigLayer+0x20>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e079      	b.n	8003aac <HAL_DMA2D_ConfigLayer+0x114>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	3318      	adds	r3, #24
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80039e2:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <HAL_DMA2D_ConfigLayer+0x120>)
 80039e4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b0a      	cmp	r3, #10
 80039ec:	d003      	beq.n	80039f6 <HAL_DMA2D_ConfigLayer+0x5e>
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b09      	cmp	r3, #9
 80039f4:	d107      	bne.n	8003a06 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e005      	b.n	8003a12 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d120      	bne.n	8003a5a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	ea02 0103 	and.w	r1, r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b0a      	cmp	r3, #10
 8003a40:	d003      	beq.n	8003a4a <HAL_DMA2D_ConfigLayer+0xb2>
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b09      	cmp	r3, #9
 8003a48:	d127      	bne.n	8003a9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
 8003a58:	e01f      	b.n	8003a9a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	ea02 0103 	and.w	r1, r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b0a      	cmp	r3, #10
 8003a82:	d003      	beq.n	8003a8c <HAL_DMA2D_ConfigLayer+0xf4>
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b09      	cmp	r3, #9
 8003a8a:	d106      	bne.n	8003a9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a98:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	ff03000f 	.word	0xff03000f

08003abc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b08b      	sub	sp, #44	; 0x2c
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	041a      	lsls	r2, r3, #16
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003af4:	d174      	bne.n	8003be0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003afc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b04:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b0c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	e053      	b.n	8003bd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d106      	bne.n	8003b44 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	e048      	b.n	8003bd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d111      	bne.n	8003b70 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	0cdb      	lsrs	r3, r3, #19
 8003b50:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	0a9b      	lsrs	r3, r3, #10
 8003b56:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	08db      	lsrs	r3, r3, #3
 8003b5c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	02db      	lsls	r3, r3, #11
 8003b66:	4313      	orrs	r3, r2
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	e032      	b.n	8003bd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d117      	bne.n	8003ba8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	0fdb      	lsrs	r3, r3, #31
 8003b7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	0cdb      	lsrs	r3, r3, #19
 8003b82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	0adb      	lsrs	r3, r3, #11
 8003b88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	029b      	lsls	r3, r3, #10
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	03db      	lsls	r3, r3, #15
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba6:	e016      	b.n	8003bd6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	0f1b      	lsrs	r3, r3, #28
 8003bac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	0d1b      	lsrs	r3, r3, #20
 8003bb2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	0b1b      	lsrs	r3, r3, #12
 8003bb8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	011a      	lsls	r2, r3, #4
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003bde:	e003      	b.n	8003be8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	60da      	str	r2, [r3, #12]
}
 8003be8:	bf00      	nop
 8003bea:	372c      	adds	r7, #44	; 0x2c
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e177      	b.n	8003f00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c10:	2201      	movs	r2, #1
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	f040 8166 	bne.w	8003efa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d005      	beq.n	8003c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d130      	bne.n	8003ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	2203      	movs	r2, #3
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 0201 	and.w	r2, r3, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d017      	beq.n	8003ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d123      	bne.n	8003d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	08da      	lsrs	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3208      	adds	r2, #8
 8003cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	220f      	movs	r2, #15
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	08da      	lsrs	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3208      	adds	r2, #8
 8003d32:	69b9      	ldr	r1, [r7, #24]
 8003d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0203 	and.w	r2, r3, #3
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80c0 	beq.w	8003efa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	4b66      	ldr	r3, [pc, #408]	; (8003f18 <HAL_GPIO_Init+0x324>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	4a65      	ldr	r2, [pc, #404]	; (8003f18 <HAL_GPIO_Init+0x324>)
 8003d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d88:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8a:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <HAL_GPIO_Init+0x324>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d96:	4a61      	ldr	r2, [pc, #388]	; (8003f1c <HAL_GPIO_Init+0x328>)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	220f      	movs	r2, #15
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a58      	ldr	r2, [pc, #352]	; (8003f20 <HAL_GPIO_Init+0x32c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d037      	beq.n	8003e32 <HAL_GPIO_Init+0x23e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a57      	ldr	r2, [pc, #348]	; (8003f24 <HAL_GPIO_Init+0x330>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d031      	beq.n	8003e2e <HAL_GPIO_Init+0x23a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a56      	ldr	r2, [pc, #344]	; (8003f28 <HAL_GPIO_Init+0x334>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02b      	beq.n	8003e2a <HAL_GPIO_Init+0x236>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a55      	ldr	r2, [pc, #340]	; (8003f2c <HAL_GPIO_Init+0x338>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d025      	beq.n	8003e26 <HAL_GPIO_Init+0x232>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a54      	ldr	r2, [pc, #336]	; (8003f30 <HAL_GPIO_Init+0x33c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01f      	beq.n	8003e22 <HAL_GPIO_Init+0x22e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a53      	ldr	r2, [pc, #332]	; (8003f34 <HAL_GPIO_Init+0x340>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d019      	beq.n	8003e1e <HAL_GPIO_Init+0x22a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a52      	ldr	r2, [pc, #328]	; (8003f38 <HAL_GPIO_Init+0x344>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_GPIO_Init+0x226>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a51      	ldr	r2, [pc, #324]	; (8003f3c <HAL_GPIO_Init+0x348>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00d      	beq.n	8003e16 <HAL_GPIO_Init+0x222>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a50      	ldr	r2, [pc, #320]	; (8003f40 <HAL_GPIO_Init+0x34c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <HAL_GPIO_Init+0x21e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4f      	ldr	r2, [pc, #316]	; (8003f44 <HAL_GPIO_Init+0x350>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_Init+0x21a>
 8003e0a:	2309      	movs	r3, #9
 8003e0c:	e012      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e0e:	230a      	movs	r3, #10
 8003e10:	e010      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e12:	2308      	movs	r3, #8
 8003e14:	e00e      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e16:	2307      	movs	r3, #7
 8003e18:	e00c      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e1a:	2306      	movs	r3, #6
 8003e1c:	e00a      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e1e:	2305      	movs	r3, #5
 8003e20:	e008      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e22:	2304      	movs	r3, #4
 8003e24:	e006      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e26:	2303      	movs	r3, #3
 8003e28:	e004      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e002      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_GPIO_Init+0x240>
 8003e32:	2300      	movs	r3, #0
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	f002 0203 	and.w	r2, r2, #3
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	4093      	lsls	r3, r2
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e44:	4935      	ldr	r1, [pc, #212]	; (8003f1c <HAL_GPIO_Init+0x328>)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e52:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <HAL_GPIO_Init+0x354>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e76:	4a34      	ldr	r2, [pc, #208]	; (8003f48 <HAL_GPIO_Init+0x354>)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e7c:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <HAL_GPIO_Init+0x354>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ea0:	4a29      	ldr	r2, [pc, #164]	; (8003f48 <HAL_GPIO_Init+0x354>)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <HAL_GPIO_Init+0x354>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eca:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <HAL_GPIO_Init+0x354>)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <HAL_GPIO_Init+0x354>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ef4:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <HAL_GPIO_Init+0x354>)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3301      	adds	r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b0f      	cmp	r3, #15
 8003f04:	f67f ae84 	bls.w	8003c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3724      	adds	r7, #36	; 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40013800 	.word	0x40013800
 8003f20:	40020000 	.word	0x40020000
 8003f24:	40020400 	.word	0x40020400
 8003f28:	40020800 	.word	0x40020800
 8003f2c:	40020c00 	.word	0x40020c00
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40021400 	.word	0x40021400
 8003f38:	40021800 	.word	0x40021800
 8003f3c:	40021c00 	.word	0x40021c00
 8003f40:	40022000 	.word	0x40022000
 8003f44:	40022400 	.word	0x40022400
 8003f48:	40013c00 	.word	0x40013c00

08003f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f5c:	787b      	ldrb	r3, [r7, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f68:	e003      	b.n	8003f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	619a      	str	r2, [r3, #24]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e0bf      	b.n	8004112 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8ba 	bl	8004120 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003fc2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6999      	ldr	r1, [r3, #24]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fd8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6899      	ldr	r1, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	; (800411c <HAL_LTDC_Init+0x19c>)
 8003ff4:	400b      	ands	r3, r1
 8003ff6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6899      	ldr	r1, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68d9      	ldr	r1, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b3e      	ldr	r3, [pc, #248]	; (800411c <HAL_LTDC_Init+0x19c>)
 8004022:	400b      	ands	r3, r1
 8004024:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68d9      	ldr	r1, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6919      	ldr	r1, [r3, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b33      	ldr	r3, [pc, #204]	; (800411c <HAL_LTDC_Init+0x19c>)
 8004050:	400b      	ands	r3, r1
 8004052:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6919      	ldr	r1, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6959      	ldr	r1, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b27      	ldr	r3, [pc, #156]	; (800411c <HAL_LTDC_Init+0x19c>)
 800407e:	400b      	ands	r3, r1
 8004080:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6959      	ldr	r1, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80040b0:	041b      	lsls	r3, r3, #16
 80040b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0206 	orr.w	r2, r2, #6
 80040ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	f000f800 	.word	0xf000f800

08004120 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004134:	b5b0      	push	{r4, r5, r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_LTDC_ConfigLayer+0x1a>
 800414a:	2302      	movs	r3, #2
 800414c:	e02c      	b.n	80041a8 <HAL_LTDC_ConfigLayer+0x74>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2134      	movs	r1, #52	; 0x34
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	4413      	add	r3, r2
 800416a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4614      	mov	r4, r2
 8004172:	461d      	mov	r5, r3
 8004174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f83b 	bl	8004204 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2201      	movs	r2, #1
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bdb0      	pop	{r4, r5, r7, pc}

080041b0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_LTDC_EnableDither+0x16>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e016      	b.n	80041f4 <HAL_LTDC_EnableDither+0x44>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80041d6:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_LTDC_EnableDither+0x50>)
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	4a09      	ldr	r2, [pc, #36]	; (8004200 <HAL_LTDC_EnableDither+0x50>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40016800 	.word	0x40016800

08004204 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	0c1b      	lsrs	r3, r3, #16
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	4413      	add	r3, r2
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	01db      	lsls	r3, r3, #7
 8004230:	4413      	add	r3, r2
 8004232:	3384      	adds	r3, #132	; 0x84
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	4611      	mov	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	01d2      	lsls	r2, r2, #7
 8004240:	440a      	add	r2, r1
 8004242:	3284      	adds	r2, #132	; 0x84
 8004244:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004248:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800425a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800425c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4619      	mov	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	01db      	lsls	r3, r3, #7
 8004268:	440b      	add	r3, r1
 800426a:	3384      	adds	r3, #132	; 0x84
 800426c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004272:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004282:	4413      	add	r3, r2
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	01db      	lsls	r3, r3, #7
 8004292:	4413      	add	r3, r2
 8004294:	3384      	adds	r3, #132	; 0x84
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	4611      	mov	r1, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	01d2      	lsls	r2, r2, #7
 80042a2:	440a      	add	r2, r1
 80042a4:	3284      	adds	r2, #132	; 0x84
 80042a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ba:	4413      	add	r3, r2
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4619      	mov	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	01db      	lsls	r3, r3, #7
 80042c8:	440b      	add	r3, r1
 80042ca:	3384      	adds	r3, #132	; 0x84
 80042cc:	4619      	mov	r1, r3
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	01db      	lsls	r3, r3, #7
 80042de:	4413      	add	r3, r2
 80042e0:	3384      	adds	r3, #132	; 0x84
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	4611      	mov	r1, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	01d2      	lsls	r2, r2, #7
 80042ee:	440a      	add	r2, r1
 80042f0:	3284      	adds	r2, #132	; 0x84
 80042f2:	f023 0307 	bic.w	r3, r3, #7
 80042f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	01db      	lsls	r3, r3, #7
 8004302:	4413      	add	r3, r2
 8004304:	3384      	adds	r3, #132	; 0x84
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800431e:	041b      	lsls	r3, r3, #16
 8004320:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	061b      	lsls	r3, r3, #24
 8004328:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	01db      	lsls	r3, r3, #7
 8004334:	4413      	add	r3, r2
 8004336:	3384      	adds	r3, #132	; 0x84
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	01db      	lsls	r3, r3, #7
 8004344:	4413      	add	r3, r2
 8004346:	3384      	adds	r3, #132	; 0x84
 8004348:	461a      	mov	r2, r3
 800434a:	2300      	movs	r3, #0
 800434c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004354:	461a      	mov	r2, r3
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	431a      	orrs	r2, r3
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4619      	mov	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	01db      	lsls	r3, r3, #7
 8004368:	440b      	add	r3, r1
 800436a:	3384      	adds	r3, #132	; 0x84
 800436c:	4619      	mov	r1, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	01db      	lsls	r3, r3, #7
 800437e:	4413      	add	r3, r2
 8004380:	3384      	adds	r3, #132	; 0x84
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	4611      	mov	r1, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	01d2      	lsls	r2, r2, #7
 800438e:	440a      	add	r2, r1
 8004390:	3284      	adds	r2, #132	; 0x84
 8004392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004396:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	01db      	lsls	r3, r3, #7
 80043a2:	4413      	add	r3, r2
 80043a4:	3384      	adds	r3, #132	; 0x84
 80043a6:	461a      	mov	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	01db      	lsls	r3, r3, #7
 80043b8:	4413      	add	r3, r2
 80043ba:	3384      	adds	r3, #132	; 0x84
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	4611      	mov	r1, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	01d2      	lsls	r2, r2, #7
 80043c8:	440a      	add	r2, r1
 80043ca:	3284      	adds	r2, #132	; 0x84
 80043cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043d0:	f023 0307 	bic.w	r3, r3, #7
 80043d4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	6809      	ldr	r1, [r1, #0]
 80043e2:	4608      	mov	r0, r1
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	01c9      	lsls	r1, r1, #7
 80043e8:	4401      	add	r1, r0
 80043ea:	3184      	adds	r1, #132	; 0x84
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	01db      	lsls	r3, r3, #7
 80043fa:	4413      	add	r3, r2
 80043fc:	3384      	adds	r3, #132	; 0x84
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	01db      	lsls	r3, r3, #7
 800440a:	4413      	add	r3, r2
 800440c:	3384      	adds	r3, #132	; 0x84
 800440e:	461a      	mov	r2, r3
 8004410:	2300      	movs	r3, #0
 8004412:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	01db      	lsls	r3, r3, #7
 800441e:	4413      	add	r3, r2
 8004420:	3384      	adds	r3, #132	; 0x84
 8004422:	461a      	mov	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004432:	2304      	movs	r3, #4
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e01b      	b.n	8004470 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d102      	bne.n	8004446 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004440:	2303      	movs	r3, #3
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	e014      	b.n	8004470 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b04      	cmp	r3, #4
 800444c:	d00b      	beq.n	8004466 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004452:	2b02      	cmp	r3, #2
 8004454:	d007      	beq.n	8004466 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800445a:	2b03      	cmp	r3, #3
 800445c:	d003      	beq.n	8004466 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004462:	2b07      	cmp	r3, #7
 8004464:	d102      	bne.n	800446c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004466:	2302      	movs	r3, #2
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	e001      	b.n	8004470 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800446c:	2301      	movs	r3, #1
 800446e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	01db      	lsls	r3, r3, #7
 800447a:	4413      	add	r3, r2
 800447c:	3384      	adds	r3, #132	; 0x84
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	4611      	mov	r1, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	01d2      	lsls	r2, r2, #7
 800448a:	440a      	add	r2, r1
 800448c:	3284      	adds	r2, #132	; 0x84
 800448e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004492:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	1acb      	subs	r3, r1, r3
 80044aa:	69f9      	ldr	r1, [r7, #28]
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80044b2:	68f9      	ldr	r1, [r7, #12]
 80044b4:	6809      	ldr	r1, [r1, #0]
 80044b6:	4608      	mov	r0, r1
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	01c9      	lsls	r1, r1, #7
 80044bc:	4401      	add	r1, r0
 80044be:	3184      	adds	r1, #132	; 0x84
 80044c0:	4313      	orrs	r3, r2
 80044c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	01db      	lsls	r3, r3, #7
 80044ce:	4413      	add	r3, r2
 80044d0:	3384      	adds	r3, #132	; 0x84
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	4611      	mov	r1, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	01d2      	lsls	r2, r2, #7
 80044de:	440a      	add	r2, r1
 80044e0:	3284      	adds	r2, #132	; 0x84
 80044e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044e6:	f023 0307 	bic.w	r3, r3, #7
 80044ea:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	01db      	lsls	r3, r3, #7
 80044f6:	4413      	add	r3, r2
 80044f8:	3384      	adds	r3, #132	; 0x84
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	01db      	lsls	r3, r3, #7
 800450c:	4413      	add	r3, r2
 800450e:	3384      	adds	r3, #132	; 0x84
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	4611      	mov	r1, r2
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	01d2      	lsls	r2, r2, #7
 800451c:	440a      	add	r2, r1
 800451e:	3284      	adds	r2, #132	; 0x84
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6013      	str	r3, [r2, #0]
}
 8004526:	bf00      	nop
 8004528:	3724      	adds	r7, #36	; 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004534:	b08f      	sub	sp, #60	; 0x3c
 8004536:	af0a      	add	r7, sp, #40	; 0x28
 8004538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e10f      	b.n	8004764 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f009 fee0 	bl	800e324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2203      	movs	r2, #3
 8004568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f003 fc33 	bl	8007dee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	687e      	ldr	r6, [r7, #4]
 8004590:	466d      	mov	r5, sp
 8004592:	f106 0410 	add.w	r4, r6, #16
 8004596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800459a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800459c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800459e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80045a6:	1d33      	adds	r3, r6, #4
 80045a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045aa:	6838      	ldr	r0, [r7, #0]
 80045ac:	f003 fb0a 	bl	8007bc4 <USB_CoreInit>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0d0      	b.n	8004764 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f003 fc21 	bl	8007e10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
 80045d2:	e04a      	b.n	800466a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045d4:	7bfa      	ldrb	r2, [r7, #15]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	333d      	adds	r3, #61	; 0x3d
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	333c      	adds	r3, #60	; 0x3c
 80045f8:	7bfa      	ldrb	r2, [r7, #15]
 80045fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	b298      	uxth	r0, r3
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	3344      	adds	r3, #68	; 0x44
 8004610:	4602      	mov	r2, r0
 8004612:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	3340      	adds	r3, #64	; 0x40
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	3348      	adds	r3, #72	; 0x48
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	334c      	adds	r3, #76	; 0x4c
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004650:	7bfa      	ldrb	r2, [r7, #15]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3354      	adds	r3, #84	; 0x54
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	3301      	adds	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	7bfa      	ldrb	r2, [r7, #15]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d3af      	bcc.n	80045d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e044      	b.n	8004704 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046a6:	7bfa      	ldrb	r2, [r7, #15]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046bc:	7bfa      	ldrb	r2, [r7, #15]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	3301      	adds	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	7bfa      	ldrb	r2, [r7, #15]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3b5      	bcc.n	800467a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	687e      	ldr	r6, [r7, #4]
 8004716:	466d      	mov	r5, sp
 8004718:	f106 0410 	add.w	r4, r6, #16
 800471c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800471e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004728:	e885 0003 	stmia.w	r5, {r0, r1}
 800472c:	1d33      	adds	r3, r6, #4
 800472e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004730:	6838      	ldr	r0, [r7, #0]
 8004732:	f003 fbb9 	bl	8007ea8 <USB_DevInit>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e00d      	b.n	8004764 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f004 fd08 	bl	8009172 <USB_DevDisconnect>

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800476c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_PCD_Start+0x1c>
 8004784:	2302      	movs	r3, #2
 8004786:	e020      	b.n	80047ca <HAL_PCD_Start+0x5e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	2b01      	cmp	r3, #1
 8004796:	d109      	bne.n	80047ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800479c:	2b01      	cmp	r3, #1
 800479e:	d005      	beq.n	80047ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f003 fb0b 	bl	8007dcc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f004 fcb8 	bl	8009130 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047d2:	b590      	push	{r4, r7, lr}
 80047d4:	b08d      	sub	sp, #52	; 0x34
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f004 fd76 	bl	80092da <USB_GetMode>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 848a 	bne.w	800510a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f004 fcda 	bl	80091b4 <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8480 	beq.w	8005108 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	0a1b      	lsrs	r3, r3, #8
 8004812:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f004 fcc7 	bl	80091b4 <USB_ReadInterrupts>
 8004826:	4603      	mov	r3, r0
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b02      	cmp	r3, #2
 800482e:	d107      	bne.n	8004840 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f002 0202 	and.w	r2, r2, #2
 800483e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f004 fcb5 	bl	80091b4 <USB_ReadInterrupts>
 800484a:	4603      	mov	r3, r0
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b10      	cmp	r3, #16
 8004852:	d161      	bne.n	8004918 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0210 	bic.w	r2, r2, #16
 8004862:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f003 020f 	and.w	r2, r3, #15
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	3304      	adds	r3, #4
 8004882:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	0c5b      	lsrs	r3, r3, #17
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	2b02      	cmp	r3, #2
 800488e:	d124      	bne.n	80048da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d035      	beq.n	8004908 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	6a38      	ldr	r0, [r7, #32]
 80048b0:	f004 faec 	bl	8008e8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c0:	441a      	add	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048d2:	441a      	add	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
 80048d8:	e016      	b.n	8004908 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	0c5b      	lsrs	r3, r3, #17
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d110      	bne.n	8004908 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048ec:	2208      	movs	r2, #8
 80048ee:	4619      	mov	r1, r3
 80048f0:	6a38      	ldr	r0, [r7, #32]
 80048f2:	f004 facb 	bl	8008e8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004902:	441a      	add	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0210 	orr.w	r2, r2, #16
 8004916:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f004 fc49 	bl	80091b4 <USB_ReadInterrupts>
 8004922:	4603      	mov	r3, r0
 8004924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004928:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800492c:	f040 80a7 	bne.w	8004a7e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f004 fc4e 	bl	80091da <USB_ReadDevAllOutEpInterrupt>
 800493e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004940:	e099      	b.n	8004a76 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 808e 	beq.w	8004a6a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	4611      	mov	r1, r2
 8004958:	4618      	mov	r0, r3
 800495a:	f004 fc72 	bl	8009242 <USB_ReadDevOutEPInterrupt>
 800495e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00c      	beq.n	8004984 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004976:	461a      	mov	r2, r3
 8004978:	2301      	movs	r3, #1
 800497a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800497c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fec2 	bl	8005708 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00c      	beq.n	80049a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	461a      	mov	r2, r3
 800499c:	2308      	movs	r3, #8
 800499e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 ff98 	bl	80058d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	461a      	mov	r2, r3
 80049c0:	2310      	movs	r3, #16
 80049c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d030      	beq.n	8004a30 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d109      	bne.n	80049ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	4413      	add	r3, r2
 8004a00:	3304      	adds	r3, #4
 8004a02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	78db      	ldrb	r3, [r3, #3]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d108      	bne.n	8004a1e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	4619      	mov	r1, r3
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f009 fd85 	bl	800e528 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a46:	461a      	mov	r2, r3
 8004a48:	2320      	movs	r3, #32
 8004a4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	461a      	mov	r2, r3
 8004a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f47f af62 	bne.w	8004942 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f004 fb96 	bl	80091b4 <USB_ReadInterrupts>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a92:	f040 80db 	bne.w	8004c4c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f004 fbb7 	bl	800920e <USB_ReadDevAllInEpInterrupt>
 8004aa0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004aa6:	e0cd      	b.n	8004c44 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80c2 	beq.w	8004c38 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f004 fbdd 	bl	800927e <USB_ReadDevInEPInterrupt>
 8004ac4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d057      	beq.n	8004b80 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69f9      	ldr	r1, [r7, #28]
 8004aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af0:	4013      	ands	r3, r2
 8004af2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	461a      	mov	r2, r3
 8004b02:	2301      	movs	r3, #1
 8004b04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d132      	bne.n	8004b74 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b12:	4613      	mov	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	334c      	adds	r3, #76	; 0x4c
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4403      	add	r3, r0
 8004b2e:	3348      	adds	r3, #72	; 0x48
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4419      	add	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	4613      	mov	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4403      	add	r3, r0
 8004b42:	334c      	adds	r3, #76	; 0x4c
 8004b44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d113      	bne.n	8004b74 <HAL_PCD_IRQHandler+0x3a2>
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	3354      	adds	r3, #84	; 0x54
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2101      	movs	r1, #1
 8004b70:	f004 fbe4 	bl	800933c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f009 fc4f 	bl	800e41e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b96:	461a      	mov	r2, r3
 8004b98:	2308      	movs	r3, #8
 8004b9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2340      	movs	r3, #64	; 0x40
 8004bd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d023      	beq.n	8004c26 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004bde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004be0:	6a38      	ldr	r0, [r7, #32]
 8004be2:	f003 fac5 	bl	8008170 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	3338      	adds	r3, #56	; 0x38
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	78db      	ldrb	r3, [r3, #3]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d108      	bne.n	8004c14 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f009 fc9c 	bl	800e54c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	2302      	movs	r3, #2
 8004c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fcdb 	bl	80055ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f47f af2e 	bne.w	8004aa8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f004 faaf 	bl	80091b4 <USB_ReadInterrupts>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c60:	d122      	bne.n	8004ca8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d108      	bne.n	8004c92 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c88:	2100      	movs	r1, #0
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fec2 	bl	8005a14 <HAL_PCDEx_LPM_Callback>
 8004c90:	e002      	b.n	8004c98 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f009 fc3a 	bl	800e50c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f004 fa81 	bl	80091b4 <USB_ReadInterrupts>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cbc:	d112      	bne.n	8004ce4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d102      	bne.n	8004cd4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f009 fbf6 	bl	800e4c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ce2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f004 fa63 	bl	80091b4 <USB_ReadInterrupts>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf8:	f040 80b7 	bne.w	8004e6a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2110      	movs	r1, #16
 8004d16:	4618      	mov	r0, r3
 8004d18:	f003 fa2a 	bl	8008170 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d20:	e046      	b.n	8004db0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	461a      	mov	r2, r3
 8004d64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	3301      	adds	r3, #1
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d3b3      	bcc.n	8004d22 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004dcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de6:	f043 030b 	orr.w	r3, r3, #11
 8004dea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfc:	f043 030b 	orr.w	r3, r3, #11
 8004e00:	6453      	str	r3, [r2, #68]	; 0x44
 8004e02:	e015      	b.n	8004e30 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e16:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e2a:	f043 030b 	orr.w	r3, r3, #11
 8004e2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e54:	461a      	mov	r2, r3
 8004e56:	f004 fa71 	bl	800933c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f004 f9a0 	bl	80091b4 <USB_ReadInterrupts>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7e:	d124      	bne.n	8004eca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f004 fa36 	bl	80092f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f003 f9eb 	bl	800826a <USB_GetDevSpeed>
 8004e94:	4603      	mov	r3, r0
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681c      	ldr	r4, [r3, #0]
 8004ea0:	f001 fa28 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8004ea4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f002 feea 	bl	8007c88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f009 fada 	bl	800e46e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f004 f970 	bl	80091b4 <USB_ReadInterrupts>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d10a      	bne.n	8004ef4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f009 fab7 	bl	800e452 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f002 0208 	and.w	r2, r2, #8
 8004ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f004 f95b 	bl	80091b4 <USB_ReadInterrupts>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f04:	2b80      	cmp	r3, #128	; 0x80
 8004f06:	d122      	bne.n	8004f4e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f14:	2301      	movs	r3, #1
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
 8004f18:	e014      	b.n	8004f44 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d105      	bne.n	8004f3e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fb27 	bl	800558c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	3301      	adds	r3, #1
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d3e5      	bcc.n	8004f1a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f004 f92e 	bl	80091b4 <USB_ReadInterrupts>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f62:	d13b      	bne.n	8004fdc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f64:	2301      	movs	r3, #1
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
 8004f68:	e02b      	b.n	8004fc2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3340      	adds	r3, #64	; 0x40
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d115      	bne.n	8004fbc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004f90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	da12      	bge.n	8004fbc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	333f      	adds	r3, #63	; 0x3f
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fae8 	bl	800558c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d3ce      	bcc.n	8004f6a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f004 f8e7 	bl	80091b4 <USB_ReadInterrupts>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff0:	d155      	bne.n	800509e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff6:	e045      	b.n	8005084 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d12e      	bne.n	800507e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005020:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005022:	2b00      	cmp	r3, #0
 8005024:	da2b      	bge.n	800507e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005032:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005036:	429a      	cmp	r2, r3
 8005038:	d121      	bne.n	800507e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800504c:	2201      	movs	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800507a:	6053      	str	r3, [r2, #4]
            break;
 800507c:	e007      	b.n	800508e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	3301      	adds	r3, #1
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	429a      	cmp	r2, r3
 800508c:	d3b4      	bcc.n	8004ff8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800509c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f004 f886 	bl	80091b4 <USB_ReadInterrupts>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d10a      	bne.n	80050ca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f009 fa5b 	bl	800e570 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f004 f870 	bl	80091b4 <USB_ReadInterrupts>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d115      	bne.n	800510a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f009 fa4b 	bl	800e58c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6859      	ldr	r1, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	e000      	b.n	800510a <HAL_PCD_IRQHandler+0x938>
      return;
 8005108:	bf00      	nop
    }
  }
}
 800510a:	3734      	adds	r7, #52	; 0x34
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}

08005110 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_PCD_SetAddress+0x1a>
 8005126:	2302      	movs	r3, #2
 8005128:	e013      	b.n	8005152 <HAL_PCD_SetAddress+0x42>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	78fa      	ldrb	r2, [r7, #3]
 8005136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f003 ffce 	bl	80090e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	4608      	mov	r0, r1
 8005164:	4611      	mov	r1, r2
 8005166:	461a      	mov	r2, r3
 8005168:	4603      	mov	r3, r0
 800516a:	70fb      	strb	r3, [r7, #3]
 800516c:	460b      	mov	r3, r1
 800516e:	803b      	strh	r3, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800517c:	2b00      	cmp	r3, #0
 800517e:	da0f      	bge.n	80051a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	f003 020f 	and.w	r2, r3, #15
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	3338      	adds	r3, #56	; 0x38
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4413      	add	r3, r2
 8005194:	3304      	adds	r3, #4
 8005196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	705a      	strb	r2, [r3, #1]
 800519e:	e00f      	b.n	80051c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	f003 020f 	and.w	r2, r3, #15
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	3304      	adds	r3, #4
 80051b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051cc:	883a      	ldrh	r2, [r7, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	78ba      	ldrb	r2, [r7, #2]
 80051d6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051ea:	78bb      	ldrb	r3, [r7, #2]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d102      	bne.n	80051f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_PCD_EP_Open+0xaa>
 8005200:	2302      	movs	r3, #2
 8005202:	e00e      	b.n	8005222 <HAL_PCD_EP_Open+0xc8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68f9      	ldr	r1, [r7, #12]
 8005212:	4618      	mov	r0, r3
 8005214:	f003 f84e 	bl	80082b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005220:	7afb      	ldrb	r3, [r7, #11]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800523a:	2b00      	cmp	r3, #0
 800523c:	da0f      	bge.n	800525e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	f003 020f 	and.w	r2, r3, #15
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	3338      	adds	r3, #56	; 0x38
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	705a      	strb	r2, [r3, #1]
 800525c:	e00f      	b.n	800527e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	f003 020f 	and.w	r2, r3, #15
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	3304      	adds	r3, #4
 8005276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_PCD_EP_Close+0x6e>
 8005294:	2302      	movs	r3, #2
 8005296:	e00e      	b.n	80052b6 <HAL_PCD_EP_Close+0x8c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f003 f88c 	bl	80083c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	460b      	mov	r3, r1
 80052cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ce:	7afb      	ldrb	r3, [r7, #11]
 80052d0:	f003 020f 	and.w	r2, r3, #15
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	3304      	adds	r3, #4
 80052e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2200      	movs	r2, #0
 80052f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005300:	7afb      	ldrb	r3, [r7, #11]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	b2da      	uxtb	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d102      	bne.n	800531a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800531a:	7afb      	ldrb	r3, [r7, #11]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	6979      	ldr	r1, [r7, #20]
 8005332:	f003 fb6b 	bl	8008a0c <USB_EP0StartXfer>
 8005336:	e008      	b.n	800534a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	6979      	ldr	r1, [r7, #20]
 8005346:	f003 f919 	bl	800857c <USB_EPStartXfer>
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	f003 020f 	and.w	r2, r3, #15
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005376:	681b      	ldr	r3, [r3, #0]
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	460b      	mov	r3, r1
 8005392:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005394:	7afb      	ldrb	r3, [r7, #11]
 8005396:	f003 020f 	and.w	r2, r3, #15
 800539a:	4613      	mov	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	3338      	adds	r3, #56	; 0x38
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	3304      	adds	r3, #4
 80053aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2200      	movs	r2, #0
 80053bc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2201      	movs	r2, #1
 80053c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053c4:	7afb      	ldrb	r3, [r7, #11]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d102      	bne.n	80053de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d109      	bne.n	80053fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	6979      	ldr	r1, [r7, #20]
 80053f6:	f003 fb09 	bl	8008a0c <USB_EP0StartXfer>
 80053fa:	e008      	b.n	800540e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	6979      	ldr	r1, [r7, #20]
 800540a:	f003 f8b7 	bl	800857c <USB_EPStartXfer>
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	f003 020f 	and.w	r2, r3, #15
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d901      	bls.n	8005436 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e050      	b.n	80054d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800543a:	2b00      	cmp	r3, #0
 800543c:	da0f      	bge.n	800545e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	3338      	adds	r3, #56	; 0x38
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	3304      	adds	r3, #4
 8005454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	705a      	strb	r2, [r3, #1]
 800545c:	e00d      	b.n	800547a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	4613      	mov	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	3304      	adds	r3, #4
 8005472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	b2da      	uxtb	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_PCD_EP_SetStall+0x82>
 8005496:	2302      	movs	r3, #2
 8005498:	e01e      	b.n	80054d8 <HAL_PCD_EP_SetStall+0xc0>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f003 fd47 	bl	8008f3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	b2d9      	uxtb	r1, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054c8:	461a      	mov	r2, r3
 80054ca:	f003 ff37 	bl	800933c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	f003 020f 	and.w	r2, r3, #15
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d901      	bls.n	80054fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e042      	b.n	8005584 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005502:	2b00      	cmp	r3, #0
 8005504:	da0f      	bge.n	8005526 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	f003 020f 	and.w	r2, r3, #15
 800550c:	4613      	mov	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	3338      	adds	r3, #56	; 0x38
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	3304      	adds	r3, #4
 800551c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	705a      	strb	r2, [r3, #1]
 8005524:	e00f      	b.n	8005546 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	4413      	add	r3, r2
 800553c:	3304      	adds	r3, #4
 800553e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	b2da      	uxtb	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_PCD_EP_ClrStall+0x86>
 8005562:	2302      	movs	r3, #2
 8005564:	e00e      	b.n	8005584 <HAL_PCD_EP_ClrStall+0xa4>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	4618      	mov	r0, r3
 8005576:	f003 fd4f 	bl	8009018 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800559c:	2b00      	cmp	r3, #0
 800559e:	da0c      	bge.n	80055ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 020f 	and.w	r2, r3, #15
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	3338      	adds	r3, #56	; 0x38
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	3304      	adds	r3, #4
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e00c      	b.n	80055d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	f003 020f 	and.w	r2, r3, #15
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	4413      	add	r3, r2
 80055d0:	3304      	adds	r3, #4
 80055d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68f9      	ldr	r1, [r7, #12]
 80055da:	4618      	mov	r0, r3
 80055dc:	f003 fb6e 	bl	8008cbc <USB_EPStopXfer>
 80055e0:	4603      	mov	r3, r0
 80055e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80055e4:	7afb      	ldrb	r3, [r7, #11]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b08a      	sub	sp, #40	; 0x28
 80055f2:	af02      	add	r7, sp, #8
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	3338      	adds	r3, #56	; 0x38
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	4413      	add	r3, r2
 8005612:	3304      	adds	r3, #4
 8005614:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	429a      	cmp	r2, r3
 8005620:	d901      	bls.n	8005626 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e06c      	b.n	8005700 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	429a      	cmp	r2, r3
 800563a:	d902      	bls.n	8005642 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3303      	adds	r3, #3
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800564a:	e02b      	b.n	80056a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	429a      	cmp	r2, r3
 8005660:	d902      	bls.n	8005668 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3303      	adds	r3, #3
 800566c:	089b      	lsrs	r3, r3, #2
 800566e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6919      	ldr	r1, [r3, #16]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005680:	b2db      	uxtb	r3, r3
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	4603      	mov	r3, r0
 8005686:	6978      	ldr	r0, [r7, #20]
 8005688:	f003 fbc2 	bl	8008e10 <USB_WritePacket>

    ep->xfer_buff  += len;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	441a      	add	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1a      	ldr	r2, [r3, #32]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	441a      	add	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d809      	bhi.n	80056ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d203      	bcs.n	80056ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1be      	bne.n	800564c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d811      	bhi.n	80056fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	2201      	movs	r2, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	43db      	mvns	r3, r3
 80056f4:	6939      	ldr	r1, [r7, #16]
 80056f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056fa:	4013      	ands	r3, r2
 80056fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	333c      	adds	r3, #60	; 0x3c
 8005720:	3304      	adds	r3, #4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d17b      	bne.n	8005836 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d015      	beq.n	8005774 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4a61      	ldr	r2, [pc, #388]	; (80058d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	f240 80b9 	bls.w	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80b3 	beq.w	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576a:	461a      	mov	r2, r3
 800576c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005770:	6093      	str	r3, [r2, #8]
 8005772:	e0a7      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578a:	461a      	mov	r2, r3
 800578c:	2320      	movs	r3, #32
 800578e:	6093      	str	r3, [r2, #8]
 8005790:	e098      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	f040 8093 	bne.w	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	4a4b      	ldr	r2, [pc, #300]	; (80058d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d90f      	bls.n	80057c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	461a      	mov	r2, r3
 80057be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c2:	6093      	str	r3, [r2, #8]
 80057c4:	e07e      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	3304      	adds	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	0159      	lsls	r1, r3, #5
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	440b      	add	r3, r1
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d114      	bne.n	8005828 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d109      	bne.n	800581a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005810:	461a      	mov	r2, r3
 8005812:	2101      	movs	r1, #1
 8005814:	f003 fd92 	bl	800933c <USB_EP0_OutStart>
 8005818:	e006      	b.n	8005828 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f008 fdda 	bl	800e3e8 <HAL_PCD_DataOutStageCallback>
 8005834:	e046      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4a26      	ldr	r2, [pc, #152]	; (80058d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d124      	bne.n	8005888 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	461a      	mov	r2, r3
 8005856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800585a:	6093      	str	r3, [r2, #8]
 800585c:	e032      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	461a      	mov	r2, r3
 8005876:	2320      	movs	r3, #32
 8005878:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f008 fdb1 	bl	800e3e8 <HAL_PCD_DataOutStageCallback>
 8005886:	e01d      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d114      	bne.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058b0:	461a      	mov	r2, r3
 80058b2:	2100      	movs	r1, #0
 80058b4:	f003 fd42 	bl	800933c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f008 fd92 	bl	800e3e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	4f54300a 	.word	0x4f54300a
 80058d4:	4f54310a 	.word	0x4f54310a

080058d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	333c      	adds	r3, #60	; 0x3c
 80058f0:	3304      	adds	r3, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a15      	ldr	r2, [pc, #84]	; (8005960 <PCD_EP_OutSetupPacket_int+0x88>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d90e      	bls.n	800592c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	461a      	mov	r2, r3
 8005926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f008 fd49 	bl	800e3c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a0a      	ldr	r2, [pc, #40]	; (8005960 <PCD_EP_OutSetupPacket_int+0x88>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d90c      	bls.n	8005954 <PCD_EP_OutSetupPacket_int+0x7c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d108      	bne.n	8005954 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800594c:	461a      	mov	r2, r3
 800594e:	2101      	movs	r1, #1
 8005950:	f003 fcf4 	bl	800933c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	4f54300a 	.word	0x4f54300a

08005964 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
 8005970:	4613      	mov	r3, r2
 8005972:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d107      	bne.n	8005992 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005982:	883b      	ldrh	r3, [r7, #0]
 8005984:	0419      	lsls	r1, r3, #16
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	430a      	orrs	r2, r1
 800598e:	629a      	str	r2, [r3, #40]	; 0x28
 8005990:	e028      	b.n	80059e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4413      	add	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	e00d      	b.n	80059c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	3340      	adds	r3, #64	; 0x40
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	0c1b      	lsrs	r3, r3, #16
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	4413      	add	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	3301      	adds	r3, #1
 80059c0:	73fb      	strb	r3, [r7, #15]
 80059c2:	7bfa      	ldrb	r2, [r7, #15]
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d3ec      	bcc.n	80059a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059cc:	883b      	ldrh	r3, [r7, #0]
 80059ce:	0418      	lsls	r0, r3, #16
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	4302      	orrs	r2, r0
 80059dc:	3340      	adds	r3, #64	; 0x40
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e267      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d075      	beq.n	8005b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a4a:	4b88      	ldr	r3, [pc, #544]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d00c      	beq.n	8005a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a56:	4b85      	ldr	r3, [pc, #532]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d112      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a62:	4b82      	ldr	r3, [pc, #520]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6e:	d10b      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a70:	4b7e      	ldr	r3, [pc, #504]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05b      	beq.n	8005b34 <HAL_RCC_OscConfig+0x108>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d157      	bne.n	8005b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e242      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d106      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x74>
 8005a92:	4b76      	ldr	r3, [pc, #472]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a75      	ldr	r2, [pc, #468]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e01d      	b.n	8005adc <HAL_RCC_OscConfig+0xb0>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x98>
 8005aaa:	4b70      	ldr	r3, [pc, #448]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a6f      	ldr	r2, [pc, #444]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b6d      	ldr	r3, [pc, #436]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a6c      	ldr	r2, [pc, #432]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e00b      	b.n	8005adc <HAL_RCC_OscConfig+0xb0>
 8005ac4:	4b69      	ldr	r3, [pc, #420]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a68      	ldr	r2, [pc, #416]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4b66      	ldr	r3, [pc, #408]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a65      	ldr	r2, [pc, #404]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d013      	beq.n	8005b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fd fb20 	bl	8003128 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fd fb1c 	bl	8003128 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e207      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	4b5b      	ldr	r3, [pc, #364]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0xc0>
 8005b0a:	e014      	b.n	8005b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fd fb0c 	bl	8003128 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fd fb08 	bl	8003128 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e1f3      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b26:	4b51      	ldr	r3, [pc, #324]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0xe8>
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d063      	beq.n	8005c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b42:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 030c 	and.w	r3, r3, #12
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4e:	4b47      	ldr	r3, [pc, #284]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d11c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5a:	4b44      	ldr	r3, [pc, #272]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d116      	bne.n	8005b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b66:	4b41      	ldr	r3, [pc, #260]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x152>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e1c7      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7e:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4937      	ldr	r1, [pc, #220]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	e03a      	b.n	8005c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b9c:	4b34      	ldr	r3, [pc, #208]	; (8005c70 <HAL_RCC_OscConfig+0x244>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba2:	f7fd fac1 	bl	8003128 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005baa:	f7fd fabd 	bl	8003128 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e1a8      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbc:	4b2b      	ldr	r3, [pc, #172]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc8:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4925      	ldr	r1, [pc, #148]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
 8005bdc:	e015      	b.n	8005c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <HAL_RCC_OscConfig+0x244>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fd faa0 	bl	8003128 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bec:	f7fd fa9c 	bl	8003128 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e187      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d036      	beq.n	8005c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <HAL_RCC_OscConfig+0x248>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fd fa80 	bl	8003128 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c2c:	f7fd fa7c 	bl	8003128 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e167      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0x200>
 8005c4a:	e01b      	b.n	8005c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <HAL_RCC_OscConfig+0x248>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c52:	f7fd fa69 	bl	8003128 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c58:	e00e      	b.n	8005c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c5a:	f7fd fa65 	bl	8003128 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d907      	bls.n	8005c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e150      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	42470000 	.word	0x42470000
 8005c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c78:	4b88      	ldr	r3, [pc, #544]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ea      	bne.n	8005c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8097 	beq.w	8005dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c96:	4b81      	ldr	r3, [pc, #516]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10f      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	4b7d      	ldr	r3, [pc, #500]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	4a7c      	ldr	r2, [pc, #496]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb2:	4b7a      	ldr	r3, [pc, #488]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc2:	4b77      	ldr	r3, [pc, #476]	; (8005ea0 <HAL_RCC_OscConfig+0x474>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d118      	bne.n	8005d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cce:	4b74      	ldr	r3, [pc, #464]	; (8005ea0 <HAL_RCC_OscConfig+0x474>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a73      	ldr	r2, [pc, #460]	; (8005ea0 <HAL_RCC_OscConfig+0x474>)
 8005cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cda:	f7fd fa25 	bl	8003128 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce2:	f7fd fa21 	bl	8003128 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e10c      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf4:	4b6a      	ldr	r3, [pc, #424]	; (8005ea0 <HAL_RCC_OscConfig+0x474>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d106      	bne.n	8005d16 <HAL_RCC_OscConfig+0x2ea>
 8005d08:	4b64      	ldr	r3, [pc, #400]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0c:	4a63      	ldr	r2, [pc, #396]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6713      	str	r3, [r2, #112]	; 0x70
 8005d14:	e01c      	b.n	8005d50 <HAL_RCC_OscConfig+0x324>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b05      	cmp	r3, #5
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCC_OscConfig+0x30c>
 8005d1e:	4b5f      	ldr	r3, [pc, #380]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	4a5e      	ldr	r2, [pc, #376]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d24:	f043 0304 	orr.w	r3, r3, #4
 8005d28:	6713      	str	r3, [r2, #112]	; 0x70
 8005d2a:	4b5c      	ldr	r3, [pc, #368]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4a5b      	ldr	r2, [pc, #364]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	6713      	str	r3, [r2, #112]	; 0x70
 8005d36:	e00b      	b.n	8005d50 <HAL_RCC_OscConfig+0x324>
 8005d38:	4b58      	ldr	r3, [pc, #352]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	4a57      	ldr	r2, [pc, #348]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	6713      	str	r3, [r2, #112]	; 0x70
 8005d44:	4b55      	ldr	r3, [pc, #340]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	4a54      	ldr	r2, [pc, #336]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d4a:	f023 0304 	bic.w	r3, r3, #4
 8005d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d015      	beq.n	8005d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d58:	f7fd f9e6 	bl	8003128 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d60:	f7fd f9e2 	bl	8003128 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e0cb      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d76:	4b49      	ldr	r3, [pc, #292]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0ee      	beq.n	8005d60 <HAL_RCC_OscConfig+0x334>
 8005d82:	e014      	b.n	8005dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d84:	f7fd f9d0 	bl	8003128 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d8c:	f7fd f9cc 	bl	8003128 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e0b5      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da2:	4b3e      	ldr	r3, [pc, #248]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1ee      	bne.n	8005d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d105      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005db4:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	4a38      	ldr	r2, [pc, #224]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80a1 	beq.w	8005f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dca:	4b34      	ldr	r3, [pc, #208]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d05c      	beq.n	8005e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d141      	bne.n	8005e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dde:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <HAL_RCC_OscConfig+0x478>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de4:	f7fd f9a0 	bl	8003128 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dec:	f7fd f99c 	bl	8003128 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e087      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfe:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f0      	bne.n	8005dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69da      	ldr	r2, [r3, #28]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	3b01      	subs	r3, #1
 8005e24:	041b      	lsls	r3, r3, #16
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	061b      	lsls	r3, r3, #24
 8005e2e:	491b      	ldr	r1, [pc, #108]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x478>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3a:	f7fd f975 	bl	8003128 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e42:	f7fd f971 	bl	8003128 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e05c      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e54:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x416>
 8005e60:	e054      	b.n	8005f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <HAL_RCC_OscConfig+0x478>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e68:	f7fd f95e 	bl	8003128 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e70:	f7fd f95a 	bl	8003128 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e045      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e82:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x444>
 8005e8e:	e03d      	b.n	8005f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d107      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e038      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	40007000 	.word	0x40007000
 8005ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <HAL_RCC_OscConfig+0x4ec>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d028      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d121      	bne.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d11a      	bne.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ed8:	4013      	ands	r3, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d111      	bne.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d107      	bne.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800

08005f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0cc      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f30:	4b68      	ldr	r3, [pc, #416]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d90c      	bls.n	8005f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b65      	ldr	r3, [pc, #404]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b63      	ldr	r3, [pc, #396]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0b8      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d020      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f70:	4b59      	ldr	r3, [pc, #356]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	4a58      	ldr	r2, [pc, #352]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f88:	4b53      	ldr	r3, [pc, #332]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4a52      	ldr	r2, [pc, #328]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f94:	4b50      	ldr	r3, [pc, #320]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	494d      	ldr	r1, [pc, #308]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d044      	beq.n	800603c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d107      	bne.n	8005fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fba:	4b47      	ldr	r3, [pc, #284]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d119      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e07f      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d003      	beq.n	8005fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d107      	bne.n	8005fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fda:	4b3f      	ldr	r3, [pc, #252]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e06f      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fea:	4b3b      	ldr	r3, [pc, #236]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e067      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ffa:	4b37      	ldr	r3, [pc, #220]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 0203 	bic.w	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4934      	ldr	r1, [pc, #208]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	4313      	orrs	r3, r2
 800600a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800600c:	f7fd f88c 	bl	8003128 <HAL_GetTick>
 8006010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006012:	e00a      	b.n	800602a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006014:	f7fd f888 	bl	8003128 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e04f      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602a:	4b2b      	ldr	r3, [pc, #172]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 020c 	and.w	r2, r3, #12
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	429a      	cmp	r2, r3
 800603a:	d1eb      	bne.n	8006014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800603c:	4b25      	ldr	r3, [pc, #148]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d20c      	bcs.n	8006064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604a:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006052:	4b20      	ldr	r3, [pc, #128]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d001      	beq.n	8006064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e032      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006070:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	4916      	ldr	r1, [pc, #88]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	4313      	orrs	r3, r2
 8006080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	490e      	ldr	r1, [pc, #56]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060a2:	f000 f821 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 80060a6:	4602      	mov	r2, r0
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	490a      	ldr	r1, [pc, #40]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 80060b4:	5ccb      	ldrb	r3, [r1, r3]
 80060b6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ba:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 80060bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <HAL_RCC_ClockConfig+0x1c8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fb f94e 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40023c00 	.word	0x40023c00
 80060d8:	40023800 	.word	0x40023800
 80060dc:	080118a8 	.word	0x080118a8
 80060e0:	20000000 	.word	0x20000000
 80060e4:	20000080 	.word	0x20000080

080060e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ec:	b094      	sub	sp, #80	; 0x50
 80060ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	647b      	str	r3, [r7, #68]	; 0x44
 80060f4:	2300      	movs	r3, #0
 80060f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f8:	2300      	movs	r3, #0
 80060fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006100:	4b79      	ldr	r3, [pc, #484]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 030c 	and.w	r3, r3, #12
 8006108:	2b08      	cmp	r3, #8
 800610a:	d00d      	beq.n	8006128 <HAL_RCC_GetSysClockFreq+0x40>
 800610c:	2b08      	cmp	r3, #8
 800610e:	f200 80e1 	bhi.w	80062d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_RCC_GetSysClockFreq+0x34>
 8006116:	2b04      	cmp	r3, #4
 8006118:	d003      	beq.n	8006122 <HAL_RCC_GetSysClockFreq+0x3a>
 800611a:	e0db      	b.n	80062d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800611c:	4b73      	ldr	r3, [pc, #460]	; (80062ec <HAL_RCC_GetSysClockFreq+0x204>)
 800611e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006120:	e0db      	b.n	80062da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006122:	4b73      	ldr	r3, [pc, #460]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006126:	e0d8      	b.n	80062da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006128:	4b6f      	ldr	r3, [pc, #444]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006130:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006132:	4b6d      	ldr	r3, [pc, #436]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d063      	beq.n	8006206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613e:	4b6a      	ldr	r3, [pc, #424]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	099b      	lsrs	r3, r3, #6
 8006144:	2200      	movs	r2, #0
 8006146:	63bb      	str	r3, [r7, #56]	; 0x38
 8006148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006150:	633b      	str	r3, [r7, #48]	; 0x30
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
 8006156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800615a:	4622      	mov	r2, r4
 800615c:	462b      	mov	r3, r5
 800615e:	f04f 0000 	mov.w	r0, #0
 8006162:	f04f 0100 	mov.w	r1, #0
 8006166:	0159      	lsls	r1, r3, #5
 8006168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800616c:	0150      	lsls	r0, r2, #5
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4621      	mov	r1, r4
 8006174:	1a51      	subs	r1, r2, r1
 8006176:	6139      	str	r1, [r7, #16]
 8006178:	4629      	mov	r1, r5
 800617a:	eb63 0301 	sbc.w	r3, r3, r1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800618c:	4659      	mov	r1, fp
 800618e:	018b      	lsls	r3, r1, #6
 8006190:	4651      	mov	r1, sl
 8006192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006196:	4651      	mov	r1, sl
 8006198:	018a      	lsls	r2, r1, #6
 800619a:	4651      	mov	r1, sl
 800619c:	ebb2 0801 	subs.w	r8, r2, r1
 80061a0:	4659      	mov	r1, fp
 80061a2:	eb63 0901 	sbc.w	r9, r3, r1
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ba:	4690      	mov	r8, r2
 80061bc:	4699      	mov	r9, r3
 80061be:	4623      	mov	r3, r4
 80061c0:	eb18 0303 	adds.w	r3, r8, r3
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	462b      	mov	r3, r5
 80061c8:	eb49 0303 	adc.w	r3, r9, r3
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061da:	4629      	mov	r1, r5
 80061dc:	024b      	lsls	r3, r1, #9
 80061de:	4621      	mov	r1, r4
 80061e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061e4:	4621      	mov	r1, r4
 80061e6:	024a      	lsls	r2, r1, #9
 80061e8:	4610      	mov	r0, r2
 80061ea:	4619      	mov	r1, r3
 80061ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ee:	2200      	movs	r2, #0
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061f8:	f7fa fd36 	bl	8000c68 <__aeabi_uldivmod>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4613      	mov	r3, r2
 8006202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006204:	e058      	b.n	80062b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006206:	4b38      	ldr	r3, [pc, #224]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	099b      	lsrs	r3, r3, #6
 800620c:	2200      	movs	r2, #0
 800620e:	4618      	mov	r0, r3
 8006210:	4611      	mov	r1, r2
 8006212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006216:	623b      	str	r3, [r7, #32]
 8006218:	2300      	movs	r3, #0
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
 800621c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	f04f 0000 	mov.w	r0, #0
 8006228:	f04f 0100 	mov.w	r1, #0
 800622c:	0159      	lsls	r1, r3, #5
 800622e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006232:	0150      	lsls	r0, r2, #5
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4641      	mov	r1, r8
 800623a:	ebb2 0a01 	subs.w	sl, r2, r1
 800623e:	4649      	mov	r1, r9
 8006240:	eb63 0b01 	sbc.w	fp, r3, r1
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006258:	ebb2 040a 	subs.w	r4, r2, sl
 800625c:	eb63 050b 	sbc.w	r5, r3, fp
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	00eb      	lsls	r3, r5, #3
 800626a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626e:	00e2      	lsls	r2, r4, #3
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	4643      	mov	r3, r8
 8006276:	18e3      	adds	r3, r4, r3
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	464b      	mov	r3, r9
 800627c:	eb45 0303 	adc.w	r3, r5, r3
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800628e:	4629      	mov	r1, r5
 8006290:	028b      	lsls	r3, r1, #10
 8006292:	4621      	mov	r1, r4
 8006294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006298:	4621      	mov	r1, r4
 800629a:	028a      	lsls	r2, r1, #10
 800629c:	4610      	mov	r0, r2
 800629e:	4619      	mov	r1, r3
 80062a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a2:	2200      	movs	r2, #0
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	61fa      	str	r2, [r7, #28]
 80062a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062ac:	f7fa fcdc 	bl	8000c68 <__aeabi_uldivmod>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4613      	mov	r3, r2
 80062b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062b8:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	3301      	adds	r3, #1
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80062c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062d2:	e002      	b.n	80062da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_RCC_GetSysClockFreq+0x204>)
 80062d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3750      	adds	r7, #80	; 0x50
 80062e0:	46bd      	mov	sp, r7
 80062e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e6:	bf00      	nop
 80062e8:	40023800 	.word	0x40023800
 80062ec:	00f42400 	.word	0x00f42400
 80062f0:	007a1200 	.word	0x007a1200

080062f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062f8:	4b03      	ldr	r3, [pc, #12]	; (8006308 <HAL_RCC_GetHCLKFreq+0x14>)
 80062fa:	681b      	ldr	r3, [r3, #0]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	20000000 	.word	0x20000000

0800630c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006310:	f7ff fff0 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8006314:	4602      	mov	r2, r0
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	0a9b      	lsrs	r3, r3, #10
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	4903      	ldr	r1, [pc, #12]	; (8006330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006322:	5ccb      	ldrb	r3, [r1, r3]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006328:	4618      	mov	r0, r3
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40023800 	.word	0x40023800
 8006330:	080118b8 	.word	0x080118b8

08006334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	220f      	movs	r2, #15
 8006342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006344:	4b12      	ldr	r3, [pc, #72]	; (8006390 <HAL_RCC_GetClockConfig+0x5c>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0203 	and.w	r2, r3, #3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006350:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <HAL_RCC_GetClockConfig+0x5c>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800635c:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <HAL_RCC_GetClockConfig+0x5c>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <HAL_RCC_GetClockConfig+0x5c>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	08db      	lsrs	r3, r3, #3
 800636e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <HAL_RCC_GetClockConfig+0x60>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	601a      	str	r2, [r3, #0]
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40023800 	.word	0x40023800
 8006394:	40023c00 	.word	0x40023c00

08006398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d105      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d075      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063cc:	4b91      	ldr	r3, [pc, #580]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063d2:	f7fc fea9 	bl	8003128 <HAL_GetTick>
 80063d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063d8:	e008      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063da:	f7fc fea5 	bl	8003128 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e189      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063ec:	4b8a      	ldr	r3, [pc, #552]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1f0      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d009      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	019a      	lsls	r2, r3, #6
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	071b      	lsls	r3, r3, #28
 8006410:	4981      	ldr	r1, [pc, #516]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01f      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006424:	4b7c      	ldr	r3, [pc, #496]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642a:	0f1b      	lsrs	r3, r3, #28
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	019a      	lsls	r2, r3, #6
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	061b      	lsls	r3, r3, #24
 800643e:	431a      	orrs	r2, r3
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	071b      	lsls	r3, r3, #28
 8006444:	4974      	ldr	r1, [pc, #464]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800644c:	4b72      	ldr	r3, [pc, #456]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006452:	f023 021f 	bic.w	r2, r3, #31
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	3b01      	subs	r3, #1
 800645c:	496e      	ldr	r1, [pc, #440]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800645e:	4313      	orrs	r3, r2
 8006460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00d      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	019a      	lsls	r2, r3, #6
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	061b      	lsls	r3, r3, #24
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	071b      	lsls	r3, r3, #28
 8006484:	4964      	ldr	r1, [pc, #400]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800648c:	4b61      	ldr	r3, [pc, #388]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800648e:	2201      	movs	r2, #1
 8006490:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006492:	f7fc fe49 	bl	8003128 <HAL_GetTick>
 8006496:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006498:	e008      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800649a:	f7fc fe45 	bl	8003128 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e129      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064ac:	4b5a      	ldr	r3, [pc, #360]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0f0      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d079      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064d0:	4b52      	ldr	r3, [pc, #328]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064d6:	f7fc fe27 	bl	8003128 <HAL_GetTick>
 80064da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064dc:	e008      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80064de:	f7fc fe23 	bl	8003128 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e107      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064f0:	4b49      	ldr	r3, [pc, #292]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064fc:	d0ef      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d020      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800650a:	4b43      	ldr	r3, [pc, #268]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800650c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006510:	0f1b      	lsrs	r3, r3, #28
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	019a      	lsls	r2, r3, #6
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	061b      	lsls	r3, r3, #24
 8006524:	431a      	orrs	r2, r3
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	071b      	lsls	r3, r3, #28
 800652a:	493b      	ldr	r1, [pc, #236]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006532:	4b39      	ldr	r3, [pc, #228]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006538:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	3b01      	subs	r3, #1
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	4934      	ldr	r1, [pc, #208]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01e      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006558:	4b2f      	ldr	r3, [pc, #188]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655e:	0e1b      	lsrs	r3, r3, #24
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	019a      	lsls	r2, r3, #6
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	071b      	lsls	r3, r3, #28
 8006578:	4927      	ldr	r1, [pc, #156]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006580:	4b25      	ldr	r3, [pc, #148]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006586:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	4922      	ldr	r1, [pc, #136]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006596:	4b21      	ldr	r3, [pc, #132]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800659c:	f7fc fdc4 	bl	8003128 <HAL_GetTick>
 80065a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065a4:	f7fc fdc0 	bl	8003128 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e0a4      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065b6:	4b18      	ldr	r3, [pc, #96]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065c2:	d1ef      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 808b 	beq.w	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	4a0f      	ldr	r2, [pc, #60]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e0:	6413      	str	r3, [r2, #64]	; 0x40
 80065e2:	4b0d      	ldr	r3, [pc, #52]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065ee:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a0b      	ldr	r2, [pc, #44]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80065f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065fa:	f7fc fd95 	bl	8003128 <HAL_GetTick>
 80065fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006600:	e010      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006602:	f7fc fd91 	bl	8003128 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d909      	bls.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e075      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006614:	42470068 	.word	0x42470068
 8006618:	40023800 	.word	0x40023800
 800661c:	42470070 	.word	0x42470070
 8006620:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006624:	4b38      	ldr	r3, [pc, #224]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0e8      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006630:	4b36      	ldr	r3, [pc, #216]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006638:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d02f      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	429a      	cmp	r2, r3
 800664c:	d028      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800664e:	4b2f      	ldr	r3, [pc, #188]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006656:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006658:	4b2d      	ldr	r3, [pc, #180]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800665e:	4b2c      	ldr	r3, [pc, #176]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006664:	4a29      	ldr	r2, [pc, #164]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800666a:	4b28      	ldr	r3, [pc, #160]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b01      	cmp	r3, #1
 8006674:	d114      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006676:	f7fc fd57 	bl	8003128 <HAL_GetTick>
 800667a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667c:	e00a      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800667e:	f7fc fd53 	bl	8003128 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	f241 3288 	movw	r2, #5000	; 0x1388
 800668c:	4293      	cmp	r3, r2
 800668e:	d901      	bls.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e035      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006694:	4b1d      	ldr	r3, [pc, #116]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0ee      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ac:	d10d      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 80066ae:	4b17      	ldr	r3, [pc, #92]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c2:	4912      	ldr	r1, [pc, #72]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	608b      	str	r3, [r1, #8]
 80066c8:	e005      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80066ca:	4b10      	ldr	r3, [pc, #64]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	4a0f      	ldr	r2, [pc, #60]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066d4:	6093      	str	r3, [r2, #8]
 80066d6:	4b0d      	ldr	r3, [pc, #52]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066e2:	490a      	ldr	r1, [pc, #40]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80066fc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40007000 	.word	0x40007000
 800670c:	40023800 	.word	0x40023800
 8006710:	42470e40 	.word	0x42470e40
 8006714:	424711e0 	.word	0x424711e0

08006718 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e025      	b.n	8006778 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f81d 	bl	8006780 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f001 f919 	bl	8007990 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	461a      	mov	r2, r3
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	f001 f96e 	bl	8007a4a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067a6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d101      	bne.n	80067b2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80067ae:	2302      	movs	r3, #2
 80067b0:	e021      	b.n	80067f6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d002      	beq.n	80067be <HAL_SDRAM_SendCommand+0x2a>
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	2b05      	cmp	r3, #5
 80067bc:	d118      	bne.n	80067f0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 f9a4 	bl	8007b1c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d104      	bne.n	80067e6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2205      	movs	r2, #5
 80067e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067e4:	e006      	b.n	80067f4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067ee:	e001      	b.n	80067f4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d101      	bne.n	8006818 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006814:	2302      	movs	r3, #2
 8006816:	e016      	b.n	8006846 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	d10f      	bne.n	8006844 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f001 f9af 	bl	8007b96 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e07b      	b.n	8006958 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	2b00      	cmp	r3, #0
 8006866:	d108      	bne.n	800687a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006870:	d009      	beq.n	8006886 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	61da      	str	r2, [r3, #28]
 8006878:	e005      	b.n	8006886 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d106      	bne.n	80068a6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f885 	bl	80069b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	ea42 0103 	orr.w	r1, r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	0c1b      	lsrs	r3, r3, #16
 8006924:	f003 0104 	and.w	r1, r3, #4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	f003 0210 	and.w	r2, r3, #16
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69da      	ldr	r2, [r3, #28]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006946:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e01a      	b.n	80069a8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006988:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f81a 	bl	80069c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_SPI_Transmit+0x22>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e126      	b.n	8006c48 <HAL_SPI_Transmit+0x270>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a02:	f7fc fb91 	bl	8003128 <HAL_GetTick>
 8006a06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d002      	beq.n	8006a1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a1c:	e10b      	b.n	8006c36 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_SPI_Transmit+0x52>
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a2e:	e102      	b.n	8006c36 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2203      	movs	r2, #3
 8006a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	88fa      	ldrh	r2, [r7, #6]
 8006a48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	88fa      	ldrh	r2, [r7, #6]
 8006a4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a76:	d10f      	bne.n	8006a98 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d007      	beq.n	8006ab6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006abe:	d14b      	bne.n	8006b58 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_SPI_Transmit+0xf6>
 8006ac8:	8afb      	ldrh	r3, [r7, #22]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d13e      	bne.n	8006b4c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	881a      	ldrh	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	1c9a      	adds	r2, r3, #2
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006af2:	e02b      	b.n	8006b4c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d112      	bne.n	8006b28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	881a      	ldrh	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b12:	1c9a      	adds	r2, r3, #2
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b26:	e011      	b.n	8006b4c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b28:	f7fc fafe 	bl	8003128 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d803      	bhi.n	8006b40 <HAL_SPI_Transmit+0x168>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3e:	d102      	bne.n	8006b46 <HAL_SPI_Transmit+0x16e>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b4a:	e074      	b.n	8006c36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1ce      	bne.n	8006af4 <HAL_SPI_Transmit+0x11c>
 8006b56:	e04c      	b.n	8006bf2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HAL_SPI_Transmit+0x18e>
 8006b60:	8afb      	ldrh	r3, [r7, #22]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d140      	bne.n	8006be8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b8c:	e02c      	b.n	8006be8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d113      	bne.n	8006bc4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	7812      	ldrb	r2, [r2, #0]
 8006ba8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006bc2:	e011      	b.n	8006be8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc4:	f7fc fab0 	bl	8003128 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d803      	bhi.n	8006bdc <HAL_SPI_Transmit+0x204>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d102      	bne.n	8006be2 <HAL_SPI_Transmit+0x20a>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d102      	bne.n	8006be8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006be6:	e026      	b.n	8006c36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1cd      	bne.n	8006b8e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fbda 	bl	80073b0 <SPI_EndRxTxTransaction>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c10:	2300      	movs	r3, #0
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	77fb      	strb	r3, [r7, #31]
 8006c32:	e000      	b.n	8006c36 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c6c:	d112      	bne.n	8006c94 <HAL_SPI_Receive+0x44>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10e      	bne.n	8006c94 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	4613      	mov	r3, r2
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f8f1 	bl	8006e72 <HAL_SPI_TransmitReceive>
 8006c90:	4603      	mov	r3, r0
 8006c92:	e0ea      	b.n	8006e6a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_SPI_Receive+0x52>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e0e3      	b.n	8006e6a <HAL_SPI_Receive+0x21a>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006caa:	f7fc fa3d 	bl	8003128 <HAL_GetTick>
 8006cae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d002      	beq.n	8006cc2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cc0:	e0ca      	b.n	8006e58 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_SPI_Receive+0x7e>
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cd2:	e0c1      	b.n	8006e58 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	88fa      	ldrh	r2, [r7, #6]
 8006cec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1a:	d10f      	bne.n	8006d3c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d007      	beq.n	8006d5a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d162      	bne.n	8006e28 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d62:	e02e      	b.n	8006dc2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d115      	bne.n	8006d9e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f103 020c 	add.w	r2, r3, #12
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	7812      	ldrb	r2, [r2, #0]
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d9c:	e011      	b.n	8006dc2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d9e:	f7fc f9c3 	bl	8003128 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d803      	bhi.n	8006db6 <HAL_SPI_Receive+0x166>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d102      	bne.n	8006dbc <HAL_SPI_Receive+0x16c>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006dc0:	e04a      	b.n	8006e58 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1cb      	bne.n	8006d64 <HAL_SPI_Receive+0x114>
 8006dcc:	e031      	b.n	8006e32 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d113      	bne.n	8006e04 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de6:	b292      	uxth	r2, r2
 8006de8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	1c9a      	adds	r2, r3, #2
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e02:	e011      	b.n	8006e28 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e04:	f7fc f990 	bl	8003128 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d803      	bhi.n	8006e1c <HAL_SPI_Receive+0x1cc>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1a:	d102      	bne.n	8006e22 <HAL_SPI_Receive+0x1d2>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e26:	e017      	b.n	8006e58 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1cd      	bne.n	8006dce <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 fa54 	bl	80072e4 <SPI_EndRxTransaction>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2220      	movs	r2, #32
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]
 8006e54:	e000      	b.n	8006e58 <HAL_SPI_Receive+0x208>
  }

error :
 8006e56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b08c      	sub	sp, #48	; 0x30
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
 8006e7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e80:	2301      	movs	r3, #1
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_SPI_TransmitReceive+0x26>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e18a      	b.n	80071ae <HAL_SPI_TransmitReceive+0x33c>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ea0:	f7fc f942 	bl	8003128 <HAL_GetTick>
 8006ea4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006eb6:	887b      	ldrh	r3, [r7, #2]
 8006eb8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006eba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d00f      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x70>
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ec8:	d107      	bne.n	8006eda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <HAL_SPI_TransmitReceive+0x68>
 8006ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d003      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006eda:	2302      	movs	r3, #2
 8006edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ee0:	e15b      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_SPI_TransmitReceive+0x82>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_SPI_TransmitReceive+0x82>
 8006eee:	887b      	ldrh	r3, [r7, #2]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d103      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006efa:	e14e      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d003      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2205      	movs	r2, #5
 8006f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	887a      	ldrh	r2, [r7, #2]
 8006f20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	887a      	ldrh	r2, [r7, #2]
 8006f26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	887a      	ldrh	r2, [r7, #2]
 8006f32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	887a      	ldrh	r2, [r7, #2]
 8006f38:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	d007      	beq.n	8006f64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f6c:	d178      	bne.n	8007060 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_SPI_TransmitReceive+0x10a>
 8006f76:	8b7b      	ldrh	r3, [r7, #26]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d166      	bne.n	800704a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	881a      	ldrh	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	1c9a      	adds	r2, r3, #2
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fa0:	e053      	b.n	800704a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d11b      	bne.n	8006fe8 <HAL_SPI_TransmitReceive+0x176>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d016      	beq.n	8006fe8 <HAL_SPI_TransmitReceive+0x176>
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d113      	bne.n	8006fe8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	881a      	ldrh	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	1c9a      	adds	r2, r3, #2
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d119      	bne.n	800702a <HAL_SPI_TransmitReceive+0x1b8>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d014      	beq.n	800702a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	b292      	uxth	r2, r2
 800700c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007026:	2301      	movs	r3, #1
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800702a:	f7fc f87d 	bl	8003128 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007036:	429a      	cmp	r2, r3
 8007038:	d807      	bhi.n	800704a <HAL_SPI_TransmitReceive+0x1d8>
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007040:	d003      	beq.n	800704a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007048:	e0a7      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800704e:	b29b      	uxth	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1a6      	bne.n	8006fa2 <HAL_SPI_TransmitReceive+0x130>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1a1      	bne.n	8006fa2 <HAL_SPI_TransmitReceive+0x130>
 800705e:	e07c      	b.n	800715a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <HAL_SPI_TransmitReceive+0x1fc>
 8007068:	8b7b      	ldrh	r3, [r7, #26]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d16b      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	7812      	ldrb	r2, [r2, #0]
 800707a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007094:	e057      	b.n	8007146 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d11c      	bne.n	80070de <HAL_SPI_TransmitReceive+0x26c>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d017      	beq.n	80070de <HAL_SPI_TransmitReceive+0x26c>
 80070ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d114      	bne.n	80070de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d119      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x2ae>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d014      	beq.n	8007120 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800711c:	2301      	movs	r3, #1
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007120:	f7fc f802 	bl	8003128 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800712c:	429a      	cmp	r2, r3
 800712e:	d803      	bhi.n	8007138 <HAL_SPI_TransmitReceive+0x2c6>
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d102      	bne.n	800713e <HAL_SPI_TransmitReceive+0x2cc>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007144:	e029      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1a2      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x224>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d19d      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800715a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f926 	bl	80073b0 <SPI_EndRxTxTransaction>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d006      	beq.n	8007178 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007176:	e010      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	e000      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007198:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3730      	adds	r7, #48	; 0x30
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c4:	b2db      	uxtb	r3, r3
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	4613      	mov	r3, r2
 80071e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071e4:	f7fb ffa0 	bl	8003128 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	4413      	add	r3, r2
 80071f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071f4:	f7fb ff98 	bl	8003128 <HAL_GetTick>
 80071f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071fa:	4b39      	ldr	r3, [pc, #228]	; (80072e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	015b      	lsls	r3, r3, #5
 8007200:	0d1b      	lsrs	r3, r3, #20
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	fb02 f303 	mul.w	r3, r2, r3
 8007208:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800720a:	e054      	b.n	80072b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d050      	beq.n	80072b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007214:	f7fb ff88 	bl	8003128 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	69fa      	ldr	r2, [r7, #28]
 8007220:	429a      	cmp	r2, r3
 8007222:	d902      	bls.n	800722a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d13d      	bne.n	80072a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007238:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007242:	d111      	bne.n	8007268 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800724c:	d004      	beq.n	8007258 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007256:	d107      	bne.n	8007268 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007266:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007270:	d10f      	bne.n	8007292 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007290:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e017      	b.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4013      	ands	r3, r2
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	bf0c      	ite	eq
 80072c6:	2301      	moveq	r3, #1
 80072c8:	2300      	movne	r3, #0
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d19b      	bne.n	800720c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000000 	.word	0x20000000

080072e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072f8:	d111      	bne.n	800731e <SPI_EndRxTransaction+0x3a>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007302:	d004      	beq.n	800730e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800730c:	d107      	bne.n	800731e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800731c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007326:	d12a      	bne.n	800737e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007330:	d012      	beq.n	8007358 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2200      	movs	r2, #0
 800733a:	2180      	movs	r1, #128	; 0x80
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff ff49 	bl	80071d4 <SPI_WaitFlagStateUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d02d      	beq.n	80073a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734c:	f043 0220 	orr.w	r2, r3, #32
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e026      	b.n	80073a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	2101      	movs	r1, #1
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff ff36 	bl	80071d4 <SPI_WaitFlagStateUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01a      	beq.n	80073a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	f043 0220 	orr.w	r2, r3, #32
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e013      	b.n	80073a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2200      	movs	r2, #0
 8007386:	2101      	movs	r1, #1
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff ff23 	bl	80071d4 <SPI_WaitFlagStateUntilTimeout>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007398:	f043 0220 	orr.w	r2, r3, #32
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e000      	b.n	80073a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073bc:	4b1b      	ldr	r3, [pc, #108]	; (800742c <SPI_EndRxTxTransaction+0x7c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <SPI_EndRxTxTransaction+0x80>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	0d5b      	lsrs	r3, r3, #21
 80073c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073cc:	fb02 f303 	mul.w	r3, r2, r3
 80073d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073da:	d112      	bne.n	8007402 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	2180      	movs	r1, #128	; 0x80
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff fef4 	bl	80071d4 <SPI_WaitFlagStateUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e00f      	b.n	8007422 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	3b01      	subs	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007418:	2b80      	cmp	r3, #128	; 0x80
 800741a:	d0f2      	beq.n	8007402 <SPI_EndRxTxTransaction+0x52>
 800741c:	e000      	b.n	8007420 <SPI_EndRxTxTransaction+0x70>
        break;
 800741e:	bf00      	nop
  }

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000000 	.word	0x20000000
 8007430:	165e9f81 	.word	0x165e9f81

08007434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e041      	b.n	80074ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f839 	bl	80074d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f000 f9d8 	bl	8007828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d001      	beq.n	8007500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e04e      	b.n	800759e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a23      	ldr	r2, [pc, #140]	; (80075ac <HAL_TIM_Base_Start_IT+0xc4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d022      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752a:	d01d      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d018      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d013      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00e      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1b      	ldr	r2, [pc, #108]	; (80075bc <HAL_TIM_Base_Start_IT+0xd4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d009      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a19      	ldr	r2, [pc, #100]	; (80075c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d004      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a18      	ldr	r2, [pc, #96]	; (80075c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d111      	bne.n	800758c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b06      	cmp	r3, #6
 8007578:	d010      	beq.n	800759c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758a:	e007      	b.n	800759c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	40010000 	.word	0x40010000
 80075b0:	40000400 	.word	0x40000400
 80075b4:	40000800 	.word	0x40000800
 80075b8:	40000c00 	.word	0x40000c00
 80075bc:	40010400 	.word	0x40010400
 80075c0:	40014000 	.word	0x40014000
 80075c4:	40001800 	.word	0x40001800

080075c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d122      	bne.n	8007624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d11b      	bne.n	8007624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0202 	mvn.w	r2, #2
 80075f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f8ee 	bl	80077ec <HAL_TIM_IC_CaptureCallback>
 8007610:	e005      	b.n	800761e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f8e0 	bl	80077d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f8f1 	bl	8007800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b04      	cmp	r3, #4
 8007630:	d122      	bne.n	8007678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b04      	cmp	r3, #4
 800763e:	d11b      	bne.n	8007678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0204 	mvn.w	r2, #4
 8007648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f8c4 	bl	80077ec <HAL_TIM_IC_CaptureCallback>
 8007664:	e005      	b.n	8007672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f8b6 	bl	80077d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f8c7 	bl	8007800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0308 	and.w	r3, r3, #8
 8007682:	2b08      	cmp	r3, #8
 8007684:	d122      	bne.n	80076cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b08      	cmp	r3, #8
 8007692:	d11b      	bne.n	80076cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0208 	mvn.w	r2, #8
 800769c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2204      	movs	r2, #4
 80076a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f89a 	bl	80077ec <HAL_TIM_IC_CaptureCallback>
 80076b8:	e005      	b.n	80076c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f88c 	bl	80077d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f89d 	bl	8007800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	2b10      	cmp	r3, #16
 80076d8:	d122      	bne.n	8007720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b10      	cmp	r3, #16
 80076e6:	d11b      	bne.n	8007720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0210 	mvn.w	r2, #16
 80076f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2208      	movs	r2, #8
 80076f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f870 	bl	80077ec <HAL_TIM_IC_CaptureCallback>
 800770c:	e005      	b.n	800771a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f862 	bl	80077d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f873 	bl	8007800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b01      	cmp	r3, #1
 800772c:	d10e      	bne.n	800774c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b01      	cmp	r3, #1
 800773a:	d107      	bne.n	800774c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0201 	mvn.w	r2, #1
 8007744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7f9 fdc8 	bl	80012dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007756:	2b80      	cmp	r3, #128	; 0x80
 8007758:	d10e      	bne.n	8007778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007764:	2b80      	cmp	r3, #128	; 0x80
 8007766:	d107      	bne.n	8007778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f902 	bl	800797c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007782:	2b40      	cmp	r3, #64	; 0x40
 8007784:	d10e      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d107      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800779c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f838 	bl	8007814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d10e      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d107      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0220 	mvn.w	r2, #32
 80077c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f8cc 	bl	8007968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a40      	ldr	r2, [pc, #256]	; (800793c <TIM_Base_SetConfig+0x114>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d013      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007846:	d00f      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a3d      	ldr	r2, [pc, #244]	; (8007940 <TIM_Base_SetConfig+0x118>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00b      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a3c      	ldr	r2, [pc, #240]	; (8007944 <TIM_Base_SetConfig+0x11c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d007      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a3b      	ldr	r2, [pc, #236]	; (8007948 <TIM_Base_SetConfig+0x120>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d003      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a3a      	ldr	r2, [pc, #232]	; (800794c <TIM_Base_SetConfig+0x124>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d108      	bne.n	800787a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a2f      	ldr	r2, [pc, #188]	; (800793c <TIM_Base_SetConfig+0x114>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d02b      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007888:	d027      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a2c      	ldr	r2, [pc, #176]	; (8007940 <TIM_Base_SetConfig+0x118>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d023      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a2b      	ldr	r2, [pc, #172]	; (8007944 <TIM_Base_SetConfig+0x11c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d01f      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a2a      	ldr	r2, [pc, #168]	; (8007948 <TIM_Base_SetConfig+0x120>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d01b      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a29      	ldr	r2, [pc, #164]	; (800794c <TIM_Base_SetConfig+0x124>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d017      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a28      	ldr	r2, [pc, #160]	; (8007950 <TIM_Base_SetConfig+0x128>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a27      	ldr	r2, [pc, #156]	; (8007954 <TIM_Base_SetConfig+0x12c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00f      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a26      	ldr	r2, [pc, #152]	; (8007958 <TIM_Base_SetConfig+0x130>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d00b      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a25      	ldr	r2, [pc, #148]	; (800795c <TIM_Base_SetConfig+0x134>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d007      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a24      	ldr	r2, [pc, #144]	; (8007960 <TIM_Base_SetConfig+0x138>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d003      	beq.n	80078da <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a23      	ldr	r2, [pc, #140]	; (8007964 <TIM_Base_SetConfig+0x13c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d108      	bne.n	80078ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a0a      	ldr	r2, [pc, #40]	; (800793c <TIM_Base_SetConfig+0x114>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d003      	beq.n	8007920 <TIM_Base_SetConfig+0xf8>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a0c      	ldr	r2, [pc, #48]	; (800794c <TIM_Base_SetConfig+0x124>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d103      	bne.n	8007928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	615a      	str	r2, [r3, #20]
}
 800792e:	bf00      	nop
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40010000 	.word	0x40010000
 8007940:	40000400 	.word	0x40000400
 8007944:	40000800 	.word	0x40000800
 8007948:	40000c00 	.word	0x40000c00
 800794c:	40010400 	.word	0x40010400
 8007950:	40014000 	.word	0x40014000
 8007954:	40014400 	.word	0x40014400
 8007958:	40014800 	.word	0x40014800
 800795c:	40001800 	.word	0x40001800
 8007960:	40001c00 	.word	0x40001c00
 8007964:	40002000 	.word	0x40002000

08007968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d123      	bne.n	80079ea <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	6851      	ldr	r1, [r2, #4]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	6892      	ldr	r2, [r2, #8]
 80079b6:	4311      	orrs	r1, r2
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	68d2      	ldr	r2, [r2, #12]
 80079bc:	4311      	orrs	r1, r2
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	6912      	ldr	r2, [r2, #16]
 80079c2:	4311      	orrs	r1, r2
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	6952      	ldr	r2, [r2, #20]
 80079c8:	4311      	orrs	r1, r2
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	6992      	ldr	r2, [r2, #24]
 80079ce:	4311      	orrs	r1, r2
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	69d2      	ldr	r2, [r2, #28]
 80079d4:	4311      	orrs	r1, r2
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	6a12      	ldr	r2, [r2, #32]
 80079da:	4311      	orrs	r1, r2
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079e0:	430a      	orrs	r2, r1
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	e028      	b.n	8007a3c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	69d9      	ldr	r1, [r3, #28]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	4319      	orrs	r1, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	430b      	orrs	r3, r1
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	6851      	ldr	r1, [r2, #4]
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	6892      	ldr	r2, [r2, #8]
 8007a1c:	4311      	orrs	r1, r2
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	68d2      	ldr	r2, [r2, #12]
 8007a22:	4311      	orrs	r1, r2
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	6912      	ldr	r2, [r2, #16]
 8007a28:	4311      	orrs	r1, r2
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	6952      	ldr	r2, [r2, #20]
 8007a2e:	4311      	orrs	r1, r2
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	6992      	ldr	r2, [r2, #24]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d128      	bne.n	8007aae <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	1e59      	subs	r1, r3, #1
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	4319      	orrs	r1, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	4319      	orrs	r1, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	031b      	lsls	r3, r3, #12
 8007a86:	4319      	orrs	r1, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	041b      	lsls	r3, r3, #16
 8007a90:	4319      	orrs	r1, r3
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	051b      	lsls	r3, r3, #20
 8007a9a:	4319      	orrs	r1, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	061b      	lsls	r3, r3, #24
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	e02f      	b.n	8007b0e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	68d2      	ldr	r2, [r2, #12]
 8007abe:	3a01      	subs	r2, #1
 8007ac0:	0311      	lsls	r1, r2, #12
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	6952      	ldr	r2, [r2, #20]
 8007ac6:	3a01      	subs	r2, #1
 8007ac8:	0512      	lsls	r2, r2, #20
 8007aca:	430a      	orrs	r2, r1
 8007acc:	431a      	orrs	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	1e59      	subs	r1, r3, #1
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	4319      	orrs	r1, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	4319      	orrs	r1, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	4319      	orrs	r1, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	061b      	lsls	r3, r3, #24
 8007b06:	430b      	orrs	r3, r1
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	0d9b      	lsrs	r3, r3, #22
 8007b32:	059b      	lsls	r3, r3, #22
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	6811      	ldr	r1, [r2, #0]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	6852      	ldr	r2, [r2, #4]
 8007b3c:	4311      	orrs	r1, r2
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	6892      	ldr	r2, [r2, #8]
 8007b42:	3a01      	subs	r2, #1
 8007b44:	0152      	lsls	r2, r2, #5
 8007b46:	4311      	orrs	r1, r2
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	68d2      	ldr	r2, [r2, #12]
 8007b4c:	0252      	lsls	r2, r2, #9
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	431a      	orrs	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8007b56:	f7fb fae7 	bl	8003128 <HAL_GetTick>
 8007b5a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007b5c:	e010      	b.n	8007b80 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b64:	d00c      	beq.n	8007b80 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d007      	beq.n	8007b7c <FMC_SDRAM_SendCommand+0x60>
 8007b6c:	f7fb fadc 	bl	8003128 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d201      	bcs.n	8007b80 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e006      	b.n	8007b8e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b20      	cmp	r3, #32
 8007b8a:	d0e8      	beq.n	8007b5e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007ba8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	0052      	lsls	r2, r2, #1
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	f107 001c 	add.w	r0, r7, #28
 8007bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d122      	bne.n	8007c22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d105      	bne.n	8007c16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fbee 	bl	80093f8 <USB_CoreReset>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
 8007c20:	e01a      	b.n	8007c58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fbe2 	bl	80093f8 <USB_CoreReset>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	639a      	str	r2, [r3, #56]	; 0x38
 8007c4a:	e005      	b.n	8007c58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d10b      	bne.n	8007c76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f043 0206 	orr.w	r2, r3, #6
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f043 0220 	orr.w	r2, r3, #32
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c82:	b004      	add	sp, #16
 8007c84:	4770      	bx	lr
	...

08007c88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d165      	bne.n	8007d68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4a41      	ldr	r2, [pc, #260]	; (8007da4 <USB_SetTurnaroundTime+0x11c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d906      	bls.n	8007cb2 <USB_SetTurnaroundTime+0x2a>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4a40      	ldr	r2, [pc, #256]	; (8007da8 <USB_SetTurnaroundTime+0x120>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d202      	bcs.n	8007cb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007cac:	230f      	movs	r3, #15
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	e062      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	4a3c      	ldr	r2, [pc, #240]	; (8007da8 <USB_SetTurnaroundTime+0x120>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d306      	bcc.n	8007cc8 <USB_SetTurnaroundTime+0x40>
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	4a3b      	ldr	r2, [pc, #236]	; (8007dac <USB_SetTurnaroundTime+0x124>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d202      	bcs.n	8007cc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007cc2:	230e      	movs	r3, #14
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	e057      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	4a38      	ldr	r2, [pc, #224]	; (8007dac <USB_SetTurnaroundTime+0x124>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d306      	bcc.n	8007cde <USB_SetTurnaroundTime+0x56>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4a37      	ldr	r2, [pc, #220]	; (8007db0 <USB_SetTurnaroundTime+0x128>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d202      	bcs.n	8007cde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007cd8:	230d      	movs	r3, #13
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	e04c      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	4a33      	ldr	r2, [pc, #204]	; (8007db0 <USB_SetTurnaroundTime+0x128>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d306      	bcc.n	8007cf4 <USB_SetTurnaroundTime+0x6c>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	4a32      	ldr	r2, [pc, #200]	; (8007db4 <USB_SetTurnaroundTime+0x12c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d802      	bhi.n	8007cf4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007cee:	230c      	movs	r3, #12
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	e041      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4a2f      	ldr	r2, [pc, #188]	; (8007db4 <USB_SetTurnaroundTime+0x12c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d906      	bls.n	8007d0a <USB_SetTurnaroundTime+0x82>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4a2e      	ldr	r2, [pc, #184]	; (8007db8 <USB_SetTurnaroundTime+0x130>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d802      	bhi.n	8007d0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d04:	230b      	movs	r3, #11
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	e036      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	4a2a      	ldr	r2, [pc, #168]	; (8007db8 <USB_SetTurnaroundTime+0x130>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d906      	bls.n	8007d20 <USB_SetTurnaroundTime+0x98>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	4a29      	ldr	r2, [pc, #164]	; (8007dbc <USB_SetTurnaroundTime+0x134>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d802      	bhi.n	8007d20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d1a:	230a      	movs	r3, #10
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	e02b      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4a26      	ldr	r2, [pc, #152]	; (8007dbc <USB_SetTurnaroundTime+0x134>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d906      	bls.n	8007d36 <USB_SetTurnaroundTime+0xae>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4a25      	ldr	r2, [pc, #148]	; (8007dc0 <USB_SetTurnaroundTime+0x138>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d202      	bcs.n	8007d36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d30:	2309      	movs	r3, #9
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	e020      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4a21      	ldr	r2, [pc, #132]	; (8007dc0 <USB_SetTurnaroundTime+0x138>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d306      	bcc.n	8007d4c <USB_SetTurnaroundTime+0xc4>
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	4a20      	ldr	r2, [pc, #128]	; (8007dc4 <USB_SetTurnaroundTime+0x13c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d802      	bhi.n	8007d4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d46:	2308      	movs	r3, #8
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e015      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4a1d      	ldr	r2, [pc, #116]	; (8007dc4 <USB_SetTurnaroundTime+0x13c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d906      	bls.n	8007d62 <USB_SetTurnaroundTime+0xda>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4a1c      	ldr	r2, [pc, #112]	; (8007dc8 <USB_SetTurnaroundTime+0x140>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d202      	bcs.n	8007d62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d5c:	2307      	movs	r3, #7
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e00a      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d62:	2306      	movs	r3, #6
 8007d64:	617b      	str	r3, [r7, #20]
 8007d66:	e007      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d102      	bne.n	8007d74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d6e:	2309      	movs	r3, #9
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	e001      	b.n	8007d78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d74:	2309      	movs	r3, #9
 8007d76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	029b      	lsls	r3, r3, #10
 8007d8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007d90:	431a      	orrs	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	00d8acbf 	.word	0x00d8acbf
 8007da8:	00e4e1c0 	.word	0x00e4e1c0
 8007dac:	00f42400 	.word	0x00f42400
 8007db0:	01067380 	.word	0x01067380
 8007db4:	011a499f 	.word	0x011a499f
 8007db8:	01312cff 	.word	0x01312cff
 8007dbc:	014ca43f 	.word	0x014ca43f
 8007dc0:	016e3600 	.word	0x016e3600
 8007dc4:	01a6ab1f 	.word	0x01a6ab1f
 8007dc8:	01e84800 	.word	0x01e84800

08007dcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f043 0201 	orr.w	r2, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f023 0201 	bic.w	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d115      	bne.n	8007e5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e3e:	2001      	movs	r0, #1
 8007e40:	f7fb f97e 	bl	8003140 <HAL_Delay>
      ms++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 fa45 	bl	80092da <USB_GetMode>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d01e      	beq.n	8007e94 <USB_SetCurrentMode+0x84>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b31      	cmp	r3, #49	; 0x31
 8007e5a:	d9f0      	bls.n	8007e3e <USB_SetCurrentMode+0x2e>
 8007e5c:	e01a      	b.n	8007e94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d115      	bne.n	8007e90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e70:	2001      	movs	r0, #1
 8007e72:	f7fb f965 	bl	8003140 <HAL_Delay>
      ms++;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fa2c 	bl	80092da <USB_GetMode>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d005      	beq.n	8007e94 <USB_SetCurrentMode+0x84>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b31      	cmp	r3, #49	; 0x31
 8007e8c:	d9f0      	bls.n	8007e70 <USB_SetCurrentMode+0x60>
 8007e8e:	e001      	b.n	8007e94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e005      	b.n	8007ea0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b32      	cmp	r3, #50	; 0x32
 8007e98:	d101      	bne.n	8007e9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b086      	sub	sp, #24
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	e009      	b.n	8007edc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	3340      	adds	r3, #64	; 0x40
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	613b      	str	r3, [r7, #16]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	2b0e      	cmp	r3, #14
 8007ee0:	d9f2      	bls.n	8007ec8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d11c      	bne.n	8007f22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ef6:	f043 0302 	orr.w	r3, r3, #2
 8007efa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
 8007f20:	e00b      	b.n	8007f3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f40:	461a      	mov	r2, r3
 8007f42:	2300      	movs	r3, #0
 8007f44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f54:	461a      	mov	r2, r3
 8007f56:	680b      	ldr	r3, [r1, #0]
 8007f58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d10c      	bne.n	8007f7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d104      	bne.n	8007f70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f66:	2100      	movs	r1, #0
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f965 	bl	8008238 <USB_SetDevSpeed>
 8007f6e:	e008      	b.n	8007f82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f70:	2101      	movs	r1, #1
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f960 	bl	8008238 <USB_SetDevSpeed>
 8007f78:	e003      	b.n	8007f82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f7a:	2103      	movs	r1, #3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f95b 	bl	8008238 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f82:	2110      	movs	r1, #16
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f8f3 	bl	8008170 <USB_FlushTxFifo>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f91f 	bl	80081d8 <USB_FlushRxFifo>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007faa:	461a      	mov	r2, r3
 8007fac:	2300      	movs	r3, #0
 8007fae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	2300      	movs	r3, #0
 8007fba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	613b      	str	r3, [r7, #16]
 8007fcc:	e043      	b.n	8008056 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe4:	d118      	bne.n	8008018 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	e013      	b.n	800802a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800800e:	461a      	mov	r2, r3
 8008010:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e008      	b.n	800802a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008024:	461a      	mov	r2, r3
 8008026:	2300      	movs	r3, #0
 8008028:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008036:	461a      	mov	r2, r3
 8008038:	2300      	movs	r3, #0
 800803a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008048:	461a      	mov	r2, r3
 800804a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800804e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	3301      	adds	r3, #1
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	429a      	cmp	r2, r3
 800805c:	d3b7      	bcc.n	8007fce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800805e:	2300      	movs	r3, #0
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	e043      	b.n	80080ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800807a:	d118      	bne.n	80080ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808e:	461a      	mov	r2, r3
 8008090:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	e013      	b.n	80080c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a4:	461a      	mov	r2, r3
 80080a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	e008      	b.n	80080c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ba:	461a      	mov	r2, r3
 80080bc:	2300      	movs	r3, #0
 80080be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080cc:	461a      	mov	r2, r3
 80080ce:	2300      	movs	r3, #0
 80080d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080de:	461a      	mov	r2, r3
 80080e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	3301      	adds	r3, #1
 80080ea:	613b      	str	r3, [r7, #16]
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d3b7      	bcc.n	8008064 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008106:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008114:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d105      	bne.n	8008128 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	f043 0210 	orr.w	r2, r3, #16
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	4b0f      	ldr	r3, [pc, #60]	; (800816c <USB_DevInit+0x2c4>)
 800812e:	4313      	orrs	r3, r2
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f043 0208 	orr.w	r2, r3, #8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008148:	2b01      	cmp	r3, #1
 800814a:	d107      	bne.n	800815c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008154:	f043 0304 	orr.w	r3, r3, #4
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008168:	b004      	add	sp, #16
 800816a:	4770      	bx	lr
 800816c:	803c3800 	.word	0x803c3800

08008170 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4a13      	ldr	r2, [pc, #76]	; (80081d4 <USB_FlushTxFifo+0x64>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d901      	bls.n	8008190 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e01b      	b.n	80081c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	daf2      	bge.n	800817e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	019b      	lsls	r3, r3, #6
 80081a0:	f043 0220 	orr.w	r2, r3, #32
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4a08      	ldr	r2, [pc, #32]	; (80081d4 <USB_FlushTxFifo+0x64>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d901      	bls.n	80081ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e006      	b.n	80081c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f003 0320 	and.w	r3, r3, #32
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d0f0      	beq.n	80081a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	00030d40 	.word	0x00030d40

080081d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3301      	adds	r3, #1
 80081e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4a11      	ldr	r2, [pc, #68]	; (8008234 <USB_FlushRxFifo+0x5c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d901      	bls.n	80081f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e018      	b.n	8008228 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	daf2      	bge.n	80081e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2210      	movs	r2, #16
 8008206:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3301      	adds	r3, #1
 800820c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4a08      	ldr	r2, [pc, #32]	; (8008234 <USB_FlushRxFifo+0x5c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d901      	bls.n	800821a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e006      	b.n	8008228 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	2b10      	cmp	r3, #16
 8008224:	d0f0      	beq.n	8008208 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	00030d40 	.word	0x00030d40

08008238 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	68f9      	ldr	r1, [r7, #12]
 8008254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008258:	4313      	orrs	r3, r2
 800825a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800826a:	b480      	push	{r7}
 800826c:	b087      	sub	sp, #28
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 0306 	and.w	r3, r3, #6
 8008282:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d102      	bne.n	8008290 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800828a:	2300      	movs	r3, #0
 800828c:	75fb      	strb	r3, [r7, #23]
 800828e:	e00a      	b.n	80082a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d002      	beq.n	800829c <USB_GetDevSpeed+0x32>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b06      	cmp	r3, #6
 800829a:	d102      	bne.n	80082a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800829c:	2302      	movs	r3, #2
 800829e:	75fb      	strb	r3, [r7, #23]
 80082a0:	e001      	b.n	80082a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80082a2:	230f      	movs	r3, #15
 80082a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	785b      	ldrb	r3, [r3, #1]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d13a      	bne.n	8008346 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	2101      	movs	r1, #1
 80082e2:	fa01 f303 	lsl.w	r3, r1, r3
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	68f9      	ldr	r1, [r7, #12]
 80082ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ee:	4313      	orrs	r3, r2
 80082f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d155      	bne.n	80083b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	791b      	ldrb	r3, [r3, #4]
 8008322:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008324:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	059b      	lsls	r3, r3, #22
 800832a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800832c:	4313      	orrs	r3, r2
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	440a      	add	r2, r1
 8008336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800833e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	e036      	b.n	80083b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834c:	69da      	ldr	r2, [r3, #28]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	2101      	movs	r1, #1
 8008358:	fa01 f303 	lsl.w	r3, r1, r3
 800835c:	041b      	lsls	r3, r3, #16
 800835e:	68f9      	ldr	r1, [r7, #12]
 8008360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008364:	4313      	orrs	r3, r2
 8008366:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d11a      	bne.n	80083b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	791b      	ldrb	r3, [r3, #4]
 8008398:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800839a:	430b      	orrs	r3, r1
 800839c:	4313      	orrs	r3, r2
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
	...

080083c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d161      	bne.n	80084a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083f6:	d11f      	bne.n	8008438 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	0151      	lsls	r1, r2, #5
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	440a      	add	r2, r1
 800840e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008416:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	440a      	add	r2, r1
 800842e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008436:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	2101      	movs	r1, #1
 800844a:	fa01 f303 	lsl.w	r3, r1, r3
 800844e:	b29b      	uxth	r3, r3
 8008450:	43db      	mvns	r3, r3
 8008452:	68f9      	ldr	r1, [r7, #12]
 8008454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008458:	4013      	ands	r3, r2
 800845a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008462:	69da      	ldr	r2, [r3, #28]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	2101      	movs	r1, #1
 800846e:	fa01 f303 	lsl.w	r3, r1, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	43db      	mvns	r3, r3
 8008476:	68f9      	ldr	r1, [r7, #12]
 8008478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800847c:	4013      	ands	r3, r2
 800847e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	0159      	lsls	r1, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	440b      	add	r3, r1
 8008496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849a:	4619      	mov	r1, r3
 800849c:	4b35      	ldr	r3, [pc, #212]	; (8008574 <USB_DeactivateEndpoint+0x1b0>)
 800849e:	4013      	ands	r3, r2
 80084a0:	600b      	str	r3, [r1, #0]
 80084a2:	e060      	b.n	8008566 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ba:	d11f      	bne.n	80084fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	0151      	lsls	r1, r2, #5
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	440a      	add	r2, r1
 80084f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	2101      	movs	r1, #1
 800850e:	fa01 f303 	lsl.w	r3, r1, r3
 8008512:	041b      	lsls	r3, r3, #16
 8008514:	43db      	mvns	r3, r3
 8008516:	68f9      	ldr	r1, [r7, #12]
 8008518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800851c:	4013      	ands	r3, r2
 800851e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008526:	69da      	ldr	r2, [r3, #28]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	2101      	movs	r1, #1
 8008532:	fa01 f303 	lsl.w	r3, r1, r3
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	43db      	mvns	r3, r3
 800853a:	68f9      	ldr	r1, [r7, #12]
 800853c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008540:	4013      	ands	r3, r2
 8008542:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	0159      	lsls	r1, r3, #5
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	440b      	add	r3, r1
 800855a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855e:	4619      	mov	r1, r3
 8008560:	4b05      	ldr	r3, [pc, #20]	; (8008578 <USB_DeactivateEndpoint+0x1b4>)
 8008562:	4013      	ands	r3, r2
 8008564:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	ec337800 	.word	0xec337800
 8008578:	eff37800 	.word	0xeff37800

0800857c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	; 0x28
 8008580:	af02      	add	r7, sp, #8
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	2b01      	cmp	r3, #1
 800859a:	f040 815c 	bne.w	8008856 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d132      	bne.n	800860c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008604:	0cdb      	lsrs	r3, r3, #19
 8008606:	04db      	lsls	r3, r3, #19
 8008608:	6113      	str	r3, [r2, #16]
 800860a:	e074      	b.n	80086f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	440a      	add	r2, r1
 8008622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008626:	0cdb      	lsrs	r3, r3, #19
 8008628:	04db      	lsls	r3, r3, #19
 800862a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	0151      	lsls	r1, r2, #5
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	440a      	add	r2, r1
 8008642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008646:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800864a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800864e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6999      	ldr	r1, [r3, #24]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	440b      	add	r3, r1
 8008668:	1e59      	subs	r1, r3, #1
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008672:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008674:	4b9d      	ldr	r3, [pc, #628]	; (80088ec <USB_EPStartXfer+0x370>)
 8008676:	400b      	ands	r3, r1
 8008678:	69b9      	ldr	r1, [r7, #24]
 800867a:	0148      	lsls	r0, r1, #5
 800867c:	69f9      	ldr	r1, [r7, #28]
 800867e:	4401      	add	r1, r0
 8008680:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008684:	4313      	orrs	r3, r2
 8008686:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008694:	691a      	ldr	r2, [r3, #16]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800869e:	69b9      	ldr	r1, [r7, #24]
 80086a0:	0148      	lsls	r0, r1, #5
 80086a2:	69f9      	ldr	r1, [r7, #28]
 80086a4:	4401      	add	r1, r0
 80086a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086aa:	4313      	orrs	r3, r2
 80086ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	791b      	ldrb	r3, [r3, #4]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d11f      	bne.n	80086f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	0151      	lsls	r1, r2, #5
 80086c8:	69fa      	ldr	r2, [r7, #28]
 80086ca:	440a      	add	r2, r1
 80086cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80086d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	0151      	lsls	r1, r2, #5
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	440a      	add	r2, r1
 80086ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d14b      	bne.n	8008794 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d009      	beq.n	8008718 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008710:	461a      	mov	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	791b      	ldrb	r3, [r3, #4]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d128      	bne.n	8008772 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872c:	2b00      	cmp	r3, #0
 800872e:	d110      	bne.n	8008752 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	0151      	lsls	r1, r2, #5
 8008742:	69fa      	ldr	r2, [r7, #28]
 8008744:	440a      	add	r2, r1
 8008746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800874a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	e00f      	b.n	8008772 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	4413      	add	r3, r2
 800875a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	440a      	add	r2, r1
 8008768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008770:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	0151      	lsls	r1, r2, #5
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	440a      	add	r2, r1
 8008788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800878c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	e133      	b.n	80089fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	0151      	lsls	r1, r2, #5
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	440a      	add	r2, r1
 80087aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	791b      	ldrb	r3, [r3, #4]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d015      	beq.n	80087e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 811b 	beq.w	80089fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	f003 030f 	and.w	r3, r3, #15
 80087d6:	2101      	movs	r1, #1
 80087d8:	fa01 f303 	lsl.w	r3, r1, r3
 80087dc:	69f9      	ldr	r1, [r7, #28]
 80087de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087e2:	4313      	orrs	r3, r2
 80087e4:	634b      	str	r3, [r1, #52]	; 0x34
 80087e6:	e109      	b.n	80089fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d110      	bne.n	800881a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	440a      	add	r2, r1
 800880e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e00f      	b.n	800883a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	440a      	add	r2, r1
 8008830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008838:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	6919      	ldr	r1, [r3, #16]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	781a      	ldrb	r2, [r3, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	b298      	uxth	r0, r3
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4603      	mov	r3, r0
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fade 	bl	8008e10 <USB_WritePacket>
 8008854:	e0d2      	b.n	80089fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	0151      	lsls	r1, r2, #5
 8008868:	69fa      	ldr	r2, [r7, #28]
 800886a:	440a      	add	r2, r1
 800886c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008870:	0cdb      	lsrs	r3, r3, #19
 8008872:	04db      	lsls	r3, r3, #19
 8008874:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	0151      	lsls	r1, r2, #5
 8008888:	69fa      	ldr	r2, [r7, #28]
 800888a:	440a      	add	r2, r1
 800888c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008898:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d126      	bne.n	80088f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ae:	691a      	ldr	r2, [r3, #16]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088b8:	69b9      	ldr	r1, [r7, #24]
 80088ba:	0148      	lsls	r0, r1, #5
 80088bc:	69f9      	ldr	r1, [r7, #28]
 80088be:	4401      	add	r1, r0
 80088c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088c4:	4313      	orrs	r3, r2
 80088c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088e6:	6113      	str	r3, [r2, #16]
 80088e8:	e03a      	b.n	8008960 <USB_EPStartXfer+0x3e4>
 80088ea:	bf00      	nop
 80088ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	699a      	ldr	r2, [r3, #24]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	4413      	add	r3, r2
 80088fa:	1e5a      	subs	r2, r3, #1
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	fbb2 f3f3 	udiv	r3, r2, r3
 8008904:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	8afa      	ldrh	r2, [r7, #22]
 800890c:	fb03 f202 	mul.w	r2, r3, r2
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	691a      	ldr	r2, [r3, #16]
 8008922:	8afb      	ldrh	r3, [r7, #22]
 8008924:	04d9      	lsls	r1, r3, #19
 8008926:	4b38      	ldr	r3, [pc, #224]	; (8008a08 <USB_EPStartXfer+0x48c>)
 8008928:	400b      	ands	r3, r1
 800892a:	69b9      	ldr	r1, [r7, #24]
 800892c:	0148      	lsls	r0, r1, #5
 800892e:	69f9      	ldr	r1, [r7, #28]
 8008930:	4401      	add	r1, r0
 8008932:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008936:	4313      	orrs	r3, r2
 8008938:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008946:	691a      	ldr	r2, [r3, #16]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008950:	69b9      	ldr	r1, [r7, #24]
 8008952:	0148      	lsls	r0, r1, #5
 8008954:	69f9      	ldr	r1, [r7, #28]
 8008956:	4401      	add	r1, r0
 8008958:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800895c:	4313      	orrs	r3, r2
 800895e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d10d      	bne.n	8008982 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d009      	beq.n	8008982 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6919      	ldr	r1, [r3, #16]
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897e:	460a      	mov	r2, r1
 8008980:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	791b      	ldrb	r3, [r3, #4]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d128      	bne.n	80089dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008996:	2b00      	cmp	r3, #0
 8008998:	d110      	bne.n	80089bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	0151      	lsls	r1, r2, #5
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	440a      	add	r2, r1
 80089b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	e00f      	b.n	80089dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	69fa      	ldr	r2, [r7, #28]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3720      	adds	r7, #32
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	1ff80000 	.word	0x1ff80000

08008a0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4613      	mov	r3, r2
 8008a18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	785b      	ldrb	r3, [r3, #1]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	f040 80ce 	bne.w	8008bca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d132      	bne.n	8008a9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	0151      	lsls	r1, r2, #5
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	440a      	add	r2, r1
 8008a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	0151      	lsls	r1, r2, #5
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	440a      	add	r2, r1
 8008a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a94:	0cdb      	lsrs	r3, r3, #19
 8008a96:	04db      	lsls	r3, r3, #19
 8008a98:	6113      	str	r3, [r2, #16]
 8008a9a:	e04e      	b.n	8008b3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	0151      	lsls	r1, r2, #5
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	440a      	add	r2, r1
 8008ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab6:	0cdb      	lsrs	r3, r3, #19
 8008ab8:	04db      	lsls	r3, r3, #19
 8008aba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	0151      	lsls	r1, r2, #5
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ada:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ade:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d903      	bls.n	8008af4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	0151      	lsls	r1, r2, #5
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	440a      	add	r2, r1
 8008b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	691a      	ldr	r2, [r3, #16]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b2a:	6939      	ldr	r1, [r7, #16]
 8008b2c:	0148      	lsls	r0, r1, #5
 8008b2e:	6979      	ldr	r1, [r7, #20]
 8008b30:	4401      	add	r1, r0
 8008b32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b36:	4313      	orrs	r3, r2
 8008b38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d11e      	bne.n	8008b7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d009      	beq.n	8008b5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b54:	461a      	mov	r2, r3
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	0151      	lsls	r1, r2, #5
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	440a      	add	r2, r1
 8008b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	e097      	b.n	8008cae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	0151      	lsls	r1, r2, #5
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	440a      	add	r2, r1
 8008b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 8083 	beq.w	8008cae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	2101      	movs	r1, #1
 8008bba:	fa01 f303 	lsl.w	r3, r1, r3
 8008bbe:	6979      	ldr	r1, [r7, #20]
 8008bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	634b      	str	r3, [r1, #52]	; 0x34
 8008bc8:	e071      	b.n	8008cae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be4:	0cdb      	lsrs	r3, r3, #19
 8008be6:	04db      	lsls	r3, r3, #19
 8008be8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	0151      	lsls	r1, r2, #5
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	440a      	add	r2, r1
 8008c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c52:	691a      	ldr	r2, [r3, #16]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c5c:	6939      	ldr	r1, [r7, #16]
 8008c5e:	0148      	lsls	r0, r1, #5
 8008c60:	6979      	ldr	r1, [r7, #20]
 8008c62:	4401      	add	r1, r0
 8008c64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d10d      	bne.n	8008c8e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	6919      	ldr	r1, [r3, #16]
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	371c      	adds	r7, #28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d14a      	bne.n	8008d70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cf2:	f040 8086 	bne.w	8008e02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	0151      	lsls	r1, r2, #5
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	440a      	add	r2, r1
 8008d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	7812      	ldrb	r2, [r2, #0]
 8008d2e:	0151      	lsls	r1, r2, #5
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	440a      	add	r2, r1
 8008d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3301      	adds	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d902      	bls.n	8008d54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	75fb      	strb	r3, [r7, #23]
          break;
 8008d52:	e056      	b.n	8008e02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d6c:	d0e7      	beq.n	8008d3e <USB_EPStopXfer+0x82>
 8008d6e:	e048      	b.n	8008e02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d88:	d13b      	bne.n	8008e02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	7812      	ldrb	r2, [r2, #0]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008dac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	7812      	ldrb	r2, [r2, #0]
 8008dc2:	0151      	lsls	r1, r2, #5
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	440a      	add	r2, r1
 8008dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f242 7210 	movw	r2, #10000	; 0x2710
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d902      	bls.n	8008de8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	75fb      	strb	r3, [r7, #23]
          break;
 8008de6:	e00c      	b.n	8008e02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e00:	d0e7      	beq.n	8008dd2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b089      	sub	sp, #36	; 0x24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	460b      	mov	r3, r1
 8008e20:	71fb      	strb	r3, [r7, #7]
 8008e22:	4613      	mov	r3, r2
 8008e24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d123      	bne.n	8008e7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e36:	88bb      	ldrh	r3, [r7, #4]
 8008e38:	3303      	adds	r3, #3
 8008e3a:	089b      	lsrs	r3, r3, #2
 8008e3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]
 8008e42:	e018      	b.n	8008e76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	031a      	lsls	r2, r3, #12
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e50:	461a      	mov	r2, r3
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	3301      	adds	r3, #1
 8008e62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	3301      	adds	r3, #1
 8008e68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	3301      	adds	r3, #1
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d3e2      	bcc.n	8008e44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3724      	adds	r7, #36	; 0x24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b08b      	sub	sp, #44	; 0x2c
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	4613      	mov	r3, r2
 8008e98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	089b      	lsrs	r3, r3, #2
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008eaa:	88fb      	ldrh	r3, [r7, #6]
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	623b      	str	r3, [r7, #32]
 8008eb6:	e014      	b.n	8008ee2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	3301      	adds	r3, #1
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	3301      	adds	r3, #1
 8008eda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	623b      	str	r3, [r7, #32]
 8008ee2:	6a3a      	ldr	r2, [r7, #32]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d3e6      	bcc.n	8008eb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008eea:	8bfb      	ldrh	r3, [r7, #30]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d01e      	beq.n	8008f2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008efa:	461a      	mov	r2, r3
 8008efc:	f107 0310 	add.w	r3, r7, #16
 8008f00:	6812      	ldr	r2, [r2, #0]
 8008f02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	701a      	strb	r2, [r3, #0]
      i++;
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	3301      	adds	r3, #1
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008f22:	8bfb      	ldrh	r3, [r7, #30]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f28:	8bfb      	ldrh	r3, [r7, #30]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1ea      	bne.n	8008f04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	372c      	adds	r7, #44	; 0x2c
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	785b      	ldrb	r3, [r3, #1]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d12c      	bne.n	8008fb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	db12      	blt.n	8008f90 <USB_EPSetStall+0x54>
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00f      	beq.n	8008f90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	0151      	lsls	r1, r2, #5
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	440a      	add	r2, r1
 8008f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	0151      	lsls	r1, r2, #5
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	440a      	add	r2, r1
 8008fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fae:	6013      	str	r3, [r2, #0]
 8008fb0:	e02b      	b.n	800900a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	db12      	blt.n	8008fea <USB_EPSetStall+0xae>
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00f      	beq.n	8008fea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	0151      	lsls	r1, r2, #5
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	440a      	add	r2, r1
 8008fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008fe8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009008:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	785b      	ldrb	r3, [r3, #1]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d128      	bne.n	8009086 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	0151      	lsls	r1, r2, #5
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	440a      	add	r2, r1
 800904a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800904e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009052:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	791b      	ldrb	r3, [r3, #4]
 8009058:	2b03      	cmp	r3, #3
 800905a:	d003      	beq.n	8009064 <USB_EPClearStall+0x4c>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	791b      	ldrb	r3, [r3, #4]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d138      	bne.n	80090d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	0151      	lsls	r1, r2, #5
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	440a      	add	r2, r1
 800907a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800907e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	e027      	b.n	80090d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	791b      	ldrb	r3, [r3, #4]
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d003      	beq.n	80090b6 <USB_EPClearStall+0x9e>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	791b      	ldrb	r3, [r3, #4]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d10f      	bne.n	80090d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	0151      	lsls	r1, r2, #5
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	440a      	add	r2, r1
 80090cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009102:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009106:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009118:	68f9      	ldr	r1, [r7, #12]
 800911a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800911e:	4313      	orrs	r3, r2
 8009120:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800914a:	f023 0303 	bic.w	r3, r3, #3
 800914e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800915e:	f023 0302 	bic.w	r3, r3, #2
 8009162:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800918c:	f023 0303 	bic.w	r3, r3, #3
 8009190:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091a0:	f043 0302 	orr.w	r3, r3, #2
 80091a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	695b      	ldr	r3, [r3, #20]
 80091c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4013      	ands	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091cc:	68fb      	ldr	r3, [r7, #12]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091da:	b480      	push	{r7}
 80091dc:	b085      	sub	sp, #20
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	4013      	ands	r3, r2
 80091fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	0c1b      	lsrs	r3, r3, #16
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800920e:	b480      	push	{r7}
 8009210:	b085      	sub	sp, #20
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	4013      	ands	r3, r2
 8009230:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	b29b      	uxth	r3, r3
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009242:	b480      	push	{r7}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	460b      	mov	r3, r1
 800924c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009252:	78fb      	ldrb	r3, [r7, #3]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	4413      	add	r3, r2
 800925a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	4013      	ands	r3, r2
 800926e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009270:	68bb      	ldr	r3, [r7, #8]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800927e:	b480      	push	{r7}
 8009280:	b087      	sub	sp, #28
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	f003 030f 	and.w	r3, r3, #15
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	fa22 f303 	lsr.w	r3, r2, r3
 80092ae:	01db      	lsls	r3, r3, #7
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	4013      	ands	r3, r2
 80092ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092cc:	68bb      	ldr	r3, [r7, #8]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	f003 0301 	and.w	r3, r3, #1
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b085      	sub	sp, #20
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009310:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009314:	f023 0307 	bic.w	r3, r3, #7
 8009318:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800932c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	460b      	mov	r3, r1
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	333c      	adds	r3, #60	; 0x3c
 8009352:	3304      	adds	r3, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	4a26      	ldr	r2, [pc, #152]	; (80093f4 <USB_EP0_OutStart+0xb8>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d90a      	bls.n	8009376 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800936c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009370:	d101      	bne.n	8009376 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	e037      	b.n	80093e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937c:	461a      	mov	r2, r3
 800937e:	2300      	movs	r3, #0
 8009380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a4:	f043 0318 	orr.w	r3, r3, #24
 80093a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80093bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d10f      	bne.n	80093e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ca:	461a      	mov	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80093e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	4f54300a 	.word	0x4f54300a

080093f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4a13      	ldr	r2, [pc, #76]	; (800945c <USB_CoreReset+0x64>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d901      	bls.n	8009416 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e01b      	b.n	800944e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	daf2      	bge.n	8009404 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	f043 0201 	orr.w	r2, r3, #1
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3301      	adds	r3, #1
 8009432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4a09      	ldr	r2, [pc, #36]	; (800945c <USB_CoreReset+0x64>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d901      	bls.n	8009440 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e006      	b.n	800944e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b01      	cmp	r3, #1
 800944a:	d0f0      	beq.n	800942e <USB_CoreReset+0x36>

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	00030d40 	.word	0x00030d40

08009460 <__NVIC_SetPriority>:
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800946c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009470:	2b00      	cmp	r3, #0
 8009472:	db0a      	blt.n	800948a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	b2da      	uxtb	r2, r3
 8009478:	490c      	ldr	r1, [pc, #48]	; (80094ac <__NVIC_SetPriority+0x4c>)
 800947a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800947e:	0112      	lsls	r2, r2, #4
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	440b      	add	r3, r1
 8009484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009488:	e00a      	b.n	80094a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	b2da      	uxtb	r2, r3
 800948e:	4908      	ldr	r1, [pc, #32]	; (80094b0 <__NVIC_SetPriority+0x50>)
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	3b04      	subs	r3, #4
 8009498:	0112      	lsls	r2, r2, #4
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	440b      	add	r3, r1
 800949e:	761a      	strb	r2, [r3, #24]
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	e000e100 	.word	0xe000e100
 80094b0:	e000ed00 	.word	0xe000ed00

080094b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80094b8:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <SysTick_Handler+0x1c>)
 80094ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80094bc:	f002 f936 	bl	800b72c <xTaskGetSchedulerState>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d001      	beq.n	80094ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80094c6:	f000 fd97 	bl	8009ff8 <xPortSysTickHandler>
  }
}
 80094ca:	bf00      	nop
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	e000e010 	.word	0xe000e010

080094d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80094d8:	2100      	movs	r1, #0
 80094da:	f06f 0004 	mvn.w	r0, #4
 80094de:	f7ff ffbf 	bl	8009460 <__NVIC_SetPriority>
#endif
}
 80094e2:	bf00      	nop
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094ee:	f3ef 8305 	mrs	r3, IPSR
 80094f2:	603b      	str	r3, [r7, #0]
  return(result);
 80094f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80094fa:	f06f 0305 	mvn.w	r3, #5
 80094fe:	607b      	str	r3, [r7, #4]
 8009500:	e00c      	b.n	800951c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009502:	4b0a      	ldr	r3, [pc, #40]	; (800952c <osKernelInitialize+0x44>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d105      	bne.n	8009516 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800950a:	4b08      	ldr	r3, [pc, #32]	; (800952c <osKernelInitialize+0x44>)
 800950c:	2201      	movs	r2, #1
 800950e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009510:	2300      	movs	r3, #0
 8009512:	607b      	str	r3, [r7, #4]
 8009514:	e002      	b.n	800951c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009516:	f04f 33ff 	mov.w	r3, #4294967295
 800951a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800951c:	687b      	ldr	r3, [r7, #4]
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20000618 	.word	0x20000618

08009530 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009536:	f3ef 8305 	mrs	r3, IPSR
 800953a:	603b      	str	r3, [r7, #0]
  return(result);
 800953c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009542:	f06f 0305 	mvn.w	r3, #5
 8009546:	607b      	str	r3, [r7, #4]
 8009548:	e010      	b.n	800956c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800954a:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <osKernelStart+0x48>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d109      	bne.n	8009566 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009552:	f7ff ffbf 	bl	80094d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009556:	4b08      	ldr	r3, [pc, #32]	; (8009578 <osKernelStart+0x48>)
 8009558:	2202      	movs	r2, #2
 800955a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800955c:	f001 fc9e 	bl	800ae9c <vTaskStartScheduler>
      stat = osOK;
 8009560:	2300      	movs	r3, #0
 8009562:	607b      	str	r3, [r7, #4]
 8009564:	e002      	b.n	800956c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009566:	f04f 33ff 	mov.w	r3, #4294967295
 800956a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800956c:	687b      	ldr	r3, [r7, #4]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000618 	.word	0x20000618

0800957c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800957c:	b580      	push	{r7, lr}
 800957e:	b08e      	sub	sp, #56	; 0x38
 8009580:	af04      	add	r7, sp, #16
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009588:	2300      	movs	r3, #0
 800958a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800958c:	f3ef 8305 	mrs	r3, IPSR
 8009590:	617b      	str	r3, [r7, #20]
  return(result);
 8009592:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009594:	2b00      	cmp	r3, #0
 8009596:	d17e      	bne.n	8009696 <osThreadNew+0x11a>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d07b      	beq.n	8009696 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800959e:	2380      	movs	r3, #128	; 0x80
 80095a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80095a2:	2318      	movs	r3, #24
 80095a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80095aa:	f04f 33ff 	mov.w	r3, #4294967295
 80095ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d045      	beq.n	8009642 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d002      	beq.n	80095c4 <osThreadNew+0x48>
        name = attr->name;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d008      	beq.n	80095ea <osThreadNew+0x6e>
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	2b38      	cmp	r3, #56	; 0x38
 80095dc:	d805      	bhi.n	80095ea <osThreadNew+0x6e>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <osThreadNew+0x72>
        return (NULL);
 80095ea:	2300      	movs	r3, #0
 80095ec:	e054      	b.n	8009698 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	089b      	lsrs	r3, r3, #2
 80095fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00e      	beq.n	8009624 <osThreadNew+0xa8>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	2b5b      	cmp	r3, #91	; 0x5b
 800960c:	d90a      	bls.n	8009624 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009612:	2b00      	cmp	r3, #0
 8009614:	d006      	beq.n	8009624 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <osThreadNew+0xa8>
        mem = 1;
 800961e:	2301      	movs	r3, #1
 8009620:	61bb      	str	r3, [r7, #24]
 8009622:	e010      	b.n	8009646 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10c      	bne.n	8009646 <osThreadNew+0xca>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d108      	bne.n	8009646 <osThreadNew+0xca>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d104      	bne.n	8009646 <osThreadNew+0xca>
          mem = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	61bb      	str	r3, [r7, #24]
 8009640:	e001      	b.n	8009646 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d110      	bne.n	800966e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009654:	9202      	str	r2, [sp, #8]
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	6a3a      	ldr	r2, [r7, #32]
 8009660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f001 fa44 	bl	800aaf0 <xTaskCreateStatic>
 8009668:	4603      	mov	r3, r0
 800966a:	613b      	str	r3, [r7, #16]
 800966c:	e013      	b.n	8009696 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d110      	bne.n	8009696 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	b29a      	uxth	r2, r3
 8009678:	f107 0310 	add.w	r3, r7, #16
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f001 fa8f 	bl	800abaa <xTaskCreate>
 800968c:	4603      	mov	r3, r0
 800968e:	2b01      	cmp	r3, #1
 8009690:	d001      	beq.n	8009696 <osThreadNew+0x11a>
            hTask = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009696:	693b      	ldr	r3, [r7, #16]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3728      	adds	r7, #40	; 0x28
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096a8:	f3ef 8305 	mrs	r3, IPSR
 80096ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80096ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <osDelay+0x1c>
    stat = osErrorISR;
 80096b4:	f06f 0305 	mvn.w	r3, #5
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	e007      	b.n	80096cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f001 fbb4 	bl	800ae34 <vTaskDelay>
    }
  }

  return (stat);
 80096cc:	68fb      	ldr	r3, [r7, #12]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4a07      	ldr	r2, [pc, #28]	; (8009704 <vApplicationGetIdleTaskMemory+0x2c>)
 80096e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	4a06      	ldr	r2, [pc, #24]	; (8009708 <vApplicationGetIdleTaskMemory+0x30>)
 80096ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2280      	movs	r2, #128	; 0x80
 80096f4:	601a      	str	r2, [r3, #0]
}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	2000061c 	.word	0x2000061c
 8009708:	20000678 	.word	0x20000678

0800970c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4a07      	ldr	r2, [pc, #28]	; (8009738 <vApplicationGetTimerTaskMemory+0x2c>)
 800971c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	4a06      	ldr	r2, [pc, #24]	; (800973c <vApplicationGetTimerTaskMemory+0x30>)
 8009722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800972a:	601a      	str	r2, [r3, #0]
}
 800972c:	bf00      	nop
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	20000878 	.word	0x20000878
 800973c:	200008d4 	.word	0x200008d4

08009740 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08a      	sub	sp, #40	; 0x28
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009748:	2300      	movs	r3, #0
 800974a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800974c:	f001 fc0c 	bl	800af68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009750:	4b5b      	ldr	r3, [pc, #364]	; (80098c0 <pvPortMalloc+0x180>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009758:	f000 f920 	bl	800999c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800975c:	4b59      	ldr	r3, [pc, #356]	; (80098c4 <pvPortMalloc+0x184>)
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4013      	ands	r3, r2
 8009764:	2b00      	cmp	r3, #0
 8009766:	f040 8093 	bne.w	8009890 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01d      	beq.n	80097ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009770:	2208      	movs	r2, #8
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4413      	add	r3, r2
 8009776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	2b00      	cmp	r3, #0
 8009780:	d014      	beq.n	80097ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f023 0307 	bic.w	r3, r3, #7
 8009788:	3308      	adds	r3, #8
 800978a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00a      	beq.n	80097ac <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80097a8:	bf00      	nop
 80097aa:	e7fe      	b.n	80097aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d06e      	beq.n	8009890 <pvPortMalloc+0x150>
 80097b2:	4b45      	ldr	r3, [pc, #276]	; (80098c8 <pvPortMalloc+0x188>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d869      	bhi.n	8009890 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097bc:	4b43      	ldr	r3, [pc, #268]	; (80098cc <pvPortMalloc+0x18c>)
 80097be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097c0:	4b42      	ldr	r3, [pc, #264]	; (80098cc <pvPortMalloc+0x18c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097c6:	e004      	b.n	80097d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d903      	bls.n	80097e4 <pvPortMalloc+0xa4>
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1f1      	bne.n	80097c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097e4:	4b36      	ldr	r3, [pc, #216]	; (80098c0 <pvPortMalloc+0x180>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d050      	beq.n	8009890 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2208      	movs	r2, #8
 80097f4:	4413      	add	r3, r2
 80097f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	1ad2      	subs	r2, r2, r3
 8009808:	2308      	movs	r3, #8
 800980a:	005b      	lsls	r3, r3, #1
 800980c:	429a      	cmp	r2, r3
 800980e:	d91f      	bls.n	8009850 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4413      	add	r3, r2
 8009816:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	f003 0307 	and.w	r3, r3, #7
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <pvPortMalloc+0xf8>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	613b      	str	r3, [r7, #16]
}
 8009834:	bf00      	nop
 8009836:	e7fe      	b.n	8009836 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	1ad2      	subs	r2, r2, r3
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800984a:	69b8      	ldr	r0, [r7, #24]
 800984c:	f000 f908 	bl	8009a60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009850:	4b1d      	ldr	r3, [pc, #116]	; (80098c8 <pvPortMalloc+0x188>)
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	4a1b      	ldr	r2, [pc, #108]	; (80098c8 <pvPortMalloc+0x188>)
 800985c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800985e:	4b1a      	ldr	r3, [pc, #104]	; (80098c8 <pvPortMalloc+0x188>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4b1b      	ldr	r3, [pc, #108]	; (80098d0 <pvPortMalloc+0x190>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d203      	bcs.n	8009872 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800986a:	4b17      	ldr	r3, [pc, #92]	; (80098c8 <pvPortMalloc+0x188>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <pvPortMalloc+0x190>)
 8009870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <pvPortMalloc+0x184>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	431a      	orrs	r2, r3
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009886:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <pvPortMalloc+0x194>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3301      	adds	r3, #1
 800988c:	4a11      	ldr	r2, [pc, #68]	; (80098d4 <pvPortMalloc+0x194>)
 800988e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009890:	f001 fb78 	bl	800af84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <pvPortMalloc+0x174>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	60fb      	str	r3, [r7, #12]
}
 80098b0:	bf00      	nop
 80098b2:	e7fe      	b.n	80098b2 <pvPortMalloc+0x172>
	return pvReturn;
 80098b4:	69fb      	ldr	r3, [r7, #28]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3728      	adds	r7, #40	; 0x28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	200048dc 	.word	0x200048dc
 80098c4:	200048f0 	.word	0x200048f0
 80098c8:	200048e0 	.word	0x200048e0
 80098cc:	200048d4 	.word	0x200048d4
 80098d0:	200048e4 	.word	0x200048e4
 80098d4:	200048e8 	.word	0x200048e8

080098d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d04d      	beq.n	8009986 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098ea:	2308      	movs	r3, #8
 80098ec:	425b      	negs	r3, r3
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4413      	add	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	4b24      	ldr	r3, [pc, #144]	; (8009990 <vPortFree+0xb8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4013      	ands	r3, r2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10a      	bne.n	800991c <vPortFree+0x44>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60fb      	str	r3, [r7, #12]
}
 8009918:	bf00      	nop
 800991a:	e7fe      	b.n	800991a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00a      	beq.n	800993a <vPortFree+0x62>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	60bb      	str	r3, [r7, #8]
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	4b14      	ldr	r3, [pc, #80]	; (8009990 <vPortFree+0xb8>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4013      	ands	r3, r2
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01e      	beq.n	8009986 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d11a      	bne.n	8009986 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	4b0e      	ldr	r3, [pc, #56]	; (8009990 <vPortFree+0xb8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	43db      	mvns	r3, r3
 800995a:	401a      	ands	r2, r3
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009960:	f001 fb02 	bl	800af68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <vPortFree+0xbc>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4413      	add	r3, r2
 800996e:	4a09      	ldr	r2, [pc, #36]	; (8009994 <vPortFree+0xbc>)
 8009970:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009972:	6938      	ldr	r0, [r7, #16]
 8009974:	f000 f874 	bl	8009a60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009978:	4b07      	ldr	r3, [pc, #28]	; (8009998 <vPortFree+0xc0>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3301      	adds	r3, #1
 800997e:	4a06      	ldr	r2, [pc, #24]	; (8009998 <vPortFree+0xc0>)
 8009980:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009982:	f001 faff 	bl	800af84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009986:	bf00      	nop
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	200048f0 	.word	0x200048f0
 8009994:	200048e0 	.word	0x200048e0
 8009998:	200048ec 	.word	0x200048ec

0800999c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80099a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099a8:	4b27      	ldr	r3, [pc, #156]	; (8009a48 <prvHeapInit+0xac>)
 80099aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00c      	beq.n	80099d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	3307      	adds	r3, #7
 80099ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f023 0307 	bic.w	r3, r3, #7
 80099c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	4a1f      	ldr	r2, [pc, #124]	; (8009a48 <prvHeapInit+0xac>)
 80099cc:	4413      	add	r3, r2
 80099ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099d4:	4a1d      	ldr	r2, [pc, #116]	; (8009a4c <prvHeapInit+0xb0>)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099da:	4b1c      	ldr	r3, [pc, #112]	; (8009a4c <prvHeapInit+0xb0>)
 80099dc:	2200      	movs	r2, #0
 80099de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	4413      	add	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099e8:	2208      	movs	r2, #8
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0307 	bic.w	r3, r3, #7
 80099f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4a15      	ldr	r2, [pc, #84]	; (8009a50 <prvHeapInit+0xb4>)
 80099fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099fe:	4b14      	ldr	r3, [pc, #80]	; (8009a50 <prvHeapInit+0xb4>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2200      	movs	r2, #0
 8009a04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a06:	4b12      	ldr	r3, [pc, #72]	; (8009a50 <prvHeapInit+0xb4>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	1ad2      	subs	r2, r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a1c:	4b0c      	ldr	r3, [pc, #48]	; (8009a50 <prvHeapInit+0xb4>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	4a0a      	ldr	r2, [pc, #40]	; (8009a54 <prvHeapInit+0xb8>)
 8009a2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	4a09      	ldr	r2, [pc, #36]	; (8009a58 <prvHeapInit+0xbc>)
 8009a32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a34:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <prvHeapInit+0xc0>)
 8009a36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a3a:	601a      	str	r2, [r3, #0]
}
 8009a3c:	bf00      	nop
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	20000cd4 	.word	0x20000cd4
 8009a4c:	200048d4 	.word	0x200048d4
 8009a50:	200048dc 	.word	0x200048dc
 8009a54:	200048e4 	.word	0x200048e4
 8009a58:	200048e0 	.word	0x200048e0
 8009a5c:	200048f0 	.word	0x200048f0

08009a60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a68:	4b28      	ldr	r3, [pc, #160]	; (8009b0c <prvInsertBlockIntoFreeList+0xac>)
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	e002      	b.n	8009a74 <prvInsertBlockIntoFreeList+0x14>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d8f7      	bhi.n	8009a6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	4413      	add	r3, r2
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d108      	bne.n	8009aa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	441a      	add	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	441a      	add	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d118      	bne.n	8009ae8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	4b15      	ldr	r3, [pc, #84]	; (8009b10 <prvInsertBlockIntoFreeList+0xb0>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d00d      	beq.n	8009ade <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	441a      	add	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	e008      	b.n	8009af0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ade:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <prvInsertBlockIntoFreeList+0xb0>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	e003      	b.n	8009af0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d002      	beq.n	8009afe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009afe:	bf00      	nop
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	200048d4 	.word	0x200048d4
 8009b10:	200048dc 	.word	0x200048dc

08009b14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f103 0208 	add.w	r2, r3, #8
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f103 0208 	add.w	r2, r3, #8
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f103 0208 	add.w	r2, r3, #8
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b62:	bf00      	nop
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b085      	sub	sp, #20
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	601a      	str	r2, [r3, #0]
}
 8009baa:	bf00      	nop
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b085      	sub	sp, #20
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bcc:	d103      	bne.n	8009bd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e00c      	b.n	8009bf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3308      	adds	r3, #8
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	e002      	b.n	8009be4 <vListInsert+0x2e>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d2f6      	bcs.n	8009bde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	601a      	str	r2, [r3, #0]
}
 8009c1c:	bf00      	nop
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	6892      	ldr	r2, [r2, #8]
 8009c3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	6852      	ldr	r2, [r2, #4]
 8009c48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d103      	bne.n	8009c5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689a      	ldr	r2, [r3, #8]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	1e5a      	subs	r2, r3, #1
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3b04      	subs	r3, #4
 8009c8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3b04      	subs	r3, #4
 8009c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	f023 0201 	bic.w	r2, r3, #1
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3b04      	subs	r3, #4
 8009caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cac:	4a0c      	ldr	r2, [pc, #48]	; (8009ce0 <pxPortInitialiseStack+0x64>)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3b14      	subs	r3, #20
 8009cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3b04      	subs	r3, #4
 8009cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f06f 0202 	mvn.w	r2, #2
 8009cca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3b20      	subs	r3, #32
 8009cd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	08009ce5 	.word	0x08009ce5

08009ce4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009cea:	2300      	movs	r3, #0
 8009cec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cee:	4b12      	ldr	r3, [pc, #72]	; (8009d38 <prvTaskExitError+0x54>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf6:	d00a      	beq.n	8009d0e <prvTaskExitError+0x2a>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	60fb      	str	r3, [r7, #12]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <prvTaskExitError+0x28>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	60bb      	str	r3, [r7, #8]
}
 8009d20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d22:	bf00      	nop
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d0fc      	beq.n	8009d24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	20000088 	.word	0x20000088
 8009d3c:	00000000 	.word	0x00000000

08009d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <pxCurrentTCBConst2>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f380 8809 	msr	PSP, r0
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f04f 0000 	mov.w	r0, #0
 8009d56:	f380 8811 	msr	BASEPRI, r0
 8009d5a:	4770      	bx	lr
 8009d5c:	f3af 8000 	nop.w

08009d60 <pxCurrentTCBConst2>:
 8009d60:	2000493c 	.word	0x2000493c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d68:	4808      	ldr	r0, [pc, #32]	; (8009d8c <prvPortStartFirstTask+0x24>)
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	6800      	ldr	r0, [r0, #0]
 8009d6e:	f380 8808 	msr	MSP, r0
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8814 	msr	CONTROL, r0
 8009d7a:	b662      	cpsie	i
 8009d7c:	b661      	cpsie	f
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	df00      	svc	0
 8009d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d8a:	bf00      	nop
 8009d8c:	e000ed08 	.word	0xe000ed08

08009d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d96:	4b46      	ldr	r3, [pc, #280]	; (8009eb0 <xPortStartScheduler+0x120>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a46      	ldr	r2, [pc, #280]	; (8009eb4 <xPortStartScheduler+0x124>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d10a      	bne.n	8009db6 <xPortStartScheduler+0x26>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009db6:	4b3e      	ldr	r3, [pc, #248]	; (8009eb0 <xPortStartScheduler+0x120>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a3f      	ldr	r2, [pc, #252]	; (8009eb8 <xPortStartScheduler+0x128>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10a      	bne.n	8009dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	60fb      	str	r3, [r7, #12]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dd6:	4b39      	ldr	r3, [pc, #228]	; (8009ebc <xPortStartScheduler+0x12c>)
 8009dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	22ff      	movs	r2, #255	; 0xff
 8009de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	4b31      	ldr	r3, [pc, #196]	; (8009ec0 <xPortStartScheduler+0x130>)
 8009dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dfe:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e00:	2207      	movs	r2, #7
 8009e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e04:	e009      	b.n	8009e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e06:	4b2f      	ldr	r3, [pc, #188]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	4a2d      	ldr	r2, [pc, #180]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e1a:	78fb      	ldrb	r3, [r7, #3]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b80      	cmp	r3, #128	; 0x80
 8009e24:	d0ef      	beq.n	8009e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e26:	4b27      	ldr	r3, [pc, #156]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f1c3 0307 	rsb	r3, r3, #7
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d00a      	beq.n	8009e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60bb      	str	r3, [r7, #8]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e48:	4b1e      	ldr	r3, [pc, #120]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	4a1d      	ldr	r2, [pc, #116]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e52:	4b1c      	ldr	r3, [pc, #112]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e5a:	4a1a      	ldr	r2, [pc, #104]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e66:	4b18      	ldr	r3, [pc, #96]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a14      	ldr	r2, [pc, #80]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e7e:	f000 f8dd 	bl	800a03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e82:	4b12      	ldr	r3, [pc, #72]	; (8009ecc <xPortStartScheduler+0x13c>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e88:	f000 f8fc 	bl	800a084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e8c:	4b10      	ldr	r3, [pc, #64]	; (8009ed0 <xPortStartScheduler+0x140>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a0f      	ldr	r2, [pc, #60]	; (8009ed0 <xPortStartScheduler+0x140>)
 8009e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e98:	f7ff ff66 	bl	8009d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e9c:	f001 f9da 	bl	800b254 <vTaskSwitchContext>
	prvTaskExitError();
 8009ea0:	f7ff ff20 	bl	8009ce4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	e000ed00 	.word	0xe000ed00
 8009eb4:	410fc271 	.word	0x410fc271
 8009eb8:	410fc270 	.word	0x410fc270
 8009ebc:	e000e400 	.word	0xe000e400
 8009ec0:	200048f4 	.word	0x200048f4
 8009ec4:	200048f8 	.word	0x200048f8
 8009ec8:	e000ed20 	.word	0xe000ed20
 8009ecc:	20000088 	.word	0x20000088
 8009ed0:	e000ef34 	.word	0xe000ef34

08009ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	607b      	str	r3, [r7, #4]
}
 8009eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <vPortEnterCritical+0x58>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <vPortEnterCritical+0x58>)
 8009ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ef8:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <vPortEnterCritical+0x58>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d10f      	bne.n	8009f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f00:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <vPortEnterCritical+0x5c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	603b      	str	r3, [r7, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <vPortEnterCritical+0x4a>
	}
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	20000088 	.word	0x20000088
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f3a:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <vPortExitCritical+0x50>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <vPortExitCritical+0x24>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	607b      	str	r3, [r7, #4]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f58:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <vPortExitCritical+0x50>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	4a09      	ldr	r2, [pc, #36]	; (8009f84 <vPortExitCritical+0x50>)
 8009f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f62:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <vPortExitCritical+0x50>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d105      	bne.n	8009f76 <vPortExitCritical+0x42>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	20000088 	.word	0x20000088
	...

08009f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f90:	f3ef 8009 	mrs	r0, PSP
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <pxCurrentTCBConst>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f01e 0f10 	tst.w	lr, #16
 8009fa0:	bf08      	it	eq
 8009fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fb4:	f380 8811 	msr	BASEPRI, r0
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f001 f948 	bl	800b254 <vTaskSwitchContext>
 8009fc4:	f04f 0000 	mov.w	r0, #0
 8009fc8:	f380 8811 	msr	BASEPRI, r0
 8009fcc:	bc09      	pop	{r0, r3}
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	6808      	ldr	r0, [r1, #0]
 8009fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd6:	f01e 0f10 	tst.w	lr, #16
 8009fda:	bf08      	it	eq
 8009fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fe0:	f380 8809 	msr	PSP, r0
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst>:
 8009ff0:	2000493c 	.word	0x2000493c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
}
 800a010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a012:	f001 f865 	bl	800b0e0 <xTaskIncrementTick>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a01c:	4b06      	ldr	r3, [pc, #24]	; (800a038 <xPortSysTickHandler+0x40>)
 800a01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f383 8811 	msr	BASEPRI, r3
}
 800a02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a040:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a046:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <vPortSetupTimerInterrupt+0x38>)
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <vPortSetupTimerInterrupt+0x3c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a0a      	ldr	r2, [pc, #40]	; (800a07c <vPortSetupTimerInterrupt+0x40>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	099b      	lsrs	r3, r3, #6
 800a058:	4a09      	ldr	r2, [pc, #36]	; (800a080 <vPortSetupTimerInterrupt+0x44>)
 800a05a:	3b01      	subs	r3, #1
 800a05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a05e:	4b04      	ldr	r3, [pc, #16]	; (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a060:	2207      	movs	r2, #7
 800a062:	601a      	str	r2, [r3, #0]
}
 800a064:	bf00      	nop
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	e000e010 	.word	0xe000e010
 800a074:	e000e018 	.word	0xe000e018
 800a078:	20000000 	.word	0x20000000
 800a07c:	10624dd3 	.word	0x10624dd3
 800a080:	e000e014 	.word	0xe000e014

0800a084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a094 <vPortEnableVFP+0x10>
 800a088:	6801      	ldr	r1, [r0, #0]
 800a08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a08e:	6001      	str	r1, [r0, #0]
 800a090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a092:	bf00      	nop
 800a094:	e000ed88 	.word	0xe000ed88

0800a098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a09e:	f3ef 8305 	mrs	r3, IPSR
 800a0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b0f      	cmp	r3, #15
 800a0a8:	d914      	bls.n	800a0d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0aa:	4a17      	ldr	r2, [pc, #92]	; (800a108 <vPortValidateInterruptPriority+0x70>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0b4:	4b15      	ldr	r3, [pc, #84]	; (800a10c <vPortValidateInterruptPriority+0x74>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	7afa      	ldrb	r2, [r7, #11]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d20a      	bcs.n	800a0d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	607b      	str	r3, [r7, #4]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0d4:	4b0e      	ldr	r3, [pc, #56]	; (800a110 <vPortValidateInterruptPriority+0x78>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0dc:	4b0d      	ldr	r3, [pc, #52]	; (800a114 <vPortValidateInterruptPriority+0x7c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d90a      	bls.n	800a0fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	603b      	str	r3, [r7, #0]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <vPortValidateInterruptPriority+0x60>
	}
 800a0fa:	bf00      	nop
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	e000e3f0 	.word	0xe000e3f0
 800a10c:	200048f4 	.word	0x200048f4
 800a110:	e000ed0c 	.word	0xe000ed0c
 800a114:	200048f8 	.word	0x200048f8

0800a118 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <xQueueGenericReset+0x2a>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	60bb      	str	r3, [r7, #8]
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a142:	f7ff fec7 	bl	8009ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a152:	fb01 f303 	mul.w	r3, r1, r3
 800a156:	441a      	add	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a172:	3b01      	subs	r3, #1
 800a174:	68f9      	ldr	r1, [r7, #12]
 800a176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a178:	fb01 f303 	mul.w	r3, r1, r3
 800a17c:	441a      	add	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	22ff      	movs	r2, #255	; 0xff
 800a186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	22ff      	movs	r2, #255	; 0xff
 800a18e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d114      	bne.n	800a1c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d01a      	beq.n	800a1d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3310      	adds	r3, #16
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f001 f903 	bl	800b3b0 <xTaskRemoveFromEventList>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d012      	beq.n	800a1d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <xQueueGenericReset+0xcc>)
 800a1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	e009      	b.n	800a1d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3310      	adds	r3, #16
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fca4 	bl	8009b14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3324      	adds	r3, #36	; 0x24
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fc9f 	bl	8009b14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1d6:	f7ff fead 	bl	8009f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a1da:	2301      	movs	r3, #1
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08e      	sub	sp, #56	; 0x38
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10a      	bne.n	800a212 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a20e:	bf00      	nop
 800a210:	e7fe      	b.n	800a210 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <xQueueGenericCreateStatic+0x52>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <xQueueGenericCreateStatic+0x56>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e000      	b.n	800a240 <xQueueGenericCreateStatic+0x58>
 800a23e:	2300      	movs	r3, #0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10a      	bne.n	800a25a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	623b      	str	r3, [r7, #32]
}
 800a256:	bf00      	nop
 800a258:	e7fe      	b.n	800a258 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <xQueueGenericCreateStatic+0x7e>
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <xQueueGenericCreateStatic+0x82>
 800a266:	2301      	movs	r3, #1
 800a268:	e000      	b.n	800a26c <xQueueGenericCreateStatic+0x84>
 800a26a:	2300      	movs	r3, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	61fb      	str	r3, [r7, #28]
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a286:	2350      	movs	r3, #80	; 0x50
 800a288:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b50      	cmp	r3, #80	; 0x50
 800a28e:	d00a      	beq.n	800a2a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	61bb      	str	r3, [r7, #24]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a2a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00d      	beq.n	800a2ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 f805 	bl	800a2d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3730      	adds	r7, #48	; 0x30
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	69ba      	ldr	r2, [r7, #24]
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	e002      	b.n	800a2fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a306:	2101      	movs	r1, #1
 800a308:	69b8      	ldr	r0, [r7, #24]
 800a30a:	f7ff ff05 	bl	800a118 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	78fa      	ldrb	r2, [r7, #3]
 800a312:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a316:	bf00      	nop
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
	...

0800a320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08e      	sub	sp, #56	; 0x38
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a32e:	2300      	movs	r3, #0
 800a330:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <xQueueGenericSend+0x32>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d103      	bne.n	800a360 <xQueueGenericSend+0x40>
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <xQueueGenericSend+0x44>
 800a360:	2301      	movs	r3, #1
 800a362:	e000      	b.n	800a366 <xQueueGenericSend+0x46>
 800a364:	2300      	movs	r3, #0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10a      	bne.n	800a380 <xQueueGenericSend+0x60>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2b02      	cmp	r3, #2
 800a384:	d103      	bne.n	800a38e <xQueueGenericSend+0x6e>
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d101      	bne.n	800a392 <xQueueGenericSend+0x72>
 800a38e:	2301      	movs	r3, #1
 800a390:	e000      	b.n	800a394 <xQueueGenericSend+0x74>
 800a392:	2300      	movs	r3, #0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10a      	bne.n	800a3ae <xQueueGenericSend+0x8e>
	__asm volatile
 800a398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	623b      	str	r3, [r7, #32]
}
 800a3aa:	bf00      	nop
 800a3ac:	e7fe      	b.n	800a3ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3ae:	f001 f9bd 	bl	800b72c <xTaskGetSchedulerState>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d102      	bne.n	800a3be <xQueueGenericSend+0x9e>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <xQueueGenericSend+0xa2>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <xQueueGenericSend+0xa4>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <xQueueGenericSend+0xbe>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	61fb      	str	r3, [r7, #28]
}
 800a3da:	bf00      	nop
 800a3dc:	e7fe      	b.n	800a3dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3de:	f7ff fd79 	bl	8009ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d302      	bcc.n	800a3f4 <xQueueGenericSend+0xd4>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d129      	bne.n	800a448 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	68b9      	ldr	r1, [r7, #8]
 800a3f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3fa:	f000 fa0b 	bl	800a814 <prvCopyDataToQueue>
 800a3fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d010      	beq.n	800a42a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	3324      	adds	r3, #36	; 0x24
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 ffcf 	bl	800b3b0 <xTaskRemoveFromEventList>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d013      	beq.n	800a440 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a418:	4b3f      	ldr	r3, [pc, #252]	; (800a518 <xQueueGenericSend+0x1f8>)
 800a41a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	e00a      	b.n	800a440 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d007      	beq.n	800a440 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a430:	4b39      	ldr	r3, [pc, #228]	; (800a518 <xQueueGenericSend+0x1f8>)
 800a432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a436:	601a      	str	r2, [r3, #0]
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a440:	f7ff fd78 	bl	8009f34 <vPortExitCritical>
				return pdPASS;
 800a444:	2301      	movs	r3, #1
 800a446:	e063      	b.n	800a510 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d103      	bne.n	800a456 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a44e:	f7ff fd71 	bl	8009f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a452:	2300      	movs	r3, #0
 800a454:	e05c      	b.n	800a510 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d106      	bne.n	800a46a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a45c:	f107 0314 	add.w	r3, r7, #20
 800a460:	4618      	mov	r0, r3
 800a462:	f001 f809 	bl	800b478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a466:	2301      	movs	r3, #1
 800a468:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a46a:	f7ff fd63 	bl	8009f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a46e:	f000 fd7b 	bl	800af68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a472:	f7ff fd2f 	bl	8009ed4 <vPortEnterCritical>
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a47c:	b25b      	sxtb	r3, r3
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d103      	bne.n	800a48c <xQueueGenericSend+0x16c>
 800a484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a492:	b25b      	sxtb	r3, r3
 800a494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a498:	d103      	bne.n	800a4a2 <xQueueGenericSend+0x182>
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4a2:	f7ff fd47 	bl	8009f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4a6:	1d3a      	adds	r2, r7, #4
 800a4a8:	f107 0314 	add.w	r3, r7, #20
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 fff8 	bl	800b4a4 <xTaskCheckForTimeOut>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d124      	bne.n	800a504 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4bc:	f000 faa2 	bl	800aa04 <prvIsQueueFull>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d018      	beq.n	800a4f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	3310      	adds	r3, #16
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 ff1e 	bl	800b310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4d6:	f000 fa2d 	bl	800a934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4da:	f000 fd53 	bl	800af84 <xTaskResumeAll>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f47f af7c 	bne.w	800a3de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a4e6:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <xQueueGenericSend+0x1f8>)
 800a4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	e772      	b.n	800a3de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4fa:	f000 fa1b 	bl	800a934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4fe:	f000 fd41 	bl	800af84 <xTaskResumeAll>
 800a502:	e76c      	b.n	800a3de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a506:	f000 fa15 	bl	800a934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a50a:	f000 fd3b 	bl	800af84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a50e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a510:	4618      	mov	r0, r3
 800a512:	3738      	adds	r7, #56	; 0x38
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	e000ed04 	.word	0xe000ed04

0800a51c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b090      	sub	sp, #64	; 0x40
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10a      	bne.n	800a54a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d103      	bne.n	800a558 <xQueueGenericSendFromISR+0x3c>
 800a550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <xQueueGenericSendFromISR+0x40>
 800a558:	2301      	movs	r3, #1
 800a55a:	e000      	b.n	800a55e <xQueueGenericSendFromISR+0x42>
 800a55c:	2300      	movs	r3, #0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10a      	bne.n	800a578 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a574:	bf00      	nop
 800a576:	e7fe      	b.n	800a576 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d103      	bne.n	800a586 <xQueueGenericSendFromISR+0x6a>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a582:	2b01      	cmp	r3, #1
 800a584:	d101      	bne.n	800a58a <xQueueGenericSendFromISR+0x6e>
 800a586:	2301      	movs	r3, #1
 800a588:	e000      	b.n	800a58c <xQueueGenericSendFromISR+0x70>
 800a58a:	2300      	movs	r3, #0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	623b      	str	r3, [r7, #32]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5a6:	f7ff fd77 	bl	800a098 <vPortValidateInterruptPriority>
	__asm volatile
 800a5aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	61fa      	str	r2, [r7, #28]
 800a5c0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a5c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d302      	bcc.n	800a5d8 <xQueueGenericSendFromISR+0xbc>
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d12f      	bne.n	800a638 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	68b9      	ldr	r1, [r7, #8]
 800a5ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5ee:	f000 f911 	bl	800a814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fa:	d112      	bne.n	800a622 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	d016      	beq.n	800a632 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a606:	3324      	adds	r3, #36	; 0x24
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fed1 	bl	800b3b0 <xTaskRemoveFromEventList>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00e      	beq.n	800a632 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00b      	beq.n	800a632 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	e007      	b.n	800a632 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a622:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a626:	3301      	adds	r3, #1
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	b25a      	sxtb	r2, r3
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a632:	2301      	movs	r3, #1
 800a634:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a636:	e001      	b.n	800a63c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a638:	2300      	movs	r3, #0
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f383 8811 	msr	BASEPRI, r3
}
 800a646:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3740      	adds	r7, #64	; 0x40
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08c      	sub	sp, #48	; 0x30
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a660:	2300      	movs	r3, #0
 800a662:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10a      	bne.n	800a684 <xQueueReceive+0x30>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	623b      	str	r3, [r7, #32]
}
 800a680:	bf00      	nop
 800a682:	e7fe      	b.n	800a682 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d103      	bne.n	800a692 <xQueueReceive+0x3e>
 800a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <xQueueReceive+0x42>
 800a692:	2301      	movs	r3, #1
 800a694:	e000      	b.n	800a698 <xQueueReceive+0x44>
 800a696:	2300      	movs	r3, #0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10a      	bne.n	800a6b2 <xQueueReceive+0x5e>
	__asm volatile
 800a69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a0:	f383 8811 	msr	BASEPRI, r3
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	61fb      	str	r3, [r7, #28]
}
 800a6ae:	bf00      	nop
 800a6b0:	e7fe      	b.n	800a6b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b2:	f001 f83b 	bl	800b72c <xTaskGetSchedulerState>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <xQueueReceive+0x6e>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <xQueueReceive+0x72>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e000      	b.n	800a6c8 <xQueueReceive+0x74>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10a      	bne.n	800a6e2 <xQueueReceive+0x8e>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	61bb      	str	r3, [r7, #24]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e2:	f7ff fbf7 	bl	8009ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d01f      	beq.n	800a732 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6f2:	68b9      	ldr	r1, [r7, #8]
 800a6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f6:	f000 f8f7 	bl	800a8e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	1e5a      	subs	r2, r3, #1
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00f      	beq.n	800a72a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70c:	3310      	adds	r3, #16
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fe4e 	bl	800b3b0 <xTaskRemoveFromEventList>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d007      	beq.n	800a72a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a71a:	4b3d      	ldr	r3, [pc, #244]	; (800a810 <xQueueReceive+0x1bc>)
 800a71c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a72a:	f7ff fc03 	bl	8009f34 <vPortExitCritical>
				return pdPASS;
 800a72e:	2301      	movs	r3, #1
 800a730:	e069      	b.n	800a806 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d103      	bne.n	800a740 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a738:	f7ff fbfc 	bl	8009f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a73c:	2300      	movs	r3, #0
 800a73e:	e062      	b.n	800a806 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d106      	bne.n	800a754 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a746:	f107 0310 	add.w	r3, r7, #16
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 fe94 	bl	800b478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a750:	2301      	movs	r3, #1
 800a752:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a754:	f7ff fbee 	bl	8009f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a758:	f000 fc06 	bl	800af68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a75c:	f7ff fbba 	bl	8009ed4 <vPortEnterCritical>
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a766:	b25b      	sxtb	r3, r3
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76c:	d103      	bne.n	800a776 <xQueueReceive+0x122>
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a77c:	b25b      	sxtb	r3, r3
 800a77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a782:	d103      	bne.n	800a78c <xQueueReceive+0x138>
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	2200      	movs	r2, #0
 800a788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a78c:	f7ff fbd2 	bl	8009f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a790:	1d3a      	adds	r2, r7, #4
 800a792:	f107 0310 	add.w	r3, r7, #16
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 fe83 	bl	800b4a4 <xTaskCheckForTimeOut>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d123      	bne.n	800a7ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a6:	f000 f917 	bl	800a9d8 <prvIsQueueEmpty>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d017      	beq.n	800a7e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	3324      	adds	r3, #36	; 0x24
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 fda9 	bl	800b310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7c0:	f000 f8b8 	bl	800a934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7c4:	f000 fbde 	bl	800af84 <xTaskResumeAll>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d189      	bne.n	800a6e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a7ce:	4b10      	ldr	r3, [pc, #64]	; (800a810 <xQueueReceive+0x1bc>)
 800a7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	e780      	b.n	800a6e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e2:	f000 f8a7 	bl	800a934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e6:	f000 fbcd 	bl	800af84 <xTaskResumeAll>
 800a7ea:	e77a      	b.n	800a6e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ee:	f000 f8a1 	bl	800a934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7f2:	f000 fbc7 	bl	800af84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7f8:	f000 f8ee 	bl	800a9d8 <prvIsQueueEmpty>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f43f af6f 	beq.w	800a6e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a804:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a806:	4618      	mov	r0, r3
 800a808:	3730      	adds	r7, #48	; 0x30
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10d      	bne.n	800a84e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d14d      	bne.n	800a8d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 ff92 	bl	800b768 <xTaskPriorityDisinherit>
 800a844:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	609a      	str	r2, [r3, #8]
 800a84c:	e043      	b.n	800a8d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d119      	bne.n	800a888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6858      	ldr	r0, [r3, #4]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85c:	461a      	mov	r2, r3
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	f004 f8a0 	bl	800e9a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86c:	441a      	add	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d32b      	bcc.n	800a8d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	605a      	str	r2, [r3, #4]
 800a886:	e026      	b.n	800a8d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	68d8      	ldr	r0, [r3, #12]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a890:	461a      	mov	r2, r3
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	f004 f886 	bl	800e9a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	68da      	ldr	r2, [r3, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a0:	425b      	negs	r3, r3
 800a8a2:	441a      	add	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68da      	ldr	r2, [r3, #12]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d207      	bcs.n	800a8c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8bc:	425b      	negs	r3, r3
 800a8be:	441a      	add	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d105      	bne.n	800a8d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a8de:	697b      	ldr	r3, [r7, #20]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d018      	beq.n	800a92c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	441a      	add	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	68da      	ldr	r2, [r3, #12]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	429a      	cmp	r2, r3
 800a912:	d303      	bcc.n	800a91c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68d9      	ldr	r1, [r3, #12]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	461a      	mov	r2, r3
 800a926:	6838      	ldr	r0, [r7, #0]
 800a928:	f004 f83c 	bl	800e9a4 <memcpy>
	}
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a93c:	f7ff faca 	bl	8009ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a948:	e011      	b.n	800a96e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d012      	beq.n	800a978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3324      	adds	r3, #36	; 0x24
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fd2a 	bl	800b3b0 <xTaskRemoveFromEventList>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a962:	f000 fe01 	bl	800b568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	3b01      	subs	r3, #1
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dce9      	bgt.n	800a94a <prvUnlockQueue+0x16>
 800a976:	e000      	b.n	800a97a <prvUnlockQueue+0x46>
					break;
 800a978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	22ff      	movs	r2, #255	; 0xff
 800a97e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a982:	f7ff fad7 	bl	8009f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a986:	f7ff faa5 	bl	8009ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a992:	e011      	b.n	800a9b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d012      	beq.n	800a9c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3310      	adds	r3, #16
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 fd05 	bl	800b3b0 <xTaskRemoveFromEventList>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9ac:	f000 fddc 	bl	800b568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dce9      	bgt.n	800a994 <prvUnlockQueue+0x60>
 800a9c0:	e000      	b.n	800a9c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	22ff      	movs	r2, #255	; 0xff
 800a9c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a9cc:	f7ff fab2 	bl	8009f34 <vPortExitCritical>
}
 800a9d0:	bf00      	nop
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9e0:	f7ff fa78 	bl	8009ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d102      	bne.n	800a9f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e001      	b.n	800a9f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9f6:	f7ff fa9d 	bl	8009f34 <vPortExitCritical>

	return xReturn;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa0c:	f7ff fa62 	bl	8009ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d102      	bne.n	800aa22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	e001      	b.n	800aa26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa26:	f7ff fa85 	bl	8009f34 <vPortExitCritical>

	return xReturn;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	e014      	b.n	800aa6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa44:	4a0f      	ldr	r2, [pc, #60]	; (800aa84 <vQueueAddToRegistry+0x50>)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10b      	bne.n	800aa68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa50:	490c      	ldr	r1, [pc, #48]	; (800aa84 <vQueueAddToRegistry+0x50>)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa5a:	4a0a      	ldr	r2, [pc, #40]	; (800aa84 <vQueueAddToRegistry+0x50>)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	4413      	add	r3, r2
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa66:	e006      	b.n	800aa76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b07      	cmp	r3, #7
 800aa72:	d9e7      	bls.n	800aa44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	200048fc 	.word	0x200048fc

0800aa88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa98:	f7ff fa1c 	bl	8009ed4 <vPortEnterCritical>
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaa2:	b25b      	sxtb	r3, r3
 800aaa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa8:	d103      	bne.n	800aab2 <vQueueWaitForMessageRestricted+0x2a>
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aab8:	b25b      	sxtb	r3, r3
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabe:	d103      	bne.n	800aac8 <vQueueWaitForMessageRestricted+0x40>
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aac8:	f7ff fa34 	bl	8009f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d106      	bne.n	800aae2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	3324      	adds	r3, #36	; 0x24
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 fc3b 	bl	800b358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aae2:	6978      	ldr	r0, [r7, #20]
 800aae4:	f7ff ff26 	bl	800a934 <prvUnlockQueue>
	}
 800aae8:	bf00      	nop
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08e      	sub	sp, #56	; 0x38
 800aaf4:	af04      	add	r7, sp, #16
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10a      	bne.n	800ab1a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	623b      	str	r3, [r7, #32]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <xTaskCreateStatic+0x46>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	61fb      	str	r3, [r7, #28]
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab36:	235c      	movs	r3, #92	; 0x5c
 800ab38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b5c      	cmp	r3, #92	; 0x5c
 800ab3e:	d00a      	beq.n	800ab56 <xTaskCreateStatic+0x66>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	61bb      	str	r3, [r7, #24]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d01e      	beq.n	800ab9c <xTaskCreateStatic+0xac>
 800ab5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d01b      	beq.n	800ab9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab70:	2202      	movs	r2, #2
 800ab72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab76:	2300      	movs	r3, #0
 800ab78:	9303      	str	r3, [sp, #12]
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	9302      	str	r3, [sp, #8]
 800ab7e:	f107 0314 	add.w	r3, r7, #20
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	68b9      	ldr	r1, [r7, #8]
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f000 f850 	bl	800ac34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab96:	f000 f8dd 	bl	800ad54 <prvAddNewTaskToReadyList>
 800ab9a:	e001      	b.n	800aba0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aba0:	697b      	ldr	r3, [r7, #20]
	}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3728      	adds	r7, #40	; 0x28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b08c      	sub	sp, #48	; 0x30
 800abae:	af04      	add	r7, sp, #16
 800abb0:	60f8      	str	r0, [r7, #12]
 800abb2:	60b9      	str	r1, [r7, #8]
 800abb4:	603b      	str	r3, [r7, #0]
 800abb6:	4613      	mov	r3, r2
 800abb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abba:	88fb      	ldrh	r3, [r7, #6]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fdbe 	bl	8009740 <pvPortMalloc>
 800abc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00e      	beq.n	800abea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abcc:	205c      	movs	r0, #92	; 0x5c
 800abce:	f7fe fdb7 	bl	8009740 <pvPortMalloc>
 800abd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d003      	beq.n	800abe2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	631a      	str	r2, [r3, #48]	; 0x30
 800abe0:	e005      	b.n	800abee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abe2:	6978      	ldr	r0, [r7, #20]
 800abe4:	f7fe fe78 	bl	80098d8 <vPortFree>
 800abe8:	e001      	b.n	800abee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abea:	2300      	movs	r3, #0
 800abec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d017      	beq.n	800ac24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abfc:	88fa      	ldrh	r2, [r7, #6]
 800abfe:	2300      	movs	r3, #0
 800ac00:	9303      	str	r3, [sp, #12]
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	9302      	str	r3, [sp, #8]
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68b9      	ldr	r1, [r7, #8]
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f000 f80e 	bl	800ac34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac18:	69f8      	ldr	r0, [r7, #28]
 800ac1a:	f000 f89b 	bl	800ad54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	61bb      	str	r3, [r7, #24]
 800ac22:	e002      	b.n	800ac2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac24:	f04f 33ff 	mov.w	r3, #4294967295
 800ac28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac2a:	69bb      	ldr	r3, [r7, #24]
	}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3720      	adds	r7, #32
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b088      	sub	sp, #32
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	21a5      	movs	r1, #165	; 0xa5
 800ac4e:	f003 feb7 	bl	800e9c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	f023 0307 	bic.w	r3, r3, #7
 800ac6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	f003 0307 	and.w	r3, r3, #7
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00a      	beq.n	800ac8c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	617b      	str	r3, [r7, #20]
}
 800ac88:	bf00      	nop
 800ac8a:	e7fe      	b.n	800ac8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d01f      	beq.n	800acd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac92:	2300      	movs	r3, #0
 800ac94:	61fb      	str	r3, [r7, #28]
 800ac96:	e012      	b.n	800acbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	7819      	ldrb	r1, [r3, #0]
 800aca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	3334      	adds	r3, #52	; 0x34
 800aca8:	460a      	mov	r2, r1
 800acaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	4413      	add	r3, r2
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d006      	beq.n	800acc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	3301      	adds	r3, #1
 800acbc:	61fb      	str	r3, [r7, #28]
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	2b0f      	cmp	r3, #15
 800acc2:	d9e9      	bls.n	800ac98 <prvInitialiseNewTask+0x64>
 800acc4:	e000      	b.n	800acc8 <prvInitialiseNewTask+0x94>
			{
				break;
 800acc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	2200      	movs	r2, #0
 800accc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800acd0:	e003      	b.n	800acda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	2b37      	cmp	r3, #55	; 0x37
 800acde:	d901      	bls.n	800ace4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ace0:	2337      	movs	r3, #55	; 0x37
 800ace2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ace8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	2200      	movs	r2, #0
 800acf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	3304      	adds	r3, #4
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe ff2a 	bl	8009b54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad02:	3318      	adds	r3, #24
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fe ff25 	bl	8009b54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad22:	2200      	movs	r2, #0
 800ad24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	68f9      	ldr	r1, [r7, #12]
 800ad32:	69b8      	ldr	r0, [r7, #24]
 800ad34:	f7fe ffa2 	bl	8009c7c <pxPortInitialiseStack>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad4a:	bf00      	nop
 800ad4c:	3720      	adds	r7, #32
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad5c:	f7ff f8ba 	bl	8009ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad60:	4b2d      	ldr	r3, [pc, #180]	; (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	4a2c      	ldr	r2, [pc, #176]	; (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad6a:	4b2c      	ldr	r3, [pc, #176]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d109      	bne.n	800ad86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad72:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad78:	4b27      	ldr	r3, [pc, #156]	; (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d110      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad80:	f000 fc16 	bl	800b5b0 <prvInitialiseTaskLists>
 800ad84:	e00d      	b.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad86:	4b26      	ldr	r3, [pc, #152]	; (800ae20 <prvAddNewTaskToReadyList+0xcc>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad8e:	4b23      	ldr	r3, [pc, #140]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d802      	bhi.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad9c:	4a1f      	ldr	r2, [pc, #124]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ada2:	4b20      	ldr	r3, [pc, #128]	; (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	4a1e      	ldr	r2, [pc, #120]	; (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800adaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adac:	4b1d      	ldr	r3, [pc, #116]	; (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb8:	4b1b      	ldr	r3, [pc, #108]	; (800ae28 <prvAddNewTaskToReadyList+0xd4>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d903      	bls.n	800adc8 <prvAddNewTaskToReadyList+0x74>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a18      	ldr	r2, [pc, #96]	; (800ae28 <prvAddNewTaskToReadyList+0xd4>)
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4a15      	ldr	r2, [pc, #84]	; (800ae2c <prvAddNewTaskToReadyList+0xd8>)
 800add6:	441a      	add	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3304      	adds	r3, #4
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f7fe fec5 	bl	8009b6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ade4:	f7ff f8a6 	bl	8009f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ade8:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <prvAddNewTaskToReadyList+0xcc>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00e      	beq.n	800ae0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adf0:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d207      	bcs.n	800ae0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adfe:	4b0c      	ldr	r3, [pc, #48]	; (800ae30 <prvAddNewTaskToReadyList+0xdc>)
 800ae00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20004e10 	.word	0x20004e10
 800ae1c:	2000493c 	.word	0x2000493c
 800ae20:	20004e1c 	.word	0x20004e1c
 800ae24:	20004e2c 	.word	0x20004e2c
 800ae28:	20004e18 	.word	0x20004e18
 800ae2c:	20004940 	.word	0x20004940
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d017      	beq.n	800ae76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae46:	4b13      	ldr	r3, [pc, #76]	; (800ae94 <vTaskDelay+0x60>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00a      	beq.n	800ae64 <vTaskDelay+0x30>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	60bb      	str	r3, [r7, #8]
}
 800ae60:	bf00      	nop
 800ae62:	e7fe      	b.n	800ae62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae64:	f000 f880 	bl	800af68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae68:	2100      	movs	r1, #0
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fcea 	bl	800b844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae70:	f000 f888 	bl	800af84 <xTaskResumeAll>
 800ae74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d107      	bne.n	800ae8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae7c:	4b06      	ldr	r3, [pc, #24]	; (800ae98 <vTaskDelay+0x64>)
 800ae7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae8c:	bf00      	nop
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20004e38 	.word	0x20004e38
 800ae98:	e000ed04 	.word	0xe000ed04

0800ae9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	; 0x28
 800aea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aeaa:	463a      	mov	r2, r7
 800aeac:	1d39      	adds	r1, r7, #4
 800aeae:	f107 0308 	add.w	r3, r7, #8
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fe fc10 	bl	80096d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	9202      	str	r2, [sp, #8]
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	2300      	movs	r3, #0
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	2300      	movs	r3, #0
 800aec8:	460a      	mov	r2, r1
 800aeca:	4921      	ldr	r1, [pc, #132]	; (800af50 <vTaskStartScheduler+0xb4>)
 800aecc:	4821      	ldr	r0, [pc, #132]	; (800af54 <vTaskStartScheduler+0xb8>)
 800aece:	f7ff fe0f 	bl	800aaf0 <xTaskCreateStatic>
 800aed2:	4603      	mov	r3, r0
 800aed4:	4a20      	ldr	r2, [pc, #128]	; (800af58 <vTaskStartScheduler+0xbc>)
 800aed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aed8:	4b1f      	ldr	r3, [pc, #124]	; (800af58 <vTaskStartScheduler+0xbc>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aee0:	2301      	movs	r3, #1
 800aee2:	617b      	str	r3, [r7, #20]
 800aee4:	e001      	b.n	800aeea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d102      	bne.n	800aef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aef0:	f000 fcfc 	bl	800b8ec <xTimerCreateTimerTask>
 800aef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d116      	bne.n	800af2a <vTaskStartScheduler+0x8e>
	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	613b      	str	r3, [r7, #16]
}
 800af0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af10:	4b12      	ldr	r3, [pc, #72]	; (800af5c <vTaskStartScheduler+0xc0>)
 800af12:	f04f 32ff 	mov.w	r2, #4294967295
 800af16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af18:	4b11      	ldr	r3, [pc, #68]	; (800af60 <vTaskStartScheduler+0xc4>)
 800af1a:	2201      	movs	r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <vTaskStartScheduler+0xc8>)
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af24:	f7fe ff34 	bl	8009d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af28:	e00e      	b.n	800af48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af30:	d10a      	bne.n	800af48 <vTaskStartScheduler+0xac>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	60fb      	str	r3, [r7, #12]
}
 800af44:	bf00      	nop
 800af46:	e7fe      	b.n	800af46 <vTaskStartScheduler+0xaa>
}
 800af48:	bf00      	nop
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	08011800 	.word	0x08011800
 800af54:	0800b581 	.word	0x0800b581
 800af58:	20004e34 	.word	0x20004e34
 800af5c:	20004e30 	.word	0x20004e30
 800af60:	20004e1c 	.word	0x20004e1c
 800af64:	20004e14 	.word	0x20004e14

0800af68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af68:	b480      	push	{r7}
 800af6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af6c:	4b04      	ldr	r3, [pc, #16]	; (800af80 <vTaskSuspendAll+0x18>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3301      	adds	r3, #1
 800af72:	4a03      	ldr	r2, [pc, #12]	; (800af80 <vTaskSuspendAll+0x18>)
 800af74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af76:	bf00      	nop
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	20004e38 	.word	0x20004e38

0800af84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af8e:	2300      	movs	r3, #0
 800af90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af92:	4b42      	ldr	r3, [pc, #264]	; (800b09c <xTaskResumeAll+0x118>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10a      	bne.n	800afb0 <xTaskResumeAll+0x2c>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	603b      	str	r3, [r7, #0]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afb0:	f7fe ff90 	bl	8009ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afb4:	4b39      	ldr	r3, [pc, #228]	; (800b09c <xTaskResumeAll+0x118>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3b01      	subs	r3, #1
 800afba:	4a38      	ldr	r2, [pc, #224]	; (800b09c <xTaskResumeAll+0x118>)
 800afbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afbe:	4b37      	ldr	r3, [pc, #220]	; (800b09c <xTaskResumeAll+0x118>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d162      	bne.n	800b08c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afc6:	4b36      	ldr	r3, [pc, #216]	; (800b0a0 <xTaskResumeAll+0x11c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d05e      	beq.n	800b08c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afce:	e02f      	b.n	800b030 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afd0:	4b34      	ldr	r3, [pc, #208]	; (800b0a4 <xTaskResumeAll+0x120>)
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3318      	adds	r3, #24
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fe fe23 	bl	8009c28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3304      	adds	r3, #4
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fe fe1e 	bl	8009c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff0:	4b2d      	ldr	r3, [pc, #180]	; (800b0a8 <xTaskResumeAll+0x124>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d903      	bls.n	800b000 <xTaskResumeAll+0x7c>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affc:	4a2a      	ldr	r2, [pc, #168]	; (800b0a8 <xTaskResumeAll+0x124>)
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b004:	4613      	mov	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4a27      	ldr	r2, [pc, #156]	; (800b0ac <xTaskResumeAll+0x128>)
 800b00e:	441a      	add	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3304      	adds	r3, #4
 800b014:	4619      	mov	r1, r3
 800b016:	4610      	mov	r0, r2
 800b018:	f7fe fda9 	bl	8009b6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b020:	4b23      	ldr	r3, [pc, #140]	; (800b0b0 <xTaskResumeAll+0x12c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b026:	429a      	cmp	r2, r3
 800b028:	d302      	bcc.n	800b030 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b02a:	4b22      	ldr	r3, [pc, #136]	; (800b0b4 <xTaskResumeAll+0x130>)
 800b02c:	2201      	movs	r2, #1
 800b02e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b030:	4b1c      	ldr	r3, [pc, #112]	; (800b0a4 <xTaskResumeAll+0x120>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1cb      	bne.n	800afd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b03e:	f000 fb55 	bl	800b6ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b042:	4b1d      	ldr	r3, [pc, #116]	; (800b0b8 <xTaskResumeAll+0x134>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d010      	beq.n	800b070 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b04e:	f000 f847 	bl	800b0e0 <xTaskIncrementTick>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b058:	4b16      	ldr	r3, [pc, #88]	; (800b0b4 <xTaskResumeAll+0x130>)
 800b05a:	2201      	movs	r2, #1
 800b05c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	3b01      	subs	r3, #1
 800b062:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1f1      	bne.n	800b04e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b06a:	4b13      	ldr	r3, [pc, #76]	; (800b0b8 <xTaskResumeAll+0x134>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b070:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <xTaskResumeAll+0x130>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d009      	beq.n	800b08c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b078:	2301      	movs	r3, #1
 800b07a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b07c:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <xTaskResumeAll+0x138>)
 800b07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b08c:	f7fe ff52 	bl	8009f34 <vPortExitCritical>

	return xAlreadyYielded;
 800b090:	68bb      	ldr	r3, [r7, #8]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20004e38 	.word	0x20004e38
 800b0a0:	20004e10 	.word	0x20004e10
 800b0a4:	20004dd0 	.word	0x20004dd0
 800b0a8:	20004e18 	.word	0x20004e18
 800b0ac:	20004940 	.word	0x20004940
 800b0b0:	2000493c 	.word	0x2000493c
 800b0b4:	20004e24 	.word	0x20004e24
 800b0b8:	20004e20 	.word	0x20004e20
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0c6:	4b05      	ldr	r3, [pc, #20]	; (800b0dc <xTaskGetTickCount+0x1c>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0cc:	687b      	ldr	r3, [r7, #4]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	370c      	adds	r7, #12
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	20004e14 	.word	0x20004e14

0800b0e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ea:	4b4f      	ldr	r3, [pc, #316]	; (800b228 <xTaskIncrementTick+0x148>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f040 808f 	bne.w	800b212 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0f4:	4b4d      	ldr	r3, [pc, #308]	; (800b22c <xTaskIncrementTick+0x14c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0fc:	4a4b      	ldr	r2, [pc, #300]	; (800b22c <xTaskIncrementTick+0x14c>)
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d120      	bne.n	800b14a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b108:	4b49      	ldr	r3, [pc, #292]	; (800b230 <xTaskIncrementTick+0x150>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00a      	beq.n	800b128 <xTaskIncrementTick+0x48>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	603b      	str	r3, [r7, #0]
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <xTaskIncrementTick+0x46>
 800b128:	4b41      	ldr	r3, [pc, #260]	; (800b230 <xTaskIncrementTick+0x150>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	4b41      	ldr	r3, [pc, #260]	; (800b234 <xTaskIncrementTick+0x154>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a3f      	ldr	r2, [pc, #252]	; (800b230 <xTaskIncrementTick+0x150>)
 800b134:	6013      	str	r3, [r2, #0]
 800b136:	4a3f      	ldr	r2, [pc, #252]	; (800b234 <xTaskIncrementTick+0x154>)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	4b3e      	ldr	r3, [pc, #248]	; (800b238 <xTaskIncrementTick+0x158>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3301      	adds	r3, #1
 800b142:	4a3d      	ldr	r2, [pc, #244]	; (800b238 <xTaskIncrementTick+0x158>)
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	f000 fad1 	bl	800b6ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b14a:	4b3c      	ldr	r3, [pc, #240]	; (800b23c <xTaskIncrementTick+0x15c>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	429a      	cmp	r2, r3
 800b152:	d349      	bcc.n	800b1e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b154:	4b36      	ldr	r3, [pc, #216]	; (800b230 <xTaskIncrementTick+0x150>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d104      	bne.n	800b168 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b15e:	4b37      	ldr	r3, [pc, #220]	; (800b23c <xTaskIncrementTick+0x15c>)
 800b160:	f04f 32ff 	mov.w	r2, #4294967295
 800b164:	601a      	str	r2, [r3, #0]
					break;
 800b166:	e03f      	b.n	800b1e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b168:	4b31      	ldr	r3, [pc, #196]	; (800b230 <xTaskIncrementTick+0x150>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d203      	bcs.n	800b188 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b180:	4a2e      	ldr	r2, [pc, #184]	; (800b23c <xTaskIncrementTick+0x15c>)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b186:	e02f      	b.n	800b1e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fe fd4b 	bl	8009c28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b196:	2b00      	cmp	r3, #0
 800b198:	d004      	beq.n	800b1a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	3318      	adds	r3, #24
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe fd42 	bl	8009c28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a8:	4b25      	ldr	r3, [pc, #148]	; (800b240 <xTaskIncrementTick+0x160>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d903      	bls.n	800b1b8 <xTaskIncrementTick+0xd8>
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b4:	4a22      	ldr	r2, [pc, #136]	; (800b240 <xTaskIncrementTick+0x160>)
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4a1f      	ldr	r2, [pc, #124]	; (800b244 <xTaskIncrementTick+0x164>)
 800b1c6:	441a      	add	r2, r3
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	4610      	mov	r0, r2
 800b1d0:	f7fe fccd 	bl	8009b6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d8:	4b1b      	ldr	r3, [pc, #108]	; (800b248 <xTaskIncrementTick+0x168>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d3b8      	bcc.n	800b154 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1e6:	e7b5      	b.n	800b154 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1e8:	4b17      	ldr	r3, [pc, #92]	; (800b248 <xTaskIncrementTick+0x168>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ee:	4915      	ldr	r1, [pc, #84]	; (800b244 <xTaskIncrementTick+0x164>)
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	440b      	add	r3, r1
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d901      	bls.n	800b204 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b200:	2301      	movs	r3, #1
 800b202:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b204:	4b11      	ldr	r3, [pc, #68]	; (800b24c <xTaskIncrementTick+0x16c>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d007      	beq.n	800b21c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b20c:	2301      	movs	r3, #1
 800b20e:	617b      	str	r3, [r7, #20]
 800b210:	e004      	b.n	800b21c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b212:	4b0f      	ldr	r3, [pc, #60]	; (800b250 <xTaskIncrementTick+0x170>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3301      	adds	r3, #1
 800b218:	4a0d      	ldr	r2, [pc, #52]	; (800b250 <xTaskIncrementTick+0x170>)
 800b21a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b21c:	697b      	ldr	r3, [r7, #20]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20004e38 	.word	0x20004e38
 800b22c:	20004e14 	.word	0x20004e14
 800b230:	20004dc8 	.word	0x20004dc8
 800b234:	20004dcc 	.word	0x20004dcc
 800b238:	20004e28 	.word	0x20004e28
 800b23c:	20004e30 	.word	0x20004e30
 800b240:	20004e18 	.word	0x20004e18
 800b244:	20004940 	.word	0x20004940
 800b248:	2000493c 	.word	0x2000493c
 800b24c:	20004e24 	.word	0x20004e24
 800b250:	20004e20 	.word	0x20004e20

0800b254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b25a:	4b28      	ldr	r3, [pc, #160]	; (800b2fc <vTaskSwitchContext+0xa8>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b262:	4b27      	ldr	r3, [pc, #156]	; (800b300 <vTaskSwitchContext+0xac>)
 800b264:	2201      	movs	r2, #1
 800b266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b268:	e041      	b.n	800b2ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b26a:	4b25      	ldr	r3, [pc, #148]	; (800b300 <vTaskSwitchContext+0xac>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b270:	4b24      	ldr	r3, [pc, #144]	; (800b304 <vTaskSwitchContext+0xb0>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	e010      	b.n	800b29a <vTaskSwitchContext+0x46>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10a      	bne.n	800b294 <vTaskSwitchContext+0x40>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	607b      	str	r3, [r7, #4]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <vTaskSwitchContext+0x3e>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3b01      	subs	r3, #1
 800b298:	60fb      	str	r3, [r7, #12]
 800b29a:	491b      	ldr	r1, [pc, #108]	; (800b308 <vTaskSwitchContext+0xb4>)
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	440b      	add	r3, r1
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0e4      	beq.n	800b278 <vTaskSwitchContext+0x24>
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4a13      	ldr	r2, [pc, #76]	; (800b308 <vTaskSwitchContext+0xb4>)
 800b2ba:	4413      	add	r3, r2
 800b2bc:	60bb      	str	r3, [r7, #8]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	605a      	str	r2, [r3, #4]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d104      	bne.n	800b2de <vTaskSwitchContext+0x8a>
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	605a      	str	r2, [r3, #4]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	4a09      	ldr	r2, [pc, #36]	; (800b30c <vTaskSwitchContext+0xb8>)
 800b2e6:	6013      	str	r3, [r2, #0]
 800b2e8:	4a06      	ldr	r2, [pc, #24]	; (800b304 <vTaskSwitchContext+0xb0>)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6013      	str	r3, [r2, #0]
}
 800b2ee:	bf00      	nop
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	20004e38 	.word	0x20004e38
 800b300:	20004e24 	.word	0x20004e24
 800b304:	20004e18 	.word	0x20004e18
 800b308:	20004940 	.word	0x20004940
 800b30c:	2000493c 	.word	0x2000493c

0800b310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	60fb      	str	r3, [r7, #12]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b336:	4b07      	ldr	r3, [pc, #28]	; (800b354 <vTaskPlaceOnEventList+0x44>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3318      	adds	r3, #24
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7fe fc39 	bl	8009bb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b344:	2101      	movs	r1, #1
 800b346:	6838      	ldr	r0, [r7, #0]
 800b348:	f000 fa7c 	bl	800b844 <prvAddCurrentTaskToDelayedList>
}
 800b34c:	bf00      	nop
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	2000493c 	.word	0x2000493c

0800b358 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	617b      	str	r3, [r7, #20]
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b380:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <vTaskPlaceOnEventListRestricted+0x54>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3318      	adds	r3, #24
 800b386:	4619      	mov	r1, r3
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f7fe fbf0 	bl	8009b6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b394:	f04f 33ff 	mov.w	r3, #4294967295
 800b398:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	68b8      	ldr	r0, [r7, #8]
 800b39e:	f000 fa51 	bl	800b844 <prvAddCurrentTaskToDelayedList>
	}
 800b3a2:	bf00      	nop
 800b3a4:	3718      	adds	r7, #24
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	2000493c 	.word	0x2000493c

0800b3b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10a      	bne.n	800b3dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	60fb      	str	r3, [r7, #12]
}
 800b3d8:	bf00      	nop
 800b3da:	e7fe      	b.n	800b3da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	3318      	adds	r3, #24
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fe fc21 	bl	8009c28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3e6:	4b1e      	ldr	r3, [pc, #120]	; (800b460 <xTaskRemoveFromEventList+0xb0>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d11d      	bne.n	800b42a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe fc18 	bl	8009c28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fc:	4b19      	ldr	r3, [pc, #100]	; (800b464 <xTaskRemoveFromEventList+0xb4>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	429a      	cmp	r2, r3
 800b402:	d903      	bls.n	800b40c <xTaskRemoveFromEventList+0x5c>
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	4a16      	ldr	r2, [pc, #88]	; (800b464 <xTaskRemoveFromEventList+0xb4>)
 800b40a:	6013      	str	r3, [r2, #0]
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4a13      	ldr	r2, [pc, #76]	; (800b468 <xTaskRemoveFromEventList+0xb8>)
 800b41a:	441a      	add	r2, r3
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	3304      	adds	r3, #4
 800b420:	4619      	mov	r1, r3
 800b422:	4610      	mov	r0, r2
 800b424:	f7fe fba3 	bl	8009b6e <vListInsertEnd>
 800b428:	e005      	b.n	800b436 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	3318      	adds	r3, #24
 800b42e:	4619      	mov	r1, r3
 800b430:	480e      	ldr	r0, [pc, #56]	; (800b46c <xTaskRemoveFromEventList+0xbc>)
 800b432:	f7fe fb9c 	bl	8009b6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b43a:	4b0d      	ldr	r3, [pc, #52]	; (800b470 <xTaskRemoveFromEventList+0xc0>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	429a      	cmp	r2, r3
 800b442:	d905      	bls.n	800b450 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b444:	2301      	movs	r3, #1
 800b446:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <xTaskRemoveFromEventList+0xc4>)
 800b44a:	2201      	movs	r2, #1
 800b44c:	601a      	str	r2, [r3, #0]
 800b44e:	e001      	b.n	800b454 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b450:	2300      	movs	r3, #0
 800b452:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b454:	697b      	ldr	r3, [r7, #20]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20004e38 	.word	0x20004e38
 800b464:	20004e18 	.word	0x20004e18
 800b468:	20004940 	.word	0x20004940
 800b46c:	20004dd0 	.word	0x20004dd0
 800b470:	2000493c 	.word	0x2000493c
 800b474:	20004e24 	.word	0x20004e24

0800b478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b480:	4b06      	ldr	r3, [pc, #24]	; (800b49c <vTaskInternalSetTimeOutState+0x24>)
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <vTaskInternalSetTimeOutState+0x28>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	605a      	str	r2, [r3, #4]
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	20004e28 	.word	0x20004e28
 800b4a0:	20004e14 	.word	0x20004e14

0800b4a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10a      	bne.n	800b4ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	613b      	str	r3, [r7, #16]
}
 800b4c6:	bf00      	nop
 800b4c8:	e7fe      	b.n	800b4c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10a      	bne.n	800b4e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	60fb      	str	r3, [r7, #12]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b4e6:	f7fe fcf5 	bl	8009ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4ea:	4b1d      	ldr	r3, [pc, #116]	; (800b560 <xTaskCheckForTimeOut+0xbc>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	69ba      	ldr	r2, [r7, #24]
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b502:	d102      	bne.n	800b50a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b504:	2300      	movs	r3, #0
 800b506:	61fb      	str	r3, [r7, #28]
 800b508:	e023      	b.n	800b552 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	4b15      	ldr	r3, [pc, #84]	; (800b564 <xTaskCheckForTimeOut+0xc0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	429a      	cmp	r2, r3
 800b514:	d007      	beq.n	800b526 <xTaskCheckForTimeOut+0x82>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	69ba      	ldr	r2, [r7, #24]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d302      	bcc.n	800b526 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b520:	2301      	movs	r3, #1
 800b522:	61fb      	str	r3, [r7, #28]
 800b524:	e015      	b.n	800b552 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d20b      	bcs.n	800b548 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	1ad2      	subs	r2, r2, r3
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff ff9b 	bl	800b478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b542:	2300      	movs	r3, #0
 800b544:	61fb      	str	r3, [r7, #28]
 800b546:	e004      	b.n	800b552 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b54e:	2301      	movs	r3, #1
 800b550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b552:	f7fe fcef 	bl	8009f34 <vPortExitCritical>

	return xReturn;
 800b556:	69fb      	ldr	r3, [r7, #28]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3720      	adds	r7, #32
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	20004e14 	.word	0x20004e14
 800b564:	20004e28 	.word	0x20004e28

0800b568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b568:	b480      	push	{r7}
 800b56a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b56c:	4b03      	ldr	r3, [pc, #12]	; (800b57c <vTaskMissedYield+0x14>)
 800b56e:	2201      	movs	r2, #1
 800b570:	601a      	str	r2, [r3, #0]
}
 800b572:	bf00      	nop
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20004e24 	.word	0x20004e24

0800b580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b588:	f000 f852 	bl	800b630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b58c:	4b06      	ldr	r3, [pc, #24]	; (800b5a8 <prvIdleTask+0x28>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d9f9      	bls.n	800b588 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b594:	4b05      	ldr	r3, [pc, #20]	; (800b5ac <prvIdleTask+0x2c>)
 800b596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5a4:	e7f0      	b.n	800b588 <prvIdleTask+0x8>
 800b5a6:	bf00      	nop
 800b5a8:	20004940 	.word	0x20004940
 800b5ac:	e000ed04 	.word	0xe000ed04

0800b5b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	607b      	str	r3, [r7, #4]
 800b5ba:	e00c      	b.n	800b5d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4413      	add	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4a12      	ldr	r2, [pc, #72]	; (800b610 <prvInitialiseTaskLists+0x60>)
 800b5c8:	4413      	add	r3, r2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe faa2 	bl	8009b14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	607b      	str	r3, [r7, #4]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b37      	cmp	r3, #55	; 0x37
 800b5da:	d9ef      	bls.n	800b5bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5dc:	480d      	ldr	r0, [pc, #52]	; (800b614 <prvInitialiseTaskLists+0x64>)
 800b5de:	f7fe fa99 	bl	8009b14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5e2:	480d      	ldr	r0, [pc, #52]	; (800b618 <prvInitialiseTaskLists+0x68>)
 800b5e4:	f7fe fa96 	bl	8009b14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5e8:	480c      	ldr	r0, [pc, #48]	; (800b61c <prvInitialiseTaskLists+0x6c>)
 800b5ea:	f7fe fa93 	bl	8009b14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5ee:	480c      	ldr	r0, [pc, #48]	; (800b620 <prvInitialiseTaskLists+0x70>)
 800b5f0:	f7fe fa90 	bl	8009b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5f4:	480b      	ldr	r0, [pc, #44]	; (800b624 <prvInitialiseTaskLists+0x74>)
 800b5f6:	f7fe fa8d 	bl	8009b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5fa:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <prvInitialiseTaskLists+0x78>)
 800b5fc:	4a05      	ldr	r2, [pc, #20]	; (800b614 <prvInitialiseTaskLists+0x64>)
 800b5fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b600:	4b0a      	ldr	r3, [pc, #40]	; (800b62c <prvInitialiseTaskLists+0x7c>)
 800b602:	4a05      	ldr	r2, [pc, #20]	; (800b618 <prvInitialiseTaskLists+0x68>)
 800b604:	601a      	str	r2, [r3, #0]
}
 800b606:	bf00      	nop
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20004940 	.word	0x20004940
 800b614:	20004da0 	.word	0x20004da0
 800b618:	20004db4 	.word	0x20004db4
 800b61c:	20004dd0 	.word	0x20004dd0
 800b620:	20004de4 	.word	0x20004de4
 800b624:	20004dfc 	.word	0x20004dfc
 800b628:	20004dc8 	.word	0x20004dc8
 800b62c:	20004dcc 	.word	0x20004dcc

0800b630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b636:	e019      	b.n	800b66c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b638:	f7fe fc4c 	bl	8009ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b63c:	4b10      	ldr	r3, [pc, #64]	; (800b680 <prvCheckTasksWaitingTermination+0x50>)
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3304      	adds	r3, #4
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe faed 	bl	8009c28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b64e:	4b0d      	ldr	r3, [pc, #52]	; (800b684 <prvCheckTasksWaitingTermination+0x54>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3b01      	subs	r3, #1
 800b654:	4a0b      	ldr	r2, [pc, #44]	; (800b684 <prvCheckTasksWaitingTermination+0x54>)
 800b656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b658:	4b0b      	ldr	r3, [pc, #44]	; (800b688 <prvCheckTasksWaitingTermination+0x58>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	4a0a      	ldr	r2, [pc, #40]	; (800b688 <prvCheckTasksWaitingTermination+0x58>)
 800b660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b662:	f7fe fc67 	bl	8009f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f810 	bl	800b68c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <prvCheckTasksWaitingTermination+0x58>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1e1      	bne.n	800b638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b674:	bf00      	nop
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	20004de4 	.word	0x20004de4
 800b684:	20004e10 	.word	0x20004e10
 800b688:	20004df8 	.word	0x20004df8

0800b68c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d108      	bne.n	800b6b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fe f918 	bl	80098d8 <vPortFree>
				vPortFree( pxTCB );
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7fe f915 	bl	80098d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6ae:	e018      	b.n	800b6e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d103      	bne.n	800b6c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7fe f90c 	bl	80098d8 <vPortFree>
	}
 800b6c0:	e00f      	b.n	800b6e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d00a      	beq.n	800b6e2 <prvDeleteTCB+0x56>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	60fb      	str	r3, [r7, #12]
}
 800b6de:	bf00      	nop
 800b6e0:	e7fe      	b.n	800b6e0 <prvDeleteTCB+0x54>
	}
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
	...

0800b6ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6f2:	4b0c      	ldr	r3, [pc, #48]	; (800b724 <prvResetNextTaskUnblockTime+0x38>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d104      	bne.n	800b706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	; (800b728 <prvResetNextTaskUnblockTime+0x3c>)
 800b6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b704:	e008      	b.n	800b718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b706:	4b07      	ldr	r3, [pc, #28]	; (800b724 <prvResetNextTaskUnblockTime+0x38>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	4a04      	ldr	r2, [pc, #16]	; (800b728 <prvResetNextTaskUnblockTime+0x3c>)
 800b716:	6013      	str	r3, [r2, #0]
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	20004dc8 	.word	0x20004dc8
 800b728:	20004e30 	.word	0x20004e30

0800b72c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b732:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <xTaskGetSchedulerState+0x34>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d102      	bne.n	800b740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b73a:	2301      	movs	r3, #1
 800b73c:	607b      	str	r3, [r7, #4]
 800b73e:	e008      	b.n	800b752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b740:	4b08      	ldr	r3, [pc, #32]	; (800b764 <xTaskGetSchedulerState+0x38>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d102      	bne.n	800b74e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b748:	2302      	movs	r3, #2
 800b74a:	607b      	str	r3, [r7, #4]
 800b74c:	e001      	b.n	800b752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b74e:	2300      	movs	r3, #0
 800b750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b752:	687b      	ldr	r3, [r7, #4]
	}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	20004e1c 	.word	0x20004e1c
 800b764:	20004e38 	.word	0x20004e38

0800b768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b774:	2300      	movs	r3, #0
 800b776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d056      	beq.n	800b82c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b77e:	4b2e      	ldr	r3, [pc, #184]	; (800b838 <xTaskPriorityDisinherit+0xd0>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	429a      	cmp	r2, r3
 800b786:	d00a      	beq.n	800b79e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	60fb      	str	r3, [r7, #12]
}
 800b79a:	bf00      	nop
 800b79c:	e7fe      	b.n	800b79c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10a      	bne.n	800b7bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60bb      	str	r3, [r7, #8]
}
 800b7b8:	bf00      	nop
 800b7ba:	e7fe      	b.n	800b7ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c0:	1e5a      	subs	r2, r3, #1
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d02c      	beq.n	800b82c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d128      	bne.n	800b82c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fa22 	bl	8009c28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <xTaskPriorityDisinherit+0xd4>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	429a      	cmp	r2, r3
 800b802:	d903      	bls.n	800b80c <xTaskPriorityDisinherit+0xa4>
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	4a0c      	ldr	r2, [pc, #48]	; (800b83c <xTaskPriorityDisinherit+0xd4>)
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b810:	4613      	mov	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4413      	add	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4a09      	ldr	r2, [pc, #36]	; (800b840 <xTaskPriorityDisinherit+0xd8>)
 800b81a:	441a      	add	r2, r3
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	3304      	adds	r3, #4
 800b820:	4619      	mov	r1, r3
 800b822:	4610      	mov	r0, r2
 800b824:	f7fe f9a3 	bl	8009b6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b828:	2301      	movs	r3, #1
 800b82a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b82c:	697b      	ldr	r3, [r7, #20]
	}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	2000493c 	.word	0x2000493c
 800b83c:	20004e18 	.word	0x20004e18
 800b840:	20004940 	.word	0x20004940

0800b844 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b84e:	4b21      	ldr	r3, [pc, #132]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b854:	4b20      	ldr	r3, [pc, #128]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3304      	adds	r3, #4
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe f9e4 	bl	8009c28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b866:	d10a      	bne.n	800b87e <prvAddCurrentTaskToDelayedList+0x3a>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d007      	beq.n	800b87e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b86e:	4b1a      	ldr	r3, [pc, #104]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3304      	adds	r3, #4
 800b874:	4619      	mov	r1, r3
 800b876:	4819      	ldr	r0, [pc, #100]	; (800b8dc <prvAddCurrentTaskToDelayedList+0x98>)
 800b878:	f7fe f979 	bl	8009b6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b87c:	e026      	b.n	800b8cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4413      	add	r3, r2
 800b884:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b886:	4b14      	ldr	r3, [pc, #80]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	429a      	cmp	r2, r3
 800b894:	d209      	bcs.n	800b8aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b896:	4b12      	ldr	r3, [pc, #72]	; (800b8e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f7fe f987 	bl	8009bb6 <vListInsert>
}
 800b8a8:	e010      	b.n	800b8cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8aa:	4b0e      	ldr	r3, [pc, #56]	; (800b8e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	4b0a      	ldr	r3, [pc, #40]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7fe f97d 	bl	8009bb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d202      	bcs.n	800b8cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8c6:	4a08      	ldr	r2, [pc, #32]	; (800b8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	6013      	str	r3, [r2, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	20004e14 	.word	0x20004e14
 800b8d8:	2000493c 	.word	0x2000493c
 800b8dc:	20004dfc 	.word	0x20004dfc
 800b8e0:	20004dcc 	.word	0x20004dcc
 800b8e4:	20004dc8 	.word	0x20004dc8
 800b8e8:	20004e30 	.word	0x20004e30

0800b8ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08a      	sub	sp, #40	; 0x28
 800b8f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8f6:	f000 fb07 	bl	800bf08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8fa:	4b1c      	ldr	r3, [pc, #112]	; (800b96c <xTimerCreateTimerTask+0x80>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d021      	beq.n	800b946 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b90a:	1d3a      	adds	r2, r7, #4
 800b90c:	f107 0108 	add.w	r1, r7, #8
 800b910:	f107 030c 	add.w	r3, r7, #12
 800b914:	4618      	mov	r0, r3
 800b916:	f7fd fef9 	bl	800970c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	9202      	str	r2, [sp, #8]
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	2302      	movs	r3, #2
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	2300      	movs	r3, #0
 800b92a:	460a      	mov	r2, r1
 800b92c:	4910      	ldr	r1, [pc, #64]	; (800b970 <xTimerCreateTimerTask+0x84>)
 800b92e:	4811      	ldr	r0, [pc, #68]	; (800b974 <xTimerCreateTimerTask+0x88>)
 800b930:	f7ff f8de 	bl	800aaf0 <xTaskCreateStatic>
 800b934:	4603      	mov	r3, r0
 800b936:	4a10      	ldr	r2, [pc, #64]	; (800b978 <xTimerCreateTimerTask+0x8c>)
 800b938:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b93a:	4b0f      	ldr	r3, [pc, #60]	; (800b978 <xTimerCreateTimerTask+0x8c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b942:	2301      	movs	r3, #1
 800b944:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10a      	bne.n	800b962 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	613b      	str	r3, [r7, #16]
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b962:	697b      	ldr	r3, [r7, #20]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3718      	adds	r7, #24
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	20004e6c 	.word	0x20004e6c
 800b970:	08011808 	.word	0x08011808
 800b974:	0800bab1 	.word	0x0800bab1
 800b978:	20004e70 	.word	0x20004e70

0800b97c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08a      	sub	sp, #40	; 0x28
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b98a:	2300      	movs	r3, #0
 800b98c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10a      	bne.n	800b9aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	623b      	str	r3, [r7, #32]
}
 800b9a6:	bf00      	nop
 800b9a8:	e7fe      	b.n	800b9a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9aa:	4b1a      	ldr	r3, [pc, #104]	; (800ba14 <xTimerGenericCommand+0x98>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d02a      	beq.n	800ba08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b05      	cmp	r3, #5
 800b9c2:	dc18      	bgt.n	800b9f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9c4:	f7ff feb2 	bl	800b72c <xTaskGetSchedulerState>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d109      	bne.n	800b9e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9ce:	4b11      	ldr	r3, [pc, #68]	; (800ba14 <xTimerGenericCommand+0x98>)
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f107 0110 	add.w	r1, r7, #16
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9da:	f7fe fca1 	bl	800a320 <xQueueGenericSend>
 800b9de:	6278      	str	r0, [r7, #36]	; 0x24
 800b9e0:	e012      	b.n	800ba08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9e2:	4b0c      	ldr	r3, [pc, #48]	; (800ba14 <xTimerGenericCommand+0x98>)
 800b9e4:	6818      	ldr	r0, [r3, #0]
 800b9e6:	f107 0110 	add.w	r1, r7, #16
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f7fe fc97 	bl	800a320 <xQueueGenericSend>
 800b9f2:	6278      	str	r0, [r7, #36]	; 0x24
 800b9f4:	e008      	b.n	800ba08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9f6:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <xTimerGenericCommand+0x98>)
 800b9f8:	6818      	ldr	r0, [r3, #0]
 800b9fa:	f107 0110 	add.w	r1, r7, #16
 800b9fe:	2300      	movs	r3, #0
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	f7fe fd8b 	bl	800a51c <xQueueGenericSendFromISR>
 800ba06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3728      	adds	r7, #40	; 0x28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	20004e6c 	.word	0x20004e6c

0800ba18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af02      	add	r7, sp, #8
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba22:	4b22      	ldr	r3, [pc, #136]	; (800baac <prvProcessExpiredTimer+0x94>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	3304      	adds	r3, #4
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fe f8f9 	bl	8009c28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba3c:	f003 0304 	and.w	r3, r3, #4
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d022      	beq.n	800ba8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	699a      	ldr	r2, [r3, #24]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	18d1      	adds	r1, r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	6978      	ldr	r0, [r7, #20]
 800ba52:	f000 f8d1 	bl	800bbf8 <prvInsertTimerInActiveList>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d01f      	beq.n	800ba9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	2300      	movs	r3, #0
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	2100      	movs	r1, #0
 800ba66:	6978      	ldr	r0, [r7, #20]
 800ba68:	f7ff ff88 	bl	800b97c <xTimerGenericCommand>
 800ba6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d113      	bne.n	800ba9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	60fb      	str	r3, [r7, #12]
}
 800ba86:	bf00      	nop
 800ba88:	e7fe      	b.n	800ba88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba90:	f023 0301 	bic.w	r3, r3, #1
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
 800baa0:	6978      	ldr	r0, [r7, #20]
 800baa2:	4798      	blx	r3
}
 800baa4:	bf00      	nop
 800baa6:	3718      	adds	r7, #24
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20004e64 	.word	0x20004e64

0800bab0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bab8:	f107 0308 	add.w	r3, r7, #8
 800babc:	4618      	mov	r0, r3
 800babe:	f000 f857 	bl	800bb70 <prvGetNextExpireTime>
 800bac2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	4619      	mov	r1, r3
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 f803 	bl	800bad4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bace:	f000 f8d5 	bl	800bc7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bad2:	e7f1      	b.n	800bab8 <prvTimerTask+0x8>

0800bad4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bade:	f7ff fa43 	bl	800af68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bae2:	f107 0308 	add.w	r3, r7, #8
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 f866 	bl	800bbb8 <prvSampleTimeNow>
 800baec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d130      	bne.n	800bb56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10a      	bne.n	800bb10 <prvProcessTimerOrBlockTask+0x3c>
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d806      	bhi.n	800bb10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb02:	f7ff fa3f 	bl	800af84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ff85 	bl	800ba18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb0e:	e024      	b.n	800bb5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d008      	beq.n	800bb28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb16:	4b13      	ldr	r3, [pc, #76]	; (800bb64 <prvProcessTimerOrBlockTask+0x90>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d101      	bne.n	800bb24 <prvProcessTimerOrBlockTask+0x50>
 800bb20:	2301      	movs	r3, #1
 800bb22:	e000      	b.n	800bb26 <prvProcessTimerOrBlockTask+0x52>
 800bb24:	2300      	movs	r3, #0
 800bb26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb28:	4b0f      	ldr	r3, [pc, #60]	; (800bb68 <prvProcessTimerOrBlockTask+0x94>)
 800bb2a:	6818      	ldr	r0, [r3, #0]
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	683a      	ldr	r2, [r7, #0]
 800bb34:	4619      	mov	r1, r3
 800bb36:	f7fe ffa7 	bl	800aa88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb3a:	f7ff fa23 	bl	800af84 <xTaskResumeAll>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb44:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <prvProcessTimerOrBlockTask+0x98>)
 800bb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb4a:	601a      	str	r2, [r3, #0]
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	f3bf 8f6f 	isb	sy
}
 800bb54:	e001      	b.n	800bb5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb56:	f7ff fa15 	bl	800af84 <xTaskResumeAll>
}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20004e68 	.word	0x20004e68
 800bb68:	20004e6c 	.word	0x20004e6c
 800bb6c:	e000ed04 	.word	0xe000ed04

0800bb70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb78:	4b0e      	ldr	r3, [pc, #56]	; (800bbb4 <prvGetNextExpireTime+0x44>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <prvGetNextExpireTime+0x16>
 800bb82:	2201      	movs	r2, #1
 800bb84:	e000      	b.n	800bb88 <prvGetNextExpireTime+0x18>
 800bb86:	2200      	movs	r2, #0
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d105      	bne.n	800bba0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb94:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <prvGetNextExpireTime+0x44>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	e001      	b.n	800bba4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bba0:	2300      	movs	r3, #0
 800bba2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bba4:	68fb      	ldr	r3, [r7, #12]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	20004e64 	.word	0x20004e64

0800bbb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbc0:	f7ff fa7e 	bl	800b0c0 <xTaskGetTickCount>
 800bbc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbc6:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <prvSampleTimeNow+0x3c>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d205      	bcs.n	800bbdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbd0:	f000 f936 	bl	800be40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	e002      	b.n	800bbe2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbe2:	4a04      	ldr	r2, [pc, #16]	; (800bbf4 <prvSampleTimeNow+0x3c>)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20004e74 	.word	0x20004e74

0800bbf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc06:	2300      	movs	r3, #0
 800bc08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d812      	bhi.n	800bc44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	1ad2      	subs	r2, r2, r3
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d302      	bcc.n	800bc32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	617b      	str	r3, [r7, #20]
 800bc30:	e01b      	b.n	800bc6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc32:	4b10      	ldr	r3, [pc, #64]	; (800bc74 <prvInsertTimerInActiveList+0x7c>)
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	3304      	adds	r3, #4
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	4610      	mov	r0, r2
 800bc3e:	f7fd ffba 	bl	8009bb6 <vListInsert>
 800bc42:	e012      	b.n	800bc6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d206      	bcs.n	800bc5a <prvInsertTimerInActiveList+0x62>
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d302      	bcc.n	800bc5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc54:	2301      	movs	r3, #1
 800bc56:	617b      	str	r3, [r7, #20]
 800bc58:	e007      	b.n	800bc6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc5a:	4b07      	ldr	r3, [pc, #28]	; (800bc78 <prvInsertTimerInActiveList+0x80>)
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3304      	adds	r3, #4
 800bc62:	4619      	mov	r1, r3
 800bc64:	4610      	mov	r0, r2
 800bc66:	f7fd ffa6 	bl	8009bb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc6a:	697b      	ldr	r3, [r7, #20]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3718      	adds	r7, #24
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	20004e68 	.word	0x20004e68
 800bc78:	20004e64 	.word	0x20004e64

0800bc7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b08e      	sub	sp, #56	; 0x38
 800bc80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc82:	e0ca      	b.n	800be1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	da18      	bge.n	800bcbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc8a:	1d3b      	adds	r3, r7, #4
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10a      	bne.n	800bcac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	61fb      	str	r3, [r7, #28]
}
 800bca8:	bf00      	nop
 800bcaa:	e7fe      	b.n	800bcaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcb2:	6850      	ldr	r0, [r2, #4]
 800bcb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcb6:	6892      	ldr	r2, [r2, #8]
 800bcb8:	4611      	mov	r1, r2
 800bcba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f2c0 80aa 	blt.w	800be18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d004      	beq.n	800bcda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fd ffa7 	bl	8009c28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcda:	463b      	mov	r3, r7
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff ff6b 	bl	800bbb8 <prvSampleTimeNow>
 800bce2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b09      	cmp	r3, #9
 800bce8:	f200 8097 	bhi.w	800be1a <prvProcessReceivedCommands+0x19e>
 800bcec:	a201      	add	r2, pc, #4	; (adr r2, 800bcf4 <prvProcessReceivedCommands+0x78>)
 800bcee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf2:	bf00      	nop
 800bcf4:	0800bd1d 	.word	0x0800bd1d
 800bcf8:	0800bd1d 	.word	0x0800bd1d
 800bcfc:	0800bd1d 	.word	0x0800bd1d
 800bd00:	0800bd91 	.word	0x0800bd91
 800bd04:	0800bda5 	.word	0x0800bda5
 800bd08:	0800bdef 	.word	0x0800bdef
 800bd0c:	0800bd1d 	.word	0x0800bd1d
 800bd10:	0800bd1d 	.word	0x0800bd1d
 800bd14:	0800bd91 	.word	0x0800bd91
 800bd18:	0800bda5 	.word	0x0800bda5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd22:	f043 0301 	orr.w	r3, r3, #1
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	18d1      	adds	r1, r2, r3
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd3c:	f7ff ff5c 	bl	800bbf8 <prvInsertTimerInActiveList>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d069      	beq.n	800be1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd54:	f003 0304 	and.w	r3, r3, #4
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d05e      	beq.n	800be1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	441a      	add	r2, r3
 800bd64:	2300      	movs	r3, #0
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	2300      	movs	r3, #0
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd6e:	f7ff fe05 	bl	800b97c <xTimerGenericCommand>
 800bd72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d14f      	bne.n	800be1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	61bb      	str	r3, [r7, #24]
}
 800bd8c:	bf00      	nop
 800bd8e:	e7fe      	b.n	800bd8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd96:	f023 0301 	bic.w	r3, r3, #1
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bda2:	e03a      	b.n	800be1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdaa:	f043 0301 	orr.w	r3, r3, #1
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10a      	bne.n	800bdda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	617b      	str	r3, [r7, #20]
}
 800bdd6:	bf00      	nop
 800bdd8:	e7fe      	b.n	800bdd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	699a      	ldr	r2, [r3, #24]
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	18d1      	adds	r1, r2, r3
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde8:	f7ff ff06 	bl	800bbf8 <prvInsertTimerInActiveList>
					break;
 800bdec:	e015      	b.n	800be1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf4:	f003 0302 	and.w	r3, r3, #2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d103      	bne.n	800be04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bdfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdfe:	f7fd fd6b 	bl	80098d8 <vPortFree>
 800be02:	e00a      	b.n	800be1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be0a:	f023 0301 	bic.w	r3, r3, #1
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be16:	e000      	b.n	800be1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be1a:	4b08      	ldr	r3, [pc, #32]	; (800be3c <prvProcessReceivedCommands+0x1c0>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	1d39      	adds	r1, r7, #4
 800be20:	2200      	movs	r2, #0
 800be22:	4618      	mov	r0, r3
 800be24:	f7fe fc16 	bl	800a654 <xQueueReceive>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f47f af2a 	bne.w	800bc84 <prvProcessReceivedCommands+0x8>
	}
}
 800be30:	bf00      	nop
 800be32:	bf00      	nop
 800be34:	3730      	adds	r7, #48	; 0x30
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	20004e6c 	.word	0x20004e6c

0800be40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b088      	sub	sp, #32
 800be44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be46:	e048      	b.n	800beda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be48:	4b2d      	ldr	r3, [pc, #180]	; (800bf00 <prvSwitchTimerLists+0xc0>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be52:	4b2b      	ldr	r3, [pc, #172]	; (800bf00 <prvSwitchTimerLists+0xc0>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	3304      	adds	r3, #4
 800be60:	4618      	mov	r0, r3
 800be62:	f7fd fee1 	bl	8009c28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be74:	f003 0304 	and.w	r3, r3, #4
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d02e      	beq.n	800beda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	4413      	add	r3, r2
 800be84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d90e      	bls.n	800beac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be9a:	4b19      	ldr	r3, [pc, #100]	; (800bf00 <prvSwitchTimerLists+0xc0>)
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3304      	adds	r3, #4
 800bea2:	4619      	mov	r1, r3
 800bea4:	4610      	mov	r0, r2
 800bea6:	f7fd fe86 	bl	8009bb6 <vListInsert>
 800beaa:	e016      	b.n	800beda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800beac:	2300      	movs	r3, #0
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	2300      	movs	r3, #0
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	2100      	movs	r1, #0
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7ff fd60 	bl	800b97c <xTimerGenericCommand>
 800bebc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	603b      	str	r3, [r7, #0]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800beda:	4b09      	ldr	r3, [pc, #36]	; (800bf00 <prvSwitchTimerLists+0xc0>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1b1      	bne.n	800be48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bee4:	4b06      	ldr	r3, [pc, #24]	; (800bf00 <prvSwitchTimerLists+0xc0>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800beea:	4b06      	ldr	r3, [pc, #24]	; (800bf04 <prvSwitchTimerLists+0xc4>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a04      	ldr	r2, [pc, #16]	; (800bf00 <prvSwitchTimerLists+0xc0>)
 800bef0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bef2:	4a04      	ldr	r2, [pc, #16]	; (800bf04 <prvSwitchTimerLists+0xc4>)
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	6013      	str	r3, [r2, #0]
}
 800bef8:	bf00      	nop
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	20004e64 	.word	0x20004e64
 800bf04:	20004e68 	.word	0x20004e68

0800bf08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf0e:	f7fd ffe1 	bl	8009ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf12:	4b15      	ldr	r3, [pc, #84]	; (800bf68 <prvCheckForValidListAndQueue+0x60>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d120      	bne.n	800bf5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf1a:	4814      	ldr	r0, [pc, #80]	; (800bf6c <prvCheckForValidListAndQueue+0x64>)
 800bf1c:	f7fd fdfa 	bl	8009b14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf20:	4813      	ldr	r0, [pc, #76]	; (800bf70 <prvCheckForValidListAndQueue+0x68>)
 800bf22:	f7fd fdf7 	bl	8009b14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf26:	4b13      	ldr	r3, [pc, #76]	; (800bf74 <prvCheckForValidListAndQueue+0x6c>)
 800bf28:	4a10      	ldr	r2, [pc, #64]	; (800bf6c <prvCheckForValidListAndQueue+0x64>)
 800bf2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf2c:	4b12      	ldr	r3, [pc, #72]	; (800bf78 <prvCheckForValidListAndQueue+0x70>)
 800bf2e:	4a10      	ldr	r2, [pc, #64]	; (800bf70 <prvCheckForValidListAndQueue+0x68>)
 800bf30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf32:	2300      	movs	r3, #0
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	4b11      	ldr	r3, [pc, #68]	; (800bf7c <prvCheckForValidListAndQueue+0x74>)
 800bf38:	4a11      	ldr	r2, [pc, #68]	; (800bf80 <prvCheckForValidListAndQueue+0x78>)
 800bf3a:	2110      	movs	r1, #16
 800bf3c:	200a      	movs	r0, #10
 800bf3e:	f7fe f953 	bl	800a1e8 <xQueueGenericCreateStatic>
 800bf42:	4603      	mov	r3, r0
 800bf44:	4a08      	ldr	r2, [pc, #32]	; (800bf68 <prvCheckForValidListAndQueue+0x60>)
 800bf46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf48:	4b07      	ldr	r3, [pc, #28]	; (800bf68 <prvCheckForValidListAndQueue+0x60>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d005      	beq.n	800bf5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf50:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <prvCheckForValidListAndQueue+0x60>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	490b      	ldr	r1, [pc, #44]	; (800bf84 <prvCheckForValidListAndQueue+0x7c>)
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe fd6c 	bl	800aa34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf5c:	f7fd ffea 	bl	8009f34 <vPortExitCritical>
}
 800bf60:	bf00      	nop
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	20004e6c 	.word	0x20004e6c
 800bf6c:	20004e3c 	.word	0x20004e3c
 800bf70:	20004e50 	.word	0x20004e50
 800bf74:	20004e64 	.word	0x20004e64
 800bf78:	20004e68 	.word	0x20004e68
 800bf7c:	20004f18 	.word	0x20004f18
 800bf80:	20004e78 	.word	0x20004e78
 800bf84:	08011810 	.word	0x08011810

0800bf88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bf98:	f002 fc96 	bl	800e8c8 <USBD_static_malloc>
 800bf9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d109      	bne.n	800bfb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	32b0      	adds	r2, #176	; 0xb0
 800bfae:	2100      	movs	r1, #0
 800bfb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	e0d4      	b.n	800c162 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bfb8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f002 fcfe 	bl	800e9c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	32b0      	adds	r2, #176	; 0xb0
 800bfce:	68f9      	ldr	r1, [r7, #12]
 800bfd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	32b0      	adds	r2, #176	; 0xb0
 800bfde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	7c1b      	ldrb	r3, [r3, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d138      	bne.n	800c062 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bff0:	4b5e      	ldr	r3, [pc, #376]	; (800c16c <USBD_CDC_Init+0x1e4>)
 800bff2:	7819      	ldrb	r1, [r3, #0]
 800bff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bff8:	2202      	movs	r2, #2
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f002 fb41 	bl	800e682 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c000:	4b5a      	ldr	r3, [pc, #360]	; (800c16c <USBD_CDC_Init+0x1e4>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	f003 020f 	and.w	r2, r3, #15
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	4613      	mov	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	440b      	add	r3, r1
 800c014:	3324      	adds	r3, #36	; 0x24
 800c016:	2201      	movs	r2, #1
 800c018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c01a:	4b55      	ldr	r3, [pc, #340]	; (800c170 <USBD_CDC_Init+0x1e8>)
 800c01c:	7819      	ldrb	r1, [r3, #0]
 800c01e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c022:	2202      	movs	r2, #2
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f002 fb2c 	bl	800e682 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c02a:	4b51      	ldr	r3, [pc, #324]	; (800c170 <USBD_CDC_Init+0x1e8>)
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	f003 020f 	and.w	r2, r3, #15
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	4613      	mov	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	440b      	add	r3, r1
 800c03e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c042:	2201      	movs	r2, #1
 800c044:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c046:	4b4b      	ldr	r3, [pc, #300]	; (800c174 <USBD_CDC_Init+0x1ec>)
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	f003 020f 	and.w	r2, r3, #15
 800c04e:	6879      	ldr	r1, [r7, #4]
 800c050:	4613      	mov	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	440b      	add	r3, r1
 800c05a:	3326      	adds	r3, #38	; 0x26
 800c05c:	2210      	movs	r2, #16
 800c05e:	801a      	strh	r2, [r3, #0]
 800c060:	e035      	b.n	800c0ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c062:	4b42      	ldr	r3, [pc, #264]	; (800c16c <USBD_CDC_Init+0x1e4>)
 800c064:	7819      	ldrb	r1, [r3, #0]
 800c066:	2340      	movs	r3, #64	; 0x40
 800c068:	2202      	movs	r2, #2
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f002 fb09 	bl	800e682 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c070:	4b3e      	ldr	r3, [pc, #248]	; (800c16c <USBD_CDC_Init+0x1e4>)
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	f003 020f 	and.w	r2, r3, #15
 800c078:	6879      	ldr	r1, [r7, #4]
 800c07a:	4613      	mov	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	440b      	add	r3, r1
 800c084:	3324      	adds	r3, #36	; 0x24
 800c086:	2201      	movs	r2, #1
 800c088:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c08a:	4b39      	ldr	r3, [pc, #228]	; (800c170 <USBD_CDC_Init+0x1e8>)
 800c08c:	7819      	ldrb	r1, [r3, #0]
 800c08e:	2340      	movs	r3, #64	; 0x40
 800c090:	2202      	movs	r2, #2
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f002 faf5 	bl	800e682 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c098:	4b35      	ldr	r3, [pc, #212]	; (800c170 <USBD_CDC_Init+0x1e8>)
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	f003 020f 	and.w	r2, r3, #15
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c0b4:	4b2f      	ldr	r3, [pc, #188]	; (800c174 <USBD_CDC_Init+0x1ec>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	f003 020f 	and.w	r2, r3, #15
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	440b      	add	r3, r1
 800c0c8:	3326      	adds	r3, #38	; 0x26
 800c0ca:	2210      	movs	r2, #16
 800c0cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c0ce:	4b29      	ldr	r3, [pc, #164]	; (800c174 <USBD_CDC_Init+0x1ec>)
 800c0d0:	7819      	ldrb	r1, [r3, #0]
 800c0d2:	2308      	movs	r3, #8
 800c0d4:	2203      	movs	r2, #3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f002 fad3 	bl	800e682 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c0dc:	4b25      	ldr	r3, [pc, #148]	; (800c174 <USBD_CDC_Init+0x1ec>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	f003 020f 	and.w	r2, r3, #15
 800c0e4:	6879      	ldr	r1, [r7, #4]
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4413      	add	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	440b      	add	r3, r1
 800c0f0:	3324      	adds	r3, #36	; 0x24
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	33b0      	adds	r3, #176	; 0xb0
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c12c:	2302      	movs	r3, #2
 800c12e:	e018      	b.n	800c162 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	7c1b      	ldrb	r3, [r3, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10a      	bne.n	800c14e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c138:	4b0d      	ldr	r3, [pc, #52]	; (800c170 <USBD_CDC_Init+0x1e8>)
 800c13a:	7819      	ldrb	r1, [r3, #0]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c142:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f002 fb8a 	bl	800e860 <USBD_LL_PrepareReceive>
 800c14c:	e008      	b.n	800c160 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c14e:	4b08      	ldr	r3, [pc, #32]	; (800c170 <USBD_CDC_Init+0x1e8>)
 800c150:	7819      	ldrb	r1, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c158:	2340      	movs	r3, #64	; 0x40
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f002 fb80 	bl	800e860 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c160:	2300      	movs	r3, #0
}
 800c162:	4618      	mov	r0, r3
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20000113 	.word	0x20000113
 800c170:	20000114 	.word	0x20000114
 800c174:	20000115 	.word	0x20000115

0800c178 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c184:	4b3a      	ldr	r3, [pc, #232]	; (800c270 <USBD_CDC_DeInit+0xf8>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f002 fa9f 	bl	800e6ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c190:	4b37      	ldr	r3, [pc, #220]	; (800c270 <USBD_CDC_DeInit+0xf8>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	f003 020f 	and.w	r2, r3, #15
 800c198:	6879      	ldr	r1, [r7, #4]
 800c19a:	4613      	mov	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	440b      	add	r3, r1
 800c1a4:	3324      	adds	r3, #36	; 0x24
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c1aa:	4b32      	ldr	r3, [pc, #200]	; (800c274 <USBD_CDC_DeInit+0xfc>)
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f002 fa8c 	bl	800e6ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c1b6:	4b2f      	ldr	r3, [pc, #188]	; (800c274 <USBD_CDC_DeInit+0xfc>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	f003 020f 	and.w	r2, r3, #15
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	440b      	add	r3, r1
 800c1ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c1d2:	4b29      	ldr	r3, [pc, #164]	; (800c278 <USBD_CDC_DeInit+0x100>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f002 fa78 	bl	800e6ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c1de:	4b26      	ldr	r3, [pc, #152]	; (800c278 <USBD_CDC_DeInit+0x100>)
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	f003 020f 	and.w	r2, r3, #15
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	440b      	add	r3, r1
 800c1f2:	3324      	adds	r3, #36	; 0x24
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c1f8:	4b1f      	ldr	r3, [pc, #124]	; (800c278 <USBD_CDC_DeInit+0x100>)
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	f003 020f 	and.w	r2, r3, #15
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	440b      	add	r3, r1
 800c20c:	3326      	adds	r3, #38	; 0x26
 800c20e:	2200      	movs	r2, #0
 800c210:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	32b0      	adds	r2, #176	; 0xb0
 800c21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d01f      	beq.n	800c264 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	33b0      	adds	r3, #176	; 0xb0
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	32b0      	adds	r2, #176	; 0xb0
 800c242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c246:	4618      	mov	r0, r3
 800c248:	f002 fb4c 	bl	800e8e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	32b0      	adds	r2, #176	; 0xb0
 800c256:	2100      	movs	r1, #0
 800c258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20000113 	.word	0x20000113
 800c274:	20000114 	.word	0x20000114
 800c278:	20000115 	.word	0x20000115

0800c27c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	32b0      	adds	r2, #176	; 0xb0
 800c290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c294:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e0bf      	b.n	800c42c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d050      	beq.n	800c35a <USBD_CDC_Setup+0xde>
 800c2b8:	2b20      	cmp	r3, #32
 800c2ba:	f040 80af 	bne.w	800c41c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	88db      	ldrh	r3, [r3, #6]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d03a      	beq.n	800c33c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	b25b      	sxtb	r3, r3
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	da1b      	bge.n	800c308 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	33b0      	adds	r3, #176	; 0xb0
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	4413      	add	r3, r2
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c2e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	88d2      	ldrh	r2, [r2, #6]
 800c2ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	88db      	ldrh	r3, [r3, #6]
 800c2f2:	2b07      	cmp	r3, #7
 800c2f4:	bf28      	it	cs
 800c2f6:	2307      	movcs	r3, #7
 800c2f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	89fa      	ldrh	r2, [r7, #14]
 800c2fe:	4619      	mov	r1, r3
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f001 fd89 	bl	800de18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c306:	e090      	b.n	800c42a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	785a      	ldrb	r2, [r3, #1]
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	88db      	ldrh	r3, [r3, #6]
 800c316:	2b3f      	cmp	r3, #63	; 0x3f
 800c318:	d803      	bhi.n	800c322 <USBD_CDC_Setup+0xa6>
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	88db      	ldrh	r3, [r3, #6]
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	e000      	b.n	800c324 <USBD_CDC_Setup+0xa8>
 800c322:	2240      	movs	r2, #64	; 0x40
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c32a:	6939      	ldr	r1, [r7, #16]
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c332:	461a      	mov	r2, r3
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f001 fd9b 	bl	800de70 <USBD_CtlPrepareRx>
      break;
 800c33a:	e076      	b.n	800c42a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	33b0      	adds	r3, #176	; 0xb0
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	683a      	ldr	r2, [r7, #0]
 800c350:	7850      	ldrb	r0, [r2, #1]
 800c352:	2200      	movs	r2, #0
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	4798      	blx	r3
      break;
 800c358:	e067      	b.n	800c42a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	785b      	ldrb	r3, [r3, #1]
 800c35e:	2b0b      	cmp	r3, #11
 800c360:	d851      	bhi.n	800c406 <USBD_CDC_Setup+0x18a>
 800c362:	a201      	add	r2, pc, #4	; (adr r2, 800c368 <USBD_CDC_Setup+0xec>)
 800c364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c368:	0800c399 	.word	0x0800c399
 800c36c:	0800c415 	.word	0x0800c415
 800c370:	0800c407 	.word	0x0800c407
 800c374:	0800c407 	.word	0x0800c407
 800c378:	0800c407 	.word	0x0800c407
 800c37c:	0800c407 	.word	0x0800c407
 800c380:	0800c407 	.word	0x0800c407
 800c384:	0800c407 	.word	0x0800c407
 800c388:	0800c407 	.word	0x0800c407
 800c38c:	0800c407 	.word	0x0800c407
 800c390:	0800c3c3 	.word	0x0800c3c3
 800c394:	0800c3ed 	.word	0x0800c3ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b03      	cmp	r3, #3
 800c3a2:	d107      	bne.n	800c3b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c3a4:	f107 030a 	add.w	r3, r7, #10
 800c3a8:	2202      	movs	r2, #2
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f001 fd33 	bl	800de18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3b2:	e032      	b.n	800c41a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3b4:	6839      	ldr	r1, [r7, #0]
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f001 fcbd 	bl	800dd36 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	75fb      	strb	r3, [r7, #23]
          break;
 800c3c0:	e02b      	b.n	800c41a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d107      	bne.n	800c3de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c3ce:	f107 030d 	add.w	r3, r7, #13
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f001 fd1e 	bl	800de18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3dc:	e01d      	b.n	800c41a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f001 fca8 	bl	800dd36 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	75fb      	strb	r3, [r7, #23]
          break;
 800c3ea:	e016      	b.n	800c41a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d00f      	beq.n	800c418 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c3f8:	6839      	ldr	r1, [r7, #0]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f001 fc9b 	bl	800dd36 <USBD_CtlError>
            ret = USBD_FAIL;
 800c400:	2303      	movs	r3, #3
 800c402:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c404:	e008      	b.n	800c418 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f001 fc94 	bl	800dd36 <USBD_CtlError>
          ret = USBD_FAIL;
 800c40e:	2303      	movs	r3, #3
 800c410:	75fb      	strb	r3, [r7, #23]
          break;
 800c412:	e002      	b.n	800c41a <USBD_CDC_Setup+0x19e>
          break;
 800c414:	bf00      	nop
 800c416:	e008      	b.n	800c42a <USBD_CDC_Setup+0x1ae>
          break;
 800c418:	bf00      	nop
      }
      break;
 800c41a:	e006      	b.n	800c42a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f001 fc89 	bl	800dd36 <USBD_CtlError>
      ret = USBD_FAIL;
 800c424:	2303      	movs	r3, #3
 800c426:	75fb      	strb	r3, [r7, #23]
      break;
 800c428:	bf00      	nop
  }

  return (uint8_t)ret;
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3718      	adds	r7, #24
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	460b      	mov	r3, r1
 800c43e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	32b0      	adds	r2, #176	; 0xb0
 800c452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c45a:	2303      	movs	r3, #3
 800c45c:	e065      	b.n	800c52a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	32b0      	adds	r2, #176	; 0xb0
 800c468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c46c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c46e:	78fb      	ldrb	r3, [r7, #3]
 800c470:	f003 020f 	and.w	r2, r3, #15
 800c474:	6879      	ldr	r1, [r7, #4]
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	440b      	add	r3, r1
 800c480:	3318      	adds	r3, #24
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d02f      	beq.n	800c4e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c488:	78fb      	ldrb	r3, [r7, #3]
 800c48a:	f003 020f 	and.w	r2, r3, #15
 800c48e:	6879      	ldr	r1, [r7, #4]
 800c490:	4613      	mov	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	4413      	add	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	440b      	add	r3, r1
 800c49a:	3318      	adds	r3, #24
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	78fb      	ldrb	r3, [r7, #3]
 800c4a0:	f003 010f 	and.w	r1, r3, #15
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	440b      	add	r3, r1
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4403      	add	r3, r0
 800c4b0:	3348      	adds	r3, #72	; 0x48
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c4b8:	fb01 f303 	mul.w	r3, r1, r3
 800c4bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d112      	bne.n	800c4e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c4c2:	78fb      	ldrb	r3, [r7, #3]
 800c4c4:	f003 020f 	and.w	r2, r3, #15
 800c4c8:	6879      	ldr	r1, [r7, #4]
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	440b      	add	r3, r1
 800c4d4:	3318      	adds	r3, #24
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c4da:	78f9      	ldrb	r1, [r7, #3]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	2200      	movs	r2, #0
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f002 f99c 	bl	800e81e <USBD_LL_Transmit>
 800c4e6:	e01f      	b.n	800c528 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	33b0      	adds	r3, #176	; 0xb0
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d010      	beq.n	800c528 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	33b0      	adds	r3, #176	; 0xb0
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	4413      	add	r3, r2
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c524:	78fa      	ldrb	r2, [r7, #3]
 800c526:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b084      	sub	sp, #16
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	460b      	mov	r3, r1
 800c53c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	32b0      	adds	r2, #176	; 0xb0
 800c548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	32b0      	adds	r2, #176	; 0xb0
 800c558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c560:	2303      	movs	r3, #3
 800c562:	e01a      	b.n	800c59a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c564:	78fb      	ldrb	r3, [r7, #3]
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f002 f99a 	bl	800e8a2 <USBD_LL_GetRxDataSize>
 800c56e:	4602      	mov	r2, r0
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	33b0      	adds	r3, #176	; 0xb0
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c594:	4611      	mov	r1, r2
 800c596:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b084      	sub	sp, #16
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	32b0      	adds	r2, #176	; 0xb0
 800c5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d101      	bne.n	800c5c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	e025      	b.n	800c610 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	33b0      	adds	r3, #176	; 0xb0
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4413      	add	r3, r2
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d01a      	beq.n	800c60e <USBD_CDC_EP0_RxReady+0x6c>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c5de:	2bff      	cmp	r3, #255	; 0xff
 800c5e0:	d015      	beq.n	800c60e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	33b0      	adds	r3, #176	; 0xb0
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c5fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c602:	b292      	uxth	r2, r2
 800c604:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	22ff      	movs	r2, #255	; 0xff
 800c60a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b086      	sub	sp, #24
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c620:	2182      	movs	r1, #130	; 0x82
 800c622:	4818      	ldr	r0, [pc, #96]	; (800c684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c624:	f000 fd4f 	bl	800d0c6 <USBD_GetEpDesc>
 800c628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c62a:	2101      	movs	r1, #1
 800c62c:	4815      	ldr	r0, [pc, #84]	; (800c684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c62e:	f000 fd4a 	bl	800d0c6 <USBD_GetEpDesc>
 800c632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c634:	2181      	movs	r1, #129	; 0x81
 800c636:	4813      	ldr	r0, [pc, #76]	; (800c684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c638:	f000 fd45 	bl	800d0c6 <USBD_GetEpDesc>
 800c63c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d002      	beq.n	800c64a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	2210      	movs	r2, #16
 800c648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2200      	movs	r2, #0
 800c654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c658:	711a      	strb	r2, [r3, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d006      	beq.n	800c672 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2200      	movs	r2, #0
 800c668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c66c:	711a      	strb	r2, [r3, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2243      	movs	r2, #67	; 0x43
 800c676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c678:	4b02      	ldr	r3, [pc, #8]	; (800c684 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3718      	adds	r7, #24
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	200000d0 	.word	0x200000d0

0800c688 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c690:	2182      	movs	r1, #130	; 0x82
 800c692:	4818      	ldr	r0, [pc, #96]	; (800c6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c694:	f000 fd17 	bl	800d0c6 <USBD_GetEpDesc>
 800c698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c69a:	2101      	movs	r1, #1
 800c69c:	4815      	ldr	r0, [pc, #84]	; (800c6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c69e:	f000 fd12 	bl	800d0c6 <USBD_GetEpDesc>
 800c6a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c6a4:	2181      	movs	r1, #129	; 0x81
 800c6a6:	4813      	ldr	r0, [pc, #76]	; (800c6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c6a8:	f000 fd0d 	bl	800d0c6 <USBD_GetEpDesc>
 800c6ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2210      	movs	r2, #16
 800c6b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d006      	beq.n	800c6ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	711a      	strb	r2, [r3, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f042 0202 	orr.w	r2, r2, #2
 800c6cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d006      	beq.n	800c6e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	711a      	strb	r2, [r3, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f042 0202 	orr.w	r2, r2, #2
 800c6e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2243      	movs	r2, #67	; 0x43
 800c6e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6e8:	4b02      	ldr	r3, [pc, #8]	; (800c6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	200000d0 	.word	0x200000d0

0800c6f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c700:	2182      	movs	r1, #130	; 0x82
 800c702:	4818      	ldr	r0, [pc, #96]	; (800c764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c704:	f000 fcdf 	bl	800d0c6 <USBD_GetEpDesc>
 800c708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c70a:	2101      	movs	r1, #1
 800c70c:	4815      	ldr	r0, [pc, #84]	; (800c764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c70e:	f000 fcda 	bl	800d0c6 <USBD_GetEpDesc>
 800c712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c714:	2181      	movs	r1, #129	; 0x81
 800c716:	4813      	ldr	r0, [pc, #76]	; (800c764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c718:	f000 fcd5 	bl	800d0c6 <USBD_GetEpDesc>
 800c71c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	2210      	movs	r2, #16
 800c728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d006      	beq.n	800c73e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	2200      	movs	r2, #0
 800c734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c738:	711a      	strb	r2, [r3, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d006      	beq.n	800c752 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c74c:	711a      	strb	r2, [r3, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2243      	movs	r2, #67	; 0x43
 800c756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c758:	4b02      	ldr	r3, [pc, #8]	; (800c764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	200000d0 	.word	0x200000d0

0800c768 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	220a      	movs	r2, #10
 800c774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c776:	4b03      	ldr	r3, [pc, #12]	; (800c784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c778:	4618      	mov	r0, r3
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr
 800c784:	2000008c 	.word	0x2000008c

0800c788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c798:	2303      	movs	r3, #3
 800c79a:	e009      	b.n	800c7b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	33b0      	adds	r3, #176	; 0xb0
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b087      	sub	sp, #28
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	32b0      	adds	r2, #176	; 0xb0
 800c7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	e008      	b.n	800c7f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	371c      	adds	r7, #28
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	32b0      	adds	r2, #176	; 0xb0
 800c814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c820:	2303      	movs	r3, #3
 800c822:	e004      	b.n	800c82e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
	...

0800c83c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	32b0      	adds	r2, #176	; 0xb0
 800c84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c852:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c854:	2301      	movs	r3, #1
 800c856:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	32b0      	adds	r2, #176	; 0xb0
 800c862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c86a:	2303      	movs	r3, #3
 800c86c:	e025      	b.n	800c8ba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c874:	2b00      	cmp	r3, #0
 800c876:	d11f      	bne.n	800c8b8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c880:	4b10      	ldr	r3, [pc, #64]	; (800c8c4 <USBD_CDC_TransmitPacket+0x88>)
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	f003 020f 	and.w	r2, r3, #15
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	4613      	mov	r3, r2
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4413      	add	r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4403      	add	r3, r0
 800c89a:	3318      	adds	r3, #24
 800c89c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c89e:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <USBD_CDC_TransmitPacket+0x88>)
 800c8a0:	7819      	ldrb	r1, [r3, #0]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f001 ffb5 	bl	800e81e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	20000113 	.word	0x20000113

0800c8c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	32b0      	adds	r2, #176	; 0xb0
 800c8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	32b0      	adds	r2, #176	; 0xb0
 800c8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d101      	bne.n	800c8f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c8f2:	2303      	movs	r3, #3
 800c8f4:	e018      	b.n	800c928 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	7c1b      	ldrb	r3, [r3, #16]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d10a      	bne.n	800c914 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8fe:	4b0c      	ldr	r3, [pc, #48]	; (800c930 <USBD_CDC_ReceivePacket+0x68>)
 800c900:	7819      	ldrb	r1, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f001 ffa7 	bl	800e860 <USBD_LL_PrepareReceive>
 800c912:	e008      	b.n	800c926 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c914:	4b06      	ldr	r3, [pc, #24]	; (800c930 <USBD_CDC_ReceivePacket+0x68>)
 800c916:	7819      	ldrb	r1, [r3, #0]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c91e:	2340      	movs	r3, #64	; 0x40
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f001 ff9d 	bl	800e860 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20000114 	.word	0x20000114

0800c934 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	4613      	mov	r3, r2
 800c940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c948:	2303      	movs	r3, #3
 800c94a:	e01f      	b.n	800c98c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2200      	movs	r2, #0
 800c960:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d003      	beq.n	800c972 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	79fa      	ldrb	r2, [r7, #7]
 800c97e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f001 fe11 	bl	800e5a8 <USBD_LL_Init>
 800c986:	4603      	mov	r3, r0
 800c988:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3718      	adds	r7, #24
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	e025      	b.n	800c9f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	32ae      	adds	r2, #174	; 0xae
 800c9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00f      	beq.n	800c9e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	32ae      	adds	r2, #174	; 0xae
 800c9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d8:	f107 020e 	add.w	r2, r7, #14
 800c9dc:	4610      	mov	r0, r2
 800c9de:	4798      	blx	r3
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f001 fe1f 	bl	800e64c <USBD_LL_Start>
 800ca0e:	4603      	mov	r3, r0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b084      	sub	sp, #16
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	460b      	mov	r3, r1
 800ca38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d009      	beq.n	800ca5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	78fa      	ldrb	r2, [r7, #3]
 800ca52:	4611      	mov	r1, r2
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	4798      	blx	r3
 800ca58:	4603      	mov	r3, r0
 800ca5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca72:	2300      	movs	r3, #0
 800ca74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	78fa      	ldrb	r2, [r7, #3]
 800ca80:	4611      	mov	r1, r2
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	4798      	blx	r3
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b084      	sub	sp, #16
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	4618      	mov	r0, r3
 800caae:	f001 f908 	bl	800dcc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cac0:	461a      	mov	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cace:	f003 031f 	and.w	r3, r3, #31
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d01a      	beq.n	800cb0c <USBD_LL_SetupStage+0x72>
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d822      	bhi.n	800cb20 <USBD_LL_SetupStage+0x86>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <USBD_LL_SetupStage+0x4a>
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d00a      	beq.n	800caf8 <USBD_LL_SetupStage+0x5e>
 800cae2:	e01d      	b.n	800cb20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 fb5f 	bl	800d1b0 <USBD_StdDevReq>
 800caf2:	4603      	mov	r3, r0
 800caf4:	73fb      	strb	r3, [r7, #15]
      break;
 800caf6:	e020      	b.n	800cb3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cafe:	4619      	mov	r1, r3
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 fbc7 	bl	800d294 <USBD_StdItfReq>
 800cb06:	4603      	mov	r3, r0
 800cb08:	73fb      	strb	r3, [r7, #15]
      break;
 800cb0a:	e016      	b.n	800cb3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb12:	4619      	mov	r1, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fc29 	bl	800d36c <USBD_StdEPReq>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb1e:	e00c      	b.n	800cb3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cb26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f001 fdec 	bl	800e70c <USBD_LL_StallEP>
 800cb34:	4603      	mov	r3, r0
 800cb36:	73fb      	strb	r3, [r7, #15]
      break;
 800cb38:	bf00      	nop
  }

  return ret;
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cb56:	7afb      	ldrb	r3, [r7, #11]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d16e      	bne.n	800cc3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cb62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb6a:	2b03      	cmp	r3, #3
 800cb6c:	f040 8098 	bne.w	800cca0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	689a      	ldr	r2, [r3, #8]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d913      	bls.n	800cba4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	689a      	ldr	r2, [r3, #8]
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	1ad2      	subs	r2, r2, r3
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	4293      	cmp	r3, r2
 800cb94:	bf28      	it	cs
 800cb96:	4613      	movcs	r3, r2
 800cb98:	461a      	mov	r2, r3
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f001 f984 	bl	800deaa <USBD_CtlContinueRx>
 800cba2:	e07d      	b.n	800cca0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cbaa:	f003 031f 	and.w	r3, r3, #31
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d014      	beq.n	800cbdc <USBD_LL_DataOutStage+0x98>
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d81d      	bhi.n	800cbf2 <USBD_LL_DataOutStage+0xae>
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d002      	beq.n	800cbc0 <USBD_LL_DataOutStage+0x7c>
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d003      	beq.n	800cbc6 <USBD_LL_DataOutStage+0x82>
 800cbbe:	e018      	b.n	800cbf2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	75bb      	strb	r3, [r7, #22]
            break;
 800cbc4:	e018      	b.n	800cbf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	4619      	mov	r1, r3
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f000 fa5e 	bl	800d092 <USBD_CoreFindIF>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	75bb      	strb	r3, [r7, #22]
            break;
 800cbda:	e00d      	b.n	800cbf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f000 fa60 	bl	800d0ac <USBD_CoreFindEP>
 800cbec:	4603      	mov	r3, r0
 800cbee:	75bb      	strb	r3, [r7, #22]
            break;
 800cbf0:	e002      	b.n	800cbf8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	75bb      	strb	r3, [r7, #22]
            break;
 800cbf6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cbf8:	7dbb      	ldrb	r3, [r7, #22]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d119      	bne.n	800cc32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d113      	bne.n	800cc32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cc0a:	7dba      	ldrb	r2, [r7, #22]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	32ae      	adds	r2, #174	; 0xae
 800cc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00b      	beq.n	800cc32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cc1a:	7dba      	ldrb	r2, [r7, #22]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cc22:	7dba      	ldrb	r2, [r7, #22]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	32ae      	adds	r2, #174	; 0xae
 800cc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f001 f94a 	bl	800decc <USBD_CtlSendStatus>
 800cc38:	e032      	b.n	800cca0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cc3a:	7afb      	ldrb	r3, [r7, #11]
 800cc3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	4619      	mov	r1, r3
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f000 fa31 	bl	800d0ac <USBD_CoreFindEP>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc4e:	7dbb      	ldrb	r3, [r7, #22]
 800cc50:	2bff      	cmp	r3, #255	; 0xff
 800cc52:	d025      	beq.n	800cca0 <USBD_LL_DataOutStage+0x15c>
 800cc54:	7dbb      	ldrb	r3, [r7, #22]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d122      	bne.n	800cca0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d117      	bne.n	800cc96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cc66:	7dba      	ldrb	r2, [r7, #22]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	32ae      	adds	r2, #174	; 0xae
 800cc6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc70:	699b      	ldr	r3, [r3, #24]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00f      	beq.n	800cc96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cc76:	7dba      	ldrb	r2, [r7, #22]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cc7e:	7dba      	ldrb	r2, [r7, #22]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	32ae      	adds	r2, #174	; 0xae
 800cc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc88:	699b      	ldr	r3, [r3, #24]
 800cc8a:	7afa      	ldrb	r2, [r7, #11]
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	4798      	blx	r3
 800cc92:	4603      	mov	r3, r0
 800cc94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d001      	beq.n	800cca0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
 800cc9e:	e000      	b.n	800cca2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b086      	sub	sp, #24
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	60f8      	str	r0, [r7, #12]
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	607a      	str	r2, [r7, #4]
 800ccb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ccb8:	7afb      	ldrb	r3, [r7, #11]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d16f      	bne.n	800cd9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3314      	adds	r3, #20
 800ccc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d15a      	bne.n	800cd84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	689a      	ldr	r2, [r3, #8]
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d914      	bls.n	800cd04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	689a      	ldr	r2, [r3, #8]
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	1ad2      	subs	r2, r2, r3
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	461a      	mov	r2, r3
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f001 f8ac 	bl	800de4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f001 fdaf 	bl	800e860 <USBD_LL_PrepareReceive>
 800cd02:	e03f      	b.n	800cd84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	68da      	ldr	r2, [r3, #12]
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d11c      	bne.n	800cd4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d316      	bcc.n	800cd4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d20f      	bcs.n	800cd4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f001 f88d 	bl	800de4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	2200      	movs	r2, #0
 800cd40:	2100      	movs	r1, #0
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f001 fd8c 	bl	800e860 <USBD_LL_PrepareReceive>
 800cd48:	e01c      	b.n	800cd84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d10f      	bne.n	800cd76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d009      	beq.n	800cd76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd76:	2180      	movs	r1, #128	; 0x80
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f001 fcc7 	bl	800e70c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cd7e:	68f8      	ldr	r0, [r7, #12]
 800cd80:	f001 f8b7 	bl	800def2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d03a      	beq.n	800ce04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f7ff fe42 	bl	800ca18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cd9c:	e032      	b.n	800ce04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cd9e:	7afb      	ldrb	r3, [r7, #11]
 800cda0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	4619      	mov	r1, r3
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f000 f97f 	bl	800d0ac <USBD_CoreFindEP>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
 800cdb4:	2bff      	cmp	r3, #255	; 0xff
 800cdb6:	d025      	beq.n	800ce04 <USBD_LL_DataInStage+0x15a>
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d122      	bne.n	800ce04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	d11c      	bne.n	800ce04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cdca:	7dfa      	ldrb	r2, [r7, #23]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	32ae      	adds	r2, #174	; 0xae
 800cdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd4:	695b      	ldr	r3, [r3, #20]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d014      	beq.n	800ce04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cdda:	7dfa      	ldrb	r2, [r7, #23]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cde2:	7dfa      	ldrb	r2, [r7, #23]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	32ae      	adds	r2, #174	; 0xae
 800cde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	7afa      	ldrb	r2, [r7, #11]
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	4798      	blx	r3
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cdfa:	7dbb      	ldrb	r3, [r7, #22]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d001      	beq.n	800ce04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ce00:	7dbb      	ldrb	r3, [r7, #22]
 800ce02:	e000      	b.n	800ce06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3718      	adds	r7, #24
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b084      	sub	sp, #16
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce16:	2300      	movs	r3, #0
 800ce18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d014      	beq.n	800ce74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00e      	beq.n	800ce74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	6852      	ldr	r2, [r2, #4]
 800ce62:	b2d2      	uxtb	r2, r2
 800ce64:	4611      	mov	r1, r2
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	4798      	blx	r3
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ce70:	2303      	movs	r3, #3
 800ce72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce74:	2340      	movs	r3, #64	; 0x40
 800ce76:	2200      	movs	r2, #0
 800ce78:	2100      	movs	r1, #0
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f001 fc01 	bl	800e682 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2240      	movs	r2, #64	; 0x40
 800ce8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce90:	2340      	movs	r3, #64	; 0x40
 800ce92:	2200      	movs	r2, #0
 800ce94:	2180      	movs	r1, #128	; 0x80
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f001 fbf3 	bl	800e682 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2240      	movs	r2, #64	; 0x40
 800cea6:	621a      	str	r2, [r3, #32]

  return ret;
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b083      	sub	sp, #12
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	460b      	mov	r3, r1
 800cebc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	78fa      	ldrb	r2, [r7, #3]
 800cec2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ced2:	b480      	push	{r7}
 800ced4:	b083      	sub	sp, #12
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2204      	movs	r2, #4
 800ceec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	370c      	adds	r7, #12
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr

0800cefe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cefe:	b480      	push	{r7}
 800cf00:	b083      	sub	sp, #12
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	d106      	bne.n	800cf20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b082      	sub	sp, #8
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b03      	cmp	r3, #3
 800cf40:	d110      	bne.n	800cf64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00b      	beq.n	800cf64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf52:	69db      	ldr	r3, [r3, #28]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d005      	beq.n	800cf64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf5e:	69db      	ldr	r3, [r3, #28]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b082      	sub	sp, #8
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	460b      	mov	r3, r1
 800cf78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	32ae      	adds	r2, #174	; 0xae
 800cf84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e01c      	b.n	800cfca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d115      	bne.n	800cfc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	32ae      	adds	r2, #174	; 0xae
 800cfa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfaa:	6a1b      	ldr	r3, [r3, #32]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d00b      	beq.n	800cfc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	32ae      	adds	r2, #174	; 0xae
 800cfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfbe:	6a1b      	ldr	r3, [r3, #32]
 800cfc0:	78fa      	ldrb	r2, [r7, #3]
 800cfc2:	4611      	mov	r1, r2
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cfc8:	2300      	movs	r3, #0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	460b      	mov	r3, r1
 800cfdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	32ae      	adds	r2, #174	; 0xae
 800cfe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e01c      	b.n	800d02e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b03      	cmp	r3, #3
 800cffe:	d115      	bne.n	800d02c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	32ae      	adds	r2, #174	; 0xae
 800d00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00b      	beq.n	800d02c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	32ae      	adds	r2, #174	; 0xae
 800d01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d024:	78fa      	ldrb	r2, [r7, #3]
 800d026:	4611      	mov	r1, r2
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d036:	b480      	push	{r7}
 800d038:	b083      	sub	sp, #12
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00e      	beq.n	800d088 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	6852      	ldr	r2, [r2, #4]
 800d076:	b2d2      	uxtb	r2, r2
 800d078:	4611      	mov	r1, r2
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	4798      	blx	r3
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d084:	2303      	movs	r3, #3
 800d086:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d088:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d092:	b480      	push	{r7}
 800d094:	b083      	sub	sp, #12
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	460b      	mov	r3, r1
 800d09c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d09e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	370c      	adds	r7, #12
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr

0800d0c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b086      	sub	sp, #24
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	885b      	ldrh	r3, [r3, #2]
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d920      	bls.n	800d130 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d0f6:	e013      	b.n	800d120 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d0f8:	f107 030a 	add.w	r3, r7, #10
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6978      	ldr	r0, [r7, #20]
 800d100:	f000 f81b 	bl	800d13a <USBD_GetNextDesc>
 800d104:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	785b      	ldrb	r3, [r3, #1]
 800d10a:	2b05      	cmp	r3, #5
 800d10c:	d108      	bne.n	800d120 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	789b      	ldrb	r3, [r3, #2]
 800d116:	78fa      	ldrb	r2, [r7, #3]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d008      	beq.n	800d12e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d11c:	2300      	movs	r3, #0
 800d11e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	885b      	ldrh	r3, [r3, #2]
 800d124:	b29a      	uxth	r2, r3
 800d126:	897b      	ldrh	r3, [r7, #10]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d8e5      	bhi.n	800d0f8 <USBD_GetEpDesc+0x32>
 800d12c:	e000      	b.n	800d130 <USBD_GetEpDesc+0x6a>
          break;
 800d12e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d130:	693b      	ldr	r3, [r7, #16]
}
 800d132:	4618      	mov	r0, r3
 800d134:	3718      	adds	r7, #24
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d13a:	b480      	push	{r7}
 800d13c:	b085      	sub	sp, #20
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	881a      	ldrh	r2, [r3, #0]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	b29b      	uxth	r3, r3
 800d152:	4413      	add	r3, r2
 800d154:	b29a      	uxth	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4413      	add	r3, r2
 800d164:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d166:	68fb      	ldr	r3, [r7, #12]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d174:	b480      	push	{r7}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	3301      	adds	r3, #1
 800d18a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d192:	8a3b      	ldrh	r3, [r7, #16]
 800d194:	021b      	lsls	r3, r3, #8
 800d196:	b21a      	sxth	r2, r3
 800d198:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	b21b      	sxth	r3, r3
 800d1a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d1a2:	89fb      	ldrh	r3, [r7, #14]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	371c      	adds	r7, #28
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1c6:	2b40      	cmp	r3, #64	; 0x40
 800d1c8:	d005      	beq.n	800d1d6 <USBD_StdDevReq+0x26>
 800d1ca:	2b40      	cmp	r3, #64	; 0x40
 800d1cc:	d857      	bhi.n	800d27e <USBD_StdDevReq+0xce>
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00f      	beq.n	800d1f2 <USBD_StdDevReq+0x42>
 800d1d2:	2b20      	cmp	r3, #32
 800d1d4:	d153      	bne.n	800d27e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	32ae      	adds	r2, #174	; 0xae
 800d1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	4798      	blx	r3
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f0:	e04a      	b.n	800d288 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	785b      	ldrb	r3, [r3, #1]
 800d1f6:	2b09      	cmp	r3, #9
 800d1f8:	d83b      	bhi.n	800d272 <USBD_StdDevReq+0xc2>
 800d1fa:	a201      	add	r2, pc, #4	; (adr r2, 800d200 <USBD_StdDevReq+0x50>)
 800d1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d200:	0800d255 	.word	0x0800d255
 800d204:	0800d269 	.word	0x0800d269
 800d208:	0800d273 	.word	0x0800d273
 800d20c:	0800d25f 	.word	0x0800d25f
 800d210:	0800d273 	.word	0x0800d273
 800d214:	0800d233 	.word	0x0800d233
 800d218:	0800d229 	.word	0x0800d229
 800d21c:	0800d273 	.word	0x0800d273
 800d220:	0800d24b 	.word	0x0800d24b
 800d224:	0800d23d 	.word	0x0800d23d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fa3c 	bl	800d6a8 <USBD_GetDescriptor>
          break;
 800d230:	e024      	b.n	800d27c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fba1 	bl	800d97c <USBD_SetAddress>
          break;
 800d23a:	e01f      	b.n	800d27c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fbe0 	bl	800da04 <USBD_SetConfig>
 800d244:	4603      	mov	r3, r0
 800d246:	73fb      	strb	r3, [r7, #15]
          break;
 800d248:	e018      	b.n	800d27c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d24a:	6839      	ldr	r1, [r7, #0]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fc83 	bl	800db58 <USBD_GetConfig>
          break;
 800d252:	e013      	b.n	800d27c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d254:	6839      	ldr	r1, [r7, #0]
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 fcb4 	bl	800dbc4 <USBD_GetStatus>
          break;
 800d25c:	e00e      	b.n	800d27c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fce3 	bl	800dc2c <USBD_SetFeature>
          break;
 800d266:	e009      	b.n	800d27c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d268:	6839      	ldr	r1, [r7, #0]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fd07 	bl	800dc7e <USBD_ClrFeature>
          break;
 800d270:	e004      	b.n	800d27c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fd5e 	bl	800dd36 <USBD_CtlError>
          break;
 800d27a:	bf00      	nop
      }
      break;
 800d27c:	e004      	b.n	800d288 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fd58 	bl	800dd36 <USBD_CtlError>
      break;
 800d286:	bf00      	nop
  }

  return ret;
 800d288:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop

0800d294 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2aa:	2b40      	cmp	r3, #64	; 0x40
 800d2ac:	d005      	beq.n	800d2ba <USBD_StdItfReq+0x26>
 800d2ae:	2b40      	cmp	r3, #64	; 0x40
 800d2b0:	d852      	bhi.n	800d358 <USBD_StdItfReq+0xc4>
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d001      	beq.n	800d2ba <USBD_StdItfReq+0x26>
 800d2b6:	2b20      	cmp	r3, #32
 800d2b8:	d14e      	bne.n	800d358 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	d840      	bhi.n	800d34a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	889b      	ldrh	r3, [r3, #4]
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d836      	bhi.n	800d340 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	889b      	ldrh	r3, [r3, #4]
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff fed9 	bl	800d092 <USBD_CoreFindIF>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2e4:	7bbb      	ldrb	r3, [r7, #14]
 800d2e6:	2bff      	cmp	r3, #255	; 0xff
 800d2e8:	d01d      	beq.n	800d326 <USBD_StdItfReq+0x92>
 800d2ea:	7bbb      	ldrb	r3, [r7, #14]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d11a      	bne.n	800d326 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d2f0:	7bba      	ldrb	r2, [r7, #14]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	32ae      	adds	r2, #174	; 0xae
 800d2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00f      	beq.n	800d320 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d300:	7bba      	ldrb	r2, [r7, #14]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d308:	7bba      	ldrb	r2, [r7, #14]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	32ae      	adds	r2, #174	; 0xae
 800d30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	4798      	blx	r3
 800d31a:	4603      	mov	r3, r0
 800d31c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d31e:	e004      	b.n	800d32a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d320:	2303      	movs	r3, #3
 800d322:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d324:	e001      	b.n	800d32a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d326:	2303      	movs	r3, #3
 800d328:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	88db      	ldrh	r3, [r3, #6]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d110      	bne.n	800d354 <USBD_StdItfReq+0xc0>
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10d      	bne.n	800d354 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 fdc7 	bl	800decc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d33e:	e009      	b.n	800d354 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fcf7 	bl	800dd36 <USBD_CtlError>
          break;
 800d348:	e004      	b.n	800d354 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fcf2 	bl	800dd36 <USBD_CtlError>
          break;
 800d352:	e000      	b.n	800d356 <USBD_StdItfReq+0xc2>
          break;
 800d354:	bf00      	nop
      }
      break;
 800d356:	e004      	b.n	800d362 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fceb 	bl	800dd36 <USBD_CtlError>
      break;
 800d360:	bf00      	nop
  }

  return ret;
 800d362:	7bfb      	ldrb	r3, [r7, #15]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	889b      	ldrh	r3, [r3, #4]
 800d37e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d388:	2b40      	cmp	r3, #64	; 0x40
 800d38a:	d007      	beq.n	800d39c <USBD_StdEPReq+0x30>
 800d38c:	2b40      	cmp	r3, #64	; 0x40
 800d38e:	f200 817f 	bhi.w	800d690 <USBD_StdEPReq+0x324>
 800d392:	2b00      	cmp	r3, #0
 800d394:	d02a      	beq.n	800d3ec <USBD_StdEPReq+0x80>
 800d396:	2b20      	cmp	r3, #32
 800d398:	f040 817a 	bne.w	800d690 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d39c:	7bbb      	ldrb	r3, [r7, #14]
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff fe83 	bl	800d0ac <USBD_CoreFindEP>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3aa:	7b7b      	ldrb	r3, [r7, #13]
 800d3ac:	2bff      	cmp	r3, #255	; 0xff
 800d3ae:	f000 8174 	beq.w	800d69a <USBD_StdEPReq+0x32e>
 800d3b2:	7b7b      	ldrb	r3, [r7, #13]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f040 8170 	bne.w	800d69a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d3ba:	7b7a      	ldrb	r2, [r7, #13]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d3c2:	7b7a      	ldrb	r2, [r7, #13]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	32ae      	adds	r2, #174	; 0xae
 800d3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 8163 	beq.w	800d69a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d3d4:	7b7a      	ldrb	r2, [r7, #13]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	32ae      	adds	r2, #174	; 0xae
 800d3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	4798      	blx	r3
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d3ea:	e156      	b.n	800d69a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	785b      	ldrb	r3, [r3, #1]
 800d3f0:	2b03      	cmp	r3, #3
 800d3f2:	d008      	beq.n	800d406 <USBD_StdEPReq+0x9a>
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	f300 8145 	bgt.w	800d684 <USBD_StdEPReq+0x318>
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 809b 	beq.w	800d536 <USBD_StdEPReq+0x1ca>
 800d400:	2b01      	cmp	r3, #1
 800d402:	d03c      	beq.n	800d47e <USBD_StdEPReq+0x112>
 800d404:	e13e      	b.n	800d684 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d002      	beq.n	800d418 <USBD_StdEPReq+0xac>
 800d412:	2b03      	cmp	r3, #3
 800d414:	d016      	beq.n	800d444 <USBD_StdEPReq+0xd8>
 800d416:	e02c      	b.n	800d472 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d418:	7bbb      	ldrb	r3, [r7, #14]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00d      	beq.n	800d43a <USBD_StdEPReq+0xce>
 800d41e:	7bbb      	ldrb	r3, [r7, #14]
 800d420:	2b80      	cmp	r3, #128	; 0x80
 800d422:	d00a      	beq.n	800d43a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d424:	7bbb      	ldrb	r3, [r7, #14]
 800d426:	4619      	mov	r1, r3
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f001 f96f 	bl	800e70c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d42e:	2180      	movs	r1, #128	; 0x80
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f001 f96b 	bl	800e70c <USBD_LL_StallEP>
 800d436:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d438:	e020      	b.n	800d47c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fc7a 	bl	800dd36 <USBD_CtlError>
              break;
 800d442:	e01b      	b.n	800d47c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	885b      	ldrh	r3, [r3, #2]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10e      	bne.n	800d46a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00b      	beq.n	800d46a <USBD_StdEPReq+0xfe>
 800d452:	7bbb      	ldrb	r3, [r7, #14]
 800d454:	2b80      	cmp	r3, #128	; 0x80
 800d456:	d008      	beq.n	800d46a <USBD_StdEPReq+0xfe>
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	88db      	ldrh	r3, [r3, #6]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d104      	bne.n	800d46a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d460:	7bbb      	ldrb	r3, [r7, #14]
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f001 f951 	bl	800e70c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fd2e 	bl	800decc <USBD_CtlSendStatus>

              break;
 800d470:	e004      	b.n	800d47c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 fc5e 	bl	800dd36 <USBD_CtlError>
              break;
 800d47a:	bf00      	nop
          }
          break;
 800d47c:	e107      	b.n	800d68e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d484:	b2db      	uxtb	r3, r3
 800d486:	2b02      	cmp	r3, #2
 800d488:	d002      	beq.n	800d490 <USBD_StdEPReq+0x124>
 800d48a:	2b03      	cmp	r3, #3
 800d48c:	d016      	beq.n	800d4bc <USBD_StdEPReq+0x150>
 800d48e:	e04b      	b.n	800d528 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d490:	7bbb      	ldrb	r3, [r7, #14]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00d      	beq.n	800d4b2 <USBD_StdEPReq+0x146>
 800d496:	7bbb      	ldrb	r3, [r7, #14]
 800d498:	2b80      	cmp	r3, #128	; 0x80
 800d49a:	d00a      	beq.n	800d4b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d49c:	7bbb      	ldrb	r3, [r7, #14]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f001 f933 	bl	800e70c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4a6:	2180      	movs	r1, #128	; 0x80
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f001 f92f 	bl	800e70c <USBD_LL_StallEP>
 800d4ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4b0:	e040      	b.n	800d534 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d4b2:	6839      	ldr	r1, [r7, #0]
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 fc3e 	bl	800dd36 <USBD_CtlError>
              break;
 800d4ba:	e03b      	b.n	800d534 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	885b      	ldrh	r3, [r3, #2]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d136      	bne.n	800d532 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d4c4:	7bbb      	ldrb	r3, [r7, #14]
 800d4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d004      	beq.n	800d4d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4ce:	7bbb      	ldrb	r3, [r7, #14]
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f001 f939 	bl	800e74a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fcf7 	bl	800decc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d4de:	7bbb      	ldrb	r3, [r7, #14]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff fde2 	bl	800d0ac <USBD_CoreFindEP>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4ec:	7b7b      	ldrb	r3, [r7, #13]
 800d4ee:	2bff      	cmp	r3, #255	; 0xff
 800d4f0:	d01f      	beq.n	800d532 <USBD_StdEPReq+0x1c6>
 800d4f2:	7b7b      	ldrb	r3, [r7, #13]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d11c      	bne.n	800d532 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d4f8:	7b7a      	ldrb	r2, [r7, #13]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d500:	7b7a      	ldrb	r2, [r7, #13]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	32ae      	adds	r2, #174	; 0xae
 800d506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d010      	beq.n	800d532 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d510:	7b7a      	ldrb	r2, [r7, #13]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	32ae      	adds	r2, #174	; 0xae
 800d516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	4798      	blx	r3
 800d522:	4603      	mov	r3, r0
 800d524:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d526:	e004      	b.n	800d532 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fc03 	bl	800dd36 <USBD_CtlError>
              break;
 800d530:	e000      	b.n	800d534 <USBD_StdEPReq+0x1c8>
              break;
 800d532:	bf00      	nop
          }
          break;
 800d534:	e0ab      	b.n	800d68e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d002      	beq.n	800d548 <USBD_StdEPReq+0x1dc>
 800d542:	2b03      	cmp	r3, #3
 800d544:	d032      	beq.n	800d5ac <USBD_StdEPReq+0x240>
 800d546:	e097      	b.n	800d678 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d548:	7bbb      	ldrb	r3, [r7, #14]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d007      	beq.n	800d55e <USBD_StdEPReq+0x1f2>
 800d54e:	7bbb      	ldrb	r3, [r7, #14]
 800d550:	2b80      	cmp	r3, #128	; 0x80
 800d552:	d004      	beq.n	800d55e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fbed 	bl	800dd36 <USBD_CtlError>
                break;
 800d55c:	e091      	b.n	800d682 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d55e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d562:	2b00      	cmp	r3, #0
 800d564:	da0b      	bge.n	800d57e <USBD_StdEPReq+0x212>
 800d566:	7bbb      	ldrb	r3, [r7, #14]
 800d568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d56c:	4613      	mov	r3, r2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	4413      	add	r3, r2
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	3310      	adds	r3, #16
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	4413      	add	r3, r2
 800d57a:	3304      	adds	r3, #4
 800d57c:	e00b      	b.n	800d596 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d57e:	7bbb      	ldrb	r3, [r7, #14]
 800d580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d584:	4613      	mov	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4413      	add	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	4413      	add	r3, r2
 800d594:	3304      	adds	r3, #4
 800d596:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	2200      	movs	r2, #0
 800d59c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	2202      	movs	r2, #2
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 fc37 	bl	800de18 <USBD_CtlSendData>
              break;
 800d5aa:	e06a      	b.n	800d682 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d5ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	da11      	bge.n	800d5d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d5b4:	7bbb      	ldrb	r3, [r7, #14]
 800d5b6:	f003 020f 	and.w	r2, r3, #15
 800d5ba:	6879      	ldr	r1, [r7, #4]
 800d5bc:	4613      	mov	r3, r2
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	4413      	add	r3, r2
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	440b      	add	r3, r1
 800d5c6:	3324      	adds	r3, #36	; 0x24
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d117      	bne.n	800d5fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fbb0 	bl	800dd36 <USBD_CtlError>
                  break;
 800d5d6:	e054      	b.n	800d682 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	f003 020f 	and.w	r2, r3, #15
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	440b      	add	r3, r1
 800d5ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d104      	bne.n	800d5fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d5f4:	6839      	ldr	r1, [r7, #0]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fb9d 	bl	800dd36 <USBD_CtlError>
                  break;
 800d5fc:	e041      	b.n	800d682 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d602:	2b00      	cmp	r3, #0
 800d604:	da0b      	bge.n	800d61e <USBD_StdEPReq+0x2b2>
 800d606:	7bbb      	ldrb	r3, [r7, #14]
 800d608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d60c:	4613      	mov	r3, r2
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	4413      	add	r3, r2
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	3310      	adds	r3, #16
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	4413      	add	r3, r2
 800d61a:	3304      	adds	r3, #4
 800d61c:	e00b      	b.n	800d636 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d61e:	7bbb      	ldrb	r3, [r7, #14]
 800d620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d624:	4613      	mov	r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	4413      	add	r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	4413      	add	r3, r2
 800d634:	3304      	adds	r3, #4
 800d636:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d638:	7bbb      	ldrb	r3, [r7, #14]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <USBD_StdEPReq+0x2d8>
 800d63e:	7bbb      	ldrb	r3, [r7, #14]
 800d640:	2b80      	cmp	r3, #128	; 0x80
 800d642:	d103      	bne.n	800d64c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2200      	movs	r2, #0
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	e00e      	b.n	800d66a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d64c:	7bbb      	ldrb	r3, [r7, #14]
 800d64e:	4619      	mov	r1, r3
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f001 f899 	bl	800e788 <USBD_LL_IsStallEP>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d003      	beq.n	800d664 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	2201      	movs	r2, #1
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	e002      	b.n	800d66a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	2200      	movs	r2, #0
 800d668:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	2202      	movs	r2, #2
 800d66e:	4619      	mov	r1, r3
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 fbd1 	bl	800de18 <USBD_CtlSendData>
              break;
 800d676:	e004      	b.n	800d682 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fb5b 	bl	800dd36 <USBD_CtlError>
              break;
 800d680:	bf00      	nop
          }
          break;
 800d682:	e004      	b.n	800d68e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d684:	6839      	ldr	r1, [r7, #0]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fb55 	bl	800dd36 <USBD_CtlError>
          break;
 800d68c:	bf00      	nop
      }
      break;
 800d68e:	e005      	b.n	800d69c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d690:	6839      	ldr	r1, [r7, #0]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fb4f 	bl	800dd36 <USBD_CtlError>
      break;
 800d698:	e000      	b.n	800d69c <USBD_StdEPReq+0x330>
      break;
 800d69a:	bf00      	nop
  }

  return ret;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	885b      	ldrh	r3, [r3, #2]
 800d6c2:	0a1b      	lsrs	r3, r3, #8
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	2b06      	cmp	r3, #6
 800d6ca:	f200 8128 	bhi.w	800d91e <USBD_GetDescriptor+0x276>
 800d6ce:	a201      	add	r2, pc, #4	; (adr r2, 800d6d4 <USBD_GetDescriptor+0x2c>)
 800d6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d4:	0800d6f1 	.word	0x0800d6f1
 800d6d8:	0800d709 	.word	0x0800d709
 800d6dc:	0800d749 	.word	0x0800d749
 800d6e0:	0800d91f 	.word	0x0800d91f
 800d6e4:	0800d91f 	.word	0x0800d91f
 800d6e8:	0800d8bf 	.word	0x0800d8bf
 800d6ec:	0800d8eb 	.word	0x0800d8eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	7c12      	ldrb	r2, [r2, #16]
 800d6fc:	f107 0108 	add.w	r1, r7, #8
 800d700:	4610      	mov	r0, r2
 800d702:	4798      	blx	r3
 800d704:	60f8      	str	r0, [r7, #12]
      break;
 800d706:	e112      	b.n	800d92e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	7c1b      	ldrb	r3, [r3, #16]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10d      	bne.n	800d72c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d718:	f107 0208 	add.w	r2, r7, #8
 800d71c:	4610      	mov	r0, r2
 800d71e:	4798      	blx	r3
 800d720:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	3301      	adds	r3, #1
 800d726:	2202      	movs	r2, #2
 800d728:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d72a:	e100      	b.n	800d92e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d734:	f107 0208 	add.w	r2, r7, #8
 800d738:	4610      	mov	r0, r2
 800d73a:	4798      	blx	r3
 800d73c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3301      	adds	r3, #1
 800d742:	2202      	movs	r2, #2
 800d744:	701a      	strb	r2, [r3, #0]
      break;
 800d746:	e0f2      	b.n	800d92e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	885b      	ldrh	r3, [r3, #2]
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	2b05      	cmp	r3, #5
 800d750:	f200 80ac 	bhi.w	800d8ac <USBD_GetDescriptor+0x204>
 800d754:	a201      	add	r2, pc, #4	; (adr r2, 800d75c <USBD_GetDescriptor+0xb4>)
 800d756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75a:	bf00      	nop
 800d75c:	0800d775 	.word	0x0800d775
 800d760:	0800d7a9 	.word	0x0800d7a9
 800d764:	0800d7dd 	.word	0x0800d7dd
 800d768:	0800d811 	.word	0x0800d811
 800d76c:	0800d845 	.word	0x0800d845
 800d770:	0800d879 	.word	0x0800d879
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00b      	beq.n	800d798 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	7c12      	ldrb	r2, [r2, #16]
 800d78c:	f107 0108 	add.w	r1, r7, #8
 800d790:	4610      	mov	r0, r2
 800d792:	4798      	blx	r3
 800d794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d796:	e091      	b.n	800d8bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d798:	6839      	ldr	r1, [r7, #0]
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 facb 	bl	800dd36 <USBD_CtlError>
            err++;
 800d7a0:	7afb      	ldrb	r3, [r7, #11]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	72fb      	strb	r3, [r7, #11]
          break;
 800d7a6:	e089      	b.n	800d8bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00b      	beq.n	800d7cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	7c12      	ldrb	r2, [r2, #16]
 800d7c0:	f107 0108 	add.w	r1, r7, #8
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	4798      	blx	r3
 800d7c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7ca:	e077      	b.n	800d8bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7cc:	6839      	ldr	r1, [r7, #0]
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 fab1 	bl	800dd36 <USBD_CtlError>
            err++;
 800d7d4:	7afb      	ldrb	r3, [r7, #11]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d7da:	e06f      	b.n	800d8bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00b      	beq.n	800d800 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	7c12      	ldrb	r2, [r2, #16]
 800d7f4:	f107 0108 	add.w	r1, r7, #8
 800d7f8:	4610      	mov	r0, r2
 800d7fa:	4798      	blx	r3
 800d7fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7fe:	e05d      	b.n	800d8bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fa97 	bl	800dd36 <USBD_CtlError>
            err++;
 800d808:	7afb      	ldrb	r3, [r7, #11]
 800d80a:	3301      	adds	r3, #1
 800d80c:	72fb      	strb	r3, [r7, #11]
          break;
 800d80e:	e055      	b.n	800d8bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d816:	691b      	ldr	r3, [r3, #16]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00b      	beq.n	800d834 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d822:	691b      	ldr	r3, [r3, #16]
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	7c12      	ldrb	r2, [r2, #16]
 800d828:	f107 0108 	add.w	r1, r7, #8
 800d82c:	4610      	mov	r0, r2
 800d82e:	4798      	blx	r3
 800d830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d832:	e043      	b.n	800d8bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d834:	6839      	ldr	r1, [r7, #0]
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 fa7d 	bl	800dd36 <USBD_CtlError>
            err++;
 800d83c:	7afb      	ldrb	r3, [r7, #11]
 800d83e:	3301      	adds	r3, #1
 800d840:	72fb      	strb	r3, [r7, #11]
          break;
 800d842:	e03b      	b.n	800d8bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00b      	beq.n	800d868 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	7c12      	ldrb	r2, [r2, #16]
 800d85c:	f107 0108 	add.w	r1, r7, #8
 800d860:	4610      	mov	r0, r2
 800d862:	4798      	blx	r3
 800d864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d866:	e029      	b.n	800d8bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 fa63 	bl	800dd36 <USBD_CtlError>
            err++;
 800d870:	7afb      	ldrb	r3, [r7, #11]
 800d872:	3301      	adds	r3, #1
 800d874:	72fb      	strb	r3, [r7, #11]
          break;
 800d876:	e021      	b.n	800d8bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d87e:	699b      	ldr	r3, [r3, #24]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00b      	beq.n	800d89c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d88a:	699b      	ldr	r3, [r3, #24]
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	7c12      	ldrb	r2, [r2, #16]
 800d890:	f107 0108 	add.w	r1, r7, #8
 800d894:	4610      	mov	r0, r2
 800d896:	4798      	blx	r3
 800d898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d89a:	e00f      	b.n	800d8bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d89c:	6839      	ldr	r1, [r7, #0]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 fa49 	bl	800dd36 <USBD_CtlError>
            err++;
 800d8a4:	7afb      	ldrb	r3, [r7, #11]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d8aa:	e007      	b.n	800d8bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fa41 	bl	800dd36 <USBD_CtlError>
          err++;
 800d8b4:	7afb      	ldrb	r3, [r7, #11]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d8ba:	bf00      	nop
      }
      break;
 800d8bc:	e037      	b.n	800d92e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	7c1b      	ldrb	r3, [r3, #16]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d109      	bne.n	800d8da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ce:	f107 0208 	add.w	r2, r7, #8
 800d8d2:	4610      	mov	r0, r2
 800d8d4:	4798      	blx	r3
 800d8d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8d8:	e029      	b.n	800d92e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fa2a 	bl	800dd36 <USBD_CtlError>
        err++;
 800d8e2:	7afb      	ldrb	r3, [r7, #11]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	72fb      	strb	r3, [r7, #11]
      break;
 800d8e8:	e021      	b.n	800d92e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	7c1b      	ldrb	r3, [r3, #16]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10d      	bne.n	800d90e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8fa:	f107 0208 	add.w	r2, r7, #8
 800d8fe:	4610      	mov	r0, r2
 800d900:	4798      	blx	r3
 800d902:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	3301      	adds	r3, #1
 800d908:	2207      	movs	r2, #7
 800d90a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d90c:	e00f      	b.n	800d92e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d90e:	6839      	ldr	r1, [r7, #0]
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 fa10 	bl	800dd36 <USBD_CtlError>
        err++;
 800d916:	7afb      	ldrb	r3, [r7, #11]
 800d918:	3301      	adds	r3, #1
 800d91a:	72fb      	strb	r3, [r7, #11]
      break;
 800d91c:	e007      	b.n	800d92e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fa08 	bl	800dd36 <USBD_CtlError>
      err++;
 800d926:	7afb      	ldrb	r3, [r7, #11]
 800d928:	3301      	adds	r3, #1
 800d92a:	72fb      	strb	r3, [r7, #11]
      break;
 800d92c:	bf00      	nop
  }

  if (err != 0U)
 800d92e:	7afb      	ldrb	r3, [r7, #11]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d11e      	bne.n	800d972 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	88db      	ldrh	r3, [r3, #6]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d016      	beq.n	800d96a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d93c:	893b      	ldrh	r3, [r7, #8]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00e      	beq.n	800d960 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	88da      	ldrh	r2, [r3, #6]
 800d946:	893b      	ldrh	r3, [r7, #8]
 800d948:	4293      	cmp	r3, r2
 800d94a:	bf28      	it	cs
 800d94c:	4613      	movcs	r3, r2
 800d94e:	b29b      	uxth	r3, r3
 800d950:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d952:	893b      	ldrh	r3, [r7, #8]
 800d954:	461a      	mov	r2, r3
 800d956:	68f9      	ldr	r1, [r7, #12]
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 fa5d 	bl	800de18 <USBD_CtlSendData>
 800d95e:	e009      	b.n	800d974 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d960:	6839      	ldr	r1, [r7, #0]
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f9e7 	bl	800dd36 <USBD_CtlError>
 800d968:	e004      	b.n	800d974 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 faae 	bl	800decc <USBD_CtlSendStatus>
 800d970:	e000      	b.n	800d974 <USBD_GetDescriptor+0x2cc>
    return;
 800d972:	bf00      	nop
  }
}
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop

0800d97c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	889b      	ldrh	r3, [r3, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d131      	bne.n	800d9f2 <USBD_SetAddress+0x76>
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	88db      	ldrh	r3, [r3, #6]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d12d      	bne.n	800d9f2 <USBD_SetAddress+0x76>
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	885b      	ldrh	r3, [r3, #2]
 800d99a:	2b7f      	cmp	r3, #127	; 0x7f
 800d99c:	d829      	bhi.n	800d9f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	885b      	ldrh	r3, [r3, #2]
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	2b03      	cmp	r3, #3
 800d9b4:	d104      	bne.n	800d9c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 f9bc 	bl	800dd36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9be:	e01d      	b.n	800d9fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	7bfa      	ldrb	r2, [r7, #15]
 800d9c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 ff07 	bl	800e7e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fa7a 	bl	800decc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d004      	beq.n	800d9e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2202      	movs	r2, #2
 800d9e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e6:	e009      	b.n	800d9fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9f0:	e004      	b.n	800d9fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d9f2:	6839      	ldr	r1, [r7, #0]
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 f99e 	bl	800dd36 <USBD_CtlError>
  }
}
 800d9fa:	bf00      	nop
 800d9fc:	bf00      	nop
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da0e:	2300      	movs	r3, #0
 800da10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	885b      	ldrh	r3, [r3, #2]
 800da16:	b2da      	uxtb	r2, r3
 800da18:	4b4e      	ldr	r3, [pc, #312]	; (800db54 <USBD_SetConfig+0x150>)
 800da1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da1c:	4b4d      	ldr	r3, [pc, #308]	; (800db54 <USBD_SetConfig+0x150>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	2b01      	cmp	r3, #1
 800da22:	d905      	bls.n	800da30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da24:	6839      	ldr	r1, [r7, #0]
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 f985 	bl	800dd36 <USBD_CtlError>
    return USBD_FAIL;
 800da2c:	2303      	movs	r3, #3
 800da2e:	e08c      	b.n	800db4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da36:	b2db      	uxtb	r3, r3
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d002      	beq.n	800da42 <USBD_SetConfig+0x3e>
 800da3c:	2b03      	cmp	r3, #3
 800da3e:	d029      	beq.n	800da94 <USBD_SetConfig+0x90>
 800da40:	e075      	b.n	800db2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da42:	4b44      	ldr	r3, [pc, #272]	; (800db54 <USBD_SetConfig+0x150>)
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d020      	beq.n	800da8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da4a:	4b42      	ldr	r3, [pc, #264]	; (800db54 <USBD_SetConfig+0x150>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da54:	4b3f      	ldr	r3, [pc, #252]	; (800db54 <USBD_SetConfig+0x150>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	4619      	mov	r1, r3
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f7fe ffe7 	bl	800ca2e <USBD_SetClassConfig>
 800da60:	4603      	mov	r3, r0
 800da62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da64:	7bfb      	ldrb	r3, [r7, #15]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d008      	beq.n	800da7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 f962 	bl	800dd36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2202      	movs	r2, #2
 800da76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da7a:	e065      	b.n	800db48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fa25 	bl	800decc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2203      	movs	r2, #3
 800da86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800da8a:	e05d      	b.n	800db48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 fa1d 	bl	800decc <USBD_CtlSendStatus>
      break;
 800da92:	e059      	b.n	800db48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800da94:	4b2f      	ldr	r3, [pc, #188]	; (800db54 <USBD_SetConfig+0x150>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d112      	bne.n	800dac2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2202      	movs	r2, #2
 800daa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800daa4:	4b2b      	ldr	r3, [pc, #172]	; (800db54 <USBD_SetConfig+0x150>)
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	461a      	mov	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800daae:	4b29      	ldr	r3, [pc, #164]	; (800db54 <USBD_SetConfig+0x150>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	4619      	mov	r1, r3
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7fe ffd6 	bl	800ca66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 fa06 	bl	800decc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dac0:	e042      	b.n	800db48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dac2:	4b24      	ldr	r3, [pc, #144]	; (800db54 <USBD_SetConfig+0x150>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d02a      	beq.n	800db26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	4619      	mov	r1, r3
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7fe ffc4 	bl	800ca66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dade:	4b1d      	ldr	r3, [pc, #116]	; (800db54 <USBD_SetConfig+0x150>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dae8:	4b1a      	ldr	r3, [pc, #104]	; (800db54 <USBD_SetConfig+0x150>)
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	4619      	mov	r1, r3
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7fe ff9d 	bl	800ca2e <USBD_SetClassConfig>
 800daf4:	4603      	mov	r3, r0
 800daf6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00f      	beq.n	800db1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f918 	bl	800dd36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	4619      	mov	r1, r3
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7fe ffa9 	bl	800ca66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2202      	movs	r2, #2
 800db18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800db1c:	e014      	b.n	800db48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 f9d4 	bl	800decc <USBD_CtlSendStatus>
      break;
 800db24:	e010      	b.n	800db48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f9d0 	bl	800decc <USBD_CtlSendStatus>
      break;
 800db2c:	e00c      	b.n	800db48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db2e:	6839      	ldr	r1, [r7, #0]
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f900 	bl	800dd36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db36:	4b07      	ldr	r3, [pc, #28]	; (800db54 <USBD_SetConfig+0x150>)
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7fe ff92 	bl	800ca66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db42:	2303      	movs	r3, #3
 800db44:	73fb      	strb	r3, [r7, #15]
      break;
 800db46:	bf00      	nop
  }

  return ret;
 800db48:	7bfb      	ldrb	r3, [r7, #15]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	20004f68 	.word	0x20004f68

0800db58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	88db      	ldrh	r3, [r3, #6]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d004      	beq.n	800db74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db6a:	6839      	ldr	r1, [r7, #0]
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 f8e2 	bl	800dd36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db72:	e023      	b.n	800dbbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	2b02      	cmp	r3, #2
 800db7e:	dc02      	bgt.n	800db86 <USBD_GetConfig+0x2e>
 800db80:	2b00      	cmp	r3, #0
 800db82:	dc03      	bgt.n	800db8c <USBD_GetConfig+0x34>
 800db84:	e015      	b.n	800dbb2 <USBD_GetConfig+0x5a>
 800db86:	2b03      	cmp	r3, #3
 800db88:	d00b      	beq.n	800dba2 <USBD_GetConfig+0x4a>
 800db8a:	e012      	b.n	800dbb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	3308      	adds	r3, #8
 800db96:	2201      	movs	r2, #1
 800db98:	4619      	mov	r1, r3
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 f93c 	bl	800de18 <USBD_CtlSendData>
        break;
 800dba0:	e00c      	b.n	800dbbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	3304      	adds	r3, #4
 800dba6:	2201      	movs	r2, #1
 800dba8:	4619      	mov	r1, r3
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 f934 	bl	800de18 <USBD_CtlSendData>
        break;
 800dbb0:	e004      	b.n	800dbbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dbb2:	6839      	ldr	r1, [r7, #0]
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 f8be 	bl	800dd36 <USBD_CtlError>
        break;
 800dbba:	bf00      	nop
}
 800dbbc:	bf00      	nop
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d81e      	bhi.n	800dc1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	88db      	ldrh	r3, [r3, #6]
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d004      	beq.n	800dbee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dbe4:	6839      	ldr	r1, [r7, #0]
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 f8a5 	bl	800dd36 <USBD_CtlError>
        break;
 800dbec:	e01a      	b.n	800dc24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d005      	beq.n	800dc0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	f043 0202 	orr.w	r2, r3, #2
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	330c      	adds	r3, #12
 800dc0e:	2202      	movs	r2, #2
 800dc10:	4619      	mov	r1, r3
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f900 	bl	800de18 <USBD_CtlSendData>
      break;
 800dc18:	e004      	b.n	800dc24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f88a 	bl	800dd36 <USBD_CtlError>
      break;
 800dc22:	bf00      	nop
  }
}
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	885b      	ldrh	r3, [r3, #2]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d107      	bne.n	800dc4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2201      	movs	r2, #1
 800dc42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f940 	bl	800decc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc4c:	e013      	b.n	800dc76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	885b      	ldrh	r3, [r3, #2]
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d10b      	bne.n	800dc6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	889b      	ldrh	r3, [r3, #4]
 800dc5a:	0a1b      	lsrs	r3, r3, #8
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f930 	bl	800decc <USBD_CtlSendStatus>
}
 800dc6c:	e003      	b.n	800dc76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dc6e:	6839      	ldr	r1, [r7, #0]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 f860 	bl	800dd36 <USBD_CtlError>
}
 800dc76:	bf00      	nop
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b082      	sub	sp, #8
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	3b01      	subs	r3, #1
 800dc92:	2b02      	cmp	r3, #2
 800dc94:	d80b      	bhi.n	800dcae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	885b      	ldrh	r3, [r3, #2]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d10c      	bne.n	800dcb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f910 	bl	800decc <USBD_CtlSendStatus>
      }
      break;
 800dcac:	e004      	b.n	800dcb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 f840 	bl	800dd36 <USBD_CtlError>
      break;
 800dcb6:	e000      	b.n	800dcba <USBD_ClrFeature+0x3c>
      break;
 800dcb8:	bf00      	nop
  }
}
 800dcba:	bf00      	nop
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b084      	sub	sp, #16
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
 800dcca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	781a      	ldrb	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	781a      	ldrb	r2, [r3, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	3301      	adds	r3, #1
 800dcea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	f7ff fa41 	bl	800d174 <SWAPBYTE>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	3301      	adds	r3, #1
 800dd04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f7ff fa34 	bl	800d174 <SWAPBYTE>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	461a      	mov	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	3301      	adds	r3, #1
 800dd18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f7ff fa27 	bl	800d174 <SWAPBYTE>
 800dd26:	4603      	mov	r3, r0
 800dd28:	461a      	mov	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	80da      	strh	r2, [r3, #6]
}
 800dd2e:	bf00      	nop
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd40:	2180      	movs	r1, #128	; 0x80
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 fce2 	bl	800e70c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd48:	2100      	movs	r1, #0
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 fcde 	bl	800e70c <USBD_LL_StallEP>
}
 800dd50:	bf00      	nop
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd64:	2300      	movs	r3, #0
 800dd66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d036      	beq.n	800dddc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dd72:	6938      	ldr	r0, [r7, #16]
 800dd74:	f000 f836 	bl	800dde4 <USBD_GetLen>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	005b      	lsls	r3, r3, #1
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dd86:	7dfb      	ldrb	r3, [r7, #23]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	7812      	ldrb	r2, [r2, #0]
 800dd90:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
 800dd94:	3301      	adds	r3, #1
 800dd96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dd98:	7dfb      	ldrb	r3, [r7, #23]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	2203      	movs	r2, #3
 800dda0:	701a      	strb	r2, [r3, #0]
  idx++;
 800dda2:	7dfb      	ldrb	r3, [r7, #23]
 800dda4:	3301      	adds	r3, #1
 800dda6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dda8:	e013      	b.n	800ddd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ddaa:	7dfb      	ldrb	r3, [r7, #23]
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	4413      	add	r3, r2
 800ddb0:	693a      	ldr	r2, [r7, #16]
 800ddb2:	7812      	ldrb	r2, [r2, #0]
 800ddb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	613b      	str	r3, [r7, #16]
    idx++;
 800ddbc:	7dfb      	ldrb	r3, [r7, #23]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	2200      	movs	r2, #0
 800ddca:	701a      	strb	r2, [r3, #0]
    idx++;
 800ddcc:	7dfb      	ldrb	r3, [r7, #23]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1e7      	bne.n	800ddaa <USBD_GetString+0x52>
 800ddda:	e000      	b.n	800ddde <USBD_GetString+0x86>
    return;
 800dddc:	bf00      	nop
  }
}
 800ddde:	3718      	adds	r7, #24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ddec:	2300      	movs	r3, #0
 800ddee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ddf4:	e005      	b.n	800de02 <USBD_GetLen+0x1e>
  {
    len++;
 800ddf6:	7bfb      	ldrb	r3, [r7, #15]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	3301      	adds	r3, #1
 800de00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1f5      	bne.n	800ddf6 <USBD_GetLen+0x12>
  }

  return len;
 800de0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3714      	adds	r7, #20
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2202      	movs	r2, #2
 800de28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	68ba      	ldr	r2, [r7, #8]
 800de3c:	2100      	movs	r1, #0
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f000 fced 	bl	800e81e <USBD_LL_Transmit>

  return USBD_OK;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b084      	sub	sp, #16
 800de52:	af00      	add	r7, sp, #0
 800de54:	60f8      	str	r0, [r7, #12]
 800de56:	60b9      	str	r1, [r7, #8]
 800de58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	2100      	movs	r1, #0
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 fcdc 	bl	800e81e <USBD_LL_Transmit>

  return USBD_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2203      	movs	r2, #3
 800de80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68ba      	ldr	r2, [r7, #8]
 800de98:	2100      	movs	r1, #0
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f000 fce0 	bl	800e860 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800deaa:	b580      	push	{r7, lr}
 800deac:	b084      	sub	sp, #16
 800deae:	af00      	add	r7, sp, #0
 800deb0:	60f8      	str	r0, [r7, #12]
 800deb2:	60b9      	str	r1, [r7, #8]
 800deb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	2100      	movs	r1, #0
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f000 fccf 	bl	800e860 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2204      	movs	r2, #4
 800ded8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dedc:	2300      	movs	r3, #0
 800dede:	2200      	movs	r2, #0
 800dee0:	2100      	movs	r1, #0
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 fc9b 	bl	800e81e <USBD_LL_Transmit>

  return USBD_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b082      	sub	sp, #8
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2205      	movs	r2, #5
 800defe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df02:	2300      	movs	r3, #0
 800df04:	2200      	movs	r2, #0
 800df06:	2100      	movs	r1, #0
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fca9 	bl	800e860 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800df1c:	2201      	movs	r2, #1
 800df1e:	4912      	ldr	r1, [pc, #72]	; (800df68 <MX_USB_DEVICE_Init+0x50>)
 800df20:	4812      	ldr	r0, [pc, #72]	; (800df6c <MX_USB_DEVICE_Init+0x54>)
 800df22:	f7fe fd07 	bl	800c934 <USBD_Init>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d001      	beq.n	800df30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df2c:	f7f3 f9e8 	bl	8001300 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800df30:	490f      	ldr	r1, [pc, #60]	; (800df70 <MX_USB_DEVICE_Init+0x58>)
 800df32:	480e      	ldr	r0, [pc, #56]	; (800df6c <MX_USB_DEVICE_Init+0x54>)
 800df34:	f7fe fd2e 	bl	800c994 <USBD_RegisterClass>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df3e:	f7f3 f9df 	bl	8001300 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800df42:	490c      	ldr	r1, [pc, #48]	; (800df74 <MX_USB_DEVICE_Init+0x5c>)
 800df44:	4809      	ldr	r0, [pc, #36]	; (800df6c <MX_USB_DEVICE_Init+0x54>)
 800df46:	f7fe fc1f 	bl	800c788 <USBD_CDC_RegisterInterface>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d001      	beq.n	800df54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df50:	f7f3 f9d6 	bl	8001300 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800df54:	4805      	ldr	r0, [pc, #20]	; (800df6c <MX_USB_DEVICE_Init+0x54>)
 800df56:	f7fe fd53 	bl	800ca00 <USBD_Start>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d001      	beq.n	800df64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df60:	f7f3 f9ce 	bl	8001300 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df64:	bf00      	nop
 800df66:	bd80      	pop	{r7, pc}
 800df68:	2000012c 	.word	0x2000012c
 800df6c:	20004f6c 	.word	0x20004f6c
 800df70:	20000098 	.word	0x20000098
 800df74:	20000118 	.word	0x20000118

0800df78 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800df7c:	2200      	movs	r2, #0
 800df7e:	4905      	ldr	r1, [pc, #20]	; (800df94 <CDC_Init_HS+0x1c>)
 800df80:	4805      	ldr	r0, [pc, #20]	; (800df98 <CDC_Init_HS+0x20>)
 800df82:	f7fe fc1b 	bl	800c7bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800df86:	4905      	ldr	r1, [pc, #20]	; (800df9c <CDC_Init_HS+0x24>)
 800df88:	4803      	ldr	r0, [pc, #12]	; (800df98 <CDC_Init_HS+0x20>)
 800df8a:	f7fe fc39 	bl	800c800 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800df8e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800df90:	4618      	mov	r0, r3
 800df92:	bd80      	pop	{r7, pc}
 800df94:	20005a48 	.word	0x20005a48
 800df98:	20004f6c 	.word	0x20004f6c
 800df9c:	20005248 	.word	0x20005248

0800dfa0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800dfa4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	6039      	str	r1, [r7, #0]
 800dfba:	71fb      	strb	r3, [r7, #7]
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800dfc0:	79fb      	ldrb	r3, [r7, #7]
 800dfc2:	2b23      	cmp	r3, #35	; 0x23
 800dfc4:	d84a      	bhi.n	800e05c <CDC_Control_HS+0xac>
 800dfc6:	a201      	add	r2, pc, #4	; (adr r2, 800dfcc <CDC_Control_HS+0x1c>)
 800dfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfcc:	0800e05d 	.word	0x0800e05d
 800dfd0:	0800e05d 	.word	0x0800e05d
 800dfd4:	0800e05d 	.word	0x0800e05d
 800dfd8:	0800e05d 	.word	0x0800e05d
 800dfdc:	0800e05d 	.word	0x0800e05d
 800dfe0:	0800e05d 	.word	0x0800e05d
 800dfe4:	0800e05d 	.word	0x0800e05d
 800dfe8:	0800e05d 	.word	0x0800e05d
 800dfec:	0800e05d 	.word	0x0800e05d
 800dff0:	0800e05d 	.word	0x0800e05d
 800dff4:	0800e05d 	.word	0x0800e05d
 800dff8:	0800e05d 	.word	0x0800e05d
 800dffc:	0800e05d 	.word	0x0800e05d
 800e000:	0800e05d 	.word	0x0800e05d
 800e004:	0800e05d 	.word	0x0800e05d
 800e008:	0800e05d 	.word	0x0800e05d
 800e00c:	0800e05d 	.word	0x0800e05d
 800e010:	0800e05d 	.word	0x0800e05d
 800e014:	0800e05d 	.word	0x0800e05d
 800e018:	0800e05d 	.word	0x0800e05d
 800e01c:	0800e05d 	.word	0x0800e05d
 800e020:	0800e05d 	.word	0x0800e05d
 800e024:	0800e05d 	.word	0x0800e05d
 800e028:	0800e05d 	.word	0x0800e05d
 800e02c:	0800e05d 	.word	0x0800e05d
 800e030:	0800e05d 	.word	0x0800e05d
 800e034:	0800e05d 	.word	0x0800e05d
 800e038:	0800e05d 	.word	0x0800e05d
 800e03c:	0800e05d 	.word	0x0800e05d
 800e040:	0800e05d 	.word	0x0800e05d
 800e044:	0800e05d 	.word	0x0800e05d
 800e048:	0800e05d 	.word	0x0800e05d
 800e04c:	0800e05d 	.word	0x0800e05d
 800e050:	0800e05d 	.word	0x0800e05d
 800e054:	0800e05d 	.word	0x0800e05d
 800e058:	0800e05d 	.word	0x0800e05d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e05c:	bf00      	nop
  }

  return (USBD_OK);
 800e05e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e060:	4618      	mov	r0, r3
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800e076:	6879      	ldr	r1, [r7, #4]
 800e078:	4805      	ldr	r0, [pc, #20]	; (800e090 <CDC_Receive_HS+0x24>)
 800e07a:	f7fe fbc1 	bl	800c800 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800e07e:	4804      	ldr	r0, [pc, #16]	; (800e090 <CDC_Receive_HS+0x24>)
 800e080:	f7fe fc22 	bl	800c8c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e084:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e086:	4618      	mov	r0, r3
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	20004f6c 	.word	0x20004f6c

0800e094 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800e0a4:	4b0d      	ldr	r3, [pc, #52]	; (800e0dc <CDC_Transmit_HS+0x48>)
 800e0a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d001      	beq.n	800e0ba <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e00b      	b.n	800e0d2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800e0ba:	887b      	ldrh	r3, [r7, #2]
 800e0bc:	461a      	mov	r2, r3
 800e0be:	6879      	ldr	r1, [r7, #4]
 800e0c0:	4806      	ldr	r0, [pc, #24]	; (800e0dc <CDC_Transmit_HS+0x48>)
 800e0c2:	f7fe fb7b 	bl	800c7bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800e0c6:	4805      	ldr	r0, [pc, #20]	; (800e0dc <CDC_Transmit_HS+0x48>)
 800e0c8:	f7fe fbb8 	bl	800c83c <USBD_CDC_TransmitPacket>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20004f6c 	.word	0x20004f6c

0800e0e0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b087      	sub	sp, #28
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800e0f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	371c      	adds	r7, #28
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr
	...

0800e104 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	4603      	mov	r3, r0
 800e10c:	6039      	str	r1, [r7, #0]
 800e10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	2212      	movs	r2, #18
 800e114:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800e116:	4b03      	ldr	r3, [pc, #12]	; (800e124 <USBD_HS_DeviceDescriptor+0x20>)
}
 800e118:	4618      	mov	r0, r3
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr
 800e124:	20000148 	.word	0x20000148

0800e128 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	4603      	mov	r3, r0
 800e130:	6039      	str	r1, [r7, #0]
 800e132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	2204      	movs	r2, #4
 800e138:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e13a:	4b03      	ldr	r3, [pc, #12]	; (800e148 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr
 800e148:	2000015c 	.word	0x2000015c

0800e14c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	4603      	mov	r3, r0
 800e154:	6039      	str	r1, [r7, #0]
 800e156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e158:	79fb      	ldrb	r3, [r7, #7]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d105      	bne.n	800e16a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	4907      	ldr	r1, [pc, #28]	; (800e180 <USBD_HS_ProductStrDescriptor+0x34>)
 800e162:	4808      	ldr	r0, [pc, #32]	; (800e184 <USBD_HS_ProductStrDescriptor+0x38>)
 800e164:	f7ff fdf8 	bl	800dd58 <USBD_GetString>
 800e168:	e004      	b.n	800e174 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	4904      	ldr	r1, [pc, #16]	; (800e180 <USBD_HS_ProductStrDescriptor+0x34>)
 800e16e:	4805      	ldr	r0, [pc, #20]	; (800e184 <USBD_HS_ProductStrDescriptor+0x38>)
 800e170:	f7ff fdf2 	bl	800dd58 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e174:	4b02      	ldr	r3, [pc, #8]	; (800e180 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e176:	4618      	mov	r0, r3
 800e178:	3708      	adds	r7, #8
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	20006248 	.word	0x20006248
 800e184:	08011818 	.word	0x08011818

0800e188 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	6039      	str	r1, [r7, #0]
 800e192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	4904      	ldr	r1, [pc, #16]	; (800e1a8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e198:	4804      	ldr	r0, [pc, #16]	; (800e1ac <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e19a:	f7ff fddd 	bl	800dd58 <USBD_GetString>
  return USBD_StrDesc;
 800e19e:	4b02      	ldr	r3, [pc, #8]	; (800e1a8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	20006248 	.word	0x20006248
 800e1ac:	08011830 	.word	0x08011830

0800e1b0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	6039      	str	r1, [r7, #0]
 800e1ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	221a      	movs	r2, #26
 800e1c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e1c2:	f000 f843 	bl	800e24c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e1c6:	4b02      	ldr	r3, [pc, #8]	; (800e1d0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	20000160 	.word	0x20000160

0800e1d4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	6039      	str	r1, [r7, #0]
 800e1de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e1e0:	79fb      	ldrb	r3, [r7, #7]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d105      	bne.n	800e1f2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e1e6:	683a      	ldr	r2, [r7, #0]
 800e1e8:	4907      	ldr	r1, [pc, #28]	; (800e208 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e1ea:	4808      	ldr	r0, [pc, #32]	; (800e20c <USBD_HS_ConfigStrDescriptor+0x38>)
 800e1ec:	f7ff fdb4 	bl	800dd58 <USBD_GetString>
 800e1f0:	e004      	b.n	800e1fc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	4904      	ldr	r1, [pc, #16]	; (800e208 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e1f6:	4805      	ldr	r0, [pc, #20]	; (800e20c <USBD_HS_ConfigStrDescriptor+0x38>)
 800e1f8:	f7ff fdae 	bl	800dd58 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1fc:	4b02      	ldr	r3, [pc, #8]	; (800e208 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	20006248 	.word	0x20006248
 800e20c:	08011844 	.word	0x08011844

0800e210 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	4603      	mov	r3, r0
 800e218:	6039      	str	r1, [r7, #0]
 800e21a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e21c:	79fb      	ldrb	r3, [r7, #7]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d105      	bne.n	800e22e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e222:	683a      	ldr	r2, [r7, #0]
 800e224:	4907      	ldr	r1, [pc, #28]	; (800e244 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e226:	4808      	ldr	r0, [pc, #32]	; (800e248 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e228:	f7ff fd96 	bl	800dd58 <USBD_GetString>
 800e22c:	e004      	b.n	800e238 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	4904      	ldr	r1, [pc, #16]	; (800e244 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e232:	4805      	ldr	r0, [pc, #20]	; (800e248 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e234:	f7ff fd90 	bl	800dd58 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e238:	4b02      	ldr	r3, [pc, #8]	; (800e244 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3708      	adds	r7, #8
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	20006248 	.word	0x20006248
 800e248:	08011850 	.word	0x08011850

0800e24c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e252:	4b0f      	ldr	r3, [pc, #60]	; (800e290 <Get_SerialNum+0x44>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e258:	4b0e      	ldr	r3, [pc, #56]	; (800e294 <Get_SerialNum+0x48>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e25e:	4b0e      	ldr	r3, [pc, #56]	; (800e298 <Get_SerialNum+0x4c>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	4413      	add	r3, r2
 800e26a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d009      	beq.n	800e286 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e272:	2208      	movs	r2, #8
 800e274:	4909      	ldr	r1, [pc, #36]	; (800e29c <Get_SerialNum+0x50>)
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f000 f814 	bl	800e2a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e27c:	2204      	movs	r2, #4
 800e27e:	4908      	ldr	r1, [pc, #32]	; (800e2a0 <Get_SerialNum+0x54>)
 800e280:	68b8      	ldr	r0, [r7, #8]
 800e282:	f000 f80f 	bl	800e2a4 <IntToUnicode>
  }
}
 800e286:	bf00      	nop
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	1fff7a10 	.word	0x1fff7a10
 800e294:	1fff7a14 	.word	0x1fff7a14
 800e298:	1fff7a18 	.word	0x1fff7a18
 800e29c:	20000162 	.word	0x20000162
 800e2a0:	20000172 	.word	0x20000172

0800e2a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b087      	sub	sp, #28
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	75fb      	strb	r3, [r7, #23]
 800e2ba:	e027      	b.n	800e30c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	0f1b      	lsrs	r3, r3, #28
 800e2c0:	2b09      	cmp	r3, #9
 800e2c2:	d80b      	bhi.n	800e2dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	0f1b      	lsrs	r3, r3, #28
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	005b      	lsls	r3, r3, #1
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	440b      	add	r3, r1
 800e2d4:	3230      	adds	r2, #48	; 0x30
 800e2d6:	b2d2      	uxtb	r2, r2
 800e2d8:	701a      	strb	r2, [r3, #0]
 800e2da:	e00a      	b.n	800e2f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	0f1b      	lsrs	r3, r3, #28
 800e2e0:	b2da      	uxtb	r2, r3
 800e2e2:	7dfb      	ldrb	r3, [r7, #23]
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	440b      	add	r3, r1
 800e2ec:	3237      	adds	r2, #55	; 0x37
 800e2ee:	b2d2      	uxtb	r2, r2
 800e2f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	011b      	lsls	r3, r3, #4
 800e2f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e2f8:	7dfb      	ldrb	r3, [r7, #23]
 800e2fa:	005b      	lsls	r3, r3, #1
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	68ba      	ldr	r2, [r7, #8]
 800e300:	4413      	add	r3, r2
 800e302:	2200      	movs	r2, #0
 800e304:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e306:	7dfb      	ldrb	r3, [r7, #23]
 800e308:	3301      	adds	r3, #1
 800e30a:	75fb      	strb	r3, [r7, #23]
 800e30c:	7dfa      	ldrb	r2, [r7, #23]
 800e30e:	79fb      	ldrb	r3, [r7, #7]
 800e310:	429a      	cmp	r2, r3
 800e312:	d3d3      	bcc.n	800e2bc <IntToUnicode+0x18>
  }
}
 800e314:	bf00      	nop
 800e316:	bf00      	nop
 800e318:	371c      	adds	r7, #28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
	...

0800e324 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b08a      	sub	sp, #40	; 0x28
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e32c:	f107 0314 	add.w	r3, r7, #20
 800e330:	2200      	movs	r2, #0
 800e332:	601a      	str	r2, [r3, #0]
 800e334:	605a      	str	r2, [r3, #4]
 800e336:	609a      	str	r2, [r3, #8]
 800e338:	60da      	str	r2, [r3, #12]
 800e33a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a1d      	ldr	r2, [pc, #116]	; (800e3b8 <HAL_PCD_MspInit+0x94>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d134      	bne.n	800e3b0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e346:	2300      	movs	r3, #0
 800e348:	613b      	str	r3, [r7, #16]
 800e34a:	4b1c      	ldr	r3, [pc, #112]	; (800e3bc <HAL_PCD_MspInit+0x98>)
 800e34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e34e:	4a1b      	ldr	r2, [pc, #108]	; (800e3bc <HAL_PCD_MspInit+0x98>)
 800e350:	f043 0302 	orr.w	r3, r3, #2
 800e354:	6313      	str	r3, [r2, #48]	; 0x30
 800e356:	4b19      	ldr	r3, [pc, #100]	; (800e3bc <HAL_PCD_MspInit+0x98>)
 800e358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e35a:	f003 0302 	and.w	r3, r3, #2
 800e35e:	613b      	str	r3, [r7, #16]
 800e360:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800e362:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800e366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e368:	2302      	movs	r3, #2
 800e36a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e36c:	2300      	movs	r3, #0
 800e36e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e370:	2303      	movs	r3, #3
 800e372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e374:	230c      	movs	r3, #12
 800e376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e378:	f107 0314 	add.w	r3, r7, #20
 800e37c:	4619      	mov	r1, r3
 800e37e:	4810      	ldr	r0, [pc, #64]	; (800e3c0 <HAL_PCD_MspInit+0x9c>)
 800e380:	f7f5 fc38 	bl	8003bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e384:	2300      	movs	r3, #0
 800e386:	60fb      	str	r3, [r7, #12]
 800e388:	4b0c      	ldr	r3, [pc, #48]	; (800e3bc <HAL_PCD_MspInit+0x98>)
 800e38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e38c:	4a0b      	ldr	r2, [pc, #44]	; (800e3bc <HAL_PCD_MspInit+0x98>)
 800e38e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e392:	6313      	str	r3, [r2, #48]	; 0x30
 800e394:	4b09      	ldr	r3, [pc, #36]	; (800e3bc <HAL_PCD_MspInit+0x98>)
 800e396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e39c:	60fb      	str	r3, [r7, #12]
 800e39e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	2105      	movs	r1, #5
 800e3a4:	204d      	movs	r0, #77	; 0x4d
 800e3a6:	f7f4 ffa7 	bl	80032f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e3aa:	204d      	movs	r0, #77	; 0x4d
 800e3ac:	f7f4 ffc0 	bl	8003330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e3b0:	bf00      	nop
 800e3b2:	3728      	adds	r7, #40	; 0x28
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	40040000 	.word	0x40040000
 800e3bc:	40023800 	.word	0x40023800
 800e3c0:	40020400 	.word	0x40020400

0800e3c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4610      	mov	r0, r2
 800e3dc:	f7fe fb5d 	bl	800ca9a <USBD_LL_SetupStage>
}
 800e3e0:	bf00      	nop
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e3fa:	78fa      	ldrb	r2, [r7, #3]
 800e3fc:	6879      	ldr	r1, [r7, #4]
 800e3fe:	4613      	mov	r3, r2
 800e400:	00db      	lsls	r3, r3, #3
 800e402:	4413      	add	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	440b      	add	r3, r1
 800e408:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	78fb      	ldrb	r3, [r7, #3]
 800e410:	4619      	mov	r1, r3
 800e412:	f7fe fb97 	bl	800cb44 <USBD_LL_DataOutStage>
}
 800e416:	bf00      	nop
 800e418:	3708      	adds	r7, #8
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b082      	sub	sp, #8
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	460b      	mov	r3, r1
 800e428:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e430:	78fa      	ldrb	r2, [r7, #3]
 800e432:	6879      	ldr	r1, [r7, #4]
 800e434:	4613      	mov	r3, r2
 800e436:	00db      	lsls	r3, r3, #3
 800e438:	4413      	add	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	440b      	add	r3, r1
 800e43e:	334c      	adds	r3, #76	; 0x4c
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	78fb      	ldrb	r3, [r7, #3]
 800e444:	4619      	mov	r1, r3
 800e446:	f7fe fc30 	bl	800ccaa <USBD_LL_DataInStage>
}
 800e44a:	bf00      	nop
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b082      	sub	sp, #8
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e460:	4618      	mov	r0, r3
 800e462:	f7fe fd64 	bl	800cf2e <USBD_LL_SOF>
}
 800e466:	bf00      	nop
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b084      	sub	sp, #16
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e476:	2301      	movs	r3, #1
 800e478:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d102      	bne.n	800e488 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e482:	2300      	movs	r3, #0
 800e484:	73fb      	strb	r3, [r7, #15]
 800e486:	e008      	b.n	800e49a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	d102      	bne.n	800e496 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e490:	2301      	movs	r3, #1
 800e492:	73fb      	strb	r3, [r7, #15]
 800e494:	e001      	b.n	800e49a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e496:	f7f2 ff33 	bl	8001300 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4a0:	7bfa      	ldrb	r2, [r7, #15]
 800e4a2:	4611      	mov	r1, r2
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7fe fd04 	bl	800ceb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fe fcac 	bl	800ce0e <USBD_LL_Reset>
}
 800e4b6:	bf00      	nop
 800e4b8:	3710      	adds	r7, #16
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
	...

0800e4c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7fe fcff 	bl	800ced2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	6812      	ldr	r2, [r2, #0]
 800e4e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e4e6:	f043 0301 	orr.w	r3, r3, #1
 800e4ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6a1b      	ldr	r3, [r3, #32]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d005      	beq.n	800e500 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e4f4:	4b04      	ldr	r3, [pc, #16]	; (800e508 <HAL_PCD_SuspendCallback+0x48>)
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	4a03      	ldr	r2, [pc, #12]	; (800e508 <HAL_PCD_SuspendCallback+0x48>)
 800e4fa:	f043 0306 	orr.w	r3, r3, #6
 800e4fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e500:	bf00      	nop
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	e000ed00 	.word	0xe000ed00

0800e50c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fe fcef 	bl	800cefe <USBD_LL_Resume>
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e53a:	78fa      	ldrb	r2, [r7, #3]
 800e53c:	4611      	mov	r1, r2
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fe fd47 	bl	800cfd2 <USBD_LL_IsoOUTIncomplete>
}
 800e544:	bf00      	nop
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	460b      	mov	r3, r1
 800e556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e55e:	78fa      	ldrb	r2, [r7, #3]
 800e560:	4611      	mov	r1, r2
 800e562:	4618      	mov	r0, r3
 800e564:	f7fe fd03 	bl	800cf6e <USBD_LL_IsoINIncomplete>
}
 800e568:	bf00      	nop
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fd59 	bl	800d036 <USBD_LL_DevConnected>
}
 800e584:	bf00      	nop
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fe fd56 	bl	800d04c <USBD_LL_DevDisconnected>
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d140      	bne.n	800e63a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e5b8:	4a22      	ldr	r2, [pc, #136]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4a20      	ldr	r2, [pc, #128]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e5c8:	4b1e      	ldr	r3, [pc, #120]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5ca:	4a1f      	ldr	r2, [pc, #124]	; (800e648 <USBD_LL_Init+0xa0>)
 800e5cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800e5ce:	4b1d      	ldr	r3, [pc, #116]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5d0:	2206      	movs	r2, #6
 800e5d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e5d4:	4b1b      	ldr	r3, [pc, #108]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e5da:	4b1a      	ldr	r3, [pc, #104]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e5e0:	4b18      	ldr	r3, [pc, #96]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5e2:	2202      	movs	r2, #2
 800e5e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e5e6:	4b17      	ldr	r3, [pc, #92]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e5ec:	4b15      	ldr	r3, [pc, #84]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e5f2:	4b14      	ldr	r3, [pc, #80]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e5f8:	4b12      	ldr	r3, [pc, #72]	; (800e644 <USBD_LL_Init+0x9c>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e5fe:	4b11      	ldr	r3, [pc, #68]	; (800e644 <USBD_LL_Init+0x9c>)
 800e600:	2200      	movs	r2, #0
 800e602:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e604:	4b0f      	ldr	r3, [pc, #60]	; (800e644 <USBD_LL_Init+0x9c>)
 800e606:	2200      	movs	r2, #0
 800e608:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e60a:	480e      	ldr	r0, [pc, #56]	; (800e644 <USBD_LL_Init+0x9c>)
 800e60c:	f7f5 ff91 	bl	8004532 <HAL_PCD_Init>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d001      	beq.n	800e61a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e616:	f7f2 fe73 	bl	8001300 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e61a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e61e:	4809      	ldr	r0, [pc, #36]	; (800e644 <USBD_LL_Init+0x9c>)
 800e620:	f7f7 f9e7 	bl	80059f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e624:	2280      	movs	r2, #128	; 0x80
 800e626:	2100      	movs	r1, #0
 800e628:	4806      	ldr	r0, [pc, #24]	; (800e644 <USBD_LL_Init+0x9c>)
 800e62a:	f7f7 f99b 	bl	8005964 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e62e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e632:	2101      	movs	r1, #1
 800e634:	4803      	ldr	r0, [pc, #12]	; (800e644 <USBD_LL_Init+0x9c>)
 800e636:	f7f7 f995 	bl	8005964 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	20006448 	.word	0x20006448
 800e648:	40040000 	.word	0x40040000

0800e64c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e654:	2300      	movs	r3, #0
 800e656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e658:	2300      	movs	r3, #0
 800e65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e662:	4618      	mov	r0, r3
 800e664:	f7f6 f882 	bl	800476c <HAL_PCD_Start>
 800e668:	4603      	mov	r3, r0
 800e66a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e66c:	7bfb      	ldrb	r3, [r7, #15]
 800e66e:	4618      	mov	r0, r3
 800e670:	f000 f942 	bl	800e8f8 <USBD_Get_USB_Status>
 800e674:	4603      	mov	r3, r0
 800e676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e678:	7bbb      	ldrb	r3, [r7, #14]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3710      	adds	r7, #16
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}

0800e682 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e682:	b580      	push	{r7, lr}
 800e684:	b084      	sub	sp, #16
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
 800e68a:	4608      	mov	r0, r1
 800e68c:	4611      	mov	r1, r2
 800e68e:	461a      	mov	r2, r3
 800e690:	4603      	mov	r3, r0
 800e692:	70fb      	strb	r3, [r7, #3]
 800e694:	460b      	mov	r3, r1
 800e696:	70bb      	strb	r3, [r7, #2]
 800e698:	4613      	mov	r3, r2
 800e69a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e6aa:	78bb      	ldrb	r3, [r7, #2]
 800e6ac:	883a      	ldrh	r2, [r7, #0]
 800e6ae:	78f9      	ldrb	r1, [r7, #3]
 800e6b0:	f7f6 fd53 	bl	800515a <HAL_PCD_EP_Open>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6b8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 f91c 	bl	800e8f8 <USBD_Get_USB_Status>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b084      	sub	sp, #16
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6e8:	78fa      	ldrb	r2, [r7, #3]
 800e6ea:	4611      	mov	r1, r2
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7f6 fd9c 	bl	800522a <HAL_PCD_EP_Close>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6f6:	7bfb      	ldrb	r3, [r7, #15]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f000 f8fd 	bl	800e8f8 <USBD_Get_USB_Status>
 800e6fe:	4603      	mov	r3, r0
 800e700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e702:	7bbb      	ldrb	r3, [r7, #14]
}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	460b      	mov	r3, r1
 800e716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e718:	2300      	movs	r3, #0
 800e71a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e71c:	2300      	movs	r3, #0
 800e71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e726:	78fa      	ldrb	r2, [r7, #3]
 800e728:	4611      	mov	r1, r2
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7f6 fe74 	bl	8005418 <HAL_PCD_EP_SetStall>
 800e730:	4603      	mov	r3, r0
 800e732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e734:	7bfb      	ldrb	r3, [r7, #15]
 800e736:	4618      	mov	r0, r3
 800e738:	f000 f8de 	bl	800e8f8 <USBD_Get_USB_Status>
 800e73c:	4603      	mov	r3, r0
 800e73e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e740:	7bbb      	ldrb	r3, [r7, #14]
}
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	460b      	mov	r3, r1
 800e754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e756:	2300      	movs	r3, #0
 800e758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e75a:	2300      	movs	r3, #0
 800e75c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e764:	78fa      	ldrb	r2, [r7, #3]
 800e766:	4611      	mov	r1, r2
 800e768:	4618      	mov	r0, r3
 800e76a:	f7f6 feb9 	bl	80054e0 <HAL_PCD_EP_ClrStall>
 800e76e:	4603      	mov	r3, r0
 800e770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e772:	7bfb      	ldrb	r3, [r7, #15]
 800e774:	4618      	mov	r0, r3
 800e776:	f000 f8bf 	bl	800e8f8 <USBD_Get_USB_Status>
 800e77a:	4603      	mov	r3, r0
 800e77c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e77e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	460b      	mov	r3, r1
 800e792:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e79a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e79c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	da0b      	bge.n	800e7bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e7a4:	78fb      	ldrb	r3, [r7, #3]
 800e7a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7aa:	68f9      	ldr	r1, [r7, #12]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	00db      	lsls	r3, r3, #3
 800e7b0:	4413      	add	r3, r2
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	440b      	add	r3, r1
 800e7b6:	333e      	adds	r3, #62	; 0x3e
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	e00b      	b.n	800e7d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e7bc:	78fb      	ldrb	r3, [r7, #3]
 800e7be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7c2:	68f9      	ldr	r1, [r7, #12]
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	00db      	lsls	r3, r3, #3
 800e7c8:	4413      	add	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	440b      	add	r3, r1
 800e7ce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e7d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3714      	adds	r7, #20
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7fa:	78fa      	ldrb	r2, [r7, #3]
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7f6 fc86 	bl	8005110 <HAL_PCD_SetAddress>
 800e804:	4603      	mov	r3, r0
 800e806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e808:	7bfb      	ldrb	r3, [r7, #15]
 800e80a:	4618      	mov	r0, r3
 800e80c:	f000 f874 	bl	800e8f8 <USBD_Get_USB_Status>
 800e810:	4603      	mov	r3, r0
 800e812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e814:	7bbb      	ldrb	r3, [r7, #14]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b086      	sub	sp, #24
 800e822:	af00      	add	r7, sp, #0
 800e824:	60f8      	str	r0, [r7, #12]
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	603b      	str	r3, [r7, #0]
 800e82a:	460b      	mov	r3, r1
 800e82c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e82e:	2300      	movs	r3, #0
 800e830:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e832:	2300      	movs	r3, #0
 800e834:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e83c:	7af9      	ldrb	r1, [r7, #11]
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	f7f6 fd9f 	bl	8005384 <HAL_PCD_EP_Transmit>
 800e846:	4603      	mov	r3, r0
 800e848:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e84a:	7dfb      	ldrb	r3, [r7, #23]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f000 f853 	bl	800e8f8 <USBD_Get_USB_Status>
 800e852:	4603      	mov	r3, r0
 800e854:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e856:	7dbb      	ldrb	r3, [r7, #22]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3718      	adds	r7, #24
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b086      	sub	sp, #24
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	607a      	str	r2, [r7, #4]
 800e86a:	603b      	str	r3, [r7, #0]
 800e86c:	460b      	mov	r3, r1
 800e86e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e870:	2300      	movs	r3, #0
 800e872:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e874:	2300      	movs	r3, #0
 800e876:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e87e:	7af9      	ldrb	r1, [r7, #11]
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	f7f6 fd1b 	bl	80052be <HAL_PCD_EP_Receive>
 800e888:	4603      	mov	r3, r0
 800e88a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e88c:	7dfb      	ldrb	r3, [r7, #23]
 800e88e:	4618      	mov	r0, r3
 800e890:	f000 f832 	bl	800e8f8 <USBD_Get_USB_Status>
 800e894:	4603      	mov	r3, r0
 800e896:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e898:	7dbb      	ldrb	r3, [r7, #22]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b082      	sub	sp, #8
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8b4:	78fa      	ldrb	r2, [r7, #3]
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7f6 fd4b 	bl	8005354 <HAL_PCD_EP_GetRxCount>
 800e8be:	4603      	mov	r3, r0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e8d0:	4b03      	ldr	r3, [pc, #12]	; (800e8e0 <USBD_static_malloc+0x18>)
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	370c      	adds	r7, #12
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	20006954 	.word	0x20006954

0800e8e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]

}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	4603      	mov	r3, r0
 800e900:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e902:	2300      	movs	r3, #0
 800e904:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e906:	79fb      	ldrb	r3, [r7, #7]
 800e908:	2b03      	cmp	r3, #3
 800e90a:	d817      	bhi.n	800e93c <USBD_Get_USB_Status+0x44>
 800e90c:	a201      	add	r2, pc, #4	; (adr r2, 800e914 <USBD_Get_USB_Status+0x1c>)
 800e90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e912:	bf00      	nop
 800e914:	0800e925 	.word	0x0800e925
 800e918:	0800e92b 	.word	0x0800e92b
 800e91c:	0800e931 	.word	0x0800e931
 800e920:	0800e937 	.word	0x0800e937
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e924:	2300      	movs	r3, #0
 800e926:	73fb      	strb	r3, [r7, #15]
    break;
 800e928:	e00b      	b.n	800e942 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e92a:	2303      	movs	r3, #3
 800e92c:	73fb      	strb	r3, [r7, #15]
    break;
 800e92e:	e008      	b.n	800e942 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e930:	2301      	movs	r3, #1
 800e932:	73fb      	strb	r3, [r7, #15]
    break;
 800e934:	e005      	b.n	800e942 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e936:	2303      	movs	r3, #3
 800e938:	73fb      	strb	r3, [r7, #15]
    break;
 800e93a:	e002      	b.n	800e942 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e93c:	2303      	movs	r3, #3
 800e93e:	73fb      	strb	r3, [r7, #15]
    break;
 800e940:	bf00      	nop
  }
  return usb_status;
 800e942:	7bfb      	ldrb	r3, [r7, #15]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3714      	adds	r7, #20
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <__errno>:
 800e950:	4b01      	ldr	r3, [pc, #4]	; (800e958 <__errno+0x8>)
 800e952:	6818      	ldr	r0, [r3, #0]
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	2000017c 	.word	0x2000017c

0800e95c <__libc_init_array>:
 800e95c:	b570      	push	{r4, r5, r6, lr}
 800e95e:	4d0d      	ldr	r5, [pc, #52]	; (800e994 <__libc_init_array+0x38>)
 800e960:	4c0d      	ldr	r4, [pc, #52]	; (800e998 <__libc_init_array+0x3c>)
 800e962:	1b64      	subs	r4, r4, r5
 800e964:	10a4      	asrs	r4, r4, #2
 800e966:	2600      	movs	r6, #0
 800e968:	42a6      	cmp	r6, r4
 800e96a:	d109      	bne.n	800e980 <__libc_init_array+0x24>
 800e96c:	4d0b      	ldr	r5, [pc, #44]	; (800e99c <__libc_init_array+0x40>)
 800e96e:	4c0c      	ldr	r4, [pc, #48]	; (800e9a0 <__libc_init_array+0x44>)
 800e970:	f002 ff04 	bl	801177c <_init>
 800e974:	1b64      	subs	r4, r4, r5
 800e976:	10a4      	asrs	r4, r4, #2
 800e978:	2600      	movs	r6, #0
 800e97a:	42a6      	cmp	r6, r4
 800e97c:	d105      	bne.n	800e98a <__libc_init_array+0x2e>
 800e97e:	bd70      	pop	{r4, r5, r6, pc}
 800e980:	f855 3b04 	ldr.w	r3, [r5], #4
 800e984:	4798      	blx	r3
 800e986:	3601      	adds	r6, #1
 800e988:	e7ee      	b.n	800e968 <__libc_init_array+0xc>
 800e98a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e98e:	4798      	blx	r3
 800e990:	3601      	adds	r6, #1
 800e992:	e7f2      	b.n	800e97a <__libc_init_array+0x1e>
 800e994:	08013764 	.word	0x08013764
 800e998:	08013764 	.word	0x08013764
 800e99c:	08013764 	.word	0x08013764
 800e9a0:	08013768 	.word	0x08013768

0800e9a4 <memcpy>:
 800e9a4:	440a      	add	r2, r1
 800e9a6:	4291      	cmp	r1, r2
 800e9a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9ac:	d100      	bne.n	800e9b0 <memcpy+0xc>
 800e9ae:	4770      	bx	lr
 800e9b0:	b510      	push	{r4, lr}
 800e9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9ba:	4291      	cmp	r1, r2
 800e9bc:	d1f9      	bne.n	800e9b2 <memcpy+0xe>
 800e9be:	bd10      	pop	{r4, pc}

0800e9c0 <memset>:
 800e9c0:	4402      	add	r2, r0
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d100      	bne.n	800e9ca <memset+0xa>
 800e9c8:	4770      	bx	lr
 800e9ca:	f803 1b01 	strb.w	r1, [r3], #1
 800e9ce:	e7f9      	b.n	800e9c4 <memset+0x4>

0800e9d0 <__cvt>:
 800e9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d4:	ec55 4b10 	vmov	r4, r5, d0
 800e9d8:	2d00      	cmp	r5, #0
 800e9da:	460e      	mov	r6, r1
 800e9dc:	4619      	mov	r1, r3
 800e9de:	462b      	mov	r3, r5
 800e9e0:	bfbb      	ittet	lt
 800e9e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e9e6:	461d      	movlt	r5, r3
 800e9e8:	2300      	movge	r3, #0
 800e9ea:	232d      	movlt	r3, #45	; 0x2d
 800e9ec:	700b      	strb	r3, [r1, #0]
 800e9ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e9f4:	4691      	mov	r9, r2
 800e9f6:	f023 0820 	bic.w	r8, r3, #32
 800e9fa:	bfbc      	itt	lt
 800e9fc:	4622      	movlt	r2, r4
 800e9fe:	4614      	movlt	r4, r2
 800ea00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea04:	d005      	beq.n	800ea12 <__cvt+0x42>
 800ea06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ea0a:	d100      	bne.n	800ea0e <__cvt+0x3e>
 800ea0c:	3601      	adds	r6, #1
 800ea0e:	2102      	movs	r1, #2
 800ea10:	e000      	b.n	800ea14 <__cvt+0x44>
 800ea12:	2103      	movs	r1, #3
 800ea14:	ab03      	add	r3, sp, #12
 800ea16:	9301      	str	r3, [sp, #4]
 800ea18:	ab02      	add	r3, sp, #8
 800ea1a:	9300      	str	r3, [sp, #0]
 800ea1c:	ec45 4b10 	vmov	d0, r4, r5
 800ea20:	4653      	mov	r3, sl
 800ea22:	4632      	mov	r2, r6
 800ea24:	f000 fcec 	bl	800f400 <_dtoa_r>
 800ea28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ea2c:	4607      	mov	r7, r0
 800ea2e:	d102      	bne.n	800ea36 <__cvt+0x66>
 800ea30:	f019 0f01 	tst.w	r9, #1
 800ea34:	d022      	beq.n	800ea7c <__cvt+0xac>
 800ea36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea3a:	eb07 0906 	add.w	r9, r7, r6
 800ea3e:	d110      	bne.n	800ea62 <__cvt+0x92>
 800ea40:	783b      	ldrb	r3, [r7, #0]
 800ea42:	2b30      	cmp	r3, #48	; 0x30
 800ea44:	d10a      	bne.n	800ea5c <__cvt+0x8c>
 800ea46:	2200      	movs	r2, #0
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	f7f2 f84b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea52:	b918      	cbnz	r0, 800ea5c <__cvt+0x8c>
 800ea54:	f1c6 0601 	rsb	r6, r6, #1
 800ea58:	f8ca 6000 	str.w	r6, [sl]
 800ea5c:	f8da 3000 	ldr.w	r3, [sl]
 800ea60:	4499      	add	r9, r3
 800ea62:	2200      	movs	r2, #0
 800ea64:	2300      	movs	r3, #0
 800ea66:	4620      	mov	r0, r4
 800ea68:	4629      	mov	r1, r5
 800ea6a:	f7f2 f83d 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea6e:	b108      	cbz	r0, 800ea74 <__cvt+0xa4>
 800ea70:	f8cd 900c 	str.w	r9, [sp, #12]
 800ea74:	2230      	movs	r2, #48	; 0x30
 800ea76:	9b03      	ldr	r3, [sp, #12]
 800ea78:	454b      	cmp	r3, r9
 800ea7a:	d307      	bcc.n	800ea8c <__cvt+0xbc>
 800ea7c:	9b03      	ldr	r3, [sp, #12]
 800ea7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea80:	1bdb      	subs	r3, r3, r7
 800ea82:	4638      	mov	r0, r7
 800ea84:	6013      	str	r3, [r2, #0]
 800ea86:	b004      	add	sp, #16
 800ea88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea8c:	1c59      	adds	r1, r3, #1
 800ea8e:	9103      	str	r1, [sp, #12]
 800ea90:	701a      	strb	r2, [r3, #0]
 800ea92:	e7f0      	b.n	800ea76 <__cvt+0xa6>

0800ea94 <__exponent>:
 800ea94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea96:	4603      	mov	r3, r0
 800ea98:	2900      	cmp	r1, #0
 800ea9a:	bfb8      	it	lt
 800ea9c:	4249      	neglt	r1, r1
 800ea9e:	f803 2b02 	strb.w	r2, [r3], #2
 800eaa2:	bfb4      	ite	lt
 800eaa4:	222d      	movlt	r2, #45	; 0x2d
 800eaa6:	222b      	movge	r2, #43	; 0x2b
 800eaa8:	2909      	cmp	r1, #9
 800eaaa:	7042      	strb	r2, [r0, #1]
 800eaac:	dd2a      	ble.n	800eb04 <__exponent+0x70>
 800eaae:	f10d 0407 	add.w	r4, sp, #7
 800eab2:	46a4      	mov	ip, r4
 800eab4:	270a      	movs	r7, #10
 800eab6:	46a6      	mov	lr, r4
 800eab8:	460a      	mov	r2, r1
 800eaba:	fb91 f6f7 	sdiv	r6, r1, r7
 800eabe:	fb07 1516 	mls	r5, r7, r6, r1
 800eac2:	3530      	adds	r5, #48	; 0x30
 800eac4:	2a63      	cmp	r2, #99	; 0x63
 800eac6:	f104 34ff 	add.w	r4, r4, #4294967295
 800eaca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800eace:	4631      	mov	r1, r6
 800ead0:	dcf1      	bgt.n	800eab6 <__exponent+0x22>
 800ead2:	3130      	adds	r1, #48	; 0x30
 800ead4:	f1ae 0502 	sub.w	r5, lr, #2
 800ead8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eadc:	1c44      	adds	r4, r0, #1
 800eade:	4629      	mov	r1, r5
 800eae0:	4561      	cmp	r1, ip
 800eae2:	d30a      	bcc.n	800eafa <__exponent+0x66>
 800eae4:	f10d 0209 	add.w	r2, sp, #9
 800eae8:	eba2 020e 	sub.w	r2, r2, lr
 800eaec:	4565      	cmp	r5, ip
 800eaee:	bf88      	it	hi
 800eaf0:	2200      	movhi	r2, #0
 800eaf2:	4413      	add	r3, r2
 800eaf4:	1a18      	subs	r0, r3, r0
 800eaf6:	b003      	add	sp, #12
 800eaf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eafa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eafe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eb02:	e7ed      	b.n	800eae0 <__exponent+0x4c>
 800eb04:	2330      	movs	r3, #48	; 0x30
 800eb06:	3130      	adds	r1, #48	; 0x30
 800eb08:	7083      	strb	r3, [r0, #2]
 800eb0a:	70c1      	strb	r1, [r0, #3]
 800eb0c:	1d03      	adds	r3, r0, #4
 800eb0e:	e7f1      	b.n	800eaf4 <__exponent+0x60>

0800eb10 <_printf_float>:
 800eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb14:	ed2d 8b02 	vpush	{d8}
 800eb18:	b08d      	sub	sp, #52	; 0x34
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eb20:	4616      	mov	r6, r2
 800eb22:	461f      	mov	r7, r3
 800eb24:	4605      	mov	r5, r0
 800eb26:	f001 fa59 	bl	800ffdc <_localeconv_r>
 800eb2a:	f8d0 a000 	ldr.w	sl, [r0]
 800eb2e:	4650      	mov	r0, sl
 800eb30:	f7f1 fb5e 	bl	80001f0 <strlen>
 800eb34:	2300      	movs	r3, #0
 800eb36:	930a      	str	r3, [sp, #40]	; 0x28
 800eb38:	6823      	ldr	r3, [r4, #0]
 800eb3a:	9305      	str	r3, [sp, #20]
 800eb3c:	f8d8 3000 	ldr.w	r3, [r8]
 800eb40:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eb44:	3307      	adds	r3, #7
 800eb46:	f023 0307 	bic.w	r3, r3, #7
 800eb4a:	f103 0208 	add.w	r2, r3, #8
 800eb4e:	f8c8 2000 	str.w	r2, [r8]
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eb5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eb5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb62:	9307      	str	r3, [sp, #28]
 800eb64:	f8cd 8018 	str.w	r8, [sp, #24]
 800eb68:	ee08 0a10 	vmov	s16, r0
 800eb6c:	4b9f      	ldr	r3, [pc, #636]	; (800edec <_printf_float+0x2dc>)
 800eb6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb72:	f04f 32ff 	mov.w	r2, #4294967295
 800eb76:	f7f1 ffe9 	bl	8000b4c <__aeabi_dcmpun>
 800eb7a:	bb88      	cbnz	r0, 800ebe0 <_printf_float+0xd0>
 800eb7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb80:	4b9a      	ldr	r3, [pc, #616]	; (800edec <_printf_float+0x2dc>)
 800eb82:	f04f 32ff 	mov.w	r2, #4294967295
 800eb86:	f7f1 ffc3 	bl	8000b10 <__aeabi_dcmple>
 800eb8a:	bb48      	cbnz	r0, 800ebe0 <_printf_float+0xd0>
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	2300      	movs	r3, #0
 800eb90:	4640      	mov	r0, r8
 800eb92:	4649      	mov	r1, r9
 800eb94:	f7f1 ffb2 	bl	8000afc <__aeabi_dcmplt>
 800eb98:	b110      	cbz	r0, 800eba0 <_printf_float+0x90>
 800eb9a:	232d      	movs	r3, #45	; 0x2d
 800eb9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eba0:	4b93      	ldr	r3, [pc, #588]	; (800edf0 <_printf_float+0x2e0>)
 800eba2:	4894      	ldr	r0, [pc, #592]	; (800edf4 <_printf_float+0x2e4>)
 800eba4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eba8:	bf94      	ite	ls
 800ebaa:	4698      	movls	r8, r3
 800ebac:	4680      	movhi	r8, r0
 800ebae:	2303      	movs	r3, #3
 800ebb0:	6123      	str	r3, [r4, #16]
 800ebb2:	9b05      	ldr	r3, [sp, #20]
 800ebb4:	f023 0204 	bic.w	r2, r3, #4
 800ebb8:	6022      	str	r2, [r4, #0]
 800ebba:	f04f 0900 	mov.w	r9, #0
 800ebbe:	9700      	str	r7, [sp, #0]
 800ebc0:	4633      	mov	r3, r6
 800ebc2:	aa0b      	add	r2, sp, #44	; 0x2c
 800ebc4:	4621      	mov	r1, r4
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f000 f9d8 	bl	800ef7c <_printf_common>
 800ebcc:	3001      	adds	r0, #1
 800ebce:	f040 8090 	bne.w	800ecf2 <_printf_float+0x1e2>
 800ebd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd6:	b00d      	add	sp, #52	; 0x34
 800ebd8:	ecbd 8b02 	vpop	{d8}
 800ebdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe0:	4642      	mov	r2, r8
 800ebe2:	464b      	mov	r3, r9
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	4649      	mov	r1, r9
 800ebe8:	f7f1 ffb0 	bl	8000b4c <__aeabi_dcmpun>
 800ebec:	b140      	cbz	r0, 800ec00 <_printf_float+0xf0>
 800ebee:	464b      	mov	r3, r9
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	bfbc      	itt	lt
 800ebf4:	232d      	movlt	r3, #45	; 0x2d
 800ebf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ebfa:	487f      	ldr	r0, [pc, #508]	; (800edf8 <_printf_float+0x2e8>)
 800ebfc:	4b7f      	ldr	r3, [pc, #508]	; (800edfc <_printf_float+0x2ec>)
 800ebfe:	e7d1      	b.n	800eba4 <_printf_float+0x94>
 800ec00:	6863      	ldr	r3, [r4, #4]
 800ec02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ec06:	9206      	str	r2, [sp, #24]
 800ec08:	1c5a      	adds	r2, r3, #1
 800ec0a:	d13f      	bne.n	800ec8c <_printf_float+0x17c>
 800ec0c:	2306      	movs	r3, #6
 800ec0e:	6063      	str	r3, [r4, #4]
 800ec10:	9b05      	ldr	r3, [sp, #20]
 800ec12:	6861      	ldr	r1, [r4, #4]
 800ec14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ec18:	2300      	movs	r3, #0
 800ec1a:	9303      	str	r3, [sp, #12]
 800ec1c:	ab0a      	add	r3, sp, #40	; 0x28
 800ec1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ec22:	ab09      	add	r3, sp, #36	; 0x24
 800ec24:	ec49 8b10 	vmov	d0, r8, r9
 800ec28:	9300      	str	r3, [sp, #0]
 800ec2a:	6022      	str	r2, [r4, #0]
 800ec2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ec30:	4628      	mov	r0, r5
 800ec32:	f7ff fecd 	bl	800e9d0 <__cvt>
 800ec36:	9b06      	ldr	r3, [sp, #24]
 800ec38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec3a:	2b47      	cmp	r3, #71	; 0x47
 800ec3c:	4680      	mov	r8, r0
 800ec3e:	d108      	bne.n	800ec52 <_printf_float+0x142>
 800ec40:	1cc8      	adds	r0, r1, #3
 800ec42:	db02      	blt.n	800ec4a <_printf_float+0x13a>
 800ec44:	6863      	ldr	r3, [r4, #4]
 800ec46:	4299      	cmp	r1, r3
 800ec48:	dd41      	ble.n	800ecce <_printf_float+0x1be>
 800ec4a:	f1ab 0b02 	sub.w	fp, fp, #2
 800ec4e:	fa5f fb8b 	uxtb.w	fp, fp
 800ec52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec56:	d820      	bhi.n	800ec9a <_printf_float+0x18a>
 800ec58:	3901      	subs	r1, #1
 800ec5a:	465a      	mov	r2, fp
 800ec5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ec60:	9109      	str	r1, [sp, #36]	; 0x24
 800ec62:	f7ff ff17 	bl	800ea94 <__exponent>
 800ec66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec68:	1813      	adds	r3, r2, r0
 800ec6a:	2a01      	cmp	r2, #1
 800ec6c:	4681      	mov	r9, r0
 800ec6e:	6123      	str	r3, [r4, #16]
 800ec70:	dc02      	bgt.n	800ec78 <_printf_float+0x168>
 800ec72:	6822      	ldr	r2, [r4, #0]
 800ec74:	07d2      	lsls	r2, r2, #31
 800ec76:	d501      	bpl.n	800ec7c <_printf_float+0x16c>
 800ec78:	3301      	adds	r3, #1
 800ec7a:	6123      	str	r3, [r4, #16]
 800ec7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d09c      	beq.n	800ebbe <_printf_float+0xae>
 800ec84:	232d      	movs	r3, #45	; 0x2d
 800ec86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec8a:	e798      	b.n	800ebbe <_printf_float+0xae>
 800ec8c:	9a06      	ldr	r2, [sp, #24]
 800ec8e:	2a47      	cmp	r2, #71	; 0x47
 800ec90:	d1be      	bne.n	800ec10 <_printf_float+0x100>
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d1bc      	bne.n	800ec10 <_printf_float+0x100>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e7b9      	b.n	800ec0e <_printf_float+0xfe>
 800ec9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ec9e:	d118      	bne.n	800ecd2 <_printf_float+0x1c2>
 800eca0:	2900      	cmp	r1, #0
 800eca2:	6863      	ldr	r3, [r4, #4]
 800eca4:	dd0b      	ble.n	800ecbe <_printf_float+0x1ae>
 800eca6:	6121      	str	r1, [r4, #16]
 800eca8:	b913      	cbnz	r3, 800ecb0 <_printf_float+0x1a0>
 800ecaa:	6822      	ldr	r2, [r4, #0]
 800ecac:	07d0      	lsls	r0, r2, #31
 800ecae:	d502      	bpl.n	800ecb6 <_printf_float+0x1a6>
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	440b      	add	r3, r1
 800ecb4:	6123      	str	r3, [r4, #16]
 800ecb6:	65a1      	str	r1, [r4, #88]	; 0x58
 800ecb8:	f04f 0900 	mov.w	r9, #0
 800ecbc:	e7de      	b.n	800ec7c <_printf_float+0x16c>
 800ecbe:	b913      	cbnz	r3, 800ecc6 <_printf_float+0x1b6>
 800ecc0:	6822      	ldr	r2, [r4, #0]
 800ecc2:	07d2      	lsls	r2, r2, #31
 800ecc4:	d501      	bpl.n	800ecca <_printf_float+0x1ba>
 800ecc6:	3302      	adds	r3, #2
 800ecc8:	e7f4      	b.n	800ecb4 <_printf_float+0x1a4>
 800ecca:	2301      	movs	r3, #1
 800eccc:	e7f2      	b.n	800ecb4 <_printf_float+0x1a4>
 800ecce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ecd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecd4:	4299      	cmp	r1, r3
 800ecd6:	db05      	blt.n	800ece4 <_printf_float+0x1d4>
 800ecd8:	6823      	ldr	r3, [r4, #0]
 800ecda:	6121      	str	r1, [r4, #16]
 800ecdc:	07d8      	lsls	r0, r3, #31
 800ecde:	d5ea      	bpl.n	800ecb6 <_printf_float+0x1a6>
 800ece0:	1c4b      	adds	r3, r1, #1
 800ece2:	e7e7      	b.n	800ecb4 <_printf_float+0x1a4>
 800ece4:	2900      	cmp	r1, #0
 800ece6:	bfd4      	ite	le
 800ece8:	f1c1 0202 	rsble	r2, r1, #2
 800ecec:	2201      	movgt	r2, #1
 800ecee:	4413      	add	r3, r2
 800ecf0:	e7e0      	b.n	800ecb4 <_printf_float+0x1a4>
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	055a      	lsls	r2, r3, #21
 800ecf6:	d407      	bmi.n	800ed08 <_printf_float+0x1f8>
 800ecf8:	6923      	ldr	r3, [r4, #16]
 800ecfa:	4642      	mov	r2, r8
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4628      	mov	r0, r5
 800ed00:	47b8      	blx	r7
 800ed02:	3001      	adds	r0, #1
 800ed04:	d12c      	bne.n	800ed60 <_printf_float+0x250>
 800ed06:	e764      	b.n	800ebd2 <_printf_float+0xc2>
 800ed08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ed0c:	f240 80e0 	bls.w	800eed0 <_printf_float+0x3c0>
 800ed10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed14:	2200      	movs	r2, #0
 800ed16:	2300      	movs	r3, #0
 800ed18:	f7f1 fee6 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d034      	beq.n	800ed8a <_printf_float+0x27a>
 800ed20:	4a37      	ldr	r2, [pc, #220]	; (800ee00 <_printf_float+0x2f0>)
 800ed22:	2301      	movs	r3, #1
 800ed24:	4631      	mov	r1, r6
 800ed26:	4628      	mov	r0, r5
 800ed28:	47b8      	blx	r7
 800ed2a:	3001      	adds	r0, #1
 800ed2c:	f43f af51 	beq.w	800ebd2 <_printf_float+0xc2>
 800ed30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed34:	429a      	cmp	r2, r3
 800ed36:	db02      	blt.n	800ed3e <_printf_float+0x22e>
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	07d8      	lsls	r0, r3, #31
 800ed3c:	d510      	bpl.n	800ed60 <_printf_float+0x250>
 800ed3e:	ee18 3a10 	vmov	r3, s16
 800ed42:	4652      	mov	r2, sl
 800ed44:	4631      	mov	r1, r6
 800ed46:	4628      	mov	r0, r5
 800ed48:	47b8      	blx	r7
 800ed4a:	3001      	adds	r0, #1
 800ed4c:	f43f af41 	beq.w	800ebd2 <_printf_float+0xc2>
 800ed50:	f04f 0800 	mov.w	r8, #0
 800ed54:	f104 091a 	add.w	r9, r4, #26
 800ed58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	4543      	cmp	r3, r8
 800ed5e:	dc09      	bgt.n	800ed74 <_printf_float+0x264>
 800ed60:	6823      	ldr	r3, [r4, #0]
 800ed62:	079b      	lsls	r3, r3, #30
 800ed64:	f100 8105 	bmi.w	800ef72 <_printf_float+0x462>
 800ed68:	68e0      	ldr	r0, [r4, #12]
 800ed6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed6c:	4298      	cmp	r0, r3
 800ed6e:	bfb8      	it	lt
 800ed70:	4618      	movlt	r0, r3
 800ed72:	e730      	b.n	800ebd6 <_printf_float+0xc6>
 800ed74:	2301      	movs	r3, #1
 800ed76:	464a      	mov	r2, r9
 800ed78:	4631      	mov	r1, r6
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	47b8      	blx	r7
 800ed7e:	3001      	adds	r0, #1
 800ed80:	f43f af27 	beq.w	800ebd2 <_printf_float+0xc2>
 800ed84:	f108 0801 	add.w	r8, r8, #1
 800ed88:	e7e6      	b.n	800ed58 <_printf_float+0x248>
 800ed8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	dc39      	bgt.n	800ee04 <_printf_float+0x2f4>
 800ed90:	4a1b      	ldr	r2, [pc, #108]	; (800ee00 <_printf_float+0x2f0>)
 800ed92:	2301      	movs	r3, #1
 800ed94:	4631      	mov	r1, r6
 800ed96:	4628      	mov	r0, r5
 800ed98:	47b8      	blx	r7
 800ed9a:	3001      	adds	r0, #1
 800ed9c:	f43f af19 	beq.w	800ebd2 <_printf_float+0xc2>
 800eda0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eda4:	4313      	orrs	r3, r2
 800eda6:	d102      	bne.n	800edae <_printf_float+0x29e>
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	07d9      	lsls	r1, r3, #31
 800edac:	d5d8      	bpl.n	800ed60 <_printf_float+0x250>
 800edae:	ee18 3a10 	vmov	r3, s16
 800edb2:	4652      	mov	r2, sl
 800edb4:	4631      	mov	r1, r6
 800edb6:	4628      	mov	r0, r5
 800edb8:	47b8      	blx	r7
 800edba:	3001      	adds	r0, #1
 800edbc:	f43f af09 	beq.w	800ebd2 <_printf_float+0xc2>
 800edc0:	f04f 0900 	mov.w	r9, #0
 800edc4:	f104 0a1a 	add.w	sl, r4, #26
 800edc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edca:	425b      	negs	r3, r3
 800edcc:	454b      	cmp	r3, r9
 800edce:	dc01      	bgt.n	800edd4 <_printf_float+0x2c4>
 800edd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edd2:	e792      	b.n	800ecfa <_printf_float+0x1ea>
 800edd4:	2301      	movs	r3, #1
 800edd6:	4652      	mov	r2, sl
 800edd8:	4631      	mov	r1, r6
 800edda:	4628      	mov	r0, r5
 800eddc:	47b8      	blx	r7
 800edde:	3001      	adds	r0, #1
 800ede0:	f43f aef7 	beq.w	800ebd2 <_printf_float+0xc2>
 800ede4:	f109 0901 	add.w	r9, r9, #1
 800ede8:	e7ee      	b.n	800edc8 <_printf_float+0x2b8>
 800edea:	bf00      	nop
 800edec:	7fefffff 	.word	0x7fefffff
 800edf0:	08013384 	.word	0x08013384
 800edf4:	08013388 	.word	0x08013388
 800edf8:	08013390 	.word	0x08013390
 800edfc:	0801338c 	.word	0x0801338c
 800ee00:	08013394 	.word	0x08013394
 800ee04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	bfa8      	it	ge
 800ee0c:	461a      	movge	r2, r3
 800ee0e:	2a00      	cmp	r2, #0
 800ee10:	4691      	mov	r9, r2
 800ee12:	dc37      	bgt.n	800ee84 <_printf_float+0x374>
 800ee14:	f04f 0b00 	mov.w	fp, #0
 800ee18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee1c:	f104 021a 	add.w	r2, r4, #26
 800ee20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee22:	9305      	str	r3, [sp, #20]
 800ee24:	eba3 0309 	sub.w	r3, r3, r9
 800ee28:	455b      	cmp	r3, fp
 800ee2a:	dc33      	bgt.n	800ee94 <_printf_float+0x384>
 800ee2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee30:	429a      	cmp	r2, r3
 800ee32:	db3b      	blt.n	800eeac <_printf_float+0x39c>
 800ee34:	6823      	ldr	r3, [r4, #0]
 800ee36:	07da      	lsls	r2, r3, #31
 800ee38:	d438      	bmi.n	800eeac <_printf_float+0x39c>
 800ee3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee3c:	9a05      	ldr	r2, [sp, #20]
 800ee3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee40:	1a9a      	subs	r2, r3, r2
 800ee42:	eba3 0901 	sub.w	r9, r3, r1
 800ee46:	4591      	cmp	r9, r2
 800ee48:	bfa8      	it	ge
 800ee4a:	4691      	movge	r9, r2
 800ee4c:	f1b9 0f00 	cmp.w	r9, #0
 800ee50:	dc35      	bgt.n	800eebe <_printf_float+0x3ae>
 800ee52:	f04f 0800 	mov.w	r8, #0
 800ee56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee5a:	f104 0a1a 	add.w	sl, r4, #26
 800ee5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee62:	1a9b      	subs	r3, r3, r2
 800ee64:	eba3 0309 	sub.w	r3, r3, r9
 800ee68:	4543      	cmp	r3, r8
 800ee6a:	f77f af79 	ble.w	800ed60 <_printf_float+0x250>
 800ee6e:	2301      	movs	r3, #1
 800ee70:	4652      	mov	r2, sl
 800ee72:	4631      	mov	r1, r6
 800ee74:	4628      	mov	r0, r5
 800ee76:	47b8      	blx	r7
 800ee78:	3001      	adds	r0, #1
 800ee7a:	f43f aeaa 	beq.w	800ebd2 <_printf_float+0xc2>
 800ee7e:	f108 0801 	add.w	r8, r8, #1
 800ee82:	e7ec      	b.n	800ee5e <_printf_float+0x34e>
 800ee84:	4613      	mov	r3, r2
 800ee86:	4631      	mov	r1, r6
 800ee88:	4642      	mov	r2, r8
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	47b8      	blx	r7
 800ee8e:	3001      	adds	r0, #1
 800ee90:	d1c0      	bne.n	800ee14 <_printf_float+0x304>
 800ee92:	e69e      	b.n	800ebd2 <_printf_float+0xc2>
 800ee94:	2301      	movs	r3, #1
 800ee96:	4631      	mov	r1, r6
 800ee98:	4628      	mov	r0, r5
 800ee9a:	9205      	str	r2, [sp, #20]
 800ee9c:	47b8      	blx	r7
 800ee9e:	3001      	adds	r0, #1
 800eea0:	f43f ae97 	beq.w	800ebd2 <_printf_float+0xc2>
 800eea4:	9a05      	ldr	r2, [sp, #20]
 800eea6:	f10b 0b01 	add.w	fp, fp, #1
 800eeaa:	e7b9      	b.n	800ee20 <_printf_float+0x310>
 800eeac:	ee18 3a10 	vmov	r3, s16
 800eeb0:	4652      	mov	r2, sl
 800eeb2:	4631      	mov	r1, r6
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	47b8      	blx	r7
 800eeb8:	3001      	adds	r0, #1
 800eeba:	d1be      	bne.n	800ee3a <_printf_float+0x32a>
 800eebc:	e689      	b.n	800ebd2 <_printf_float+0xc2>
 800eebe:	9a05      	ldr	r2, [sp, #20]
 800eec0:	464b      	mov	r3, r9
 800eec2:	4442      	add	r2, r8
 800eec4:	4631      	mov	r1, r6
 800eec6:	4628      	mov	r0, r5
 800eec8:	47b8      	blx	r7
 800eeca:	3001      	adds	r0, #1
 800eecc:	d1c1      	bne.n	800ee52 <_printf_float+0x342>
 800eece:	e680      	b.n	800ebd2 <_printf_float+0xc2>
 800eed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eed2:	2a01      	cmp	r2, #1
 800eed4:	dc01      	bgt.n	800eeda <_printf_float+0x3ca>
 800eed6:	07db      	lsls	r3, r3, #31
 800eed8:	d538      	bpl.n	800ef4c <_printf_float+0x43c>
 800eeda:	2301      	movs	r3, #1
 800eedc:	4642      	mov	r2, r8
 800eede:	4631      	mov	r1, r6
 800eee0:	4628      	mov	r0, r5
 800eee2:	47b8      	blx	r7
 800eee4:	3001      	adds	r0, #1
 800eee6:	f43f ae74 	beq.w	800ebd2 <_printf_float+0xc2>
 800eeea:	ee18 3a10 	vmov	r3, s16
 800eeee:	4652      	mov	r2, sl
 800eef0:	4631      	mov	r1, r6
 800eef2:	4628      	mov	r0, r5
 800eef4:	47b8      	blx	r7
 800eef6:	3001      	adds	r0, #1
 800eef8:	f43f ae6b 	beq.w	800ebd2 <_printf_float+0xc2>
 800eefc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef00:	2200      	movs	r2, #0
 800ef02:	2300      	movs	r3, #0
 800ef04:	f7f1 fdf0 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef08:	b9d8      	cbnz	r0, 800ef42 <_printf_float+0x432>
 800ef0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef0c:	f108 0201 	add.w	r2, r8, #1
 800ef10:	3b01      	subs	r3, #1
 800ef12:	4631      	mov	r1, r6
 800ef14:	4628      	mov	r0, r5
 800ef16:	47b8      	blx	r7
 800ef18:	3001      	adds	r0, #1
 800ef1a:	d10e      	bne.n	800ef3a <_printf_float+0x42a>
 800ef1c:	e659      	b.n	800ebd2 <_printf_float+0xc2>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	4652      	mov	r2, sl
 800ef22:	4631      	mov	r1, r6
 800ef24:	4628      	mov	r0, r5
 800ef26:	47b8      	blx	r7
 800ef28:	3001      	adds	r0, #1
 800ef2a:	f43f ae52 	beq.w	800ebd2 <_printf_float+0xc2>
 800ef2e:	f108 0801 	add.w	r8, r8, #1
 800ef32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef34:	3b01      	subs	r3, #1
 800ef36:	4543      	cmp	r3, r8
 800ef38:	dcf1      	bgt.n	800ef1e <_printf_float+0x40e>
 800ef3a:	464b      	mov	r3, r9
 800ef3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ef40:	e6dc      	b.n	800ecfc <_printf_float+0x1ec>
 800ef42:	f04f 0800 	mov.w	r8, #0
 800ef46:	f104 0a1a 	add.w	sl, r4, #26
 800ef4a:	e7f2      	b.n	800ef32 <_printf_float+0x422>
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	4642      	mov	r2, r8
 800ef50:	e7df      	b.n	800ef12 <_printf_float+0x402>
 800ef52:	2301      	movs	r3, #1
 800ef54:	464a      	mov	r2, r9
 800ef56:	4631      	mov	r1, r6
 800ef58:	4628      	mov	r0, r5
 800ef5a:	47b8      	blx	r7
 800ef5c:	3001      	adds	r0, #1
 800ef5e:	f43f ae38 	beq.w	800ebd2 <_printf_float+0xc2>
 800ef62:	f108 0801 	add.w	r8, r8, #1
 800ef66:	68e3      	ldr	r3, [r4, #12]
 800ef68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef6a:	1a5b      	subs	r3, r3, r1
 800ef6c:	4543      	cmp	r3, r8
 800ef6e:	dcf0      	bgt.n	800ef52 <_printf_float+0x442>
 800ef70:	e6fa      	b.n	800ed68 <_printf_float+0x258>
 800ef72:	f04f 0800 	mov.w	r8, #0
 800ef76:	f104 0919 	add.w	r9, r4, #25
 800ef7a:	e7f4      	b.n	800ef66 <_printf_float+0x456>

0800ef7c <_printf_common>:
 800ef7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef80:	4616      	mov	r6, r2
 800ef82:	4699      	mov	r9, r3
 800ef84:	688a      	ldr	r2, [r1, #8]
 800ef86:	690b      	ldr	r3, [r1, #16]
 800ef88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	bfb8      	it	lt
 800ef90:	4613      	movlt	r3, r2
 800ef92:	6033      	str	r3, [r6, #0]
 800ef94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef98:	4607      	mov	r7, r0
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	b10a      	cbz	r2, 800efa2 <_printf_common+0x26>
 800ef9e:	3301      	adds	r3, #1
 800efa0:	6033      	str	r3, [r6, #0]
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	0699      	lsls	r1, r3, #26
 800efa6:	bf42      	ittt	mi
 800efa8:	6833      	ldrmi	r3, [r6, #0]
 800efaa:	3302      	addmi	r3, #2
 800efac:	6033      	strmi	r3, [r6, #0]
 800efae:	6825      	ldr	r5, [r4, #0]
 800efb0:	f015 0506 	ands.w	r5, r5, #6
 800efb4:	d106      	bne.n	800efc4 <_printf_common+0x48>
 800efb6:	f104 0a19 	add.w	sl, r4, #25
 800efba:	68e3      	ldr	r3, [r4, #12]
 800efbc:	6832      	ldr	r2, [r6, #0]
 800efbe:	1a9b      	subs	r3, r3, r2
 800efc0:	42ab      	cmp	r3, r5
 800efc2:	dc26      	bgt.n	800f012 <_printf_common+0x96>
 800efc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efc8:	1e13      	subs	r3, r2, #0
 800efca:	6822      	ldr	r2, [r4, #0]
 800efcc:	bf18      	it	ne
 800efce:	2301      	movne	r3, #1
 800efd0:	0692      	lsls	r2, r2, #26
 800efd2:	d42b      	bmi.n	800f02c <_printf_common+0xb0>
 800efd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efd8:	4649      	mov	r1, r9
 800efda:	4638      	mov	r0, r7
 800efdc:	47c0      	blx	r8
 800efde:	3001      	adds	r0, #1
 800efe0:	d01e      	beq.n	800f020 <_printf_common+0xa4>
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	68e5      	ldr	r5, [r4, #12]
 800efe6:	6832      	ldr	r2, [r6, #0]
 800efe8:	f003 0306 	and.w	r3, r3, #6
 800efec:	2b04      	cmp	r3, #4
 800efee:	bf08      	it	eq
 800eff0:	1aad      	subeq	r5, r5, r2
 800eff2:	68a3      	ldr	r3, [r4, #8]
 800eff4:	6922      	ldr	r2, [r4, #16]
 800eff6:	bf0c      	ite	eq
 800eff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800effc:	2500      	movne	r5, #0
 800effe:	4293      	cmp	r3, r2
 800f000:	bfc4      	itt	gt
 800f002:	1a9b      	subgt	r3, r3, r2
 800f004:	18ed      	addgt	r5, r5, r3
 800f006:	2600      	movs	r6, #0
 800f008:	341a      	adds	r4, #26
 800f00a:	42b5      	cmp	r5, r6
 800f00c:	d11a      	bne.n	800f044 <_printf_common+0xc8>
 800f00e:	2000      	movs	r0, #0
 800f010:	e008      	b.n	800f024 <_printf_common+0xa8>
 800f012:	2301      	movs	r3, #1
 800f014:	4652      	mov	r2, sl
 800f016:	4649      	mov	r1, r9
 800f018:	4638      	mov	r0, r7
 800f01a:	47c0      	blx	r8
 800f01c:	3001      	adds	r0, #1
 800f01e:	d103      	bne.n	800f028 <_printf_common+0xac>
 800f020:	f04f 30ff 	mov.w	r0, #4294967295
 800f024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f028:	3501      	adds	r5, #1
 800f02a:	e7c6      	b.n	800efba <_printf_common+0x3e>
 800f02c:	18e1      	adds	r1, r4, r3
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	2030      	movs	r0, #48	; 0x30
 800f032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f036:	4422      	add	r2, r4
 800f038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f03c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f040:	3302      	adds	r3, #2
 800f042:	e7c7      	b.n	800efd4 <_printf_common+0x58>
 800f044:	2301      	movs	r3, #1
 800f046:	4622      	mov	r2, r4
 800f048:	4649      	mov	r1, r9
 800f04a:	4638      	mov	r0, r7
 800f04c:	47c0      	blx	r8
 800f04e:	3001      	adds	r0, #1
 800f050:	d0e6      	beq.n	800f020 <_printf_common+0xa4>
 800f052:	3601      	adds	r6, #1
 800f054:	e7d9      	b.n	800f00a <_printf_common+0x8e>
	...

0800f058 <_printf_i>:
 800f058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f05c:	7e0f      	ldrb	r7, [r1, #24]
 800f05e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f060:	2f78      	cmp	r7, #120	; 0x78
 800f062:	4691      	mov	r9, r2
 800f064:	4680      	mov	r8, r0
 800f066:	460c      	mov	r4, r1
 800f068:	469a      	mov	sl, r3
 800f06a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f06e:	d807      	bhi.n	800f080 <_printf_i+0x28>
 800f070:	2f62      	cmp	r7, #98	; 0x62
 800f072:	d80a      	bhi.n	800f08a <_printf_i+0x32>
 800f074:	2f00      	cmp	r7, #0
 800f076:	f000 80d8 	beq.w	800f22a <_printf_i+0x1d2>
 800f07a:	2f58      	cmp	r7, #88	; 0x58
 800f07c:	f000 80a3 	beq.w	800f1c6 <_printf_i+0x16e>
 800f080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f088:	e03a      	b.n	800f100 <_printf_i+0xa8>
 800f08a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f08e:	2b15      	cmp	r3, #21
 800f090:	d8f6      	bhi.n	800f080 <_printf_i+0x28>
 800f092:	a101      	add	r1, pc, #4	; (adr r1, 800f098 <_printf_i+0x40>)
 800f094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f098:	0800f0f1 	.word	0x0800f0f1
 800f09c:	0800f105 	.word	0x0800f105
 800f0a0:	0800f081 	.word	0x0800f081
 800f0a4:	0800f081 	.word	0x0800f081
 800f0a8:	0800f081 	.word	0x0800f081
 800f0ac:	0800f081 	.word	0x0800f081
 800f0b0:	0800f105 	.word	0x0800f105
 800f0b4:	0800f081 	.word	0x0800f081
 800f0b8:	0800f081 	.word	0x0800f081
 800f0bc:	0800f081 	.word	0x0800f081
 800f0c0:	0800f081 	.word	0x0800f081
 800f0c4:	0800f211 	.word	0x0800f211
 800f0c8:	0800f135 	.word	0x0800f135
 800f0cc:	0800f1f3 	.word	0x0800f1f3
 800f0d0:	0800f081 	.word	0x0800f081
 800f0d4:	0800f081 	.word	0x0800f081
 800f0d8:	0800f233 	.word	0x0800f233
 800f0dc:	0800f081 	.word	0x0800f081
 800f0e0:	0800f135 	.word	0x0800f135
 800f0e4:	0800f081 	.word	0x0800f081
 800f0e8:	0800f081 	.word	0x0800f081
 800f0ec:	0800f1fb 	.word	0x0800f1fb
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	1d1a      	adds	r2, r3, #4
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	602a      	str	r2, [r5, #0]
 800f0f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f100:	2301      	movs	r3, #1
 800f102:	e0a3      	b.n	800f24c <_printf_i+0x1f4>
 800f104:	6820      	ldr	r0, [r4, #0]
 800f106:	6829      	ldr	r1, [r5, #0]
 800f108:	0606      	lsls	r6, r0, #24
 800f10a:	f101 0304 	add.w	r3, r1, #4
 800f10e:	d50a      	bpl.n	800f126 <_printf_i+0xce>
 800f110:	680e      	ldr	r6, [r1, #0]
 800f112:	602b      	str	r3, [r5, #0]
 800f114:	2e00      	cmp	r6, #0
 800f116:	da03      	bge.n	800f120 <_printf_i+0xc8>
 800f118:	232d      	movs	r3, #45	; 0x2d
 800f11a:	4276      	negs	r6, r6
 800f11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f120:	485e      	ldr	r0, [pc, #376]	; (800f29c <_printf_i+0x244>)
 800f122:	230a      	movs	r3, #10
 800f124:	e019      	b.n	800f15a <_printf_i+0x102>
 800f126:	680e      	ldr	r6, [r1, #0]
 800f128:	602b      	str	r3, [r5, #0]
 800f12a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f12e:	bf18      	it	ne
 800f130:	b236      	sxthne	r6, r6
 800f132:	e7ef      	b.n	800f114 <_printf_i+0xbc>
 800f134:	682b      	ldr	r3, [r5, #0]
 800f136:	6820      	ldr	r0, [r4, #0]
 800f138:	1d19      	adds	r1, r3, #4
 800f13a:	6029      	str	r1, [r5, #0]
 800f13c:	0601      	lsls	r1, r0, #24
 800f13e:	d501      	bpl.n	800f144 <_printf_i+0xec>
 800f140:	681e      	ldr	r6, [r3, #0]
 800f142:	e002      	b.n	800f14a <_printf_i+0xf2>
 800f144:	0646      	lsls	r6, r0, #25
 800f146:	d5fb      	bpl.n	800f140 <_printf_i+0xe8>
 800f148:	881e      	ldrh	r6, [r3, #0]
 800f14a:	4854      	ldr	r0, [pc, #336]	; (800f29c <_printf_i+0x244>)
 800f14c:	2f6f      	cmp	r7, #111	; 0x6f
 800f14e:	bf0c      	ite	eq
 800f150:	2308      	moveq	r3, #8
 800f152:	230a      	movne	r3, #10
 800f154:	2100      	movs	r1, #0
 800f156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f15a:	6865      	ldr	r5, [r4, #4]
 800f15c:	60a5      	str	r5, [r4, #8]
 800f15e:	2d00      	cmp	r5, #0
 800f160:	bfa2      	ittt	ge
 800f162:	6821      	ldrge	r1, [r4, #0]
 800f164:	f021 0104 	bicge.w	r1, r1, #4
 800f168:	6021      	strge	r1, [r4, #0]
 800f16a:	b90e      	cbnz	r6, 800f170 <_printf_i+0x118>
 800f16c:	2d00      	cmp	r5, #0
 800f16e:	d04d      	beq.n	800f20c <_printf_i+0x1b4>
 800f170:	4615      	mov	r5, r2
 800f172:	fbb6 f1f3 	udiv	r1, r6, r3
 800f176:	fb03 6711 	mls	r7, r3, r1, r6
 800f17a:	5dc7      	ldrb	r7, [r0, r7]
 800f17c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f180:	4637      	mov	r7, r6
 800f182:	42bb      	cmp	r3, r7
 800f184:	460e      	mov	r6, r1
 800f186:	d9f4      	bls.n	800f172 <_printf_i+0x11a>
 800f188:	2b08      	cmp	r3, #8
 800f18a:	d10b      	bne.n	800f1a4 <_printf_i+0x14c>
 800f18c:	6823      	ldr	r3, [r4, #0]
 800f18e:	07de      	lsls	r6, r3, #31
 800f190:	d508      	bpl.n	800f1a4 <_printf_i+0x14c>
 800f192:	6923      	ldr	r3, [r4, #16]
 800f194:	6861      	ldr	r1, [r4, #4]
 800f196:	4299      	cmp	r1, r3
 800f198:	bfde      	ittt	le
 800f19a:	2330      	movle	r3, #48	; 0x30
 800f19c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1a4:	1b52      	subs	r2, r2, r5
 800f1a6:	6122      	str	r2, [r4, #16]
 800f1a8:	f8cd a000 	str.w	sl, [sp]
 800f1ac:	464b      	mov	r3, r9
 800f1ae:	aa03      	add	r2, sp, #12
 800f1b0:	4621      	mov	r1, r4
 800f1b2:	4640      	mov	r0, r8
 800f1b4:	f7ff fee2 	bl	800ef7c <_printf_common>
 800f1b8:	3001      	adds	r0, #1
 800f1ba:	d14c      	bne.n	800f256 <_printf_i+0x1fe>
 800f1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c0:	b004      	add	sp, #16
 800f1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1c6:	4835      	ldr	r0, [pc, #212]	; (800f29c <_printf_i+0x244>)
 800f1c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f1cc:	6829      	ldr	r1, [r5, #0]
 800f1ce:	6823      	ldr	r3, [r4, #0]
 800f1d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f1d4:	6029      	str	r1, [r5, #0]
 800f1d6:	061d      	lsls	r5, r3, #24
 800f1d8:	d514      	bpl.n	800f204 <_printf_i+0x1ac>
 800f1da:	07df      	lsls	r7, r3, #31
 800f1dc:	bf44      	itt	mi
 800f1de:	f043 0320 	orrmi.w	r3, r3, #32
 800f1e2:	6023      	strmi	r3, [r4, #0]
 800f1e4:	b91e      	cbnz	r6, 800f1ee <_printf_i+0x196>
 800f1e6:	6823      	ldr	r3, [r4, #0]
 800f1e8:	f023 0320 	bic.w	r3, r3, #32
 800f1ec:	6023      	str	r3, [r4, #0]
 800f1ee:	2310      	movs	r3, #16
 800f1f0:	e7b0      	b.n	800f154 <_printf_i+0xfc>
 800f1f2:	6823      	ldr	r3, [r4, #0]
 800f1f4:	f043 0320 	orr.w	r3, r3, #32
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	2378      	movs	r3, #120	; 0x78
 800f1fc:	4828      	ldr	r0, [pc, #160]	; (800f2a0 <_printf_i+0x248>)
 800f1fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f202:	e7e3      	b.n	800f1cc <_printf_i+0x174>
 800f204:	0659      	lsls	r1, r3, #25
 800f206:	bf48      	it	mi
 800f208:	b2b6      	uxthmi	r6, r6
 800f20a:	e7e6      	b.n	800f1da <_printf_i+0x182>
 800f20c:	4615      	mov	r5, r2
 800f20e:	e7bb      	b.n	800f188 <_printf_i+0x130>
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	6826      	ldr	r6, [r4, #0]
 800f214:	6961      	ldr	r1, [r4, #20]
 800f216:	1d18      	adds	r0, r3, #4
 800f218:	6028      	str	r0, [r5, #0]
 800f21a:	0635      	lsls	r5, r6, #24
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	d501      	bpl.n	800f224 <_printf_i+0x1cc>
 800f220:	6019      	str	r1, [r3, #0]
 800f222:	e002      	b.n	800f22a <_printf_i+0x1d2>
 800f224:	0670      	lsls	r0, r6, #25
 800f226:	d5fb      	bpl.n	800f220 <_printf_i+0x1c8>
 800f228:	8019      	strh	r1, [r3, #0]
 800f22a:	2300      	movs	r3, #0
 800f22c:	6123      	str	r3, [r4, #16]
 800f22e:	4615      	mov	r5, r2
 800f230:	e7ba      	b.n	800f1a8 <_printf_i+0x150>
 800f232:	682b      	ldr	r3, [r5, #0]
 800f234:	1d1a      	adds	r2, r3, #4
 800f236:	602a      	str	r2, [r5, #0]
 800f238:	681d      	ldr	r5, [r3, #0]
 800f23a:	6862      	ldr	r2, [r4, #4]
 800f23c:	2100      	movs	r1, #0
 800f23e:	4628      	mov	r0, r5
 800f240:	f7f0 ffde 	bl	8000200 <memchr>
 800f244:	b108      	cbz	r0, 800f24a <_printf_i+0x1f2>
 800f246:	1b40      	subs	r0, r0, r5
 800f248:	6060      	str	r0, [r4, #4]
 800f24a:	6863      	ldr	r3, [r4, #4]
 800f24c:	6123      	str	r3, [r4, #16]
 800f24e:	2300      	movs	r3, #0
 800f250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f254:	e7a8      	b.n	800f1a8 <_printf_i+0x150>
 800f256:	6923      	ldr	r3, [r4, #16]
 800f258:	462a      	mov	r2, r5
 800f25a:	4649      	mov	r1, r9
 800f25c:	4640      	mov	r0, r8
 800f25e:	47d0      	blx	sl
 800f260:	3001      	adds	r0, #1
 800f262:	d0ab      	beq.n	800f1bc <_printf_i+0x164>
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	079b      	lsls	r3, r3, #30
 800f268:	d413      	bmi.n	800f292 <_printf_i+0x23a>
 800f26a:	68e0      	ldr	r0, [r4, #12]
 800f26c:	9b03      	ldr	r3, [sp, #12]
 800f26e:	4298      	cmp	r0, r3
 800f270:	bfb8      	it	lt
 800f272:	4618      	movlt	r0, r3
 800f274:	e7a4      	b.n	800f1c0 <_printf_i+0x168>
 800f276:	2301      	movs	r3, #1
 800f278:	4632      	mov	r2, r6
 800f27a:	4649      	mov	r1, r9
 800f27c:	4640      	mov	r0, r8
 800f27e:	47d0      	blx	sl
 800f280:	3001      	adds	r0, #1
 800f282:	d09b      	beq.n	800f1bc <_printf_i+0x164>
 800f284:	3501      	adds	r5, #1
 800f286:	68e3      	ldr	r3, [r4, #12]
 800f288:	9903      	ldr	r1, [sp, #12]
 800f28a:	1a5b      	subs	r3, r3, r1
 800f28c:	42ab      	cmp	r3, r5
 800f28e:	dcf2      	bgt.n	800f276 <_printf_i+0x21e>
 800f290:	e7eb      	b.n	800f26a <_printf_i+0x212>
 800f292:	2500      	movs	r5, #0
 800f294:	f104 0619 	add.w	r6, r4, #25
 800f298:	e7f5      	b.n	800f286 <_printf_i+0x22e>
 800f29a:	bf00      	nop
 800f29c:	08013396 	.word	0x08013396
 800f2a0:	080133a7 	.word	0x080133a7

0800f2a4 <siprintf>:
 800f2a4:	b40e      	push	{r1, r2, r3}
 800f2a6:	b500      	push	{lr}
 800f2a8:	b09c      	sub	sp, #112	; 0x70
 800f2aa:	ab1d      	add	r3, sp, #116	; 0x74
 800f2ac:	9002      	str	r0, [sp, #8]
 800f2ae:	9006      	str	r0, [sp, #24]
 800f2b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f2b4:	4809      	ldr	r0, [pc, #36]	; (800f2dc <siprintf+0x38>)
 800f2b6:	9107      	str	r1, [sp, #28]
 800f2b8:	9104      	str	r1, [sp, #16]
 800f2ba:	4909      	ldr	r1, [pc, #36]	; (800f2e0 <siprintf+0x3c>)
 800f2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2c0:	9105      	str	r1, [sp, #20]
 800f2c2:	6800      	ldr	r0, [r0, #0]
 800f2c4:	9301      	str	r3, [sp, #4]
 800f2c6:	a902      	add	r1, sp, #8
 800f2c8:	f001 fb6a 	bl	80109a0 <_svfiprintf_r>
 800f2cc:	9b02      	ldr	r3, [sp, #8]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	701a      	strb	r2, [r3, #0]
 800f2d2:	b01c      	add	sp, #112	; 0x70
 800f2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2d8:	b003      	add	sp, #12
 800f2da:	4770      	bx	lr
 800f2dc:	2000017c 	.word	0x2000017c
 800f2e0:	ffff0208 	.word	0xffff0208

0800f2e4 <quorem>:
 800f2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e8:	6903      	ldr	r3, [r0, #16]
 800f2ea:	690c      	ldr	r4, [r1, #16]
 800f2ec:	42a3      	cmp	r3, r4
 800f2ee:	4607      	mov	r7, r0
 800f2f0:	f2c0 8081 	blt.w	800f3f6 <quorem+0x112>
 800f2f4:	3c01      	subs	r4, #1
 800f2f6:	f101 0814 	add.w	r8, r1, #20
 800f2fa:	f100 0514 	add.w	r5, r0, #20
 800f2fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f30c:	3301      	adds	r3, #1
 800f30e:	429a      	cmp	r2, r3
 800f310:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f314:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f318:	fbb2 f6f3 	udiv	r6, r2, r3
 800f31c:	d331      	bcc.n	800f382 <quorem+0x9e>
 800f31e:	f04f 0e00 	mov.w	lr, #0
 800f322:	4640      	mov	r0, r8
 800f324:	46ac      	mov	ip, r5
 800f326:	46f2      	mov	sl, lr
 800f328:	f850 2b04 	ldr.w	r2, [r0], #4
 800f32c:	b293      	uxth	r3, r2
 800f32e:	fb06 e303 	mla	r3, r6, r3, lr
 800f332:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f336:	b29b      	uxth	r3, r3
 800f338:	ebaa 0303 	sub.w	r3, sl, r3
 800f33c:	f8dc a000 	ldr.w	sl, [ip]
 800f340:	0c12      	lsrs	r2, r2, #16
 800f342:	fa13 f38a 	uxtah	r3, r3, sl
 800f346:	fb06 e202 	mla	r2, r6, r2, lr
 800f34a:	9300      	str	r3, [sp, #0]
 800f34c:	9b00      	ldr	r3, [sp, #0]
 800f34e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f352:	b292      	uxth	r2, r2
 800f354:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f35c:	f8bd 3000 	ldrh.w	r3, [sp]
 800f360:	4581      	cmp	r9, r0
 800f362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f366:	f84c 3b04 	str.w	r3, [ip], #4
 800f36a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f36e:	d2db      	bcs.n	800f328 <quorem+0x44>
 800f370:	f855 300b 	ldr.w	r3, [r5, fp]
 800f374:	b92b      	cbnz	r3, 800f382 <quorem+0x9e>
 800f376:	9b01      	ldr	r3, [sp, #4]
 800f378:	3b04      	subs	r3, #4
 800f37a:	429d      	cmp	r5, r3
 800f37c:	461a      	mov	r2, r3
 800f37e:	d32e      	bcc.n	800f3de <quorem+0xfa>
 800f380:	613c      	str	r4, [r7, #16]
 800f382:	4638      	mov	r0, r7
 800f384:	f001 f8b8 	bl	80104f8 <__mcmp>
 800f388:	2800      	cmp	r0, #0
 800f38a:	db24      	blt.n	800f3d6 <quorem+0xf2>
 800f38c:	3601      	adds	r6, #1
 800f38e:	4628      	mov	r0, r5
 800f390:	f04f 0c00 	mov.w	ip, #0
 800f394:	f858 2b04 	ldr.w	r2, [r8], #4
 800f398:	f8d0 e000 	ldr.w	lr, [r0]
 800f39c:	b293      	uxth	r3, r2
 800f39e:	ebac 0303 	sub.w	r3, ip, r3
 800f3a2:	0c12      	lsrs	r2, r2, #16
 800f3a4:	fa13 f38e 	uxtah	r3, r3, lr
 800f3a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f3ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3b6:	45c1      	cmp	r9, r8
 800f3b8:	f840 3b04 	str.w	r3, [r0], #4
 800f3bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f3c0:	d2e8      	bcs.n	800f394 <quorem+0xb0>
 800f3c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3ca:	b922      	cbnz	r2, 800f3d6 <quorem+0xf2>
 800f3cc:	3b04      	subs	r3, #4
 800f3ce:	429d      	cmp	r5, r3
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	d30a      	bcc.n	800f3ea <quorem+0x106>
 800f3d4:	613c      	str	r4, [r7, #16]
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	b003      	add	sp, #12
 800f3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3de:	6812      	ldr	r2, [r2, #0]
 800f3e0:	3b04      	subs	r3, #4
 800f3e2:	2a00      	cmp	r2, #0
 800f3e4:	d1cc      	bne.n	800f380 <quorem+0x9c>
 800f3e6:	3c01      	subs	r4, #1
 800f3e8:	e7c7      	b.n	800f37a <quorem+0x96>
 800f3ea:	6812      	ldr	r2, [r2, #0]
 800f3ec:	3b04      	subs	r3, #4
 800f3ee:	2a00      	cmp	r2, #0
 800f3f0:	d1f0      	bne.n	800f3d4 <quorem+0xf0>
 800f3f2:	3c01      	subs	r4, #1
 800f3f4:	e7eb      	b.n	800f3ce <quorem+0xea>
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	e7ee      	b.n	800f3d8 <quorem+0xf4>
 800f3fa:	0000      	movs	r0, r0
 800f3fc:	0000      	movs	r0, r0
	...

0800f400 <_dtoa_r>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	ed2d 8b04 	vpush	{d8-d9}
 800f408:	ec57 6b10 	vmov	r6, r7, d0
 800f40c:	b093      	sub	sp, #76	; 0x4c
 800f40e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f414:	9106      	str	r1, [sp, #24]
 800f416:	ee10 aa10 	vmov	sl, s0
 800f41a:	4604      	mov	r4, r0
 800f41c:	9209      	str	r2, [sp, #36]	; 0x24
 800f41e:	930c      	str	r3, [sp, #48]	; 0x30
 800f420:	46bb      	mov	fp, r7
 800f422:	b975      	cbnz	r5, 800f442 <_dtoa_r+0x42>
 800f424:	2010      	movs	r0, #16
 800f426:	f000 fddd 	bl	800ffe4 <malloc>
 800f42a:	4602      	mov	r2, r0
 800f42c:	6260      	str	r0, [r4, #36]	; 0x24
 800f42e:	b920      	cbnz	r0, 800f43a <_dtoa_r+0x3a>
 800f430:	4ba7      	ldr	r3, [pc, #668]	; (800f6d0 <_dtoa_r+0x2d0>)
 800f432:	21ea      	movs	r1, #234	; 0xea
 800f434:	48a7      	ldr	r0, [pc, #668]	; (800f6d4 <_dtoa_r+0x2d4>)
 800f436:	f001 fbc3 	bl	8010bc0 <__assert_func>
 800f43a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f43e:	6005      	str	r5, [r0, #0]
 800f440:	60c5      	str	r5, [r0, #12]
 800f442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f444:	6819      	ldr	r1, [r3, #0]
 800f446:	b151      	cbz	r1, 800f45e <_dtoa_r+0x5e>
 800f448:	685a      	ldr	r2, [r3, #4]
 800f44a:	604a      	str	r2, [r1, #4]
 800f44c:	2301      	movs	r3, #1
 800f44e:	4093      	lsls	r3, r2
 800f450:	608b      	str	r3, [r1, #8]
 800f452:	4620      	mov	r0, r4
 800f454:	f000 fe0e 	bl	8010074 <_Bfree>
 800f458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f45a:	2200      	movs	r2, #0
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	1e3b      	subs	r3, r7, #0
 800f460:	bfaa      	itet	ge
 800f462:	2300      	movge	r3, #0
 800f464:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f468:	f8c8 3000 	strge.w	r3, [r8]
 800f46c:	4b9a      	ldr	r3, [pc, #616]	; (800f6d8 <_dtoa_r+0x2d8>)
 800f46e:	bfbc      	itt	lt
 800f470:	2201      	movlt	r2, #1
 800f472:	f8c8 2000 	strlt.w	r2, [r8]
 800f476:	ea33 030b 	bics.w	r3, r3, fp
 800f47a:	d11b      	bne.n	800f4b4 <_dtoa_r+0xb4>
 800f47c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f47e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f482:	6013      	str	r3, [r2, #0]
 800f484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f488:	4333      	orrs	r3, r6
 800f48a:	f000 8592 	beq.w	800ffb2 <_dtoa_r+0xbb2>
 800f48e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f490:	b963      	cbnz	r3, 800f4ac <_dtoa_r+0xac>
 800f492:	4b92      	ldr	r3, [pc, #584]	; (800f6dc <_dtoa_r+0x2dc>)
 800f494:	e022      	b.n	800f4dc <_dtoa_r+0xdc>
 800f496:	4b92      	ldr	r3, [pc, #584]	; (800f6e0 <_dtoa_r+0x2e0>)
 800f498:	9301      	str	r3, [sp, #4]
 800f49a:	3308      	adds	r3, #8
 800f49c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f49e:	6013      	str	r3, [r2, #0]
 800f4a0:	9801      	ldr	r0, [sp, #4]
 800f4a2:	b013      	add	sp, #76	; 0x4c
 800f4a4:	ecbd 8b04 	vpop	{d8-d9}
 800f4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ac:	4b8b      	ldr	r3, [pc, #556]	; (800f6dc <_dtoa_r+0x2dc>)
 800f4ae:	9301      	str	r3, [sp, #4]
 800f4b0:	3303      	adds	r3, #3
 800f4b2:	e7f3      	b.n	800f49c <_dtoa_r+0x9c>
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	4650      	mov	r0, sl
 800f4ba:	4659      	mov	r1, fp
 800f4bc:	f7f1 fb14 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4c0:	ec4b ab19 	vmov	d9, sl, fp
 800f4c4:	4680      	mov	r8, r0
 800f4c6:	b158      	cbz	r0, 800f4e0 <_dtoa_r+0xe0>
 800f4c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	6013      	str	r3, [r2, #0]
 800f4ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f000 856b 	beq.w	800ffac <_dtoa_r+0xbac>
 800f4d6:	4883      	ldr	r0, [pc, #524]	; (800f6e4 <_dtoa_r+0x2e4>)
 800f4d8:	6018      	str	r0, [r3, #0]
 800f4da:	1e43      	subs	r3, r0, #1
 800f4dc:	9301      	str	r3, [sp, #4]
 800f4de:	e7df      	b.n	800f4a0 <_dtoa_r+0xa0>
 800f4e0:	ec4b ab10 	vmov	d0, sl, fp
 800f4e4:	aa10      	add	r2, sp, #64	; 0x40
 800f4e6:	a911      	add	r1, sp, #68	; 0x44
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f001 f8ab 	bl	8010644 <__d2b>
 800f4ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f4f2:	ee08 0a10 	vmov	s16, r0
 800f4f6:	2d00      	cmp	r5, #0
 800f4f8:	f000 8084 	beq.w	800f604 <_dtoa_r+0x204>
 800f4fc:	ee19 3a90 	vmov	r3, s19
 800f500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f504:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f508:	4656      	mov	r6, sl
 800f50a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f50e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f512:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f516:	4b74      	ldr	r3, [pc, #464]	; (800f6e8 <_dtoa_r+0x2e8>)
 800f518:	2200      	movs	r2, #0
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f0 fec3 	bl	80002a8 <__aeabi_dsub>
 800f522:	a365      	add	r3, pc, #404	; (adr r3, 800f6b8 <_dtoa_r+0x2b8>)
 800f524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f528:	f7f1 f876 	bl	8000618 <__aeabi_dmul>
 800f52c:	a364      	add	r3, pc, #400	; (adr r3, 800f6c0 <_dtoa_r+0x2c0>)
 800f52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f532:	f7f0 febb 	bl	80002ac <__adddf3>
 800f536:	4606      	mov	r6, r0
 800f538:	4628      	mov	r0, r5
 800f53a:	460f      	mov	r7, r1
 800f53c:	f7f1 f802 	bl	8000544 <__aeabi_i2d>
 800f540:	a361      	add	r3, pc, #388	; (adr r3, 800f6c8 <_dtoa_r+0x2c8>)
 800f542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f546:	f7f1 f867 	bl	8000618 <__aeabi_dmul>
 800f54a:	4602      	mov	r2, r0
 800f54c:	460b      	mov	r3, r1
 800f54e:	4630      	mov	r0, r6
 800f550:	4639      	mov	r1, r7
 800f552:	f7f0 feab 	bl	80002ac <__adddf3>
 800f556:	4606      	mov	r6, r0
 800f558:	460f      	mov	r7, r1
 800f55a:	f7f1 fb0d 	bl	8000b78 <__aeabi_d2iz>
 800f55e:	2200      	movs	r2, #0
 800f560:	9000      	str	r0, [sp, #0]
 800f562:	2300      	movs	r3, #0
 800f564:	4630      	mov	r0, r6
 800f566:	4639      	mov	r1, r7
 800f568:	f7f1 fac8 	bl	8000afc <__aeabi_dcmplt>
 800f56c:	b150      	cbz	r0, 800f584 <_dtoa_r+0x184>
 800f56e:	9800      	ldr	r0, [sp, #0]
 800f570:	f7f0 ffe8 	bl	8000544 <__aeabi_i2d>
 800f574:	4632      	mov	r2, r6
 800f576:	463b      	mov	r3, r7
 800f578:	f7f1 fab6 	bl	8000ae8 <__aeabi_dcmpeq>
 800f57c:	b910      	cbnz	r0, 800f584 <_dtoa_r+0x184>
 800f57e:	9b00      	ldr	r3, [sp, #0]
 800f580:	3b01      	subs	r3, #1
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	9b00      	ldr	r3, [sp, #0]
 800f586:	2b16      	cmp	r3, #22
 800f588:	d85a      	bhi.n	800f640 <_dtoa_r+0x240>
 800f58a:	9a00      	ldr	r2, [sp, #0]
 800f58c:	4b57      	ldr	r3, [pc, #348]	; (800f6ec <_dtoa_r+0x2ec>)
 800f58e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f596:	ec51 0b19 	vmov	r0, r1, d9
 800f59a:	f7f1 faaf 	bl	8000afc <__aeabi_dcmplt>
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	d050      	beq.n	800f644 <_dtoa_r+0x244>
 800f5a2:	9b00      	ldr	r3, [sp, #0]
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f5ae:	1b5d      	subs	r5, r3, r5
 800f5b0:	1e6b      	subs	r3, r5, #1
 800f5b2:	9305      	str	r3, [sp, #20]
 800f5b4:	bf45      	ittet	mi
 800f5b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800f5ba:	9304      	strmi	r3, [sp, #16]
 800f5bc:	2300      	movpl	r3, #0
 800f5be:	2300      	movmi	r3, #0
 800f5c0:	bf4c      	ite	mi
 800f5c2:	9305      	strmi	r3, [sp, #20]
 800f5c4:	9304      	strpl	r3, [sp, #16]
 800f5c6:	9b00      	ldr	r3, [sp, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	db3d      	blt.n	800f648 <_dtoa_r+0x248>
 800f5cc:	9b05      	ldr	r3, [sp, #20]
 800f5ce:	9a00      	ldr	r2, [sp, #0]
 800f5d0:	920a      	str	r2, [sp, #40]	; 0x28
 800f5d2:	4413      	add	r3, r2
 800f5d4:	9305      	str	r3, [sp, #20]
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	9307      	str	r3, [sp, #28]
 800f5da:	9b06      	ldr	r3, [sp, #24]
 800f5dc:	2b09      	cmp	r3, #9
 800f5de:	f200 8089 	bhi.w	800f6f4 <_dtoa_r+0x2f4>
 800f5e2:	2b05      	cmp	r3, #5
 800f5e4:	bfc4      	itt	gt
 800f5e6:	3b04      	subgt	r3, #4
 800f5e8:	9306      	strgt	r3, [sp, #24]
 800f5ea:	9b06      	ldr	r3, [sp, #24]
 800f5ec:	f1a3 0302 	sub.w	r3, r3, #2
 800f5f0:	bfcc      	ite	gt
 800f5f2:	2500      	movgt	r5, #0
 800f5f4:	2501      	movle	r5, #1
 800f5f6:	2b03      	cmp	r3, #3
 800f5f8:	f200 8087 	bhi.w	800f70a <_dtoa_r+0x30a>
 800f5fc:	e8df f003 	tbb	[pc, r3]
 800f600:	59383a2d 	.word	0x59383a2d
 800f604:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f608:	441d      	add	r5, r3
 800f60a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f60e:	2b20      	cmp	r3, #32
 800f610:	bfc1      	itttt	gt
 800f612:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f616:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f61a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f61e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f622:	bfda      	itte	le
 800f624:	f1c3 0320 	rsble	r3, r3, #32
 800f628:	fa06 f003 	lslle.w	r0, r6, r3
 800f62c:	4318      	orrgt	r0, r3
 800f62e:	f7f0 ff79 	bl	8000524 <__aeabi_ui2d>
 800f632:	2301      	movs	r3, #1
 800f634:	4606      	mov	r6, r0
 800f636:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f63a:	3d01      	subs	r5, #1
 800f63c:	930e      	str	r3, [sp, #56]	; 0x38
 800f63e:	e76a      	b.n	800f516 <_dtoa_r+0x116>
 800f640:	2301      	movs	r3, #1
 800f642:	e7b2      	b.n	800f5aa <_dtoa_r+0x1aa>
 800f644:	900b      	str	r0, [sp, #44]	; 0x2c
 800f646:	e7b1      	b.n	800f5ac <_dtoa_r+0x1ac>
 800f648:	9b04      	ldr	r3, [sp, #16]
 800f64a:	9a00      	ldr	r2, [sp, #0]
 800f64c:	1a9b      	subs	r3, r3, r2
 800f64e:	9304      	str	r3, [sp, #16]
 800f650:	4253      	negs	r3, r2
 800f652:	9307      	str	r3, [sp, #28]
 800f654:	2300      	movs	r3, #0
 800f656:	930a      	str	r3, [sp, #40]	; 0x28
 800f658:	e7bf      	b.n	800f5da <_dtoa_r+0x1da>
 800f65a:	2300      	movs	r3, #0
 800f65c:	9308      	str	r3, [sp, #32]
 800f65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f660:	2b00      	cmp	r3, #0
 800f662:	dc55      	bgt.n	800f710 <_dtoa_r+0x310>
 800f664:	2301      	movs	r3, #1
 800f666:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f66a:	461a      	mov	r2, r3
 800f66c:	9209      	str	r2, [sp, #36]	; 0x24
 800f66e:	e00c      	b.n	800f68a <_dtoa_r+0x28a>
 800f670:	2301      	movs	r3, #1
 800f672:	e7f3      	b.n	800f65c <_dtoa_r+0x25c>
 800f674:	2300      	movs	r3, #0
 800f676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f678:	9308      	str	r3, [sp, #32]
 800f67a:	9b00      	ldr	r3, [sp, #0]
 800f67c:	4413      	add	r3, r2
 800f67e:	9302      	str	r3, [sp, #8]
 800f680:	3301      	adds	r3, #1
 800f682:	2b01      	cmp	r3, #1
 800f684:	9303      	str	r3, [sp, #12]
 800f686:	bfb8      	it	lt
 800f688:	2301      	movlt	r3, #1
 800f68a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f68c:	2200      	movs	r2, #0
 800f68e:	6042      	str	r2, [r0, #4]
 800f690:	2204      	movs	r2, #4
 800f692:	f102 0614 	add.w	r6, r2, #20
 800f696:	429e      	cmp	r6, r3
 800f698:	6841      	ldr	r1, [r0, #4]
 800f69a:	d93d      	bls.n	800f718 <_dtoa_r+0x318>
 800f69c:	4620      	mov	r0, r4
 800f69e:	f000 fca9 	bl	800fff4 <_Balloc>
 800f6a2:	9001      	str	r0, [sp, #4]
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	d13b      	bne.n	800f720 <_dtoa_r+0x320>
 800f6a8:	4b11      	ldr	r3, [pc, #68]	; (800f6f0 <_dtoa_r+0x2f0>)
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f6b0:	e6c0      	b.n	800f434 <_dtoa_r+0x34>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e7df      	b.n	800f676 <_dtoa_r+0x276>
 800f6b6:	bf00      	nop
 800f6b8:	636f4361 	.word	0x636f4361
 800f6bc:	3fd287a7 	.word	0x3fd287a7
 800f6c0:	8b60c8b3 	.word	0x8b60c8b3
 800f6c4:	3fc68a28 	.word	0x3fc68a28
 800f6c8:	509f79fb 	.word	0x509f79fb
 800f6cc:	3fd34413 	.word	0x3fd34413
 800f6d0:	080133c5 	.word	0x080133c5
 800f6d4:	080133dc 	.word	0x080133dc
 800f6d8:	7ff00000 	.word	0x7ff00000
 800f6dc:	080133c1 	.word	0x080133c1
 800f6e0:	080133b8 	.word	0x080133b8
 800f6e4:	08013395 	.word	0x08013395
 800f6e8:	3ff80000 	.word	0x3ff80000
 800f6ec:	080134d0 	.word	0x080134d0
 800f6f0:	08013437 	.word	0x08013437
 800f6f4:	2501      	movs	r5, #1
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	9306      	str	r3, [sp, #24]
 800f6fa:	9508      	str	r5, [sp, #32]
 800f6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f700:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f704:	2200      	movs	r2, #0
 800f706:	2312      	movs	r3, #18
 800f708:	e7b0      	b.n	800f66c <_dtoa_r+0x26c>
 800f70a:	2301      	movs	r3, #1
 800f70c:	9308      	str	r3, [sp, #32]
 800f70e:	e7f5      	b.n	800f6fc <_dtoa_r+0x2fc>
 800f710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f712:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f716:	e7b8      	b.n	800f68a <_dtoa_r+0x28a>
 800f718:	3101      	adds	r1, #1
 800f71a:	6041      	str	r1, [r0, #4]
 800f71c:	0052      	lsls	r2, r2, #1
 800f71e:	e7b8      	b.n	800f692 <_dtoa_r+0x292>
 800f720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f722:	9a01      	ldr	r2, [sp, #4]
 800f724:	601a      	str	r2, [r3, #0]
 800f726:	9b03      	ldr	r3, [sp, #12]
 800f728:	2b0e      	cmp	r3, #14
 800f72a:	f200 809d 	bhi.w	800f868 <_dtoa_r+0x468>
 800f72e:	2d00      	cmp	r5, #0
 800f730:	f000 809a 	beq.w	800f868 <_dtoa_r+0x468>
 800f734:	9b00      	ldr	r3, [sp, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	dd32      	ble.n	800f7a0 <_dtoa_r+0x3a0>
 800f73a:	4ab7      	ldr	r2, [pc, #732]	; (800fa18 <_dtoa_r+0x618>)
 800f73c:	f003 030f 	and.w	r3, r3, #15
 800f740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f744:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f748:	9b00      	ldr	r3, [sp, #0]
 800f74a:	05d8      	lsls	r0, r3, #23
 800f74c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f750:	d516      	bpl.n	800f780 <_dtoa_r+0x380>
 800f752:	4bb2      	ldr	r3, [pc, #712]	; (800fa1c <_dtoa_r+0x61c>)
 800f754:	ec51 0b19 	vmov	r0, r1, d9
 800f758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f75c:	f7f1 f886 	bl	800086c <__aeabi_ddiv>
 800f760:	f007 070f 	and.w	r7, r7, #15
 800f764:	4682      	mov	sl, r0
 800f766:	468b      	mov	fp, r1
 800f768:	2503      	movs	r5, #3
 800f76a:	4eac      	ldr	r6, [pc, #688]	; (800fa1c <_dtoa_r+0x61c>)
 800f76c:	b957      	cbnz	r7, 800f784 <_dtoa_r+0x384>
 800f76e:	4642      	mov	r2, r8
 800f770:	464b      	mov	r3, r9
 800f772:	4650      	mov	r0, sl
 800f774:	4659      	mov	r1, fp
 800f776:	f7f1 f879 	bl	800086c <__aeabi_ddiv>
 800f77a:	4682      	mov	sl, r0
 800f77c:	468b      	mov	fp, r1
 800f77e:	e028      	b.n	800f7d2 <_dtoa_r+0x3d2>
 800f780:	2502      	movs	r5, #2
 800f782:	e7f2      	b.n	800f76a <_dtoa_r+0x36a>
 800f784:	07f9      	lsls	r1, r7, #31
 800f786:	d508      	bpl.n	800f79a <_dtoa_r+0x39a>
 800f788:	4640      	mov	r0, r8
 800f78a:	4649      	mov	r1, r9
 800f78c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f790:	f7f0 ff42 	bl	8000618 <__aeabi_dmul>
 800f794:	3501      	adds	r5, #1
 800f796:	4680      	mov	r8, r0
 800f798:	4689      	mov	r9, r1
 800f79a:	107f      	asrs	r7, r7, #1
 800f79c:	3608      	adds	r6, #8
 800f79e:	e7e5      	b.n	800f76c <_dtoa_r+0x36c>
 800f7a0:	f000 809b 	beq.w	800f8da <_dtoa_r+0x4da>
 800f7a4:	9b00      	ldr	r3, [sp, #0]
 800f7a6:	4f9d      	ldr	r7, [pc, #628]	; (800fa1c <_dtoa_r+0x61c>)
 800f7a8:	425e      	negs	r6, r3
 800f7aa:	4b9b      	ldr	r3, [pc, #620]	; (800fa18 <_dtoa_r+0x618>)
 800f7ac:	f006 020f 	and.w	r2, r6, #15
 800f7b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b8:	ec51 0b19 	vmov	r0, r1, d9
 800f7bc:	f7f0 ff2c 	bl	8000618 <__aeabi_dmul>
 800f7c0:	1136      	asrs	r6, r6, #4
 800f7c2:	4682      	mov	sl, r0
 800f7c4:	468b      	mov	fp, r1
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	2502      	movs	r5, #2
 800f7ca:	2e00      	cmp	r6, #0
 800f7cc:	d17a      	bne.n	800f8c4 <_dtoa_r+0x4c4>
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1d3      	bne.n	800f77a <_dtoa_r+0x37a>
 800f7d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f000 8082 	beq.w	800f8de <_dtoa_r+0x4de>
 800f7da:	4b91      	ldr	r3, [pc, #580]	; (800fa20 <_dtoa_r+0x620>)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	4650      	mov	r0, sl
 800f7e0:	4659      	mov	r1, fp
 800f7e2:	f7f1 f98b 	bl	8000afc <__aeabi_dcmplt>
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	d079      	beq.n	800f8de <_dtoa_r+0x4de>
 800f7ea:	9b03      	ldr	r3, [sp, #12]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d076      	beq.n	800f8de <_dtoa_r+0x4de>
 800f7f0:	9b02      	ldr	r3, [sp, #8]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	dd36      	ble.n	800f864 <_dtoa_r+0x464>
 800f7f6:	9b00      	ldr	r3, [sp, #0]
 800f7f8:	4650      	mov	r0, sl
 800f7fa:	4659      	mov	r1, fp
 800f7fc:	1e5f      	subs	r7, r3, #1
 800f7fe:	2200      	movs	r2, #0
 800f800:	4b88      	ldr	r3, [pc, #544]	; (800fa24 <_dtoa_r+0x624>)
 800f802:	f7f0 ff09 	bl	8000618 <__aeabi_dmul>
 800f806:	9e02      	ldr	r6, [sp, #8]
 800f808:	4682      	mov	sl, r0
 800f80a:	468b      	mov	fp, r1
 800f80c:	3501      	adds	r5, #1
 800f80e:	4628      	mov	r0, r5
 800f810:	f7f0 fe98 	bl	8000544 <__aeabi_i2d>
 800f814:	4652      	mov	r2, sl
 800f816:	465b      	mov	r3, fp
 800f818:	f7f0 fefe 	bl	8000618 <__aeabi_dmul>
 800f81c:	4b82      	ldr	r3, [pc, #520]	; (800fa28 <_dtoa_r+0x628>)
 800f81e:	2200      	movs	r2, #0
 800f820:	f7f0 fd44 	bl	80002ac <__adddf3>
 800f824:	46d0      	mov	r8, sl
 800f826:	46d9      	mov	r9, fp
 800f828:	4682      	mov	sl, r0
 800f82a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f82e:	2e00      	cmp	r6, #0
 800f830:	d158      	bne.n	800f8e4 <_dtoa_r+0x4e4>
 800f832:	4b7e      	ldr	r3, [pc, #504]	; (800fa2c <_dtoa_r+0x62c>)
 800f834:	2200      	movs	r2, #0
 800f836:	4640      	mov	r0, r8
 800f838:	4649      	mov	r1, r9
 800f83a:	f7f0 fd35 	bl	80002a8 <__aeabi_dsub>
 800f83e:	4652      	mov	r2, sl
 800f840:	465b      	mov	r3, fp
 800f842:	4680      	mov	r8, r0
 800f844:	4689      	mov	r9, r1
 800f846:	f7f1 f977 	bl	8000b38 <__aeabi_dcmpgt>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f040 8295 	bne.w	800fd7a <_dtoa_r+0x97a>
 800f850:	4652      	mov	r2, sl
 800f852:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f856:	4640      	mov	r0, r8
 800f858:	4649      	mov	r1, r9
 800f85a:	f7f1 f94f 	bl	8000afc <__aeabi_dcmplt>
 800f85e:	2800      	cmp	r0, #0
 800f860:	f040 8289 	bne.w	800fd76 <_dtoa_r+0x976>
 800f864:	ec5b ab19 	vmov	sl, fp, d9
 800f868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f2c0 8148 	blt.w	800fb00 <_dtoa_r+0x700>
 800f870:	9a00      	ldr	r2, [sp, #0]
 800f872:	2a0e      	cmp	r2, #14
 800f874:	f300 8144 	bgt.w	800fb00 <_dtoa_r+0x700>
 800f878:	4b67      	ldr	r3, [pc, #412]	; (800fa18 <_dtoa_r+0x618>)
 800f87a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f87e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f884:	2b00      	cmp	r3, #0
 800f886:	f280 80d5 	bge.w	800fa34 <_dtoa_r+0x634>
 800f88a:	9b03      	ldr	r3, [sp, #12]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	f300 80d1 	bgt.w	800fa34 <_dtoa_r+0x634>
 800f892:	f040 826f 	bne.w	800fd74 <_dtoa_r+0x974>
 800f896:	4b65      	ldr	r3, [pc, #404]	; (800fa2c <_dtoa_r+0x62c>)
 800f898:	2200      	movs	r2, #0
 800f89a:	4640      	mov	r0, r8
 800f89c:	4649      	mov	r1, r9
 800f89e:	f7f0 febb 	bl	8000618 <__aeabi_dmul>
 800f8a2:	4652      	mov	r2, sl
 800f8a4:	465b      	mov	r3, fp
 800f8a6:	f7f1 f93d 	bl	8000b24 <__aeabi_dcmpge>
 800f8aa:	9e03      	ldr	r6, [sp, #12]
 800f8ac:	4637      	mov	r7, r6
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	f040 8245 	bne.w	800fd3e <_dtoa_r+0x93e>
 800f8b4:	9d01      	ldr	r5, [sp, #4]
 800f8b6:	2331      	movs	r3, #49	; 0x31
 800f8b8:	f805 3b01 	strb.w	r3, [r5], #1
 800f8bc:	9b00      	ldr	r3, [sp, #0]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	9300      	str	r3, [sp, #0]
 800f8c2:	e240      	b.n	800fd46 <_dtoa_r+0x946>
 800f8c4:	07f2      	lsls	r2, r6, #31
 800f8c6:	d505      	bpl.n	800f8d4 <_dtoa_r+0x4d4>
 800f8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8cc:	f7f0 fea4 	bl	8000618 <__aeabi_dmul>
 800f8d0:	3501      	adds	r5, #1
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	1076      	asrs	r6, r6, #1
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	e777      	b.n	800f7ca <_dtoa_r+0x3ca>
 800f8da:	2502      	movs	r5, #2
 800f8dc:	e779      	b.n	800f7d2 <_dtoa_r+0x3d2>
 800f8de:	9f00      	ldr	r7, [sp, #0]
 800f8e0:	9e03      	ldr	r6, [sp, #12]
 800f8e2:	e794      	b.n	800f80e <_dtoa_r+0x40e>
 800f8e4:	9901      	ldr	r1, [sp, #4]
 800f8e6:	4b4c      	ldr	r3, [pc, #304]	; (800fa18 <_dtoa_r+0x618>)
 800f8e8:	4431      	add	r1, r6
 800f8ea:	910d      	str	r1, [sp, #52]	; 0x34
 800f8ec:	9908      	ldr	r1, [sp, #32]
 800f8ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f8f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f8f6:	2900      	cmp	r1, #0
 800f8f8:	d043      	beq.n	800f982 <_dtoa_r+0x582>
 800f8fa:	494d      	ldr	r1, [pc, #308]	; (800fa30 <_dtoa_r+0x630>)
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	f7f0 ffb5 	bl	800086c <__aeabi_ddiv>
 800f902:	4652      	mov	r2, sl
 800f904:	465b      	mov	r3, fp
 800f906:	f7f0 fccf 	bl	80002a8 <__aeabi_dsub>
 800f90a:	9d01      	ldr	r5, [sp, #4]
 800f90c:	4682      	mov	sl, r0
 800f90e:	468b      	mov	fp, r1
 800f910:	4649      	mov	r1, r9
 800f912:	4640      	mov	r0, r8
 800f914:	f7f1 f930 	bl	8000b78 <__aeabi_d2iz>
 800f918:	4606      	mov	r6, r0
 800f91a:	f7f0 fe13 	bl	8000544 <__aeabi_i2d>
 800f91e:	4602      	mov	r2, r0
 800f920:	460b      	mov	r3, r1
 800f922:	4640      	mov	r0, r8
 800f924:	4649      	mov	r1, r9
 800f926:	f7f0 fcbf 	bl	80002a8 <__aeabi_dsub>
 800f92a:	3630      	adds	r6, #48	; 0x30
 800f92c:	f805 6b01 	strb.w	r6, [r5], #1
 800f930:	4652      	mov	r2, sl
 800f932:	465b      	mov	r3, fp
 800f934:	4680      	mov	r8, r0
 800f936:	4689      	mov	r9, r1
 800f938:	f7f1 f8e0 	bl	8000afc <__aeabi_dcmplt>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d163      	bne.n	800fa08 <_dtoa_r+0x608>
 800f940:	4642      	mov	r2, r8
 800f942:	464b      	mov	r3, r9
 800f944:	4936      	ldr	r1, [pc, #216]	; (800fa20 <_dtoa_r+0x620>)
 800f946:	2000      	movs	r0, #0
 800f948:	f7f0 fcae 	bl	80002a8 <__aeabi_dsub>
 800f94c:	4652      	mov	r2, sl
 800f94e:	465b      	mov	r3, fp
 800f950:	f7f1 f8d4 	bl	8000afc <__aeabi_dcmplt>
 800f954:	2800      	cmp	r0, #0
 800f956:	f040 80b5 	bne.w	800fac4 <_dtoa_r+0x6c4>
 800f95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f95c:	429d      	cmp	r5, r3
 800f95e:	d081      	beq.n	800f864 <_dtoa_r+0x464>
 800f960:	4b30      	ldr	r3, [pc, #192]	; (800fa24 <_dtoa_r+0x624>)
 800f962:	2200      	movs	r2, #0
 800f964:	4650      	mov	r0, sl
 800f966:	4659      	mov	r1, fp
 800f968:	f7f0 fe56 	bl	8000618 <__aeabi_dmul>
 800f96c:	4b2d      	ldr	r3, [pc, #180]	; (800fa24 <_dtoa_r+0x624>)
 800f96e:	4682      	mov	sl, r0
 800f970:	468b      	mov	fp, r1
 800f972:	4640      	mov	r0, r8
 800f974:	4649      	mov	r1, r9
 800f976:	2200      	movs	r2, #0
 800f978:	f7f0 fe4e 	bl	8000618 <__aeabi_dmul>
 800f97c:	4680      	mov	r8, r0
 800f97e:	4689      	mov	r9, r1
 800f980:	e7c6      	b.n	800f910 <_dtoa_r+0x510>
 800f982:	4650      	mov	r0, sl
 800f984:	4659      	mov	r1, fp
 800f986:	f7f0 fe47 	bl	8000618 <__aeabi_dmul>
 800f98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f98c:	9d01      	ldr	r5, [sp, #4]
 800f98e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f990:	4682      	mov	sl, r0
 800f992:	468b      	mov	fp, r1
 800f994:	4649      	mov	r1, r9
 800f996:	4640      	mov	r0, r8
 800f998:	f7f1 f8ee 	bl	8000b78 <__aeabi_d2iz>
 800f99c:	4606      	mov	r6, r0
 800f99e:	f7f0 fdd1 	bl	8000544 <__aeabi_i2d>
 800f9a2:	3630      	adds	r6, #48	; 0x30
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	4649      	mov	r1, r9
 800f9ac:	f7f0 fc7c 	bl	80002a8 <__aeabi_dsub>
 800f9b0:	f805 6b01 	strb.w	r6, [r5], #1
 800f9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9b6:	429d      	cmp	r5, r3
 800f9b8:	4680      	mov	r8, r0
 800f9ba:	4689      	mov	r9, r1
 800f9bc:	f04f 0200 	mov.w	r2, #0
 800f9c0:	d124      	bne.n	800fa0c <_dtoa_r+0x60c>
 800f9c2:	4b1b      	ldr	r3, [pc, #108]	; (800fa30 <_dtoa_r+0x630>)
 800f9c4:	4650      	mov	r0, sl
 800f9c6:	4659      	mov	r1, fp
 800f9c8:	f7f0 fc70 	bl	80002ac <__adddf3>
 800f9cc:	4602      	mov	r2, r0
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	4640      	mov	r0, r8
 800f9d2:	4649      	mov	r1, r9
 800f9d4:	f7f1 f8b0 	bl	8000b38 <__aeabi_dcmpgt>
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	d173      	bne.n	800fac4 <_dtoa_r+0x6c4>
 800f9dc:	4652      	mov	r2, sl
 800f9de:	465b      	mov	r3, fp
 800f9e0:	4913      	ldr	r1, [pc, #76]	; (800fa30 <_dtoa_r+0x630>)
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	f7f0 fc60 	bl	80002a8 <__aeabi_dsub>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	4649      	mov	r1, r9
 800f9f0:	f7f1 f884 	bl	8000afc <__aeabi_dcmplt>
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	f43f af35 	beq.w	800f864 <_dtoa_r+0x464>
 800f9fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f9fc:	1e6b      	subs	r3, r5, #1
 800f9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa04:	2b30      	cmp	r3, #48	; 0x30
 800fa06:	d0f8      	beq.n	800f9fa <_dtoa_r+0x5fa>
 800fa08:	9700      	str	r7, [sp, #0]
 800fa0a:	e049      	b.n	800faa0 <_dtoa_r+0x6a0>
 800fa0c:	4b05      	ldr	r3, [pc, #20]	; (800fa24 <_dtoa_r+0x624>)
 800fa0e:	f7f0 fe03 	bl	8000618 <__aeabi_dmul>
 800fa12:	4680      	mov	r8, r0
 800fa14:	4689      	mov	r9, r1
 800fa16:	e7bd      	b.n	800f994 <_dtoa_r+0x594>
 800fa18:	080134d0 	.word	0x080134d0
 800fa1c:	080134a8 	.word	0x080134a8
 800fa20:	3ff00000 	.word	0x3ff00000
 800fa24:	40240000 	.word	0x40240000
 800fa28:	401c0000 	.word	0x401c0000
 800fa2c:	40140000 	.word	0x40140000
 800fa30:	3fe00000 	.word	0x3fe00000
 800fa34:	9d01      	ldr	r5, [sp, #4]
 800fa36:	4656      	mov	r6, sl
 800fa38:	465f      	mov	r7, fp
 800fa3a:	4642      	mov	r2, r8
 800fa3c:	464b      	mov	r3, r9
 800fa3e:	4630      	mov	r0, r6
 800fa40:	4639      	mov	r1, r7
 800fa42:	f7f0 ff13 	bl	800086c <__aeabi_ddiv>
 800fa46:	f7f1 f897 	bl	8000b78 <__aeabi_d2iz>
 800fa4a:	4682      	mov	sl, r0
 800fa4c:	f7f0 fd7a 	bl	8000544 <__aeabi_i2d>
 800fa50:	4642      	mov	r2, r8
 800fa52:	464b      	mov	r3, r9
 800fa54:	f7f0 fde0 	bl	8000618 <__aeabi_dmul>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	4639      	mov	r1, r7
 800fa60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fa64:	f7f0 fc20 	bl	80002a8 <__aeabi_dsub>
 800fa68:	f805 6b01 	strb.w	r6, [r5], #1
 800fa6c:	9e01      	ldr	r6, [sp, #4]
 800fa6e:	9f03      	ldr	r7, [sp, #12]
 800fa70:	1bae      	subs	r6, r5, r6
 800fa72:	42b7      	cmp	r7, r6
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	d135      	bne.n	800fae6 <_dtoa_r+0x6e6>
 800fa7a:	f7f0 fc17 	bl	80002ac <__adddf3>
 800fa7e:	4642      	mov	r2, r8
 800fa80:	464b      	mov	r3, r9
 800fa82:	4606      	mov	r6, r0
 800fa84:	460f      	mov	r7, r1
 800fa86:	f7f1 f857 	bl	8000b38 <__aeabi_dcmpgt>
 800fa8a:	b9d0      	cbnz	r0, 800fac2 <_dtoa_r+0x6c2>
 800fa8c:	4642      	mov	r2, r8
 800fa8e:	464b      	mov	r3, r9
 800fa90:	4630      	mov	r0, r6
 800fa92:	4639      	mov	r1, r7
 800fa94:	f7f1 f828 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa98:	b110      	cbz	r0, 800faa0 <_dtoa_r+0x6a0>
 800fa9a:	f01a 0f01 	tst.w	sl, #1
 800fa9e:	d110      	bne.n	800fac2 <_dtoa_r+0x6c2>
 800faa0:	4620      	mov	r0, r4
 800faa2:	ee18 1a10 	vmov	r1, s16
 800faa6:	f000 fae5 	bl	8010074 <_Bfree>
 800faaa:	2300      	movs	r3, #0
 800faac:	9800      	ldr	r0, [sp, #0]
 800faae:	702b      	strb	r3, [r5, #0]
 800fab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fab2:	3001      	adds	r0, #1
 800fab4:	6018      	str	r0, [r3, #0]
 800fab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f43f acf1 	beq.w	800f4a0 <_dtoa_r+0xa0>
 800fabe:	601d      	str	r5, [r3, #0]
 800fac0:	e4ee      	b.n	800f4a0 <_dtoa_r+0xa0>
 800fac2:	9f00      	ldr	r7, [sp, #0]
 800fac4:	462b      	mov	r3, r5
 800fac6:	461d      	mov	r5, r3
 800fac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800facc:	2a39      	cmp	r2, #57	; 0x39
 800face:	d106      	bne.n	800fade <_dtoa_r+0x6de>
 800fad0:	9a01      	ldr	r2, [sp, #4]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d1f7      	bne.n	800fac6 <_dtoa_r+0x6c6>
 800fad6:	9901      	ldr	r1, [sp, #4]
 800fad8:	2230      	movs	r2, #48	; 0x30
 800fada:	3701      	adds	r7, #1
 800fadc:	700a      	strb	r2, [r1, #0]
 800fade:	781a      	ldrb	r2, [r3, #0]
 800fae0:	3201      	adds	r2, #1
 800fae2:	701a      	strb	r2, [r3, #0]
 800fae4:	e790      	b.n	800fa08 <_dtoa_r+0x608>
 800fae6:	4ba6      	ldr	r3, [pc, #664]	; (800fd80 <_dtoa_r+0x980>)
 800fae8:	2200      	movs	r2, #0
 800faea:	f7f0 fd95 	bl	8000618 <__aeabi_dmul>
 800faee:	2200      	movs	r2, #0
 800faf0:	2300      	movs	r3, #0
 800faf2:	4606      	mov	r6, r0
 800faf4:	460f      	mov	r7, r1
 800faf6:	f7f0 fff7 	bl	8000ae8 <__aeabi_dcmpeq>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d09d      	beq.n	800fa3a <_dtoa_r+0x63a>
 800fafe:	e7cf      	b.n	800faa0 <_dtoa_r+0x6a0>
 800fb00:	9a08      	ldr	r2, [sp, #32]
 800fb02:	2a00      	cmp	r2, #0
 800fb04:	f000 80d7 	beq.w	800fcb6 <_dtoa_r+0x8b6>
 800fb08:	9a06      	ldr	r2, [sp, #24]
 800fb0a:	2a01      	cmp	r2, #1
 800fb0c:	f300 80ba 	bgt.w	800fc84 <_dtoa_r+0x884>
 800fb10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb12:	2a00      	cmp	r2, #0
 800fb14:	f000 80b2 	beq.w	800fc7c <_dtoa_r+0x87c>
 800fb18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fb1c:	9e07      	ldr	r6, [sp, #28]
 800fb1e:	9d04      	ldr	r5, [sp, #16]
 800fb20:	9a04      	ldr	r2, [sp, #16]
 800fb22:	441a      	add	r2, r3
 800fb24:	9204      	str	r2, [sp, #16]
 800fb26:	9a05      	ldr	r2, [sp, #20]
 800fb28:	2101      	movs	r1, #1
 800fb2a:	441a      	add	r2, r3
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	9205      	str	r2, [sp, #20]
 800fb30:	f000 fb58 	bl	80101e4 <__i2b>
 800fb34:	4607      	mov	r7, r0
 800fb36:	2d00      	cmp	r5, #0
 800fb38:	dd0c      	ble.n	800fb54 <_dtoa_r+0x754>
 800fb3a:	9b05      	ldr	r3, [sp, #20]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	dd09      	ble.n	800fb54 <_dtoa_r+0x754>
 800fb40:	42ab      	cmp	r3, r5
 800fb42:	9a04      	ldr	r2, [sp, #16]
 800fb44:	bfa8      	it	ge
 800fb46:	462b      	movge	r3, r5
 800fb48:	1ad2      	subs	r2, r2, r3
 800fb4a:	9204      	str	r2, [sp, #16]
 800fb4c:	9a05      	ldr	r2, [sp, #20]
 800fb4e:	1aed      	subs	r5, r5, r3
 800fb50:	1ad3      	subs	r3, r2, r3
 800fb52:	9305      	str	r3, [sp, #20]
 800fb54:	9b07      	ldr	r3, [sp, #28]
 800fb56:	b31b      	cbz	r3, 800fba0 <_dtoa_r+0x7a0>
 800fb58:	9b08      	ldr	r3, [sp, #32]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 80af 	beq.w	800fcbe <_dtoa_r+0x8be>
 800fb60:	2e00      	cmp	r6, #0
 800fb62:	dd13      	ble.n	800fb8c <_dtoa_r+0x78c>
 800fb64:	4639      	mov	r1, r7
 800fb66:	4632      	mov	r2, r6
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f000 fbfb 	bl	8010364 <__pow5mult>
 800fb6e:	ee18 2a10 	vmov	r2, s16
 800fb72:	4601      	mov	r1, r0
 800fb74:	4607      	mov	r7, r0
 800fb76:	4620      	mov	r0, r4
 800fb78:	f000 fb4a 	bl	8010210 <__multiply>
 800fb7c:	ee18 1a10 	vmov	r1, s16
 800fb80:	4680      	mov	r8, r0
 800fb82:	4620      	mov	r0, r4
 800fb84:	f000 fa76 	bl	8010074 <_Bfree>
 800fb88:	ee08 8a10 	vmov	s16, r8
 800fb8c:	9b07      	ldr	r3, [sp, #28]
 800fb8e:	1b9a      	subs	r2, r3, r6
 800fb90:	d006      	beq.n	800fba0 <_dtoa_r+0x7a0>
 800fb92:	ee18 1a10 	vmov	r1, s16
 800fb96:	4620      	mov	r0, r4
 800fb98:	f000 fbe4 	bl	8010364 <__pow5mult>
 800fb9c:	ee08 0a10 	vmov	s16, r0
 800fba0:	2101      	movs	r1, #1
 800fba2:	4620      	mov	r0, r4
 800fba4:	f000 fb1e 	bl	80101e4 <__i2b>
 800fba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	4606      	mov	r6, r0
 800fbae:	f340 8088 	ble.w	800fcc2 <_dtoa_r+0x8c2>
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	4601      	mov	r1, r0
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f000 fbd4 	bl	8010364 <__pow5mult>
 800fbbc:	9b06      	ldr	r3, [sp, #24]
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	4606      	mov	r6, r0
 800fbc2:	f340 8081 	ble.w	800fcc8 <_dtoa_r+0x8c8>
 800fbc6:	f04f 0800 	mov.w	r8, #0
 800fbca:	6933      	ldr	r3, [r6, #16]
 800fbcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fbd0:	6918      	ldr	r0, [r3, #16]
 800fbd2:	f000 fab7 	bl	8010144 <__hi0bits>
 800fbd6:	f1c0 0020 	rsb	r0, r0, #32
 800fbda:	9b05      	ldr	r3, [sp, #20]
 800fbdc:	4418      	add	r0, r3
 800fbde:	f010 001f 	ands.w	r0, r0, #31
 800fbe2:	f000 8092 	beq.w	800fd0a <_dtoa_r+0x90a>
 800fbe6:	f1c0 0320 	rsb	r3, r0, #32
 800fbea:	2b04      	cmp	r3, #4
 800fbec:	f340 808a 	ble.w	800fd04 <_dtoa_r+0x904>
 800fbf0:	f1c0 001c 	rsb	r0, r0, #28
 800fbf4:	9b04      	ldr	r3, [sp, #16]
 800fbf6:	4403      	add	r3, r0
 800fbf8:	9304      	str	r3, [sp, #16]
 800fbfa:	9b05      	ldr	r3, [sp, #20]
 800fbfc:	4403      	add	r3, r0
 800fbfe:	4405      	add	r5, r0
 800fc00:	9305      	str	r3, [sp, #20]
 800fc02:	9b04      	ldr	r3, [sp, #16]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	dd07      	ble.n	800fc18 <_dtoa_r+0x818>
 800fc08:	ee18 1a10 	vmov	r1, s16
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f000 fc02 	bl	8010418 <__lshift>
 800fc14:	ee08 0a10 	vmov	s16, r0
 800fc18:	9b05      	ldr	r3, [sp, #20]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	dd05      	ble.n	800fc2a <_dtoa_r+0x82a>
 800fc1e:	4631      	mov	r1, r6
 800fc20:	461a      	mov	r2, r3
 800fc22:	4620      	mov	r0, r4
 800fc24:	f000 fbf8 	bl	8010418 <__lshift>
 800fc28:	4606      	mov	r6, r0
 800fc2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d06e      	beq.n	800fd0e <_dtoa_r+0x90e>
 800fc30:	ee18 0a10 	vmov	r0, s16
 800fc34:	4631      	mov	r1, r6
 800fc36:	f000 fc5f 	bl	80104f8 <__mcmp>
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	da67      	bge.n	800fd0e <_dtoa_r+0x90e>
 800fc3e:	9b00      	ldr	r3, [sp, #0]
 800fc40:	3b01      	subs	r3, #1
 800fc42:	ee18 1a10 	vmov	r1, s16
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	220a      	movs	r2, #10
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f000 fa33 	bl	80100b8 <__multadd>
 800fc52:	9b08      	ldr	r3, [sp, #32]
 800fc54:	ee08 0a10 	vmov	s16, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	f000 81b1 	beq.w	800ffc0 <_dtoa_r+0xbc0>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	4639      	mov	r1, r7
 800fc62:	220a      	movs	r2, #10
 800fc64:	4620      	mov	r0, r4
 800fc66:	f000 fa27 	bl	80100b8 <__multadd>
 800fc6a:	9b02      	ldr	r3, [sp, #8]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	4607      	mov	r7, r0
 800fc70:	f300 808e 	bgt.w	800fd90 <_dtoa_r+0x990>
 800fc74:	9b06      	ldr	r3, [sp, #24]
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	dc51      	bgt.n	800fd1e <_dtoa_r+0x91e>
 800fc7a:	e089      	b.n	800fd90 <_dtoa_r+0x990>
 800fc7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fc82:	e74b      	b.n	800fb1c <_dtoa_r+0x71c>
 800fc84:	9b03      	ldr	r3, [sp, #12]
 800fc86:	1e5e      	subs	r6, r3, #1
 800fc88:	9b07      	ldr	r3, [sp, #28]
 800fc8a:	42b3      	cmp	r3, r6
 800fc8c:	bfbf      	itttt	lt
 800fc8e:	9b07      	ldrlt	r3, [sp, #28]
 800fc90:	9607      	strlt	r6, [sp, #28]
 800fc92:	1af2      	sublt	r2, r6, r3
 800fc94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fc96:	bfb6      	itet	lt
 800fc98:	189b      	addlt	r3, r3, r2
 800fc9a:	1b9e      	subge	r6, r3, r6
 800fc9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fc9e:	9b03      	ldr	r3, [sp, #12]
 800fca0:	bfb8      	it	lt
 800fca2:	2600      	movlt	r6, #0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	bfb7      	itett	lt
 800fca8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800fcac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fcb0:	1a9d      	sublt	r5, r3, r2
 800fcb2:	2300      	movlt	r3, #0
 800fcb4:	e734      	b.n	800fb20 <_dtoa_r+0x720>
 800fcb6:	9e07      	ldr	r6, [sp, #28]
 800fcb8:	9d04      	ldr	r5, [sp, #16]
 800fcba:	9f08      	ldr	r7, [sp, #32]
 800fcbc:	e73b      	b.n	800fb36 <_dtoa_r+0x736>
 800fcbe:	9a07      	ldr	r2, [sp, #28]
 800fcc0:	e767      	b.n	800fb92 <_dtoa_r+0x792>
 800fcc2:	9b06      	ldr	r3, [sp, #24]
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	dc18      	bgt.n	800fcfa <_dtoa_r+0x8fa>
 800fcc8:	f1ba 0f00 	cmp.w	sl, #0
 800fccc:	d115      	bne.n	800fcfa <_dtoa_r+0x8fa>
 800fcce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcd2:	b993      	cbnz	r3, 800fcfa <_dtoa_r+0x8fa>
 800fcd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fcd8:	0d1b      	lsrs	r3, r3, #20
 800fcda:	051b      	lsls	r3, r3, #20
 800fcdc:	b183      	cbz	r3, 800fd00 <_dtoa_r+0x900>
 800fcde:	9b04      	ldr	r3, [sp, #16]
 800fce0:	3301      	adds	r3, #1
 800fce2:	9304      	str	r3, [sp, #16]
 800fce4:	9b05      	ldr	r3, [sp, #20]
 800fce6:	3301      	adds	r3, #1
 800fce8:	9305      	str	r3, [sp, #20]
 800fcea:	f04f 0801 	mov.w	r8, #1
 800fcee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f47f af6a 	bne.w	800fbca <_dtoa_r+0x7ca>
 800fcf6:	2001      	movs	r0, #1
 800fcf8:	e76f      	b.n	800fbda <_dtoa_r+0x7da>
 800fcfa:	f04f 0800 	mov.w	r8, #0
 800fcfe:	e7f6      	b.n	800fcee <_dtoa_r+0x8ee>
 800fd00:	4698      	mov	r8, r3
 800fd02:	e7f4      	b.n	800fcee <_dtoa_r+0x8ee>
 800fd04:	f43f af7d 	beq.w	800fc02 <_dtoa_r+0x802>
 800fd08:	4618      	mov	r0, r3
 800fd0a:	301c      	adds	r0, #28
 800fd0c:	e772      	b.n	800fbf4 <_dtoa_r+0x7f4>
 800fd0e:	9b03      	ldr	r3, [sp, #12]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	dc37      	bgt.n	800fd84 <_dtoa_r+0x984>
 800fd14:	9b06      	ldr	r3, [sp, #24]
 800fd16:	2b02      	cmp	r3, #2
 800fd18:	dd34      	ble.n	800fd84 <_dtoa_r+0x984>
 800fd1a:	9b03      	ldr	r3, [sp, #12]
 800fd1c:	9302      	str	r3, [sp, #8]
 800fd1e:	9b02      	ldr	r3, [sp, #8]
 800fd20:	b96b      	cbnz	r3, 800fd3e <_dtoa_r+0x93e>
 800fd22:	4631      	mov	r1, r6
 800fd24:	2205      	movs	r2, #5
 800fd26:	4620      	mov	r0, r4
 800fd28:	f000 f9c6 	bl	80100b8 <__multadd>
 800fd2c:	4601      	mov	r1, r0
 800fd2e:	4606      	mov	r6, r0
 800fd30:	ee18 0a10 	vmov	r0, s16
 800fd34:	f000 fbe0 	bl	80104f8 <__mcmp>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	f73f adbb 	bgt.w	800f8b4 <_dtoa_r+0x4b4>
 800fd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd40:	9d01      	ldr	r5, [sp, #4]
 800fd42:	43db      	mvns	r3, r3
 800fd44:	9300      	str	r3, [sp, #0]
 800fd46:	f04f 0800 	mov.w	r8, #0
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f000 f991 	bl	8010074 <_Bfree>
 800fd52:	2f00      	cmp	r7, #0
 800fd54:	f43f aea4 	beq.w	800faa0 <_dtoa_r+0x6a0>
 800fd58:	f1b8 0f00 	cmp.w	r8, #0
 800fd5c:	d005      	beq.n	800fd6a <_dtoa_r+0x96a>
 800fd5e:	45b8      	cmp	r8, r7
 800fd60:	d003      	beq.n	800fd6a <_dtoa_r+0x96a>
 800fd62:	4641      	mov	r1, r8
 800fd64:	4620      	mov	r0, r4
 800fd66:	f000 f985 	bl	8010074 <_Bfree>
 800fd6a:	4639      	mov	r1, r7
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f000 f981 	bl	8010074 <_Bfree>
 800fd72:	e695      	b.n	800faa0 <_dtoa_r+0x6a0>
 800fd74:	2600      	movs	r6, #0
 800fd76:	4637      	mov	r7, r6
 800fd78:	e7e1      	b.n	800fd3e <_dtoa_r+0x93e>
 800fd7a:	9700      	str	r7, [sp, #0]
 800fd7c:	4637      	mov	r7, r6
 800fd7e:	e599      	b.n	800f8b4 <_dtoa_r+0x4b4>
 800fd80:	40240000 	.word	0x40240000
 800fd84:	9b08      	ldr	r3, [sp, #32]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f000 80ca 	beq.w	800ff20 <_dtoa_r+0xb20>
 800fd8c:	9b03      	ldr	r3, [sp, #12]
 800fd8e:	9302      	str	r3, [sp, #8]
 800fd90:	2d00      	cmp	r5, #0
 800fd92:	dd05      	ble.n	800fda0 <_dtoa_r+0x9a0>
 800fd94:	4639      	mov	r1, r7
 800fd96:	462a      	mov	r2, r5
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f000 fb3d 	bl	8010418 <__lshift>
 800fd9e:	4607      	mov	r7, r0
 800fda0:	f1b8 0f00 	cmp.w	r8, #0
 800fda4:	d05b      	beq.n	800fe5e <_dtoa_r+0xa5e>
 800fda6:	6879      	ldr	r1, [r7, #4]
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f000 f923 	bl	800fff4 <_Balloc>
 800fdae:	4605      	mov	r5, r0
 800fdb0:	b928      	cbnz	r0, 800fdbe <_dtoa_r+0x9be>
 800fdb2:	4b87      	ldr	r3, [pc, #540]	; (800ffd0 <_dtoa_r+0xbd0>)
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fdba:	f7ff bb3b 	b.w	800f434 <_dtoa_r+0x34>
 800fdbe:	693a      	ldr	r2, [r7, #16]
 800fdc0:	3202      	adds	r2, #2
 800fdc2:	0092      	lsls	r2, r2, #2
 800fdc4:	f107 010c 	add.w	r1, r7, #12
 800fdc8:	300c      	adds	r0, #12
 800fdca:	f7fe fdeb 	bl	800e9a4 <memcpy>
 800fdce:	2201      	movs	r2, #1
 800fdd0:	4629      	mov	r1, r5
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f000 fb20 	bl	8010418 <__lshift>
 800fdd8:	9b01      	ldr	r3, [sp, #4]
 800fdda:	f103 0901 	add.w	r9, r3, #1
 800fdde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fde2:	4413      	add	r3, r2
 800fde4:	9305      	str	r3, [sp, #20]
 800fde6:	f00a 0301 	and.w	r3, sl, #1
 800fdea:	46b8      	mov	r8, r7
 800fdec:	9304      	str	r3, [sp, #16]
 800fdee:	4607      	mov	r7, r0
 800fdf0:	4631      	mov	r1, r6
 800fdf2:	ee18 0a10 	vmov	r0, s16
 800fdf6:	f7ff fa75 	bl	800f2e4 <quorem>
 800fdfa:	4641      	mov	r1, r8
 800fdfc:	9002      	str	r0, [sp, #8]
 800fdfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fe02:	ee18 0a10 	vmov	r0, s16
 800fe06:	f000 fb77 	bl	80104f8 <__mcmp>
 800fe0a:	463a      	mov	r2, r7
 800fe0c:	9003      	str	r0, [sp, #12]
 800fe0e:	4631      	mov	r1, r6
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 fb8d 	bl	8010530 <__mdiff>
 800fe16:	68c2      	ldr	r2, [r0, #12]
 800fe18:	f109 3bff 	add.w	fp, r9, #4294967295
 800fe1c:	4605      	mov	r5, r0
 800fe1e:	bb02      	cbnz	r2, 800fe62 <_dtoa_r+0xa62>
 800fe20:	4601      	mov	r1, r0
 800fe22:	ee18 0a10 	vmov	r0, s16
 800fe26:	f000 fb67 	bl	80104f8 <__mcmp>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	4620      	mov	r0, r4
 800fe30:	9207      	str	r2, [sp, #28]
 800fe32:	f000 f91f 	bl	8010074 <_Bfree>
 800fe36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fe3a:	ea43 0102 	orr.w	r1, r3, r2
 800fe3e:	9b04      	ldr	r3, [sp, #16]
 800fe40:	430b      	orrs	r3, r1
 800fe42:	464d      	mov	r5, r9
 800fe44:	d10f      	bne.n	800fe66 <_dtoa_r+0xa66>
 800fe46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fe4a:	d02a      	beq.n	800fea2 <_dtoa_r+0xaa2>
 800fe4c:	9b03      	ldr	r3, [sp, #12]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	dd02      	ble.n	800fe58 <_dtoa_r+0xa58>
 800fe52:	9b02      	ldr	r3, [sp, #8]
 800fe54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fe58:	f88b a000 	strb.w	sl, [fp]
 800fe5c:	e775      	b.n	800fd4a <_dtoa_r+0x94a>
 800fe5e:	4638      	mov	r0, r7
 800fe60:	e7ba      	b.n	800fdd8 <_dtoa_r+0x9d8>
 800fe62:	2201      	movs	r2, #1
 800fe64:	e7e2      	b.n	800fe2c <_dtoa_r+0xa2c>
 800fe66:	9b03      	ldr	r3, [sp, #12]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	db04      	blt.n	800fe76 <_dtoa_r+0xa76>
 800fe6c:	9906      	ldr	r1, [sp, #24]
 800fe6e:	430b      	orrs	r3, r1
 800fe70:	9904      	ldr	r1, [sp, #16]
 800fe72:	430b      	orrs	r3, r1
 800fe74:	d122      	bne.n	800febc <_dtoa_r+0xabc>
 800fe76:	2a00      	cmp	r2, #0
 800fe78:	ddee      	ble.n	800fe58 <_dtoa_r+0xa58>
 800fe7a:	ee18 1a10 	vmov	r1, s16
 800fe7e:	2201      	movs	r2, #1
 800fe80:	4620      	mov	r0, r4
 800fe82:	f000 fac9 	bl	8010418 <__lshift>
 800fe86:	4631      	mov	r1, r6
 800fe88:	ee08 0a10 	vmov	s16, r0
 800fe8c:	f000 fb34 	bl	80104f8 <__mcmp>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	dc03      	bgt.n	800fe9c <_dtoa_r+0xa9c>
 800fe94:	d1e0      	bne.n	800fe58 <_dtoa_r+0xa58>
 800fe96:	f01a 0f01 	tst.w	sl, #1
 800fe9a:	d0dd      	beq.n	800fe58 <_dtoa_r+0xa58>
 800fe9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fea0:	d1d7      	bne.n	800fe52 <_dtoa_r+0xa52>
 800fea2:	2339      	movs	r3, #57	; 0x39
 800fea4:	f88b 3000 	strb.w	r3, [fp]
 800fea8:	462b      	mov	r3, r5
 800feaa:	461d      	mov	r5, r3
 800feac:	3b01      	subs	r3, #1
 800feae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800feb2:	2a39      	cmp	r2, #57	; 0x39
 800feb4:	d071      	beq.n	800ff9a <_dtoa_r+0xb9a>
 800feb6:	3201      	adds	r2, #1
 800feb8:	701a      	strb	r2, [r3, #0]
 800feba:	e746      	b.n	800fd4a <_dtoa_r+0x94a>
 800febc:	2a00      	cmp	r2, #0
 800febe:	dd07      	ble.n	800fed0 <_dtoa_r+0xad0>
 800fec0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fec4:	d0ed      	beq.n	800fea2 <_dtoa_r+0xaa2>
 800fec6:	f10a 0301 	add.w	r3, sl, #1
 800feca:	f88b 3000 	strb.w	r3, [fp]
 800fece:	e73c      	b.n	800fd4a <_dtoa_r+0x94a>
 800fed0:	9b05      	ldr	r3, [sp, #20]
 800fed2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fed6:	4599      	cmp	r9, r3
 800fed8:	d047      	beq.n	800ff6a <_dtoa_r+0xb6a>
 800feda:	ee18 1a10 	vmov	r1, s16
 800fede:	2300      	movs	r3, #0
 800fee0:	220a      	movs	r2, #10
 800fee2:	4620      	mov	r0, r4
 800fee4:	f000 f8e8 	bl	80100b8 <__multadd>
 800fee8:	45b8      	cmp	r8, r7
 800feea:	ee08 0a10 	vmov	s16, r0
 800feee:	f04f 0300 	mov.w	r3, #0
 800fef2:	f04f 020a 	mov.w	r2, #10
 800fef6:	4641      	mov	r1, r8
 800fef8:	4620      	mov	r0, r4
 800fefa:	d106      	bne.n	800ff0a <_dtoa_r+0xb0a>
 800fefc:	f000 f8dc 	bl	80100b8 <__multadd>
 800ff00:	4680      	mov	r8, r0
 800ff02:	4607      	mov	r7, r0
 800ff04:	f109 0901 	add.w	r9, r9, #1
 800ff08:	e772      	b.n	800fdf0 <_dtoa_r+0x9f0>
 800ff0a:	f000 f8d5 	bl	80100b8 <__multadd>
 800ff0e:	4639      	mov	r1, r7
 800ff10:	4680      	mov	r8, r0
 800ff12:	2300      	movs	r3, #0
 800ff14:	220a      	movs	r2, #10
 800ff16:	4620      	mov	r0, r4
 800ff18:	f000 f8ce 	bl	80100b8 <__multadd>
 800ff1c:	4607      	mov	r7, r0
 800ff1e:	e7f1      	b.n	800ff04 <_dtoa_r+0xb04>
 800ff20:	9b03      	ldr	r3, [sp, #12]
 800ff22:	9302      	str	r3, [sp, #8]
 800ff24:	9d01      	ldr	r5, [sp, #4]
 800ff26:	ee18 0a10 	vmov	r0, s16
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	f7ff f9da 	bl	800f2e4 <quorem>
 800ff30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ff34:	9b01      	ldr	r3, [sp, #4]
 800ff36:	f805 ab01 	strb.w	sl, [r5], #1
 800ff3a:	1aea      	subs	r2, r5, r3
 800ff3c:	9b02      	ldr	r3, [sp, #8]
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	dd09      	ble.n	800ff56 <_dtoa_r+0xb56>
 800ff42:	ee18 1a10 	vmov	r1, s16
 800ff46:	2300      	movs	r3, #0
 800ff48:	220a      	movs	r2, #10
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f000 f8b4 	bl	80100b8 <__multadd>
 800ff50:	ee08 0a10 	vmov	s16, r0
 800ff54:	e7e7      	b.n	800ff26 <_dtoa_r+0xb26>
 800ff56:	9b02      	ldr	r3, [sp, #8]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	bfc8      	it	gt
 800ff5c:	461d      	movgt	r5, r3
 800ff5e:	9b01      	ldr	r3, [sp, #4]
 800ff60:	bfd8      	it	le
 800ff62:	2501      	movle	r5, #1
 800ff64:	441d      	add	r5, r3
 800ff66:	f04f 0800 	mov.w	r8, #0
 800ff6a:	ee18 1a10 	vmov	r1, s16
 800ff6e:	2201      	movs	r2, #1
 800ff70:	4620      	mov	r0, r4
 800ff72:	f000 fa51 	bl	8010418 <__lshift>
 800ff76:	4631      	mov	r1, r6
 800ff78:	ee08 0a10 	vmov	s16, r0
 800ff7c:	f000 fabc 	bl	80104f8 <__mcmp>
 800ff80:	2800      	cmp	r0, #0
 800ff82:	dc91      	bgt.n	800fea8 <_dtoa_r+0xaa8>
 800ff84:	d102      	bne.n	800ff8c <_dtoa_r+0xb8c>
 800ff86:	f01a 0f01 	tst.w	sl, #1
 800ff8a:	d18d      	bne.n	800fea8 <_dtoa_r+0xaa8>
 800ff8c:	462b      	mov	r3, r5
 800ff8e:	461d      	mov	r5, r3
 800ff90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff94:	2a30      	cmp	r2, #48	; 0x30
 800ff96:	d0fa      	beq.n	800ff8e <_dtoa_r+0xb8e>
 800ff98:	e6d7      	b.n	800fd4a <_dtoa_r+0x94a>
 800ff9a:	9a01      	ldr	r2, [sp, #4]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d184      	bne.n	800feaa <_dtoa_r+0xaaa>
 800ffa0:	9b00      	ldr	r3, [sp, #0]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	2331      	movs	r3, #49	; 0x31
 800ffa8:	7013      	strb	r3, [r2, #0]
 800ffaa:	e6ce      	b.n	800fd4a <_dtoa_r+0x94a>
 800ffac:	4b09      	ldr	r3, [pc, #36]	; (800ffd4 <_dtoa_r+0xbd4>)
 800ffae:	f7ff ba95 	b.w	800f4dc <_dtoa_r+0xdc>
 800ffb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	f47f aa6e 	bne.w	800f496 <_dtoa_r+0x96>
 800ffba:	4b07      	ldr	r3, [pc, #28]	; (800ffd8 <_dtoa_r+0xbd8>)
 800ffbc:	f7ff ba8e 	b.w	800f4dc <_dtoa_r+0xdc>
 800ffc0:	9b02      	ldr	r3, [sp, #8]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	dcae      	bgt.n	800ff24 <_dtoa_r+0xb24>
 800ffc6:	9b06      	ldr	r3, [sp, #24]
 800ffc8:	2b02      	cmp	r3, #2
 800ffca:	f73f aea8 	bgt.w	800fd1e <_dtoa_r+0x91e>
 800ffce:	e7a9      	b.n	800ff24 <_dtoa_r+0xb24>
 800ffd0:	08013437 	.word	0x08013437
 800ffd4:	08013394 	.word	0x08013394
 800ffd8:	080133b8 	.word	0x080133b8

0800ffdc <_localeconv_r>:
 800ffdc:	4800      	ldr	r0, [pc, #0]	; (800ffe0 <_localeconv_r+0x4>)
 800ffde:	4770      	bx	lr
 800ffe0:	200002d0 	.word	0x200002d0

0800ffe4 <malloc>:
 800ffe4:	4b02      	ldr	r3, [pc, #8]	; (800fff0 <malloc+0xc>)
 800ffe6:	4601      	mov	r1, r0
 800ffe8:	6818      	ldr	r0, [r3, #0]
 800ffea:	f000 bc09 	b.w	8010800 <_malloc_r>
 800ffee:	bf00      	nop
 800fff0:	2000017c 	.word	0x2000017c

0800fff4 <_Balloc>:
 800fff4:	b570      	push	{r4, r5, r6, lr}
 800fff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fff8:	4604      	mov	r4, r0
 800fffa:	460d      	mov	r5, r1
 800fffc:	b976      	cbnz	r6, 801001c <_Balloc+0x28>
 800fffe:	2010      	movs	r0, #16
 8010000:	f7ff fff0 	bl	800ffe4 <malloc>
 8010004:	4602      	mov	r2, r0
 8010006:	6260      	str	r0, [r4, #36]	; 0x24
 8010008:	b920      	cbnz	r0, 8010014 <_Balloc+0x20>
 801000a:	4b18      	ldr	r3, [pc, #96]	; (801006c <_Balloc+0x78>)
 801000c:	4818      	ldr	r0, [pc, #96]	; (8010070 <_Balloc+0x7c>)
 801000e:	2166      	movs	r1, #102	; 0x66
 8010010:	f000 fdd6 	bl	8010bc0 <__assert_func>
 8010014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010018:	6006      	str	r6, [r0, #0]
 801001a:	60c6      	str	r6, [r0, #12]
 801001c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801001e:	68f3      	ldr	r3, [r6, #12]
 8010020:	b183      	cbz	r3, 8010044 <_Balloc+0x50>
 8010022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801002a:	b9b8      	cbnz	r0, 801005c <_Balloc+0x68>
 801002c:	2101      	movs	r1, #1
 801002e:	fa01 f605 	lsl.w	r6, r1, r5
 8010032:	1d72      	adds	r2, r6, #5
 8010034:	0092      	lsls	r2, r2, #2
 8010036:	4620      	mov	r0, r4
 8010038:	f000 fb60 	bl	80106fc <_calloc_r>
 801003c:	b160      	cbz	r0, 8010058 <_Balloc+0x64>
 801003e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010042:	e00e      	b.n	8010062 <_Balloc+0x6e>
 8010044:	2221      	movs	r2, #33	; 0x21
 8010046:	2104      	movs	r1, #4
 8010048:	4620      	mov	r0, r4
 801004a:	f000 fb57 	bl	80106fc <_calloc_r>
 801004e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010050:	60f0      	str	r0, [r6, #12]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1e4      	bne.n	8010022 <_Balloc+0x2e>
 8010058:	2000      	movs	r0, #0
 801005a:	bd70      	pop	{r4, r5, r6, pc}
 801005c:	6802      	ldr	r2, [r0, #0]
 801005e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010062:	2300      	movs	r3, #0
 8010064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010068:	e7f7      	b.n	801005a <_Balloc+0x66>
 801006a:	bf00      	nop
 801006c:	080133c5 	.word	0x080133c5
 8010070:	08013448 	.word	0x08013448

08010074 <_Bfree>:
 8010074:	b570      	push	{r4, r5, r6, lr}
 8010076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010078:	4605      	mov	r5, r0
 801007a:	460c      	mov	r4, r1
 801007c:	b976      	cbnz	r6, 801009c <_Bfree+0x28>
 801007e:	2010      	movs	r0, #16
 8010080:	f7ff ffb0 	bl	800ffe4 <malloc>
 8010084:	4602      	mov	r2, r0
 8010086:	6268      	str	r0, [r5, #36]	; 0x24
 8010088:	b920      	cbnz	r0, 8010094 <_Bfree+0x20>
 801008a:	4b09      	ldr	r3, [pc, #36]	; (80100b0 <_Bfree+0x3c>)
 801008c:	4809      	ldr	r0, [pc, #36]	; (80100b4 <_Bfree+0x40>)
 801008e:	218a      	movs	r1, #138	; 0x8a
 8010090:	f000 fd96 	bl	8010bc0 <__assert_func>
 8010094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010098:	6006      	str	r6, [r0, #0]
 801009a:	60c6      	str	r6, [r0, #12]
 801009c:	b13c      	cbz	r4, 80100ae <_Bfree+0x3a>
 801009e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80100a0:	6862      	ldr	r2, [r4, #4]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80100a8:	6021      	str	r1, [r4, #0]
 80100aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80100ae:	bd70      	pop	{r4, r5, r6, pc}
 80100b0:	080133c5 	.word	0x080133c5
 80100b4:	08013448 	.word	0x08013448

080100b8 <__multadd>:
 80100b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100bc:	690d      	ldr	r5, [r1, #16]
 80100be:	4607      	mov	r7, r0
 80100c0:	460c      	mov	r4, r1
 80100c2:	461e      	mov	r6, r3
 80100c4:	f101 0c14 	add.w	ip, r1, #20
 80100c8:	2000      	movs	r0, #0
 80100ca:	f8dc 3000 	ldr.w	r3, [ip]
 80100ce:	b299      	uxth	r1, r3
 80100d0:	fb02 6101 	mla	r1, r2, r1, r6
 80100d4:	0c1e      	lsrs	r6, r3, #16
 80100d6:	0c0b      	lsrs	r3, r1, #16
 80100d8:	fb02 3306 	mla	r3, r2, r6, r3
 80100dc:	b289      	uxth	r1, r1
 80100de:	3001      	adds	r0, #1
 80100e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100e4:	4285      	cmp	r5, r0
 80100e6:	f84c 1b04 	str.w	r1, [ip], #4
 80100ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100ee:	dcec      	bgt.n	80100ca <__multadd+0x12>
 80100f0:	b30e      	cbz	r6, 8010136 <__multadd+0x7e>
 80100f2:	68a3      	ldr	r3, [r4, #8]
 80100f4:	42ab      	cmp	r3, r5
 80100f6:	dc19      	bgt.n	801012c <__multadd+0x74>
 80100f8:	6861      	ldr	r1, [r4, #4]
 80100fa:	4638      	mov	r0, r7
 80100fc:	3101      	adds	r1, #1
 80100fe:	f7ff ff79 	bl	800fff4 <_Balloc>
 8010102:	4680      	mov	r8, r0
 8010104:	b928      	cbnz	r0, 8010112 <__multadd+0x5a>
 8010106:	4602      	mov	r2, r0
 8010108:	4b0c      	ldr	r3, [pc, #48]	; (801013c <__multadd+0x84>)
 801010a:	480d      	ldr	r0, [pc, #52]	; (8010140 <__multadd+0x88>)
 801010c:	21b5      	movs	r1, #181	; 0xb5
 801010e:	f000 fd57 	bl	8010bc0 <__assert_func>
 8010112:	6922      	ldr	r2, [r4, #16]
 8010114:	3202      	adds	r2, #2
 8010116:	f104 010c 	add.w	r1, r4, #12
 801011a:	0092      	lsls	r2, r2, #2
 801011c:	300c      	adds	r0, #12
 801011e:	f7fe fc41 	bl	800e9a4 <memcpy>
 8010122:	4621      	mov	r1, r4
 8010124:	4638      	mov	r0, r7
 8010126:	f7ff ffa5 	bl	8010074 <_Bfree>
 801012a:	4644      	mov	r4, r8
 801012c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010130:	3501      	adds	r5, #1
 8010132:	615e      	str	r6, [r3, #20]
 8010134:	6125      	str	r5, [r4, #16]
 8010136:	4620      	mov	r0, r4
 8010138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801013c:	08013437 	.word	0x08013437
 8010140:	08013448 	.word	0x08013448

08010144 <__hi0bits>:
 8010144:	0c03      	lsrs	r3, r0, #16
 8010146:	041b      	lsls	r3, r3, #16
 8010148:	b9d3      	cbnz	r3, 8010180 <__hi0bits+0x3c>
 801014a:	0400      	lsls	r0, r0, #16
 801014c:	2310      	movs	r3, #16
 801014e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010152:	bf04      	itt	eq
 8010154:	0200      	lsleq	r0, r0, #8
 8010156:	3308      	addeq	r3, #8
 8010158:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801015c:	bf04      	itt	eq
 801015e:	0100      	lsleq	r0, r0, #4
 8010160:	3304      	addeq	r3, #4
 8010162:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010166:	bf04      	itt	eq
 8010168:	0080      	lsleq	r0, r0, #2
 801016a:	3302      	addeq	r3, #2
 801016c:	2800      	cmp	r0, #0
 801016e:	db05      	blt.n	801017c <__hi0bits+0x38>
 8010170:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010174:	f103 0301 	add.w	r3, r3, #1
 8010178:	bf08      	it	eq
 801017a:	2320      	moveq	r3, #32
 801017c:	4618      	mov	r0, r3
 801017e:	4770      	bx	lr
 8010180:	2300      	movs	r3, #0
 8010182:	e7e4      	b.n	801014e <__hi0bits+0xa>

08010184 <__lo0bits>:
 8010184:	6803      	ldr	r3, [r0, #0]
 8010186:	f013 0207 	ands.w	r2, r3, #7
 801018a:	4601      	mov	r1, r0
 801018c:	d00b      	beq.n	80101a6 <__lo0bits+0x22>
 801018e:	07da      	lsls	r2, r3, #31
 8010190:	d423      	bmi.n	80101da <__lo0bits+0x56>
 8010192:	0798      	lsls	r0, r3, #30
 8010194:	bf49      	itett	mi
 8010196:	085b      	lsrmi	r3, r3, #1
 8010198:	089b      	lsrpl	r3, r3, #2
 801019a:	2001      	movmi	r0, #1
 801019c:	600b      	strmi	r3, [r1, #0]
 801019e:	bf5c      	itt	pl
 80101a0:	600b      	strpl	r3, [r1, #0]
 80101a2:	2002      	movpl	r0, #2
 80101a4:	4770      	bx	lr
 80101a6:	b298      	uxth	r0, r3
 80101a8:	b9a8      	cbnz	r0, 80101d6 <__lo0bits+0x52>
 80101aa:	0c1b      	lsrs	r3, r3, #16
 80101ac:	2010      	movs	r0, #16
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	b90a      	cbnz	r2, 80101b6 <__lo0bits+0x32>
 80101b2:	3008      	adds	r0, #8
 80101b4:	0a1b      	lsrs	r3, r3, #8
 80101b6:	071a      	lsls	r2, r3, #28
 80101b8:	bf04      	itt	eq
 80101ba:	091b      	lsreq	r3, r3, #4
 80101bc:	3004      	addeq	r0, #4
 80101be:	079a      	lsls	r2, r3, #30
 80101c0:	bf04      	itt	eq
 80101c2:	089b      	lsreq	r3, r3, #2
 80101c4:	3002      	addeq	r0, #2
 80101c6:	07da      	lsls	r2, r3, #31
 80101c8:	d403      	bmi.n	80101d2 <__lo0bits+0x4e>
 80101ca:	085b      	lsrs	r3, r3, #1
 80101cc:	f100 0001 	add.w	r0, r0, #1
 80101d0:	d005      	beq.n	80101de <__lo0bits+0x5a>
 80101d2:	600b      	str	r3, [r1, #0]
 80101d4:	4770      	bx	lr
 80101d6:	4610      	mov	r0, r2
 80101d8:	e7e9      	b.n	80101ae <__lo0bits+0x2a>
 80101da:	2000      	movs	r0, #0
 80101dc:	4770      	bx	lr
 80101de:	2020      	movs	r0, #32
 80101e0:	4770      	bx	lr
	...

080101e4 <__i2b>:
 80101e4:	b510      	push	{r4, lr}
 80101e6:	460c      	mov	r4, r1
 80101e8:	2101      	movs	r1, #1
 80101ea:	f7ff ff03 	bl	800fff4 <_Balloc>
 80101ee:	4602      	mov	r2, r0
 80101f0:	b928      	cbnz	r0, 80101fe <__i2b+0x1a>
 80101f2:	4b05      	ldr	r3, [pc, #20]	; (8010208 <__i2b+0x24>)
 80101f4:	4805      	ldr	r0, [pc, #20]	; (801020c <__i2b+0x28>)
 80101f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80101fa:	f000 fce1 	bl	8010bc0 <__assert_func>
 80101fe:	2301      	movs	r3, #1
 8010200:	6144      	str	r4, [r0, #20]
 8010202:	6103      	str	r3, [r0, #16]
 8010204:	bd10      	pop	{r4, pc}
 8010206:	bf00      	nop
 8010208:	08013437 	.word	0x08013437
 801020c:	08013448 	.word	0x08013448

08010210 <__multiply>:
 8010210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010214:	4691      	mov	r9, r2
 8010216:	690a      	ldr	r2, [r1, #16]
 8010218:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801021c:	429a      	cmp	r2, r3
 801021e:	bfb8      	it	lt
 8010220:	460b      	movlt	r3, r1
 8010222:	460c      	mov	r4, r1
 8010224:	bfbc      	itt	lt
 8010226:	464c      	movlt	r4, r9
 8010228:	4699      	movlt	r9, r3
 801022a:	6927      	ldr	r7, [r4, #16]
 801022c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010230:	68a3      	ldr	r3, [r4, #8]
 8010232:	6861      	ldr	r1, [r4, #4]
 8010234:	eb07 060a 	add.w	r6, r7, sl
 8010238:	42b3      	cmp	r3, r6
 801023a:	b085      	sub	sp, #20
 801023c:	bfb8      	it	lt
 801023e:	3101      	addlt	r1, #1
 8010240:	f7ff fed8 	bl	800fff4 <_Balloc>
 8010244:	b930      	cbnz	r0, 8010254 <__multiply+0x44>
 8010246:	4602      	mov	r2, r0
 8010248:	4b44      	ldr	r3, [pc, #272]	; (801035c <__multiply+0x14c>)
 801024a:	4845      	ldr	r0, [pc, #276]	; (8010360 <__multiply+0x150>)
 801024c:	f240 115d 	movw	r1, #349	; 0x15d
 8010250:	f000 fcb6 	bl	8010bc0 <__assert_func>
 8010254:	f100 0514 	add.w	r5, r0, #20
 8010258:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801025c:	462b      	mov	r3, r5
 801025e:	2200      	movs	r2, #0
 8010260:	4543      	cmp	r3, r8
 8010262:	d321      	bcc.n	80102a8 <__multiply+0x98>
 8010264:	f104 0314 	add.w	r3, r4, #20
 8010268:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801026c:	f109 0314 	add.w	r3, r9, #20
 8010270:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010274:	9202      	str	r2, [sp, #8]
 8010276:	1b3a      	subs	r2, r7, r4
 8010278:	3a15      	subs	r2, #21
 801027a:	f022 0203 	bic.w	r2, r2, #3
 801027e:	3204      	adds	r2, #4
 8010280:	f104 0115 	add.w	r1, r4, #21
 8010284:	428f      	cmp	r7, r1
 8010286:	bf38      	it	cc
 8010288:	2204      	movcc	r2, #4
 801028a:	9201      	str	r2, [sp, #4]
 801028c:	9a02      	ldr	r2, [sp, #8]
 801028e:	9303      	str	r3, [sp, #12]
 8010290:	429a      	cmp	r2, r3
 8010292:	d80c      	bhi.n	80102ae <__multiply+0x9e>
 8010294:	2e00      	cmp	r6, #0
 8010296:	dd03      	ble.n	80102a0 <__multiply+0x90>
 8010298:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801029c:	2b00      	cmp	r3, #0
 801029e:	d05a      	beq.n	8010356 <__multiply+0x146>
 80102a0:	6106      	str	r6, [r0, #16]
 80102a2:	b005      	add	sp, #20
 80102a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a8:	f843 2b04 	str.w	r2, [r3], #4
 80102ac:	e7d8      	b.n	8010260 <__multiply+0x50>
 80102ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80102b2:	f1ba 0f00 	cmp.w	sl, #0
 80102b6:	d024      	beq.n	8010302 <__multiply+0xf2>
 80102b8:	f104 0e14 	add.w	lr, r4, #20
 80102bc:	46a9      	mov	r9, r5
 80102be:	f04f 0c00 	mov.w	ip, #0
 80102c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80102c6:	f8d9 1000 	ldr.w	r1, [r9]
 80102ca:	fa1f fb82 	uxth.w	fp, r2
 80102ce:	b289      	uxth	r1, r1
 80102d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80102d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80102d8:	f8d9 2000 	ldr.w	r2, [r9]
 80102dc:	4461      	add	r1, ip
 80102de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80102e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80102e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80102ea:	b289      	uxth	r1, r1
 80102ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80102f0:	4577      	cmp	r7, lr
 80102f2:	f849 1b04 	str.w	r1, [r9], #4
 80102f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80102fa:	d8e2      	bhi.n	80102c2 <__multiply+0xb2>
 80102fc:	9a01      	ldr	r2, [sp, #4]
 80102fe:	f845 c002 	str.w	ip, [r5, r2]
 8010302:	9a03      	ldr	r2, [sp, #12]
 8010304:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010308:	3304      	adds	r3, #4
 801030a:	f1b9 0f00 	cmp.w	r9, #0
 801030e:	d020      	beq.n	8010352 <__multiply+0x142>
 8010310:	6829      	ldr	r1, [r5, #0]
 8010312:	f104 0c14 	add.w	ip, r4, #20
 8010316:	46ae      	mov	lr, r5
 8010318:	f04f 0a00 	mov.w	sl, #0
 801031c:	f8bc b000 	ldrh.w	fp, [ip]
 8010320:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010324:	fb09 220b 	mla	r2, r9, fp, r2
 8010328:	4492      	add	sl, r2
 801032a:	b289      	uxth	r1, r1
 801032c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010330:	f84e 1b04 	str.w	r1, [lr], #4
 8010334:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010338:	f8be 1000 	ldrh.w	r1, [lr]
 801033c:	0c12      	lsrs	r2, r2, #16
 801033e:	fb09 1102 	mla	r1, r9, r2, r1
 8010342:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010346:	4567      	cmp	r7, ip
 8010348:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801034c:	d8e6      	bhi.n	801031c <__multiply+0x10c>
 801034e:	9a01      	ldr	r2, [sp, #4]
 8010350:	50a9      	str	r1, [r5, r2]
 8010352:	3504      	adds	r5, #4
 8010354:	e79a      	b.n	801028c <__multiply+0x7c>
 8010356:	3e01      	subs	r6, #1
 8010358:	e79c      	b.n	8010294 <__multiply+0x84>
 801035a:	bf00      	nop
 801035c:	08013437 	.word	0x08013437
 8010360:	08013448 	.word	0x08013448

08010364 <__pow5mult>:
 8010364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010368:	4615      	mov	r5, r2
 801036a:	f012 0203 	ands.w	r2, r2, #3
 801036e:	4606      	mov	r6, r0
 8010370:	460f      	mov	r7, r1
 8010372:	d007      	beq.n	8010384 <__pow5mult+0x20>
 8010374:	4c25      	ldr	r4, [pc, #148]	; (801040c <__pow5mult+0xa8>)
 8010376:	3a01      	subs	r2, #1
 8010378:	2300      	movs	r3, #0
 801037a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801037e:	f7ff fe9b 	bl	80100b8 <__multadd>
 8010382:	4607      	mov	r7, r0
 8010384:	10ad      	asrs	r5, r5, #2
 8010386:	d03d      	beq.n	8010404 <__pow5mult+0xa0>
 8010388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801038a:	b97c      	cbnz	r4, 80103ac <__pow5mult+0x48>
 801038c:	2010      	movs	r0, #16
 801038e:	f7ff fe29 	bl	800ffe4 <malloc>
 8010392:	4602      	mov	r2, r0
 8010394:	6270      	str	r0, [r6, #36]	; 0x24
 8010396:	b928      	cbnz	r0, 80103a4 <__pow5mult+0x40>
 8010398:	4b1d      	ldr	r3, [pc, #116]	; (8010410 <__pow5mult+0xac>)
 801039a:	481e      	ldr	r0, [pc, #120]	; (8010414 <__pow5mult+0xb0>)
 801039c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80103a0:	f000 fc0e 	bl	8010bc0 <__assert_func>
 80103a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80103a8:	6004      	str	r4, [r0, #0]
 80103aa:	60c4      	str	r4, [r0, #12]
 80103ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80103b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80103b4:	b94c      	cbnz	r4, 80103ca <__pow5mult+0x66>
 80103b6:	f240 2171 	movw	r1, #625	; 0x271
 80103ba:	4630      	mov	r0, r6
 80103bc:	f7ff ff12 	bl	80101e4 <__i2b>
 80103c0:	2300      	movs	r3, #0
 80103c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80103c6:	4604      	mov	r4, r0
 80103c8:	6003      	str	r3, [r0, #0]
 80103ca:	f04f 0900 	mov.w	r9, #0
 80103ce:	07eb      	lsls	r3, r5, #31
 80103d0:	d50a      	bpl.n	80103e8 <__pow5mult+0x84>
 80103d2:	4639      	mov	r1, r7
 80103d4:	4622      	mov	r2, r4
 80103d6:	4630      	mov	r0, r6
 80103d8:	f7ff ff1a 	bl	8010210 <__multiply>
 80103dc:	4639      	mov	r1, r7
 80103de:	4680      	mov	r8, r0
 80103e0:	4630      	mov	r0, r6
 80103e2:	f7ff fe47 	bl	8010074 <_Bfree>
 80103e6:	4647      	mov	r7, r8
 80103e8:	106d      	asrs	r5, r5, #1
 80103ea:	d00b      	beq.n	8010404 <__pow5mult+0xa0>
 80103ec:	6820      	ldr	r0, [r4, #0]
 80103ee:	b938      	cbnz	r0, 8010400 <__pow5mult+0x9c>
 80103f0:	4622      	mov	r2, r4
 80103f2:	4621      	mov	r1, r4
 80103f4:	4630      	mov	r0, r6
 80103f6:	f7ff ff0b 	bl	8010210 <__multiply>
 80103fa:	6020      	str	r0, [r4, #0]
 80103fc:	f8c0 9000 	str.w	r9, [r0]
 8010400:	4604      	mov	r4, r0
 8010402:	e7e4      	b.n	80103ce <__pow5mult+0x6a>
 8010404:	4638      	mov	r0, r7
 8010406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801040a:	bf00      	nop
 801040c:	08013598 	.word	0x08013598
 8010410:	080133c5 	.word	0x080133c5
 8010414:	08013448 	.word	0x08013448

08010418 <__lshift>:
 8010418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801041c:	460c      	mov	r4, r1
 801041e:	6849      	ldr	r1, [r1, #4]
 8010420:	6923      	ldr	r3, [r4, #16]
 8010422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010426:	68a3      	ldr	r3, [r4, #8]
 8010428:	4607      	mov	r7, r0
 801042a:	4691      	mov	r9, r2
 801042c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010430:	f108 0601 	add.w	r6, r8, #1
 8010434:	42b3      	cmp	r3, r6
 8010436:	db0b      	blt.n	8010450 <__lshift+0x38>
 8010438:	4638      	mov	r0, r7
 801043a:	f7ff fddb 	bl	800fff4 <_Balloc>
 801043e:	4605      	mov	r5, r0
 8010440:	b948      	cbnz	r0, 8010456 <__lshift+0x3e>
 8010442:	4602      	mov	r2, r0
 8010444:	4b2a      	ldr	r3, [pc, #168]	; (80104f0 <__lshift+0xd8>)
 8010446:	482b      	ldr	r0, [pc, #172]	; (80104f4 <__lshift+0xdc>)
 8010448:	f240 11d9 	movw	r1, #473	; 0x1d9
 801044c:	f000 fbb8 	bl	8010bc0 <__assert_func>
 8010450:	3101      	adds	r1, #1
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	e7ee      	b.n	8010434 <__lshift+0x1c>
 8010456:	2300      	movs	r3, #0
 8010458:	f100 0114 	add.w	r1, r0, #20
 801045c:	f100 0210 	add.w	r2, r0, #16
 8010460:	4618      	mov	r0, r3
 8010462:	4553      	cmp	r3, sl
 8010464:	db37      	blt.n	80104d6 <__lshift+0xbe>
 8010466:	6920      	ldr	r0, [r4, #16]
 8010468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801046c:	f104 0314 	add.w	r3, r4, #20
 8010470:	f019 091f 	ands.w	r9, r9, #31
 8010474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010478:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801047c:	d02f      	beq.n	80104de <__lshift+0xc6>
 801047e:	f1c9 0e20 	rsb	lr, r9, #32
 8010482:	468a      	mov	sl, r1
 8010484:	f04f 0c00 	mov.w	ip, #0
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	fa02 f209 	lsl.w	r2, r2, r9
 801048e:	ea42 020c 	orr.w	r2, r2, ip
 8010492:	f84a 2b04 	str.w	r2, [sl], #4
 8010496:	f853 2b04 	ldr.w	r2, [r3], #4
 801049a:	4298      	cmp	r0, r3
 801049c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80104a0:	d8f2      	bhi.n	8010488 <__lshift+0x70>
 80104a2:	1b03      	subs	r3, r0, r4
 80104a4:	3b15      	subs	r3, #21
 80104a6:	f023 0303 	bic.w	r3, r3, #3
 80104aa:	3304      	adds	r3, #4
 80104ac:	f104 0215 	add.w	r2, r4, #21
 80104b0:	4290      	cmp	r0, r2
 80104b2:	bf38      	it	cc
 80104b4:	2304      	movcc	r3, #4
 80104b6:	f841 c003 	str.w	ip, [r1, r3]
 80104ba:	f1bc 0f00 	cmp.w	ip, #0
 80104be:	d001      	beq.n	80104c4 <__lshift+0xac>
 80104c0:	f108 0602 	add.w	r6, r8, #2
 80104c4:	3e01      	subs	r6, #1
 80104c6:	4638      	mov	r0, r7
 80104c8:	612e      	str	r6, [r5, #16]
 80104ca:	4621      	mov	r1, r4
 80104cc:	f7ff fdd2 	bl	8010074 <_Bfree>
 80104d0:	4628      	mov	r0, r5
 80104d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80104da:	3301      	adds	r3, #1
 80104dc:	e7c1      	b.n	8010462 <__lshift+0x4a>
 80104de:	3904      	subs	r1, #4
 80104e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80104e8:	4298      	cmp	r0, r3
 80104ea:	d8f9      	bhi.n	80104e0 <__lshift+0xc8>
 80104ec:	e7ea      	b.n	80104c4 <__lshift+0xac>
 80104ee:	bf00      	nop
 80104f0:	08013437 	.word	0x08013437
 80104f4:	08013448 	.word	0x08013448

080104f8 <__mcmp>:
 80104f8:	b530      	push	{r4, r5, lr}
 80104fa:	6902      	ldr	r2, [r0, #16]
 80104fc:	690c      	ldr	r4, [r1, #16]
 80104fe:	1b12      	subs	r2, r2, r4
 8010500:	d10e      	bne.n	8010520 <__mcmp+0x28>
 8010502:	f100 0314 	add.w	r3, r0, #20
 8010506:	3114      	adds	r1, #20
 8010508:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801050c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010510:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010514:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010518:	42a5      	cmp	r5, r4
 801051a:	d003      	beq.n	8010524 <__mcmp+0x2c>
 801051c:	d305      	bcc.n	801052a <__mcmp+0x32>
 801051e:	2201      	movs	r2, #1
 8010520:	4610      	mov	r0, r2
 8010522:	bd30      	pop	{r4, r5, pc}
 8010524:	4283      	cmp	r3, r0
 8010526:	d3f3      	bcc.n	8010510 <__mcmp+0x18>
 8010528:	e7fa      	b.n	8010520 <__mcmp+0x28>
 801052a:	f04f 32ff 	mov.w	r2, #4294967295
 801052e:	e7f7      	b.n	8010520 <__mcmp+0x28>

08010530 <__mdiff>:
 8010530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010534:	460c      	mov	r4, r1
 8010536:	4606      	mov	r6, r0
 8010538:	4611      	mov	r1, r2
 801053a:	4620      	mov	r0, r4
 801053c:	4690      	mov	r8, r2
 801053e:	f7ff ffdb 	bl	80104f8 <__mcmp>
 8010542:	1e05      	subs	r5, r0, #0
 8010544:	d110      	bne.n	8010568 <__mdiff+0x38>
 8010546:	4629      	mov	r1, r5
 8010548:	4630      	mov	r0, r6
 801054a:	f7ff fd53 	bl	800fff4 <_Balloc>
 801054e:	b930      	cbnz	r0, 801055e <__mdiff+0x2e>
 8010550:	4b3a      	ldr	r3, [pc, #232]	; (801063c <__mdiff+0x10c>)
 8010552:	4602      	mov	r2, r0
 8010554:	f240 2132 	movw	r1, #562	; 0x232
 8010558:	4839      	ldr	r0, [pc, #228]	; (8010640 <__mdiff+0x110>)
 801055a:	f000 fb31 	bl	8010bc0 <__assert_func>
 801055e:	2301      	movs	r3, #1
 8010560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010568:	bfa4      	itt	ge
 801056a:	4643      	movge	r3, r8
 801056c:	46a0      	movge	r8, r4
 801056e:	4630      	mov	r0, r6
 8010570:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010574:	bfa6      	itte	ge
 8010576:	461c      	movge	r4, r3
 8010578:	2500      	movge	r5, #0
 801057a:	2501      	movlt	r5, #1
 801057c:	f7ff fd3a 	bl	800fff4 <_Balloc>
 8010580:	b920      	cbnz	r0, 801058c <__mdiff+0x5c>
 8010582:	4b2e      	ldr	r3, [pc, #184]	; (801063c <__mdiff+0x10c>)
 8010584:	4602      	mov	r2, r0
 8010586:	f44f 7110 	mov.w	r1, #576	; 0x240
 801058a:	e7e5      	b.n	8010558 <__mdiff+0x28>
 801058c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010590:	6926      	ldr	r6, [r4, #16]
 8010592:	60c5      	str	r5, [r0, #12]
 8010594:	f104 0914 	add.w	r9, r4, #20
 8010598:	f108 0514 	add.w	r5, r8, #20
 801059c:	f100 0e14 	add.w	lr, r0, #20
 80105a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80105a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80105a8:	f108 0210 	add.w	r2, r8, #16
 80105ac:	46f2      	mov	sl, lr
 80105ae:	2100      	movs	r1, #0
 80105b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80105b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80105b8:	fa1f f883 	uxth.w	r8, r3
 80105bc:	fa11 f18b 	uxtah	r1, r1, fp
 80105c0:	0c1b      	lsrs	r3, r3, #16
 80105c2:	eba1 0808 	sub.w	r8, r1, r8
 80105c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80105ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80105ce:	fa1f f888 	uxth.w	r8, r8
 80105d2:	1419      	asrs	r1, r3, #16
 80105d4:	454e      	cmp	r6, r9
 80105d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80105da:	f84a 3b04 	str.w	r3, [sl], #4
 80105de:	d8e7      	bhi.n	80105b0 <__mdiff+0x80>
 80105e0:	1b33      	subs	r3, r6, r4
 80105e2:	3b15      	subs	r3, #21
 80105e4:	f023 0303 	bic.w	r3, r3, #3
 80105e8:	3304      	adds	r3, #4
 80105ea:	3415      	adds	r4, #21
 80105ec:	42a6      	cmp	r6, r4
 80105ee:	bf38      	it	cc
 80105f0:	2304      	movcc	r3, #4
 80105f2:	441d      	add	r5, r3
 80105f4:	4473      	add	r3, lr
 80105f6:	469e      	mov	lr, r3
 80105f8:	462e      	mov	r6, r5
 80105fa:	4566      	cmp	r6, ip
 80105fc:	d30e      	bcc.n	801061c <__mdiff+0xec>
 80105fe:	f10c 0203 	add.w	r2, ip, #3
 8010602:	1b52      	subs	r2, r2, r5
 8010604:	f022 0203 	bic.w	r2, r2, #3
 8010608:	3d03      	subs	r5, #3
 801060a:	45ac      	cmp	ip, r5
 801060c:	bf38      	it	cc
 801060e:	2200      	movcc	r2, #0
 8010610:	441a      	add	r2, r3
 8010612:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010616:	b17b      	cbz	r3, 8010638 <__mdiff+0x108>
 8010618:	6107      	str	r7, [r0, #16]
 801061a:	e7a3      	b.n	8010564 <__mdiff+0x34>
 801061c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010620:	fa11 f288 	uxtah	r2, r1, r8
 8010624:	1414      	asrs	r4, r2, #16
 8010626:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801062a:	b292      	uxth	r2, r2
 801062c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010630:	f84e 2b04 	str.w	r2, [lr], #4
 8010634:	1421      	asrs	r1, r4, #16
 8010636:	e7e0      	b.n	80105fa <__mdiff+0xca>
 8010638:	3f01      	subs	r7, #1
 801063a:	e7ea      	b.n	8010612 <__mdiff+0xe2>
 801063c:	08013437 	.word	0x08013437
 8010640:	08013448 	.word	0x08013448

08010644 <__d2b>:
 8010644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010648:	4689      	mov	r9, r1
 801064a:	2101      	movs	r1, #1
 801064c:	ec57 6b10 	vmov	r6, r7, d0
 8010650:	4690      	mov	r8, r2
 8010652:	f7ff fccf 	bl	800fff4 <_Balloc>
 8010656:	4604      	mov	r4, r0
 8010658:	b930      	cbnz	r0, 8010668 <__d2b+0x24>
 801065a:	4602      	mov	r2, r0
 801065c:	4b25      	ldr	r3, [pc, #148]	; (80106f4 <__d2b+0xb0>)
 801065e:	4826      	ldr	r0, [pc, #152]	; (80106f8 <__d2b+0xb4>)
 8010660:	f240 310a 	movw	r1, #778	; 0x30a
 8010664:	f000 faac 	bl	8010bc0 <__assert_func>
 8010668:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801066c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010670:	bb35      	cbnz	r5, 80106c0 <__d2b+0x7c>
 8010672:	2e00      	cmp	r6, #0
 8010674:	9301      	str	r3, [sp, #4]
 8010676:	d028      	beq.n	80106ca <__d2b+0x86>
 8010678:	4668      	mov	r0, sp
 801067a:	9600      	str	r6, [sp, #0]
 801067c:	f7ff fd82 	bl	8010184 <__lo0bits>
 8010680:	9900      	ldr	r1, [sp, #0]
 8010682:	b300      	cbz	r0, 80106c6 <__d2b+0x82>
 8010684:	9a01      	ldr	r2, [sp, #4]
 8010686:	f1c0 0320 	rsb	r3, r0, #32
 801068a:	fa02 f303 	lsl.w	r3, r2, r3
 801068e:	430b      	orrs	r3, r1
 8010690:	40c2      	lsrs	r2, r0
 8010692:	6163      	str	r3, [r4, #20]
 8010694:	9201      	str	r2, [sp, #4]
 8010696:	9b01      	ldr	r3, [sp, #4]
 8010698:	61a3      	str	r3, [r4, #24]
 801069a:	2b00      	cmp	r3, #0
 801069c:	bf14      	ite	ne
 801069e:	2202      	movne	r2, #2
 80106a0:	2201      	moveq	r2, #1
 80106a2:	6122      	str	r2, [r4, #16]
 80106a4:	b1d5      	cbz	r5, 80106dc <__d2b+0x98>
 80106a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80106aa:	4405      	add	r5, r0
 80106ac:	f8c9 5000 	str.w	r5, [r9]
 80106b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80106b4:	f8c8 0000 	str.w	r0, [r8]
 80106b8:	4620      	mov	r0, r4
 80106ba:	b003      	add	sp, #12
 80106bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80106c4:	e7d5      	b.n	8010672 <__d2b+0x2e>
 80106c6:	6161      	str	r1, [r4, #20]
 80106c8:	e7e5      	b.n	8010696 <__d2b+0x52>
 80106ca:	a801      	add	r0, sp, #4
 80106cc:	f7ff fd5a 	bl	8010184 <__lo0bits>
 80106d0:	9b01      	ldr	r3, [sp, #4]
 80106d2:	6163      	str	r3, [r4, #20]
 80106d4:	2201      	movs	r2, #1
 80106d6:	6122      	str	r2, [r4, #16]
 80106d8:	3020      	adds	r0, #32
 80106da:	e7e3      	b.n	80106a4 <__d2b+0x60>
 80106dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80106e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80106e4:	f8c9 0000 	str.w	r0, [r9]
 80106e8:	6918      	ldr	r0, [r3, #16]
 80106ea:	f7ff fd2b 	bl	8010144 <__hi0bits>
 80106ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80106f2:	e7df      	b.n	80106b4 <__d2b+0x70>
 80106f4:	08013437 	.word	0x08013437
 80106f8:	08013448 	.word	0x08013448

080106fc <_calloc_r>:
 80106fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106fe:	fba1 2402 	umull	r2, r4, r1, r2
 8010702:	b94c      	cbnz	r4, 8010718 <_calloc_r+0x1c>
 8010704:	4611      	mov	r1, r2
 8010706:	9201      	str	r2, [sp, #4]
 8010708:	f000 f87a 	bl	8010800 <_malloc_r>
 801070c:	9a01      	ldr	r2, [sp, #4]
 801070e:	4605      	mov	r5, r0
 8010710:	b930      	cbnz	r0, 8010720 <_calloc_r+0x24>
 8010712:	4628      	mov	r0, r5
 8010714:	b003      	add	sp, #12
 8010716:	bd30      	pop	{r4, r5, pc}
 8010718:	220c      	movs	r2, #12
 801071a:	6002      	str	r2, [r0, #0]
 801071c:	2500      	movs	r5, #0
 801071e:	e7f8      	b.n	8010712 <_calloc_r+0x16>
 8010720:	4621      	mov	r1, r4
 8010722:	f7fe f94d 	bl	800e9c0 <memset>
 8010726:	e7f4      	b.n	8010712 <_calloc_r+0x16>

08010728 <_free_r>:
 8010728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801072a:	2900      	cmp	r1, #0
 801072c:	d044      	beq.n	80107b8 <_free_r+0x90>
 801072e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010732:	9001      	str	r0, [sp, #4]
 8010734:	2b00      	cmp	r3, #0
 8010736:	f1a1 0404 	sub.w	r4, r1, #4
 801073a:	bfb8      	it	lt
 801073c:	18e4      	addlt	r4, r4, r3
 801073e:	f000 fa9b 	bl	8010c78 <__malloc_lock>
 8010742:	4a1e      	ldr	r2, [pc, #120]	; (80107bc <_free_r+0x94>)
 8010744:	9801      	ldr	r0, [sp, #4]
 8010746:	6813      	ldr	r3, [r2, #0]
 8010748:	b933      	cbnz	r3, 8010758 <_free_r+0x30>
 801074a:	6063      	str	r3, [r4, #4]
 801074c:	6014      	str	r4, [r2, #0]
 801074e:	b003      	add	sp, #12
 8010750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010754:	f000 ba96 	b.w	8010c84 <__malloc_unlock>
 8010758:	42a3      	cmp	r3, r4
 801075a:	d908      	bls.n	801076e <_free_r+0x46>
 801075c:	6825      	ldr	r5, [r4, #0]
 801075e:	1961      	adds	r1, r4, r5
 8010760:	428b      	cmp	r3, r1
 8010762:	bf01      	itttt	eq
 8010764:	6819      	ldreq	r1, [r3, #0]
 8010766:	685b      	ldreq	r3, [r3, #4]
 8010768:	1949      	addeq	r1, r1, r5
 801076a:	6021      	streq	r1, [r4, #0]
 801076c:	e7ed      	b.n	801074a <_free_r+0x22>
 801076e:	461a      	mov	r2, r3
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	b10b      	cbz	r3, 8010778 <_free_r+0x50>
 8010774:	42a3      	cmp	r3, r4
 8010776:	d9fa      	bls.n	801076e <_free_r+0x46>
 8010778:	6811      	ldr	r1, [r2, #0]
 801077a:	1855      	adds	r5, r2, r1
 801077c:	42a5      	cmp	r5, r4
 801077e:	d10b      	bne.n	8010798 <_free_r+0x70>
 8010780:	6824      	ldr	r4, [r4, #0]
 8010782:	4421      	add	r1, r4
 8010784:	1854      	adds	r4, r2, r1
 8010786:	42a3      	cmp	r3, r4
 8010788:	6011      	str	r1, [r2, #0]
 801078a:	d1e0      	bne.n	801074e <_free_r+0x26>
 801078c:	681c      	ldr	r4, [r3, #0]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	6053      	str	r3, [r2, #4]
 8010792:	4421      	add	r1, r4
 8010794:	6011      	str	r1, [r2, #0]
 8010796:	e7da      	b.n	801074e <_free_r+0x26>
 8010798:	d902      	bls.n	80107a0 <_free_r+0x78>
 801079a:	230c      	movs	r3, #12
 801079c:	6003      	str	r3, [r0, #0]
 801079e:	e7d6      	b.n	801074e <_free_r+0x26>
 80107a0:	6825      	ldr	r5, [r4, #0]
 80107a2:	1961      	adds	r1, r4, r5
 80107a4:	428b      	cmp	r3, r1
 80107a6:	bf04      	itt	eq
 80107a8:	6819      	ldreq	r1, [r3, #0]
 80107aa:	685b      	ldreq	r3, [r3, #4]
 80107ac:	6063      	str	r3, [r4, #4]
 80107ae:	bf04      	itt	eq
 80107b0:	1949      	addeq	r1, r1, r5
 80107b2:	6021      	streq	r1, [r4, #0]
 80107b4:	6054      	str	r4, [r2, #4]
 80107b6:	e7ca      	b.n	801074e <_free_r+0x26>
 80107b8:	b003      	add	sp, #12
 80107ba:	bd30      	pop	{r4, r5, pc}
 80107bc:	20006b74 	.word	0x20006b74

080107c0 <sbrk_aligned>:
 80107c0:	b570      	push	{r4, r5, r6, lr}
 80107c2:	4e0e      	ldr	r6, [pc, #56]	; (80107fc <sbrk_aligned+0x3c>)
 80107c4:	460c      	mov	r4, r1
 80107c6:	6831      	ldr	r1, [r6, #0]
 80107c8:	4605      	mov	r5, r0
 80107ca:	b911      	cbnz	r1, 80107d2 <sbrk_aligned+0x12>
 80107cc:	f000 f9e8 	bl	8010ba0 <_sbrk_r>
 80107d0:	6030      	str	r0, [r6, #0]
 80107d2:	4621      	mov	r1, r4
 80107d4:	4628      	mov	r0, r5
 80107d6:	f000 f9e3 	bl	8010ba0 <_sbrk_r>
 80107da:	1c43      	adds	r3, r0, #1
 80107dc:	d00a      	beq.n	80107f4 <sbrk_aligned+0x34>
 80107de:	1cc4      	adds	r4, r0, #3
 80107e0:	f024 0403 	bic.w	r4, r4, #3
 80107e4:	42a0      	cmp	r0, r4
 80107e6:	d007      	beq.n	80107f8 <sbrk_aligned+0x38>
 80107e8:	1a21      	subs	r1, r4, r0
 80107ea:	4628      	mov	r0, r5
 80107ec:	f000 f9d8 	bl	8010ba0 <_sbrk_r>
 80107f0:	3001      	adds	r0, #1
 80107f2:	d101      	bne.n	80107f8 <sbrk_aligned+0x38>
 80107f4:	f04f 34ff 	mov.w	r4, #4294967295
 80107f8:	4620      	mov	r0, r4
 80107fa:	bd70      	pop	{r4, r5, r6, pc}
 80107fc:	20006b78 	.word	0x20006b78

08010800 <_malloc_r>:
 8010800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010804:	1ccd      	adds	r5, r1, #3
 8010806:	f025 0503 	bic.w	r5, r5, #3
 801080a:	3508      	adds	r5, #8
 801080c:	2d0c      	cmp	r5, #12
 801080e:	bf38      	it	cc
 8010810:	250c      	movcc	r5, #12
 8010812:	2d00      	cmp	r5, #0
 8010814:	4607      	mov	r7, r0
 8010816:	db01      	blt.n	801081c <_malloc_r+0x1c>
 8010818:	42a9      	cmp	r1, r5
 801081a:	d905      	bls.n	8010828 <_malloc_r+0x28>
 801081c:	230c      	movs	r3, #12
 801081e:	603b      	str	r3, [r7, #0]
 8010820:	2600      	movs	r6, #0
 8010822:	4630      	mov	r0, r6
 8010824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010828:	4e2e      	ldr	r6, [pc, #184]	; (80108e4 <_malloc_r+0xe4>)
 801082a:	f000 fa25 	bl	8010c78 <__malloc_lock>
 801082e:	6833      	ldr	r3, [r6, #0]
 8010830:	461c      	mov	r4, r3
 8010832:	bb34      	cbnz	r4, 8010882 <_malloc_r+0x82>
 8010834:	4629      	mov	r1, r5
 8010836:	4638      	mov	r0, r7
 8010838:	f7ff ffc2 	bl	80107c0 <sbrk_aligned>
 801083c:	1c43      	adds	r3, r0, #1
 801083e:	4604      	mov	r4, r0
 8010840:	d14d      	bne.n	80108de <_malloc_r+0xde>
 8010842:	6834      	ldr	r4, [r6, #0]
 8010844:	4626      	mov	r6, r4
 8010846:	2e00      	cmp	r6, #0
 8010848:	d140      	bne.n	80108cc <_malloc_r+0xcc>
 801084a:	6823      	ldr	r3, [r4, #0]
 801084c:	4631      	mov	r1, r6
 801084e:	4638      	mov	r0, r7
 8010850:	eb04 0803 	add.w	r8, r4, r3
 8010854:	f000 f9a4 	bl	8010ba0 <_sbrk_r>
 8010858:	4580      	cmp	r8, r0
 801085a:	d13a      	bne.n	80108d2 <_malloc_r+0xd2>
 801085c:	6821      	ldr	r1, [r4, #0]
 801085e:	3503      	adds	r5, #3
 8010860:	1a6d      	subs	r5, r5, r1
 8010862:	f025 0503 	bic.w	r5, r5, #3
 8010866:	3508      	adds	r5, #8
 8010868:	2d0c      	cmp	r5, #12
 801086a:	bf38      	it	cc
 801086c:	250c      	movcc	r5, #12
 801086e:	4629      	mov	r1, r5
 8010870:	4638      	mov	r0, r7
 8010872:	f7ff ffa5 	bl	80107c0 <sbrk_aligned>
 8010876:	3001      	adds	r0, #1
 8010878:	d02b      	beq.n	80108d2 <_malloc_r+0xd2>
 801087a:	6823      	ldr	r3, [r4, #0]
 801087c:	442b      	add	r3, r5
 801087e:	6023      	str	r3, [r4, #0]
 8010880:	e00e      	b.n	80108a0 <_malloc_r+0xa0>
 8010882:	6822      	ldr	r2, [r4, #0]
 8010884:	1b52      	subs	r2, r2, r5
 8010886:	d41e      	bmi.n	80108c6 <_malloc_r+0xc6>
 8010888:	2a0b      	cmp	r2, #11
 801088a:	d916      	bls.n	80108ba <_malloc_r+0xba>
 801088c:	1961      	adds	r1, r4, r5
 801088e:	42a3      	cmp	r3, r4
 8010890:	6025      	str	r5, [r4, #0]
 8010892:	bf18      	it	ne
 8010894:	6059      	strne	r1, [r3, #4]
 8010896:	6863      	ldr	r3, [r4, #4]
 8010898:	bf08      	it	eq
 801089a:	6031      	streq	r1, [r6, #0]
 801089c:	5162      	str	r2, [r4, r5]
 801089e:	604b      	str	r3, [r1, #4]
 80108a0:	4638      	mov	r0, r7
 80108a2:	f104 060b 	add.w	r6, r4, #11
 80108a6:	f000 f9ed 	bl	8010c84 <__malloc_unlock>
 80108aa:	f026 0607 	bic.w	r6, r6, #7
 80108ae:	1d23      	adds	r3, r4, #4
 80108b0:	1af2      	subs	r2, r6, r3
 80108b2:	d0b6      	beq.n	8010822 <_malloc_r+0x22>
 80108b4:	1b9b      	subs	r3, r3, r6
 80108b6:	50a3      	str	r3, [r4, r2]
 80108b8:	e7b3      	b.n	8010822 <_malloc_r+0x22>
 80108ba:	6862      	ldr	r2, [r4, #4]
 80108bc:	42a3      	cmp	r3, r4
 80108be:	bf0c      	ite	eq
 80108c0:	6032      	streq	r2, [r6, #0]
 80108c2:	605a      	strne	r2, [r3, #4]
 80108c4:	e7ec      	b.n	80108a0 <_malloc_r+0xa0>
 80108c6:	4623      	mov	r3, r4
 80108c8:	6864      	ldr	r4, [r4, #4]
 80108ca:	e7b2      	b.n	8010832 <_malloc_r+0x32>
 80108cc:	4634      	mov	r4, r6
 80108ce:	6876      	ldr	r6, [r6, #4]
 80108d0:	e7b9      	b.n	8010846 <_malloc_r+0x46>
 80108d2:	230c      	movs	r3, #12
 80108d4:	603b      	str	r3, [r7, #0]
 80108d6:	4638      	mov	r0, r7
 80108d8:	f000 f9d4 	bl	8010c84 <__malloc_unlock>
 80108dc:	e7a1      	b.n	8010822 <_malloc_r+0x22>
 80108de:	6025      	str	r5, [r4, #0]
 80108e0:	e7de      	b.n	80108a0 <_malloc_r+0xa0>
 80108e2:	bf00      	nop
 80108e4:	20006b74 	.word	0x20006b74

080108e8 <__ssputs_r>:
 80108e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108ec:	688e      	ldr	r6, [r1, #8]
 80108ee:	429e      	cmp	r6, r3
 80108f0:	4682      	mov	sl, r0
 80108f2:	460c      	mov	r4, r1
 80108f4:	4690      	mov	r8, r2
 80108f6:	461f      	mov	r7, r3
 80108f8:	d838      	bhi.n	801096c <__ssputs_r+0x84>
 80108fa:	898a      	ldrh	r2, [r1, #12]
 80108fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010900:	d032      	beq.n	8010968 <__ssputs_r+0x80>
 8010902:	6825      	ldr	r5, [r4, #0]
 8010904:	6909      	ldr	r1, [r1, #16]
 8010906:	eba5 0901 	sub.w	r9, r5, r1
 801090a:	6965      	ldr	r5, [r4, #20]
 801090c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010914:	3301      	adds	r3, #1
 8010916:	444b      	add	r3, r9
 8010918:	106d      	asrs	r5, r5, #1
 801091a:	429d      	cmp	r5, r3
 801091c:	bf38      	it	cc
 801091e:	461d      	movcc	r5, r3
 8010920:	0553      	lsls	r3, r2, #21
 8010922:	d531      	bpl.n	8010988 <__ssputs_r+0xa0>
 8010924:	4629      	mov	r1, r5
 8010926:	f7ff ff6b 	bl	8010800 <_malloc_r>
 801092a:	4606      	mov	r6, r0
 801092c:	b950      	cbnz	r0, 8010944 <__ssputs_r+0x5c>
 801092e:	230c      	movs	r3, #12
 8010930:	f8ca 3000 	str.w	r3, [sl]
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801093a:	81a3      	strh	r3, [r4, #12]
 801093c:	f04f 30ff 	mov.w	r0, #4294967295
 8010940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010944:	6921      	ldr	r1, [r4, #16]
 8010946:	464a      	mov	r2, r9
 8010948:	f7fe f82c 	bl	800e9a4 <memcpy>
 801094c:	89a3      	ldrh	r3, [r4, #12]
 801094e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010956:	81a3      	strh	r3, [r4, #12]
 8010958:	6126      	str	r6, [r4, #16]
 801095a:	6165      	str	r5, [r4, #20]
 801095c:	444e      	add	r6, r9
 801095e:	eba5 0509 	sub.w	r5, r5, r9
 8010962:	6026      	str	r6, [r4, #0]
 8010964:	60a5      	str	r5, [r4, #8]
 8010966:	463e      	mov	r6, r7
 8010968:	42be      	cmp	r6, r7
 801096a:	d900      	bls.n	801096e <__ssputs_r+0x86>
 801096c:	463e      	mov	r6, r7
 801096e:	6820      	ldr	r0, [r4, #0]
 8010970:	4632      	mov	r2, r6
 8010972:	4641      	mov	r1, r8
 8010974:	f000 f966 	bl	8010c44 <memmove>
 8010978:	68a3      	ldr	r3, [r4, #8]
 801097a:	1b9b      	subs	r3, r3, r6
 801097c:	60a3      	str	r3, [r4, #8]
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	4433      	add	r3, r6
 8010982:	6023      	str	r3, [r4, #0]
 8010984:	2000      	movs	r0, #0
 8010986:	e7db      	b.n	8010940 <__ssputs_r+0x58>
 8010988:	462a      	mov	r2, r5
 801098a:	f000 f981 	bl	8010c90 <_realloc_r>
 801098e:	4606      	mov	r6, r0
 8010990:	2800      	cmp	r0, #0
 8010992:	d1e1      	bne.n	8010958 <__ssputs_r+0x70>
 8010994:	6921      	ldr	r1, [r4, #16]
 8010996:	4650      	mov	r0, sl
 8010998:	f7ff fec6 	bl	8010728 <_free_r>
 801099c:	e7c7      	b.n	801092e <__ssputs_r+0x46>
	...

080109a0 <_svfiprintf_r>:
 80109a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a4:	4698      	mov	r8, r3
 80109a6:	898b      	ldrh	r3, [r1, #12]
 80109a8:	061b      	lsls	r3, r3, #24
 80109aa:	b09d      	sub	sp, #116	; 0x74
 80109ac:	4607      	mov	r7, r0
 80109ae:	460d      	mov	r5, r1
 80109b0:	4614      	mov	r4, r2
 80109b2:	d50e      	bpl.n	80109d2 <_svfiprintf_r+0x32>
 80109b4:	690b      	ldr	r3, [r1, #16]
 80109b6:	b963      	cbnz	r3, 80109d2 <_svfiprintf_r+0x32>
 80109b8:	2140      	movs	r1, #64	; 0x40
 80109ba:	f7ff ff21 	bl	8010800 <_malloc_r>
 80109be:	6028      	str	r0, [r5, #0]
 80109c0:	6128      	str	r0, [r5, #16]
 80109c2:	b920      	cbnz	r0, 80109ce <_svfiprintf_r+0x2e>
 80109c4:	230c      	movs	r3, #12
 80109c6:	603b      	str	r3, [r7, #0]
 80109c8:	f04f 30ff 	mov.w	r0, #4294967295
 80109cc:	e0d1      	b.n	8010b72 <_svfiprintf_r+0x1d2>
 80109ce:	2340      	movs	r3, #64	; 0x40
 80109d0:	616b      	str	r3, [r5, #20]
 80109d2:	2300      	movs	r3, #0
 80109d4:	9309      	str	r3, [sp, #36]	; 0x24
 80109d6:	2320      	movs	r3, #32
 80109d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80109e0:	2330      	movs	r3, #48	; 0x30
 80109e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010b8c <_svfiprintf_r+0x1ec>
 80109e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109ea:	f04f 0901 	mov.w	r9, #1
 80109ee:	4623      	mov	r3, r4
 80109f0:	469a      	mov	sl, r3
 80109f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109f6:	b10a      	cbz	r2, 80109fc <_svfiprintf_r+0x5c>
 80109f8:	2a25      	cmp	r2, #37	; 0x25
 80109fa:	d1f9      	bne.n	80109f0 <_svfiprintf_r+0x50>
 80109fc:	ebba 0b04 	subs.w	fp, sl, r4
 8010a00:	d00b      	beq.n	8010a1a <_svfiprintf_r+0x7a>
 8010a02:	465b      	mov	r3, fp
 8010a04:	4622      	mov	r2, r4
 8010a06:	4629      	mov	r1, r5
 8010a08:	4638      	mov	r0, r7
 8010a0a:	f7ff ff6d 	bl	80108e8 <__ssputs_r>
 8010a0e:	3001      	adds	r0, #1
 8010a10:	f000 80aa 	beq.w	8010b68 <_svfiprintf_r+0x1c8>
 8010a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a16:	445a      	add	r2, fp
 8010a18:	9209      	str	r2, [sp, #36]	; 0x24
 8010a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	f000 80a2 	beq.w	8010b68 <_svfiprintf_r+0x1c8>
 8010a24:	2300      	movs	r3, #0
 8010a26:	f04f 32ff 	mov.w	r2, #4294967295
 8010a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a2e:	f10a 0a01 	add.w	sl, sl, #1
 8010a32:	9304      	str	r3, [sp, #16]
 8010a34:	9307      	str	r3, [sp, #28]
 8010a36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a3a:	931a      	str	r3, [sp, #104]	; 0x68
 8010a3c:	4654      	mov	r4, sl
 8010a3e:	2205      	movs	r2, #5
 8010a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a44:	4851      	ldr	r0, [pc, #324]	; (8010b8c <_svfiprintf_r+0x1ec>)
 8010a46:	f7ef fbdb 	bl	8000200 <memchr>
 8010a4a:	9a04      	ldr	r2, [sp, #16]
 8010a4c:	b9d8      	cbnz	r0, 8010a86 <_svfiprintf_r+0xe6>
 8010a4e:	06d0      	lsls	r0, r2, #27
 8010a50:	bf44      	itt	mi
 8010a52:	2320      	movmi	r3, #32
 8010a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a58:	0711      	lsls	r1, r2, #28
 8010a5a:	bf44      	itt	mi
 8010a5c:	232b      	movmi	r3, #43	; 0x2b
 8010a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a62:	f89a 3000 	ldrb.w	r3, [sl]
 8010a66:	2b2a      	cmp	r3, #42	; 0x2a
 8010a68:	d015      	beq.n	8010a96 <_svfiprintf_r+0xf6>
 8010a6a:	9a07      	ldr	r2, [sp, #28]
 8010a6c:	4654      	mov	r4, sl
 8010a6e:	2000      	movs	r0, #0
 8010a70:	f04f 0c0a 	mov.w	ip, #10
 8010a74:	4621      	mov	r1, r4
 8010a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a7a:	3b30      	subs	r3, #48	; 0x30
 8010a7c:	2b09      	cmp	r3, #9
 8010a7e:	d94e      	bls.n	8010b1e <_svfiprintf_r+0x17e>
 8010a80:	b1b0      	cbz	r0, 8010ab0 <_svfiprintf_r+0x110>
 8010a82:	9207      	str	r2, [sp, #28]
 8010a84:	e014      	b.n	8010ab0 <_svfiprintf_r+0x110>
 8010a86:	eba0 0308 	sub.w	r3, r0, r8
 8010a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	9304      	str	r3, [sp, #16]
 8010a92:	46a2      	mov	sl, r4
 8010a94:	e7d2      	b.n	8010a3c <_svfiprintf_r+0x9c>
 8010a96:	9b03      	ldr	r3, [sp, #12]
 8010a98:	1d19      	adds	r1, r3, #4
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	9103      	str	r1, [sp, #12]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	bfbb      	ittet	lt
 8010aa2:	425b      	neglt	r3, r3
 8010aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8010aa8:	9307      	strge	r3, [sp, #28]
 8010aaa:	9307      	strlt	r3, [sp, #28]
 8010aac:	bfb8      	it	lt
 8010aae:	9204      	strlt	r2, [sp, #16]
 8010ab0:	7823      	ldrb	r3, [r4, #0]
 8010ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8010ab4:	d10c      	bne.n	8010ad0 <_svfiprintf_r+0x130>
 8010ab6:	7863      	ldrb	r3, [r4, #1]
 8010ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8010aba:	d135      	bne.n	8010b28 <_svfiprintf_r+0x188>
 8010abc:	9b03      	ldr	r3, [sp, #12]
 8010abe:	1d1a      	adds	r2, r3, #4
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	9203      	str	r2, [sp, #12]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	bfb8      	it	lt
 8010ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8010acc:	3402      	adds	r4, #2
 8010ace:	9305      	str	r3, [sp, #20]
 8010ad0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010b9c <_svfiprintf_r+0x1fc>
 8010ad4:	7821      	ldrb	r1, [r4, #0]
 8010ad6:	2203      	movs	r2, #3
 8010ad8:	4650      	mov	r0, sl
 8010ada:	f7ef fb91 	bl	8000200 <memchr>
 8010ade:	b140      	cbz	r0, 8010af2 <_svfiprintf_r+0x152>
 8010ae0:	2340      	movs	r3, #64	; 0x40
 8010ae2:	eba0 000a 	sub.w	r0, r0, sl
 8010ae6:	fa03 f000 	lsl.w	r0, r3, r0
 8010aea:	9b04      	ldr	r3, [sp, #16]
 8010aec:	4303      	orrs	r3, r0
 8010aee:	3401      	adds	r4, #1
 8010af0:	9304      	str	r3, [sp, #16]
 8010af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010af6:	4826      	ldr	r0, [pc, #152]	; (8010b90 <_svfiprintf_r+0x1f0>)
 8010af8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010afc:	2206      	movs	r2, #6
 8010afe:	f7ef fb7f 	bl	8000200 <memchr>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d038      	beq.n	8010b78 <_svfiprintf_r+0x1d8>
 8010b06:	4b23      	ldr	r3, [pc, #140]	; (8010b94 <_svfiprintf_r+0x1f4>)
 8010b08:	bb1b      	cbnz	r3, 8010b52 <_svfiprintf_r+0x1b2>
 8010b0a:	9b03      	ldr	r3, [sp, #12]
 8010b0c:	3307      	adds	r3, #7
 8010b0e:	f023 0307 	bic.w	r3, r3, #7
 8010b12:	3308      	adds	r3, #8
 8010b14:	9303      	str	r3, [sp, #12]
 8010b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b18:	4433      	add	r3, r6
 8010b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010b1c:	e767      	b.n	80109ee <_svfiprintf_r+0x4e>
 8010b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b22:	460c      	mov	r4, r1
 8010b24:	2001      	movs	r0, #1
 8010b26:	e7a5      	b.n	8010a74 <_svfiprintf_r+0xd4>
 8010b28:	2300      	movs	r3, #0
 8010b2a:	3401      	adds	r4, #1
 8010b2c:	9305      	str	r3, [sp, #20]
 8010b2e:	4619      	mov	r1, r3
 8010b30:	f04f 0c0a 	mov.w	ip, #10
 8010b34:	4620      	mov	r0, r4
 8010b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b3a:	3a30      	subs	r2, #48	; 0x30
 8010b3c:	2a09      	cmp	r2, #9
 8010b3e:	d903      	bls.n	8010b48 <_svfiprintf_r+0x1a8>
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d0c5      	beq.n	8010ad0 <_svfiprintf_r+0x130>
 8010b44:	9105      	str	r1, [sp, #20]
 8010b46:	e7c3      	b.n	8010ad0 <_svfiprintf_r+0x130>
 8010b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e7f0      	b.n	8010b34 <_svfiprintf_r+0x194>
 8010b52:	ab03      	add	r3, sp, #12
 8010b54:	9300      	str	r3, [sp, #0]
 8010b56:	462a      	mov	r2, r5
 8010b58:	4b0f      	ldr	r3, [pc, #60]	; (8010b98 <_svfiprintf_r+0x1f8>)
 8010b5a:	a904      	add	r1, sp, #16
 8010b5c:	4638      	mov	r0, r7
 8010b5e:	f7fd ffd7 	bl	800eb10 <_printf_float>
 8010b62:	1c42      	adds	r2, r0, #1
 8010b64:	4606      	mov	r6, r0
 8010b66:	d1d6      	bne.n	8010b16 <_svfiprintf_r+0x176>
 8010b68:	89ab      	ldrh	r3, [r5, #12]
 8010b6a:	065b      	lsls	r3, r3, #25
 8010b6c:	f53f af2c 	bmi.w	80109c8 <_svfiprintf_r+0x28>
 8010b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b72:	b01d      	add	sp, #116	; 0x74
 8010b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b78:	ab03      	add	r3, sp, #12
 8010b7a:	9300      	str	r3, [sp, #0]
 8010b7c:	462a      	mov	r2, r5
 8010b7e:	4b06      	ldr	r3, [pc, #24]	; (8010b98 <_svfiprintf_r+0x1f8>)
 8010b80:	a904      	add	r1, sp, #16
 8010b82:	4638      	mov	r0, r7
 8010b84:	f7fe fa68 	bl	800f058 <_printf_i>
 8010b88:	e7eb      	b.n	8010b62 <_svfiprintf_r+0x1c2>
 8010b8a:	bf00      	nop
 8010b8c:	080135a4 	.word	0x080135a4
 8010b90:	080135ae 	.word	0x080135ae
 8010b94:	0800eb11 	.word	0x0800eb11
 8010b98:	080108e9 	.word	0x080108e9
 8010b9c:	080135aa 	.word	0x080135aa

08010ba0 <_sbrk_r>:
 8010ba0:	b538      	push	{r3, r4, r5, lr}
 8010ba2:	4d06      	ldr	r5, [pc, #24]	; (8010bbc <_sbrk_r+0x1c>)
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	4604      	mov	r4, r0
 8010ba8:	4608      	mov	r0, r1
 8010baa:	602b      	str	r3, [r5, #0]
 8010bac:	f7f0 fd10 	bl	80015d0 <_sbrk>
 8010bb0:	1c43      	adds	r3, r0, #1
 8010bb2:	d102      	bne.n	8010bba <_sbrk_r+0x1a>
 8010bb4:	682b      	ldr	r3, [r5, #0]
 8010bb6:	b103      	cbz	r3, 8010bba <_sbrk_r+0x1a>
 8010bb8:	6023      	str	r3, [r4, #0]
 8010bba:	bd38      	pop	{r3, r4, r5, pc}
 8010bbc:	20006b7c 	.word	0x20006b7c

08010bc0 <__assert_func>:
 8010bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010bc2:	4614      	mov	r4, r2
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	4b09      	ldr	r3, [pc, #36]	; (8010bec <__assert_func+0x2c>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4605      	mov	r5, r0
 8010bcc:	68d8      	ldr	r0, [r3, #12]
 8010bce:	b14c      	cbz	r4, 8010be4 <__assert_func+0x24>
 8010bd0:	4b07      	ldr	r3, [pc, #28]	; (8010bf0 <__assert_func+0x30>)
 8010bd2:	9100      	str	r1, [sp, #0]
 8010bd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010bd8:	4906      	ldr	r1, [pc, #24]	; (8010bf4 <__assert_func+0x34>)
 8010bda:	462b      	mov	r3, r5
 8010bdc:	f000 f80e 	bl	8010bfc <fiprintf>
 8010be0:	f000 faac 	bl	801113c <abort>
 8010be4:	4b04      	ldr	r3, [pc, #16]	; (8010bf8 <__assert_func+0x38>)
 8010be6:	461c      	mov	r4, r3
 8010be8:	e7f3      	b.n	8010bd2 <__assert_func+0x12>
 8010bea:	bf00      	nop
 8010bec:	2000017c 	.word	0x2000017c
 8010bf0:	080135b5 	.word	0x080135b5
 8010bf4:	080135c2 	.word	0x080135c2
 8010bf8:	080135f0 	.word	0x080135f0

08010bfc <fiprintf>:
 8010bfc:	b40e      	push	{r1, r2, r3}
 8010bfe:	b503      	push	{r0, r1, lr}
 8010c00:	4601      	mov	r1, r0
 8010c02:	ab03      	add	r3, sp, #12
 8010c04:	4805      	ldr	r0, [pc, #20]	; (8010c1c <fiprintf+0x20>)
 8010c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c0a:	6800      	ldr	r0, [r0, #0]
 8010c0c:	9301      	str	r3, [sp, #4]
 8010c0e:	f000 f897 	bl	8010d40 <_vfiprintf_r>
 8010c12:	b002      	add	sp, #8
 8010c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c18:	b003      	add	sp, #12
 8010c1a:	4770      	bx	lr
 8010c1c:	2000017c 	.word	0x2000017c

08010c20 <__ascii_mbtowc>:
 8010c20:	b082      	sub	sp, #8
 8010c22:	b901      	cbnz	r1, 8010c26 <__ascii_mbtowc+0x6>
 8010c24:	a901      	add	r1, sp, #4
 8010c26:	b142      	cbz	r2, 8010c3a <__ascii_mbtowc+0x1a>
 8010c28:	b14b      	cbz	r3, 8010c3e <__ascii_mbtowc+0x1e>
 8010c2a:	7813      	ldrb	r3, [r2, #0]
 8010c2c:	600b      	str	r3, [r1, #0]
 8010c2e:	7812      	ldrb	r2, [r2, #0]
 8010c30:	1e10      	subs	r0, r2, #0
 8010c32:	bf18      	it	ne
 8010c34:	2001      	movne	r0, #1
 8010c36:	b002      	add	sp, #8
 8010c38:	4770      	bx	lr
 8010c3a:	4610      	mov	r0, r2
 8010c3c:	e7fb      	b.n	8010c36 <__ascii_mbtowc+0x16>
 8010c3e:	f06f 0001 	mvn.w	r0, #1
 8010c42:	e7f8      	b.n	8010c36 <__ascii_mbtowc+0x16>

08010c44 <memmove>:
 8010c44:	4288      	cmp	r0, r1
 8010c46:	b510      	push	{r4, lr}
 8010c48:	eb01 0402 	add.w	r4, r1, r2
 8010c4c:	d902      	bls.n	8010c54 <memmove+0x10>
 8010c4e:	4284      	cmp	r4, r0
 8010c50:	4623      	mov	r3, r4
 8010c52:	d807      	bhi.n	8010c64 <memmove+0x20>
 8010c54:	1e43      	subs	r3, r0, #1
 8010c56:	42a1      	cmp	r1, r4
 8010c58:	d008      	beq.n	8010c6c <memmove+0x28>
 8010c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c62:	e7f8      	b.n	8010c56 <memmove+0x12>
 8010c64:	4402      	add	r2, r0
 8010c66:	4601      	mov	r1, r0
 8010c68:	428a      	cmp	r2, r1
 8010c6a:	d100      	bne.n	8010c6e <memmove+0x2a>
 8010c6c:	bd10      	pop	{r4, pc}
 8010c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c76:	e7f7      	b.n	8010c68 <memmove+0x24>

08010c78 <__malloc_lock>:
 8010c78:	4801      	ldr	r0, [pc, #4]	; (8010c80 <__malloc_lock+0x8>)
 8010c7a:	f000 bc1f 	b.w	80114bc <__retarget_lock_acquire_recursive>
 8010c7e:	bf00      	nop
 8010c80:	20006b80 	.word	0x20006b80

08010c84 <__malloc_unlock>:
 8010c84:	4801      	ldr	r0, [pc, #4]	; (8010c8c <__malloc_unlock+0x8>)
 8010c86:	f000 bc1a 	b.w	80114be <__retarget_lock_release_recursive>
 8010c8a:	bf00      	nop
 8010c8c:	20006b80 	.word	0x20006b80

08010c90 <_realloc_r>:
 8010c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c94:	4680      	mov	r8, r0
 8010c96:	4614      	mov	r4, r2
 8010c98:	460e      	mov	r6, r1
 8010c9a:	b921      	cbnz	r1, 8010ca6 <_realloc_r+0x16>
 8010c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca0:	4611      	mov	r1, r2
 8010ca2:	f7ff bdad 	b.w	8010800 <_malloc_r>
 8010ca6:	b92a      	cbnz	r2, 8010cb4 <_realloc_r+0x24>
 8010ca8:	f7ff fd3e 	bl	8010728 <_free_r>
 8010cac:	4625      	mov	r5, r4
 8010cae:	4628      	mov	r0, r5
 8010cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb4:	f000 fc6a 	bl	801158c <_malloc_usable_size_r>
 8010cb8:	4284      	cmp	r4, r0
 8010cba:	4607      	mov	r7, r0
 8010cbc:	d802      	bhi.n	8010cc4 <_realloc_r+0x34>
 8010cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010cc2:	d812      	bhi.n	8010cea <_realloc_r+0x5a>
 8010cc4:	4621      	mov	r1, r4
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	f7ff fd9a 	bl	8010800 <_malloc_r>
 8010ccc:	4605      	mov	r5, r0
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	d0ed      	beq.n	8010cae <_realloc_r+0x1e>
 8010cd2:	42bc      	cmp	r4, r7
 8010cd4:	4622      	mov	r2, r4
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	bf28      	it	cs
 8010cda:	463a      	movcs	r2, r7
 8010cdc:	f7fd fe62 	bl	800e9a4 <memcpy>
 8010ce0:	4631      	mov	r1, r6
 8010ce2:	4640      	mov	r0, r8
 8010ce4:	f7ff fd20 	bl	8010728 <_free_r>
 8010ce8:	e7e1      	b.n	8010cae <_realloc_r+0x1e>
 8010cea:	4635      	mov	r5, r6
 8010cec:	e7df      	b.n	8010cae <_realloc_r+0x1e>

08010cee <__sfputc_r>:
 8010cee:	6893      	ldr	r3, [r2, #8]
 8010cf0:	3b01      	subs	r3, #1
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	b410      	push	{r4}
 8010cf6:	6093      	str	r3, [r2, #8]
 8010cf8:	da08      	bge.n	8010d0c <__sfputc_r+0x1e>
 8010cfa:	6994      	ldr	r4, [r2, #24]
 8010cfc:	42a3      	cmp	r3, r4
 8010cfe:	db01      	blt.n	8010d04 <__sfputc_r+0x16>
 8010d00:	290a      	cmp	r1, #10
 8010d02:	d103      	bne.n	8010d0c <__sfputc_r+0x1e>
 8010d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d08:	f000 b94a 	b.w	8010fa0 <__swbuf_r>
 8010d0c:	6813      	ldr	r3, [r2, #0]
 8010d0e:	1c58      	adds	r0, r3, #1
 8010d10:	6010      	str	r0, [r2, #0]
 8010d12:	7019      	strb	r1, [r3, #0]
 8010d14:	4608      	mov	r0, r1
 8010d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <__sfputs_r>:
 8010d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d1e:	4606      	mov	r6, r0
 8010d20:	460f      	mov	r7, r1
 8010d22:	4614      	mov	r4, r2
 8010d24:	18d5      	adds	r5, r2, r3
 8010d26:	42ac      	cmp	r4, r5
 8010d28:	d101      	bne.n	8010d2e <__sfputs_r+0x12>
 8010d2a:	2000      	movs	r0, #0
 8010d2c:	e007      	b.n	8010d3e <__sfputs_r+0x22>
 8010d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d32:	463a      	mov	r2, r7
 8010d34:	4630      	mov	r0, r6
 8010d36:	f7ff ffda 	bl	8010cee <__sfputc_r>
 8010d3a:	1c43      	adds	r3, r0, #1
 8010d3c:	d1f3      	bne.n	8010d26 <__sfputs_r+0xa>
 8010d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010d40 <_vfiprintf_r>:
 8010d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d44:	460d      	mov	r5, r1
 8010d46:	b09d      	sub	sp, #116	; 0x74
 8010d48:	4614      	mov	r4, r2
 8010d4a:	4698      	mov	r8, r3
 8010d4c:	4606      	mov	r6, r0
 8010d4e:	b118      	cbz	r0, 8010d58 <_vfiprintf_r+0x18>
 8010d50:	6983      	ldr	r3, [r0, #24]
 8010d52:	b90b      	cbnz	r3, 8010d58 <_vfiprintf_r+0x18>
 8010d54:	f000 fb14 	bl	8011380 <__sinit>
 8010d58:	4b89      	ldr	r3, [pc, #548]	; (8010f80 <_vfiprintf_r+0x240>)
 8010d5a:	429d      	cmp	r5, r3
 8010d5c:	d11b      	bne.n	8010d96 <_vfiprintf_r+0x56>
 8010d5e:	6875      	ldr	r5, [r6, #4]
 8010d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d62:	07d9      	lsls	r1, r3, #31
 8010d64:	d405      	bmi.n	8010d72 <_vfiprintf_r+0x32>
 8010d66:	89ab      	ldrh	r3, [r5, #12]
 8010d68:	059a      	lsls	r2, r3, #22
 8010d6a:	d402      	bmi.n	8010d72 <_vfiprintf_r+0x32>
 8010d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d6e:	f000 fba5 	bl	80114bc <__retarget_lock_acquire_recursive>
 8010d72:	89ab      	ldrh	r3, [r5, #12]
 8010d74:	071b      	lsls	r3, r3, #28
 8010d76:	d501      	bpl.n	8010d7c <_vfiprintf_r+0x3c>
 8010d78:	692b      	ldr	r3, [r5, #16]
 8010d7a:	b9eb      	cbnz	r3, 8010db8 <_vfiprintf_r+0x78>
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	4630      	mov	r0, r6
 8010d80:	f000 f96e 	bl	8011060 <__swsetup_r>
 8010d84:	b1c0      	cbz	r0, 8010db8 <_vfiprintf_r+0x78>
 8010d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d88:	07dc      	lsls	r4, r3, #31
 8010d8a:	d50e      	bpl.n	8010daa <_vfiprintf_r+0x6a>
 8010d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d90:	b01d      	add	sp, #116	; 0x74
 8010d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d96:	4b7b      	ldr	r3, [pc, #492]	; (8010f84 <_vfiprintf_r+0x244>)
 8010d98:	429d      	cmp	r5, r3
 8010d9a:	d101      	bne.n	8010da0 <_vfiprintf_r+0x60>
 8010d9c:	68b5      	ldr	r5, [r6, #8]
 8010d9e:	e7df      	b.n	8010d60 <_vfiprintf_r+0x20>
 8010da0:	4b79      	ldr	r3, [pc, #484]	; (8010f88 <_vfiprintf_r+0x248>)
 8010da2:	429d      	cmp	r5, r3
 8010da4:	bf08      	it	eq
 8010da6:	68f5      	ldreq	r5, [r6, #12]
 8010da8:	e7da      	b.n	8010d60 <_vfiprintf_r+0x20>
 8010daa:	89ab      	ldrh	r3, [r5, #12]
 8010dac:	0598      	lsls	r0, r3, #22
 8010dae:	d4ed      	bmi.n	8010d8c <_vfiprintf_r+0x4c>
 8010db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010db2:	f000 fb84 	bl	80114be <__retarget_lock_release_recursive>
 8010db6:	e7e9      	b.n	8010d8c <_vfiprintf_r+0x4c>
 8010db8:	2300      	movs	r3, #0
 8010dba:	9309      	str	r3, [sp, #36]	; 0x24
 8010dbc:	2320      	movs	r3, #32
 8010dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010dc6:	2330      	movs	r3, #48	; 0x30
 8010dc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010f8c <_vfiprintf_r+0x24c>
 8010dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010dd0:	f04f 0901 	mov.w	r9, #1
 8010dd4:	4623      	mov	r3, r4
 8010dd6:	469a      	mov	sl, r3
 8010dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ddc:	b10a      	cbz	r2, 8010de2 <_vfiprintf_r+0xa2>
 8010dde:	2a25      	cmp	r2, #37	; 0x25
 8010de0:	d1f9      	bne.n	8010dd6 <_vfiprintf_r+0x96>
 8010de2:	ebba 0b04 	subs.w	fp, sl, r4
 8010de6:	d00b      	beq.n	8010e00 <_vfiprintf_r+0xc0>
 8010de8:	465b      	mov	r3, fp
 8010dea:	4622      	mov	r2, r4
 8010dec:	4629      	mov	r1, r5
 8010dee:	4630      	mov	r0, r6
 8010df0:	f7ff ff94 	bl	8010d1c <__sfputs_r>
 8010df4:	3001      	adds	r0, #1
 8010df6:	f000 80aa 	beq.w	8010f4e <_vfiprintf_r+0x20e>
 8010dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dfc:	445a      	add	r2, fp
 8010dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8010e00:	f89a 3000 	ldrb.w	r3, [sl]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f000 80a2 	beq.w	8010f4e <_vfiprintf_r+0x20e>
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e14:	f10a 0a01 	add.w	sl, sl, #1
 8010e18:	9304      	str	r3, [sp, #16]
 8010e1a:	9307      	str	r3, [sp, #28]
 8010e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e20:	931a      	str	r3, [sp, #104]	; 0x68
 8010e22:	4654      	mov	r4, sl
 8010e24:	2205      	movs	r2, #5
 8010e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e2a:	4858      	ldr	r0, [pc, #352]	; (8010f8c <_vfiprintf_r+0x24c>)
 8010e2c:	f7ef f9e8 	bl	8000200 <memchr>
 8010e30:	9a04      	ldr	r2, [sp, #16]
 8010e32:	b9d8      	cbnz	r0, 8010e6c <_vfiprintf_r+0x12c>
 8010e34:	06d1      	lsls	r1, r2, #27
 8010e36:	bf44      	itt	mi
 8010e38:	2320      	movmi	r3, #32
 8010e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e3e:	0713      	lsls	r3, r2, #28
 8010e40:	bf44      	itt	mi
 8010e42:	232b      	movmi	r3, #43	; 0x2b
 8010e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e48:	f89a 3000 	ldrb.w	r3, [sl]
 8010e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8010e4e:	d015      	beq.n	8010e7c <_vfiprintf_r+0x13c>
 8010e50:	9a07      	ldr	r2, [sp, #28]
 8010e52:	4654      	mov	r4, sl
 8010e54:	2000      	movs	r0, #0
 8010e56:	f04f 0c0a 	mov.w	ip, #10
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e60:	3b30      	subs	r3, #48	; 0x30
 8010e62:	2b09      	cmp	r3, #9
 8010e64:	d94e      	bls.n	8010f04 <_vfiprintf_r+0x1c4>
 8010e66:	b1b0      	cbz	r0, 8010e96 <_vfiprintf_r+0x156>
 8010e68:	9207      	str	r2, [sp, #28]
 8010e6a:	e014      	b.n	8010e96 <_vfiprintf_r+0x156>
 8010e6c:	eba0 0308 	sub.w	r3, r0, r8
 8010e70:	fa09 f303 	lsl.w	r3, r9, r3
 8010e74:	4313      	orrs	r3, r2
 8010e76:	9304      	str	r3, [sp, #16]
 8010e78:	46a2      	mov	sl, r4
 8010e7a:	e7d2      	b.n	8010e22 <_vfiprintf_r+0xe2>
 8010e7c:	9b03      	ldr	r3, [sp, #12]
 8010e7e:	1d19      	adds	r1, r3, #4
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	9103      	str	r1, [sp, #12]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	bfbb      	ittet	lt
 8010e88:	425b      	neglt	r3, r3
 8010e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8010e8e:	9307      	strge	r3, [sp, #28]
 8010e90:	9307      	strlt	r3, [sp, #28]
 8010e92:	bfb8      	it	lt
 8010e94:	9204      	strlt	r2, [sp, #16]
 8010e96:	7823      	ldrb	r3, [r4, #0]
 8010e98:	2b2e      	cmp	r3, #46	; 0x2e
 8010e9a:	d10c      	bne.n	8010eb6 <_vfiprintf_r+0x176>
 8010e9c:	7863      	ldrb	r3, [r4, #1]
 8010e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8010ea0:	d135      	bne.n	8010f0e <_vfiprintf_r+0x1ce>
 8010ea2:	9b03      	ldr	r3, [sp, #12]
 8010ea4:	1d1a      	adds	r2, r3, #4
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	9203      	str	r2, [sp, #12]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	bfb8      	it	lt
 8010eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8010eb2:	3402      	adds	r4, #2
 8010eb4:	9305      	str	r3, [sp, #20]
 8010eb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010f9c <_vfiprintf_r+0x25c>
 8010eba:	7821      	ldrb	r1, [r4, #0]
 8010ebc:	2203      	movs	r2, #3
 8010ebe:	4650      	mov	r0, sl
 8010ec0:	f7ef f99e 	bl	8000200 <memchr>
 8010ec4:	b140      	cbz	r0, 8010ed8 <_vfiprintf_r+0x198>
 8010ec6:	2340      	movs	r3, #64	; 0x40
 8010ec8:	eba0 000a 	sub.w	r0, r0, sl
 8010ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8010ed0:	9b04      	ldr	r3, [sp, #16]
 8010ed2:	4303      	orrs	r3, r0
 8010ed4:	3401      	adds	r4, #1
 8010ed6:	9304      	str	r3, [sp, #16]
 8010ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010edc:	482c      	ldr	r0, [pc, #176]	; (8010f90 <_vfiprintf_r+0x250>)
 8010ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ee2:	2206      	movs	r2, #6
 8010ee4:	f7ef f98c 	bl	8000200 <memchr>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d03f      	beq.n	8010f6c <_vfiprintf_r+0x22c>
 8010eec:	4b29      	ldr	r3, [pc, #164]	; (8010f94 <_vfiprintf_r+0x254>)
 8010eee:	bb1b      	cbnz	r3, 8010f38 <_vfiprintf_r+0x1f8>
 8010ef0:	9b03      	ldr	r3, [sp, #12]
 8010ef2:	3307      	adds	r3, #7
 8010ef4:	f023 0307 	bic.w	r3, r3, #7
 8010ef8:	3308      	adds	r3, #8
 8010efa:	9303      	str	r3, [sp, #12]
 8010efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010efe:	443b      	add	r3, r7
 8010f00:	9309      	str	r3, [sp, #36]	; 0x24
 8010f02:	e767      	b.n	8010dd4 <_vfiprintf_r+0x94>
 8010f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f08:	460c      	mov	r4, r1
 8010f0a:	2001      	movs	r0, #1
 8010f0c:	e7a5      	b.n	8010e5a <_vfiprintf_r+0x11a>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	3401      	adds	r4, #1
 8010f12:	9305      	str	r3, [sp, #20]
 8010f14:	4619      	mov	r1, r3
 8010f16:	f04f 0c0a 	mov.w	ip, #10
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f20:	3a30      	subs	r2, #48	; 0x30
 8010f22:	2a09      	cmp	r2, #9
 8010f24:	d903      	bls.n	8010f2e <_vfiprintf_r+0x1ee>
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d0c5      	beq.n	8010eb6 <_vfiprintf_r+0x176>
 8010f2a:	9105      	str	r1, [sp, #20]
 8010f2c:	e7c3      	b.n	8010eb6 <_vfiprintf_r+0x176>
 8010f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f32:	4604      	mov	r4, r0
 8010f34:	2301      	movs	r3, #1
 8010f36:	e7f0      	b.n	8010f1a <_vfiprintf_r+0x1da>
 8010f38:	ab03      	add	r3, sp, #12
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	462a      	mov	r2, r5
 8010f3e:	4b16      	ldr	r3, [pc, #88]	; (8010f98 <_vfiprintf_r+0x258>)
 8010f40:	a904      	add	r1, sp, #16
 8010f42:	4630      	mov	r0, r6
 8010f44:	f7fd fde4 	bl	800eb10 <_printf_float>
 8010f48:	4607      	mov	r7, r0
 8010f4a:	1c78      	adds	r0, r7, #1
 8010f4c:	d1d6      	bne.n	8010efc <_vfiprintf_r+0x1bc>
 8010f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f50:	07d9      	lsls	r1, r3, #31
 8010f52:	d405      	bmi.n	8010f60 <_vfiprintf_r+0x220>
 8010f54:	89ab      	ldrh	r3, [r5, #12]
 8010f56:	059a      	lsls	r2, r3, #22
 8010f58:	d402      	bmi.n	8010f60 <_vfiprintf_r+0x220>
 8010f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f5c:	f000 faaf 	bl	80114be <__retarget_lock_release_recursive>
 8010f60:	89ab      	ldrh	r3, [r5, #12]
 8010f62:	065b      	lsls	r3, r3, #25
 8010f64:	f53f af12 	bmi.w	8010d8c <_vfiprintf_r+0x4c>
 8010f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f6a:	e711      	b.n	8010d90 <_vfiprintf_r+0x50>
 8010f6c:	ab03      	add	r3, sp, #12
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	462a      	mov	r2, r5
 8010f72:	4b09      	ldr	r3, [pc, #36]	; (8010f98 <_vfiprintf_r+0x258>)
 8010f74:	a904      	add	r1, sp, #16
 8010f76:	4630      	mov	r0, r6
 8010f78:	f7fe f86e 	bl	800f058 <_printf_i>
 8010f7c:	e7e4      	b.n	8010f48 <_vfiprintf_r+0x208>
 8010f7e:	bf00      	nop
 8010f80:	0801371c 	.word	0x0801371c
 8010f84:	0801373c 	.word	0x0801373c
 8010f88:	080136fc 	.word	0x080136fc
 8010f8c:	080135a4 	.word	0x080135a4
 8010f90:	080135ae 	.word	0x080135ae
 8010f94:	0800eb11 	.word	0x0800eb11
 8010f98:	08010d1d 	.word	0x08010d1d
 8010f9c:	080135aa 	.word	0x080135aa

08010fa0 <__swbuf_r>:
 8010fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fa2:	460e      	mov	r6, r1
 8010fa4:	4614      	mov	r4, r2
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	b118      	cbz	r0, 8010fb2 <__swbuf_r+0x12>
 8010faa:	6983      	ldr	r3, [r0, #24]
 8010fac:	b90b      	cbnz	r3, 8010fb2 <__swbuf_r+0x12>
 8010fae:	f000 f9e7 	bl	8011380 <__sinit>
 8010fb2:	4b21      	ldr	r3, [pc, #132]	; (8011038 <__swbuf_r+0x98>)
 8010fb4:	429c      	cmp	r4, r3
 8010fb6:	d12b      	bne.n	8011010 <__swbuf_r+0x70>
 8010fb8:	686c      	ldr	r4, [r5, #4]
 8010fba:	69a3      	ldr	r3, [r4, #24]
 8010fbc:	60a3      	str	r3, [r4, #8]
 8010fbe:	89a3      	ldrh	r3, [r4, #12]
 8010fc0:	071a      	lsls	r2, r3, #28
 8010fc2:	d52f      	bpl.n	8011024 <__swbuf_r+0x84>
 8010fc4:	6923      	ldr	r3, [r4, #16]
 8010fc6:	b36b      	cbz	r3, 8011024 <__swbuf_r+0x84>
 8010fc8:	6923      	ldr	r3, [r4, #16]
 8010fca:	6820      	ldr	r0, [r4, #0]
 8010fcc:	1ac0      	subs	r0, r0, r3
 8010fce:	6963      	ldr	r3, [r4, #20]
 8010fd0:	b2f6      	uxtb	r6, r6
 8010fd2:	4283      	cmp	r3, r0
 8010fd4:	4637      	mov	r7, r6
 8010fd6:	dc04      	bgt.n	8010fe2 <__swbuf_r+0x42>
 8010fd8:	4621      	mov	r1, r4
 8010fda:	4628      	mov	r0, r5
 8010fdc:	f000 f93c 	bl	8011258 <_fflush_r>
 8010fe0:	bb30      	cbnz	r0, 8011030 <__swbuf_r+0x90>
 8010fe2:	68a3      	ldr	r3, [r4, #8]
 8010fe4:	3b01      	subs	r3, #1
 8010fe6:	60a3      	str	r3, [r4, #8]
 8010fe8:	6823      	ldr	r3, [r4, #0]
 8010fea:	1c5a      	adds	r2, r3, #1
 8010fec:	6022      	str	r2, [r4, #0]
 8010fee:	701e      	strb	r6, [r3, #0]
 8010ff0:	6963      	ldr	r3, [r4, #20]
 8010ff2:	3001      	adds	r0, #1
 8010ff4:	4283      	cmp	r3, r0
 8010ff6:	d004      	beq.n	8011002 <__swbuf_r+0x62>
 8010ff8:	89a3      	ldrh	r3, [r4, #12]
 8010ffa:	07db      	lsls	r3, r3, #31
 8010ffc:	d506      	bpl.n	801100c <__swbuf_r+0x6c>
 8010ffe:	2e0a      	cmp	r6, #10
 8011000:	d104      	bne.n	801100c <__swbuf_r+0x6c>
 8011002:	4621      	mov	r1, r4
 8011004:	4628      	mov	r0, r5
 8011006:	f000 f927 	bl	8011258 <_fflush_r>
 801100a:	b988      	cbnz	r0, 8011030 <__swbuf_r+0x90>
 801100c:	4638      	mov	r0, r7
 801100e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011010:	4b0a      	ldr	r3, [pc, #40]	; (801103c <__swbuf_r+0x9c>)
 8011012:	429c      	cmp	r4, r3
 8011014:	d101      	bne.n	801101a <__swbuf_r+0x7a>
 8011016:	68ac      	ldr	r4, [r5, #8]
 8011018:	e7cf      	b.n	8010fba <__swbuf_r+0x1a>
 801101a:	4b09      	ldr	r3, [pc, #36]	; (8011040 <__swbuf_r+0xa0>)
 801101c:	429c      	cmp	r4, r3
 801101e:	bf08      	it	eq
 8011020:	68ec      	ldreq	r4, [r5, #12]
 8011022:	e7ca      	b.n	8010fba <__swbuf_r+0x1a>
 8011024:	4621      	mov	r1, r4
 8011026:	4628      	mov	r0, r5
 8011028:	f000 f81a 	bl	8011060 <__swsetup_r>
 801102c:	2800      	cmp	r0, #0
 801102e:	d0cb      	beq.n	8010fc8 <__swbuf_r+0x28>
 8011030:	f04f 37ff 	mov.w	r7, #4294967295
 8011034:	e7ea      	b.n	801100c <__swbuf_r+0x6c>
 8011036:	bf00      	nop
 8011038:	0801371c 	.word	0x0801371c
 801103c:	0801373c 	.word	0x0801373c
 8011040:	080136fc 	.word	0x080136fc

08011044 <__ascii_wctomb>:
 8011044:	b149      	cbz	r1, 801105a <__ascii_wctomb+0x16>
 8011046:	2aff      	cmp	r2, #255	; 0xff
 8011048:	bf85      	ittet	hi
 801104a:	238a      	movhi	r3, #138	; 0x8a
 801104c:	6003      	strhi	r3, [r0, #0]
 801104e:	700a      	strbls	r2, [r1, #0]
 8011050:	f04f 30ff 	movhi.w	r0, #4294967295
 8011054:	bf98      	it	ls
 8011056:	2001      	movls	r0, #1
 8011058:	4770      	bx	lr
 801105a:	4608      	mov	r0, r1
 801105c:	4770      	bx	lr
	...

08011060 <__swsetup_r>:
 8011060:	4b32      	ldr	r3, [pc, #200]	; (801112c <__swsetup_r+0xcc>)
 8011062:	b570      	push	{r4, r5, r6, lr}
 8011064:	681d      	ldr	r5, [r3, #0]
 8011066:	4606      	mov	r6, r0
 8011068:	460c      	mov	r4, r1
 801106a:	b125      	cbz	r5, 8011076 <__swsetup_r+0x16>
 801106c:	69ab      	ldr	r3, [r5, #24]
 801106e:	b913      	cbnz	r3, 8011076 <__swsetup_r+0x16>
 8011070:	4628      	mov	r0, r5
 8011072:	f000 f985 	bl	8011380 <__sinit>
 8011076:	4b2e      	ldr	r3, [pc, #184]	; (8011130 <__swsetup_r+0xd0>)
 8011078:	429c      	cmp	r4, r3
 801107a:	d10f      	bne.n	801109c <__swsetup_r+0x3c>
 801107c:	686c      	ldr	r4, [r5, #4]
 801107e:	89a3      	ldrh	r3, [r4, #12]
 8011080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011084:	0719      	lsls	r1, r3, #28
 8011086:	d42c      	bmi.n	80110e2 <__swsetup_r+0x82>
 8011088:	06dd      	lsls	r5, r3, #27
 801108a:	d411      	bmi.n	80110b0 <__swsetup_r+0x50>
 801108c:	2309      	movs	r3, #9
 801108e:	6033      	str	r3, [r6, #0]
 8011090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011094:	81a3      	strh	r3, [r4, #12]
 8011096:	f04f 30ff 	mov.w	r0, #4294967295
 801109a:	e03e      	b.n	801111a <__swsetup_r+0xba>
 801109c:	4b25      	ldr	r3, [pc, #148]	; (8011134 <__swsetup_r+0xd4>)
 801109e:	429c      	cmp	r4, r3
 80110a0:	d101      	bne.n	80110a6 <__swsetup_r+0x46>
 80110a2:	68ac      	ldr	r4, [r5, #8]
 80110a4:	e7eb      	b.n	801107e <__swsetup_r+0x1e>
 80110a6:	4b24      	ldr	r3, [pc, #144]	; (8011138 <__swsetup_r+0xd8>)
 80110a8:	429c      	cmp	r4, r3
 80110aa:	bf08      	it	eq
 80110ac:	68ec      	ldreq	r4, [r5, #12]
 80110ae:	e7e6      	b.n	801107e <__swsetup_r+0x1e>
 80110b0:	0758      	lsls	r0, r3, #29
 80110b2:	d512      	bpl.n	80110da <__swsetup_r+0x7a>
 80110b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110b6:	b141      	cbz	r1, 80110ca <__swsetup_r+0x6a>
 80110b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110bc:	4299      	cmp	r1, r3
 80110be:	d002      	beq.n	80110c6 <__swsetup_r+0x66>
 80110c0:	4630      	mov	r0, r6
 80110c2:	f7ff fb31 	bl	8010728 <_free_r>
 80110c6:	2300      	movs	r3, #0
 80110c8:	6363      	str	r3, [r4, #52]	; 0x34
 80110ca:	89a3      	ldrh	r3, [r4, #12]
 80110cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110d0:	81a3      	strh	r3, [r4, #12]
 80110d2:	2300      	movs	r3, #0
 80110d4:	6063      	str	r3, [r4, #4]
 80110d6:	6923      	ldr	r3, [r4, #16]
 80110d8:	6023      	str	r3, [r4, #0]
 80110da:	89a3      	ldrh	r3, [r4, #12]
 80110dc:	f043 0308 	orr.w	r3, r3, #8
 80110e0:	81a3      	strh	r3, [r4, #12]
 80110e2:	6923      	ldr	r3, [r4, #16]
 80110e4:	b94b      	cbnz	r3, 80110fa <__swsetup_r+0x9a>
 80110e6:	89a3      	ldrh	r3, [r4, #12]
 80110e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110f0:	d003      	beq.n	80110fa <__swsetup_r+0x9a>
 80110f2:	4621      	mov	r1, r4
 80110f4:	4630      	mov	r0, r6
 80110f6:	f000 fa09 	bl	801150c <__smakebuf_r>
 80110fa:	89a0      	ldrh	r0, [r4, #12]
 80110fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011100:	f010 0301 	ands.w	r3, r0, #1
 8011104:	d00a      	beq.n	801111c <__swsetup_r+0xbc>
 8011106:	2300      	movs	r3, #0
 8011108:	60a3      	str	r3, [r4, #8]
 801110a:	6963      	ldr	r3, [r4, #20]
 801110c:	425b      	negs	r3, r3
 801110e:	61a3      	str	r3, [r4, #24]
 8011110:	6923      	ldr	r3, [r4, #16]
 8011112:	b943      	cbnz	r3, 8011126 <__swsetup_r+0xc6>
 8011114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011118:	d1ba      	bne.n	8011090 <__swsetup_r+0x30>
 801111a:	bd70      	pop	{r4, r5, r6, pc}
 801111c:	0781      	lsls	r1, r0, #30
 801111e:	bf58      	it	pl
 8011120:	6963      	ldrpl	r3, [r4, #20]
 8011122:	60a3      	str	r3, [r4, #8]
 8011124:	e7f4      	b.n	8011110 <__swsetup_r+0xb0>
 8011126:	2000      	movs	r0, #0
 8011128:	e7f7      	b.n	801111a <__swsetup_r+0xba>
 801112a:	bf00      	nop
 801112c:	2000017c 	.word	0x2000017c
 8011130:	0801371c 	.word	0x0801371c
 8011134:	0801373c 	.word	0x0801373c
 8011138:	080136fc 	.word	0x080136fc

0801113c <abort>:
 801113c:	b508      	push	{r3, lr}
 801113e:	2006      	movs	r0, #6
 8011140:	f000 fa54 	bl	80115ec <raise>
 8011144:	2001      	movs	r0, #1
 8011146:	f7f0 f9cb 	bl	80014e0 <_exit>
	...

0801114c <__sflush_r>:
 801114c:	898a      	ldrh	r2, [r1, #12]
 801114e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011152:	4605      	mov	r5, r0
 8011154:	0710      	lsls	r0, r2, #28
 8011156:	460c      	mov	r4, r1
 8011158:	d458      	bmi.n	801120c <__sflush_r+0xc0>
 801115a:	684b      	ldr	r3, [r1, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	dc05      	bgt.n	801116c <__sflush_r+0x20>
 8011160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011162:	2b00      	cmp	r3, #0
 8011164:	dc02      	bgt.n	801116c <__sflush_r+0x20>
 8011166:	2000      	movs	r0, #0
 8011168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801116c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801116e:	2e00      	cmp	r6, #0
 8011170:	d0f9      	beq.n	8011166 <__sflush_r+0x1a>
 8011172:	2300      	movs	r3, #0
 8011174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011178:	682f      	ldr	r7, [r5, #0]
 801117a:	602b      	str	r3, [r5, #0]
 801117c:	d032      	beq.n	80111e4 <__sflush_r+0x98>
 801117e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011180:	89a3      	ldrh	r3, [r4, #12]
 8011182:	075a      	lsls	r2, r3, #29
 8011184:	d505      	bpl.n	8011192 <__sflush_r+0x46>
 8011186:	6863      	ldr	r3, [r4, #4]
 8011188:	1ac0      	subs	r0, r0, r3
 801118a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801118c:	b10b      	cbz	r3, 8011192 <__sflush_r+0x46>
 801118e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011190:	1ac0      	subs	r0, r0, r3
 8011192:	2300      	movs	r3, #0
 8011194:	4602      	mov	r2, r0
 8011196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011198:	6a21      	ldr	r1, [r4, #32]
 801119a:	4628      	mov	r0, r5
 801119c:	47b0      	blx	r6
 801119e:	1c43      	adds	r3, r0, #1
 80111a0:	89a3      	ldrh	r3, [r4, #12]
 80111a2:	d106      	bne.n	80111b2 <__sflush_r+0x66>
 80111a4:	6829      	ldr	r1, [r5, #0]
 80111a6:	291d      	cmp	r1, #29
 80111a8:	d82c      	bhi.n	8011204 <__sflush_r+0xb8>
 80111aa:	4a2a      	ldr	r2, [pc, #168]	; (8011254 <__sflush_r+0x108>)
 80111ac:	40ca      	lsrs	r2, r1
 80111ae:	07d6      	lsls	r6, r2, #31
 80111b0:	d528      	bpl.n	8011204 <__sflush_r+0xb8>
 80111b2:	2200      	movs	r2, #0
 80111b4:	6062      	str	r2, [r4, #4]
 80111b6:	04d9      	lsls	r1, r3, #19
 80111b8:	6922      	ldr	r2, [r4, #16]
 80111ba:	6022      	str	r2, [r4, #0]
 80111bc:	d504      	bpl.n	80111c8 <__sflush_r+0x7c>
 80111be:	1c42      	adds	r2, r0, #1
 80111c0:	d101      	bne.n	80111c6 <__sflush_r+0x7a>
 80111c2:	682b      	ldr	r3, [r5, #0]
 80111c4:	b903      	cbnz	r3, 80111c8 <__sflush_r+0x7c>
 80111c6:	6560      	str	r0, [r4, #84]	; 0x54
 80111c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111ca:	602f      	str	r7, [r5, #0]
 80111cc:	2900      	cmp	r1, #0
 80111ce:	d0ca      	beq.n	8011166 <__sflush_r+0x1a>
 80111d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111d4:	4299      	cmp	r1, r3
 80111d6:	d002      	beq.n	80111de <__sflush_r+0x92>
 80111d8:	4628      	mov	r0, r5
 80111da:	f7ff faa5 	bl	8010728 <_free_r>
 80111de:	2000      	movs	r0, #0
 80111e0:	6360      	str	r0, [r4, #52]	; 0x34
 80111e2:	e7c1      	b.n	8011168 <__sflush_r+0x1c>
 80111e4:	6a21      	ldr	r1, [r4, #32]
 80111e6:	2301      	movs	r3, #1
 80111e8:	4628      	mov	r0, r5
 80111ea:	47b0      	blx	r6
 80111ec:	1c41      	adds	r1, r0, #1
 80111ee:	d1c7      	bne.n	8011180 <__sflush_r+0x34>
 80111f0:	682b      	ldr	r3, [r5, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d0c4      	beq.n	8011180 <__sflush_r+0x34>
 80111f6:	2b1d      	cmp	r3, #29
 80111f8:	d001      	beq.n	80111fe <__sflush_r+0xb2>
 80111fa:	2b16      	cmp	r3, #22
 80111fc:	d101      	bne.n	8011202 <__sflush_r+0xb6>
 80111fe:	602f      	str	r7, [r5, #0]
 8011200:	e7b1      	b.n	8011166 <__sflush_r+0x1a>
 8011202:	89a3      	ldrh	r3, [r4, #12]
 8011204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011208:	81a3      	strh	r3, [r4, #12]
 801120a:	e7ad      	b.n	8011168 <__sflush_r+0x1c>
 801120c:	690f      	ldr	r7, [r1, #16]
 801120e:	2f00      	cmp	r7, #0
 8011210:	d0a9      	beq.n	8011166 <__sflush_r+0x1a>
 8011212:	0793      	lsls	r3, r2, #30
 8011214:	680e      	ldr	r6, [r1, #0]
 8011216:	bf08      	it	eq
 8011218:	694b      	ldreq	r3, [r1, #20]
 801121a:	600f      	str	r7, [r1, #0]
 801121c:	bf18      	it	ne
 801121e:	2300      	movne	r3, #0
 8011220:	eba6 0807 	sub.w	r8, r6, r7
 8011224:	608b      	str	r3, [r1, #8]
 8011226:	f1b8 0f00 	cmp.w	r8, #0
 801122a:	dd9c      	ble.n	8011166 <__sflush_r+0x1a>
 801122c:	6a21      	ldr	r1, [r4, #32]
 801122e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011230:	4643      	mov	r3, r8
 8011232:	463a      	mov	r2, r7
 8011234:	4628      	mov	r0, r5
 8011236:	47b0      	blx	r6
 8011238:	2800      	cmp	r0, #0
 801123a:	dc06      	bgt.n	801124a <__sflush_r+0xfe>
 801123c:	89a3      	ldrh	r3, [r4, #12]
 801123e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011242:	81a3      	strh	r3, [r4, #12]
 8011244:	f04f 30ff 	mov.w	r0, #4294967295
 8011248:	e78e      	b.n	8011168 <__sflush_r+0x1c>
 801124a:	4407      	add	r7, r0
 801124c:	eba8 0800 	sub.w	r8, r8, r0
 8011250:	e7e9      	b.n	8011226 <__sflush_r+0xda>
 8011252:	bf00      	nop
 8011254:	20400001 	.word	0x20400001

08011258 <_fflush_r>:
 8011258:	b538      	push	{r3, r4, r5, lr}
 801125a:	690b      	ldr	r3, [r1, #16]
 801125c:	4605      	mov	r5, r0
 801125e:	460c      	mov	r4, r1
 8011260:	b913      	cbnz	r3, 8011268 <_fflush_r+0x10>
 8011262:	2500      	movs	r5, #0
 8011264:	4628      	mov	r0, r5
 8011266:	bd38      	pop	{r3, r4, r5, pc}
 8011268:	b118      	cbz	r0, 8011272 <_fflush_r+0x1a>
 801126a:	6983      	ldr	r3, [r0, #24]
 801126c:	b90b      	cbnz	r3, 8011272 <_fflush_r+0x1a>
 801126e:	f000 f887 	bl	8011380 <__sinit>
 8011272:	4b14      	ldr	r3, [pc, #80]	; (80112c4 <_fflush_r+0x6c>)
 8011274:	429c      	cmp	r4, r3
 8011276:	d11b      	bne.n	80112b0 <_fflush_r+0x58>
 8011278:	686c      	ldr	r4, [r5, #4]
 801127a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d0ef      	beq.n	8011262 <_fflush_r+0xa>
 8011282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011284:	07d0      	lsls	r0, r2, #31
 8011286:	d404      	bmi.n	8011292 <_fflush_r+0x3a>
 8011288:	0599      	lsls	r1, r3, #22
 801128a:	d402      	bmi.n	8011292 <_fflush_r+0x3a>
 801128c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801128e:	f000 f915 	bl	80114bc <__retarget_lock_acquire_recursive>
 8011292:	4628      	mov	r0, r5
 8011294:	4621      	mov	r1, r4
 8011296:	f7ff ff59 	bl	801114c <__sflush_r>
 801129a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801129c:	07da      	lsls	r2, r3, #31
 801129e:	4605      	mov	r5, r0
 80112a0:	d4e0      	bmi.n	8011264 <_fflush_r+0xc>
 80112a2:	89a3      	ldrh	r3, [r4, #12]
 80112a4:	059b      	lsls	r3, r3, #22
 80112a6:	d4dd      	bmi.n	8011264 <_fflush_r+0xc>
 80112a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112aa:	f000 f908 	bl	80114be <__retarget_lock_release_recursive>
 80112ae:	e7d9      	b.n	8011264 <_fflush_r+0xc>
 80112b0:	4b05      	ldr	r3, [pc, #20]	; (80112c8 <_fflush_r+0x70>)
 80112b2:	429c      	cmp	r4, r3
 80112b4:	d101      	bne.n	80112ba <_fflush_r+0x62>
 80112b6:	68ac      	ldr	r4, [r5, #8]
 80112b8:	e7df      	b.n	801127a <_fflush_r+0x22>
 80112ba:	4b04      	ldr	r3, [pc, #16]	; (80112cc <_fflush_r+0x74>)
 80112bc:	429c      	cmp	r4, r3
 80112be:	bf08      	it	eq
 80112c0:	68ec      	ldreq	r4, [r5, #12]
 80112c2:	e7da      	b.n	801127a <_fflush_r+0x22>
 80112c4:	0801371c 	.word	0x0801371c
 80112c8:	0801373c 	.word	0x0801373c
 80112cc:	080136fc 	.word	0x080136fc

080112d0 <std>:
 80112d0:	2300      	movs	r3, #0
 80112d2:	b510      	push	{r4, lr}
 80112d4:	4604      	mov	r4, r0
 80112d6:	e9c0 3300 	strd	r3, r3, [r0]
 80112da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112de:	6083      	str	r3, [r0, #8]
 80112e0:	8181      	strh	r1, [r0, #12]
 80112e2:	6643      	str	r3, [r0, #100]	; 0x64
 80112e4:	81c2      	strh	r2, [r0, #14]
 80112e6:	6183      	str	r3, [r0, #24]
 80112e8:	4619      	mov	r1, r3
 80112ea:	2208      	movs	r2, #8
 80112ec:	305c      	adds	r0, #92	; 0x5c
 80112ee:	f7fd fb67 	bl	800e9c0 <memset>
 80112f2:	4b05      	ldr	r3, [pc, #20]	; (8011308 <std+0x38>)
 80112f4:	6263      	str	r3, [r4, #36]	; 0x24
 80112f6:	4b05      	ldr	r3, [pc, #20]	; (801130c <std+0x3c>)
 80112f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80112fa:	4b05      	ldr	r3, [pc, #20]	; (8011310 <std+0x40>)
 80112fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112fe:	4b05      	ldr	r3, [pc, #20]	; (8011314 <std+0x44>)
 8011300:	6224      	str	r4, [r4, #32]
 8011302:	6323      	str	r3, [r4, #48]	; 0x30
 8011304:	bd10      	pop	{r4, pc}
 8011306:	bf00      	nop
 8011308:	08011625 	.word	0x08011625
 801130c:	08011647 	.word	0x08011647
 8011310:	0801167f 	.word	0x0801167f
 8011314:	080116a3 	.word	0x080116a3

08011318 <_cleanup_r>:
 8011318:	4901      	ldr	r1, [pc, #4]	; (8011320 <_cleanup_r+0x8>)
 801131a:	f000 b8af 	b.w	801147c <_fwalk_reent>
 801131e:	bf00      	nop
 8011320:	08011259 	.word	0x08011259

08011324 <__sfmoreglue>:
 8011324:	b570      	push	{r4, r5, r6, lr}
 8011326:	2268      	movs	r2, #104	; 0x68
 8011328:	1e4d      	subs	r5, r1, #1
 801132a:	4355      	muls	r5, r2
 801132c:	460e      	mov	r6, r1
 801132e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011332:	f7ff fa65 	bl	8010800 <_malloc_r>
 8011336:	4604      	mov	r4, r0
 8011338:	b140      	cbz	r0, 801134c <__sfmoreglue+0x28>
 801133a:	2100      	movs	r1, #0
 801133c:	e9c0 1600 	strd	r1, r6, [r0]
 8011340:	300c      	adds	r0, #12
 8011342:	60a0      	str	r0, [r4, #8]
 8011344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011348:	f7fd fb3a 	bl	800e9c0 <memset>
 801134c:	4620      	mov	r0, r4
 801134e:	bd70      	pop	{r4, r5, r6, pc}

08011350 <__sfp_lock_acquire>:
 8011350:	4801      	ldr	r0, [pc, #4]	; (8011358 <__sfp_lock_acquire+0x8>)
 8011352:	f000 b8b3 	b.w	80114bc <__retarget_lock_acquire_recursive>
 8011356:	bf00      	nop
 8011358:	20006b81 	.word	0x20006b81

0801135c <__sfp_lock_release>:
 801135c:	4801      	ldr	r0, [pc, #4]	; (8011364 <__sfp_lock_release+0x8>)
 801135e:	f000 b8ae 	b.w	80114be <__retarget_lock_release_recursive>
 8011362:	bf00      	nop
 8011364:	20006b81 	.word	0x20006b81

08011368 <__sinit_lock_acquire>:
 8011368:	4801      	ldr	r0, [pc, #4]	; (8011370 <__sinit_lock_acquire+0x8>)
 801136a:	f000 b8a7 	b.w	80114bc <__retarget_lock_acquire_recursive>
 801136e:	bf00      	nop
 8011370:	20006b82 	.word	0x20006b82

08011374 <__sinit_lock_release>:
 8011374:	4801      	ldr	r0, [pc, #4]	; (801137c <__sinit_lock_release+0x8>)
 8011376:	f000 b8a2 	b.w	80114be <__retarget_lock_release_recursive>
 801137a:	bf00      	nop
 801137c:	20006b82 	.word	0x20006b82

08011380 <__sinit>:
 8011380:	b510      	push	{r4, lr}
 8011382:	4604      	mov	r4, r0
 8011384:	f7ff fff0 	bl	8011368 <__sinit_lock_acquire>
 8011388:	69a3      	ldr	r3, [r4, #24]
 801138a:	b11b      	cbz	r3, 8011394 <__sinit+0x14>
 801138c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011390:	f7ff bff0 	b.w	8011374 <__sinit_lock_release>
 8011394:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011398:	6523      	str	r3, [r4, #80]	; 0x50
 801139a:	4b13      	ldr	r3, [pc, #76]	; (80113e8 <__sinit+0x68>)
 801139c:	4a13      	ldr	r2, [pc, #76]	; (80113ec <__sinit+0x6c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80113a2:	42a3      	cmp	r3, r4
 80113a4:	bf04      	itt	eq
 80113a6:	2301      	moveq	r3, #1
 80113a8:	61a3      	streq	r3, [r4, #24]
 80113aa:	4620      	mov	r0, r4
 80113ac:	f000 f820 	bl	80113f0 <__sfp>
 80113b0:	6060      	str	r0, [r4, #4]
 80113b2:	4620      	mov	r0, r4
 80113b4:	f000 f81c 	bl	80113f0 <__sfp>
 80113b8:	60a0      	str	r0, [r4, #8]
 80113ba:	4620      	mov	r0, r4
 80113bc:	f000 f818 	bl	80113f0 <__sfp>
 80113c0:	2200      	movs	r2, #0
 80113c2:	60e0      	str	r0, [r4, #12]
 80113c4:	2104      	movs	r1, #4
 80113c6:	6860      	ldr	r0, [r4, #4]
 80113c8:	f7ff ff82 	bl	80112d0 <std>
 80113cc:	68a0      	ldr	r0, [r4, #8]
 80113ce:	2201      	movs	r2, #1
 80113d0:	2109      	movs	r1, #9
 80113d2:	f7ff ff7d 	bl	80112d0 <std>
 80113d6:	68e0      	ldr	r0, [r4, #12]
 80113d8:	2202      	movs	r2, #2
 80113da:	2112      	movs	r1, #18
 80113dc:	f7ff ff78 	bl	80112d0 <std>
 80113e0:	2301      	movs	r3, #1
 80113e2:	61a3      	str	r3, [r4, #24]
 80113e4:	e7d2      	b.n	801138c <__sinit+0xc>
 80113e6:	bf00      	nop
 80113e8:	08013380 	.word	0x08013380
 80113ec:	08011319 	.word	0x08011319

080113f0 <__sfp>:
 80113f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113f2:	4607      	mov	r7, r0
 80113f4:	f7ff ffac 	bl	8011350 <__sfp_lock_acquire>
 80113f8:	4b1e      	ldr	r3, [pc, #120]	; (8011474 <__sfp+0x84>)
 80113fa:	681e      	ldr	r6, [r3, #0]
 80113fc:	69b3      	ldr	r3, [r6, #24]
 80113fe:	b913      	cbnz	r3, 8011406 <__sfp+0x16>
 8011400:	4630      	mov	r0, r6
 8011402:	f7ff ffbd 	bl	8011380 <__sinit>
 8011406:	3648      	adds	r6, #72	; 0x48
 8011408:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801140c:	3b01      	subs	r3, #1
 801140e:	d503      	bpl.n	8011418 <__sfp+0x28>
 8011410:	6833      	ldr	r3, [r6, #0]
 8011412:	b30b      	cbz	r3, 8011458 <__sfp+0x68>
 8011414:	6836      	ldr	r6, [r6, #0]
 8011416:	e7f7      	b.n	8011408 <__sfp+0x18>
 8011418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801141c:	b9d5      	cbnz	r5, 8011454 <__sfp+0x64>
 801141e:	4b16      	ldr	r3, [pc, #88]	; (8011478 <__sfp+0x88>)
 8011420:	60e3      	str	r3, [r4, #12]
 8011422:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011426:	6665      	str	r5, [r4, #100]	; 0x64
 8011428:	f000 f847 	bl	80114ba <__retarget_lock_init_recursive>
 801142c:	f7ff ff96 	bl	801135c <__sfp_lock_release>
 8011430:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011434:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011438:	6025      	str	r5, [r4, #0]
 801143a:	61a5      	str	r5, [r4, #24]
 801143c:	2208      	movs	r2, #8
 801143e:	4629      	mov	r1, r5
 8011440:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011444:	f7fd fabc 	bl	800e9c0 <memset>
 8011448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801144c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011450:	4620      	mov	r0, r4
 8011452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011454:	3468      	adds	r4, #104	; 0x68
 8011456:	e7d9      	b.n	801140c <__sfp+0x1c>
 8011458:	2104      	movs	r1, #4
 801145a:	4638      	mov	r0, r7
 801145c:	f7ff ff62 	bl	8011324 <__sfmoreglue>
 8011460:	4604      	mov	r4, r0
 8011462:	6030      	str	r0, [r6, #0]
 8011464:	2800      	cmp	r0, #0
 8011466:	d1d5      	bne.n	8011414 <__sfp+0x24>
 8011468:	f7ff ff78 	bl	801135c <__sfp_lock_release>
 801146c:	230c      	movs	r3, #12
 801146e:	603b      	str	r3, [r7, #0]
 8011470:	e7ee      	b.n	8011450 <__sfp+0x60>
 8011472:	bf00      	nop
 8011474:	08013380 	.word	0x08013380
 8011478:	ffff0001 	.word	0xffff0001

0801147c <_fwalk_reent>:
 801147c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011480:	4606      	mov	r6, r0
 8011482:	4688      	mov	r8, r1
 8011484:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011488:	2700      	movs	r7, #0
 801148a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801148e:	f1b9 0901 	subs.w	r9, r9, #1
 8011492:	d505      	bpl.n	80114a0 <_fwalk_reent+0x24>
 8011494:	6824      	ldr	r4, [r4, #0]
 8011496:	2c00      	cmp	r4, #0
 8011498:	d1f7      	bne.n	801148a <_fwalk_reent+0xe>
 801149a:	4638      	mov	r0, r7
 801149c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114a0:	89ab      	ldrh	r3, [r5, #12]
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d907      	bls.n	80114b6 <_fwalk_reent+0x3a>
 80114a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80114aa:	3301      	adds	r3, #1
 80114ac:	d003      	beq.n	80114b6 <_fwalk_reent+0x3a>
 80114ae:	4629      	mov	r1, r5
 80114b0:	4630      	mov	r0, r6
 80114b2:	47c0      	blx	r8
 80114b4:	4307      	orrs	r7, r0
 80114b6:	3568      	adds	r5, #104	; 0x68
 80114b8:	e7e9      	b.n	801148e <_fwalk_reent+0x12>

080114ba <__retarget_lock_init_recursive>:
 80114ba:	4770      	bx	lr

080114bc <__retarget_lock_acquire_recursive>:
 80114bc:	4770      	bx	lr

080114be <__retarget_lock_release_recursive>:
 80114be:	4770      	bx	lr

080114c0 <__swhatbuf_r>:
 80114c0:	b570      	push	{r4, r5, r6, lr}
 80114c2:	460e      	mov	r6, r1
 80114c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114c8:	2900      	cmp	r1, #0
 80114ca:	b096      	sub	sp, #88	; 0x58
 80114cc:	4614      	mov	r4, r2
 80114ce:	461d      	mov	r5, r3
 80114d0:	da08      	bge.n	80114e4 <__swhatbuf_r+0x24>
 80114d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80114d6:	2200      	movs	r2, #0
 80114d8:	602a      	str	r2, [r5, #0]
 80114da:	061a      	lsls	r2, r3, #24
 80114dc:	d410      	bmi.n	8011500 <__swhatbuf_r+0x40>
 80114de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114e2:	e00e      	b.n	8011502 <__swhatbuf_r+0x42>
 80114e4:	466a      	mov	r2, sp
 80114e6:	f000 f903 	bl	80116f0 <_fstat_r>
 80114ea:	2800      	cmp	r0, #0
 80114ec:	dbf1      	blt.n	80114d2 <__swhatbuf_r+0x12>
 80114ee:	9a01      	ldr	r2, [sp, #4]
 80114f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80114f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80114f8:	425a      	negs	r2, r3
 80114fa:	415a      	adcs	r2, r3
 80114fc:	602a      	str	r2, [r5, #0]
 80114fe:	e7ee      	b.n	80114de <__swhatbuf_r+0x1e>
 8011500:	2340      	movs	r3, #64	; 0x40
 8011502:	2000      	movs	r0, #0
 8011504:	6023      	str	r3, [r4, #0]
 8011506:	b016      	add	sp, #88	; 0x58
 8011508:	bd70      	pop	{r4, r5, r6, pc}
	...

0801150c <__smakebuf_r>:
 801150c:	898b      	ldrh	r3, [r1, #12]
 801150e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011510:	079d      	lsls	r5, r3, #30
 8011512:	4606      	mov	r6, r0
 8011514:	460c      	mov	r4, r1
 8011516:	d507      	bpl.n	8011528 <__smakebuf_r+0x1c>
 8011518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801151c:	6023      	str	r3, [r4, #0]
 801151e:	6123      	str	r3, [r4, #16]
 8011520:	2301      	movs	r3, #1
 8011522:	6163      	str	r3, [r4, #20]
 8011524:	b002      	add	sp, #8
 8011526:	bd70      	pop	{r4, r5, r6, pc}
 8011528:	ab01      	add	r3, sp, #4
 801152a:	466a      	mov	r2, sp
 801152c:	f7ff ffc8 	bl	80114c0 <__swhatbuf_r>
 8011530:	9900      	ldr	r1, [sp, #0]
 8011532:	4605      	mov	r5, r0
 8011534:	4630      	mov	r0, r6
 8011536:	f7ff f963 	bl	8010800 <_malloc_r>
 801153a:	b948      	cbnz	r0, 8011550 <__smakebuf_r+0x44>
 801153c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011540:	059a      	lsls	r2, r3, #22
 8011542:	d4ef      	bmi.n	8011524 <__smakebuf_r+0x18>
 8011544:	f023 0303 	bic.w	r3, r3, #3
 8011548:	f043 0302 	orr.w	r3, r3, #2
 801154c:	81a3      	strh	r3, [r4, #12]
 801154e:	e7e3      	b.n	8011518 <__smakebuf_r+0xc>
 8011550:	4b0d      	ldr	r3, [pc, #52]	; (8011588 <__smakebuf_r+0x7c>)
 8011552:	62b3      	str	r3, [r6, #40]	; 0x28
 8011554:	89a3      	ldrh	r3, [r4, #12]
 8011556:	6020      	str	r0, [r4, #0]
 8011558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801155c:	81a3      	strh	r3, [r4, #12]
 801155e:	9b00      	ldr	r3, [sp, #0]
 8011560:	6163      	str	r3, [r4, #20]
 8011562:	9b01      	ldr	r3, [sp, #4]
 8011564:	6120      	str	r0, [r4, #16]
 8011566:	b15b      	cbz	r3, 8011580 <__smakebuf_r+0x74>
 8011568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801156c:	4630      	mov	r0, r6
 801156e:	f000 f8d1 	bl	8011714 <_isatty_r>
 8011572:	b128      	cbz	r0, 8011580 <__smakebuf_r+0x74>
 8011574:	89a3      	ldrh	r3, [r4, #12]
 8011576:	f023 0303 	bic.w	r3, r3, #3
 801157a:	f043 0301 	orr.w	r3, r3, #1
 801157e:	81a3      	strh	r3, [r4, #12]
 8011580:	89a0      	ldrh	r0, [r4, #12]
 8011582:	4305      	orrs	r5, r0
 8011584:	81a5      	strh	r5, [r4, #12]
 8011586:	e7cd      	b.n	8011524 <__smakebuf_r+0x18>
 8011588:	08011319 	.word	0x08011319

0801158c <_malloc_usable_size_r>:
 801158c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011590:	1f18      	subs	r0, r3, #4
 8011592:	2b00      	cmp	r3, #0
 8011594:	bfbc      	itt	lt
 8011596:	580b      	ldrlt	r3, [r1, r0]
 8011598:	18c0      	addlt	r0, r0, r3
 801159a:	4770      	bx	lr

0801159c <_raise_r>:
 801159c:	291f      	cmp	r1, #31
 801159e:	b538      	push	{r3, r4, r5, lr}
 80115a0:	4604      	mov	r4, r0
 80115a2:	460d      	mov	r5, r1
 80115a4:	d904      	bls.n	80115b0 <_raise_r+0x14>
 80115a6:	2316      	movs	r3, #22
 80115a8:	6003      	str	r3, [r0, #0]
 80115aa:	f04f 30ff 	mov.w	r0, #4294967295
 80115ae:	bd38      	pop	{r3, r4, r5, pc}
 80115b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80115b2:	b112      	cbz	r2, 80115ba <_raise_r+0x1e>
 80115b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115b8:	b94b      	cbnz	r3, 80115ce <_raise_r+0x32>
 80115ba:	4620      	mov	r0, r4
 80115bc:	f000 f830 	bl	8011620 <_getpid_r>
 80115c0:	462a      	mov	r2, r5
 80115c2:	4601      	mov	r1, r0
 80115c4:	4620      	mov	r0, r4
 80115c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115ca:	f000 b817 	b.w	80115fc <_kill_r>
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d00a      	beq.n	80115e8 <_raise_r+0x4c>
 80115d2:	1c59      	adds	r1, r3, #1
 80115d4:	d103      	bne.n	80115de <_raise_r+0x42>
 80115d6:	2316      	movs	r3, #22
 80115d8:	6003      	str	r3, [r0, #0]
 80115da:	2001      	movs	r0, #1
 80115dc:	e7e7      	b.n	80115ae <_raise_r+0x12>
 80115de:	2400      	movs	r4, #0
 80115e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80115e4:	4628      	mov	r0, r5
 80115e6:	4798      	blx	r3
 80115e8:	2000      	movs	r0, #0
 80115ea:	e7e0      	b.n	80115ae <_raise_r+0x12>

080115ec <raise>:
 80115ec:	4b02      	ldr	r3, [pc, #8]	; (80115f8 <raise+0xc>)
 80115ee:	4601      	mov	r1, r0
 80115f0:	6818      	ldr	r0, [r3, #0]
 80115f2:	f7ff bfd3 	b.w	801159c <_raise_r>
 80115f6:	bf00      	nop
 80115f8:	2000017c 	.word	0x2000017c

080115fc <_kill_r>:
 80115fc:	b538      	push	{r3, r4, r5, lr}
 80115fe:	4d07      	ldr	r5, [pc, #28]	; (801161c <_kill_r+0x20>)
 8011600:	2300      	movs	r3, #0
 8011602:	4604      	mov	r4, r0
 8011604:	4608      	mov	r0, r1
 8011606:	4611      	mov	r1, r2
 8011608:	602b      	str	r3, [r5, #0]
 801160a:	f7ef ff59 	bl	80014c0 <_kill>
 801160e:	1c43      	adds	r3, r0, #1
 8011610:	d102      	bne.n	8011618 <_kill_r+0x1c>
 8011612:	682b      	ldr	r3, [r5, #0]
 8011614:	b103      	cbz	r3, 8011618 <_kill_r+0x1c>
 8011616:	6023      	str	r3, [r4, #0]
 8011618:	bd38      	pop	{r3, r4, r5, pc}
 801161a:	bf00      	nop
 801161c:	20006b7c 	.word	0x20006b7c

08011620 <_getpid_r>:
 8011620:	f7ef bf46 	b.w	80014b0 <_getpid>

08011624 <__sread>:
 8011624:	b510      	push	{r4, lr}
 8011626:	460c      	mov	r4, r1
 8011628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801162c:	f000 f894 	bl	8011758 <_read_r>
 8011630:	2800      	cmp	r0, #0
 8011632:	bfab      	itete	ge
 8011634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011636:	89a3      	ldrhlt	r3, [r4, #12]
 8011638:	181b      	addge	r3, r3, r0
 801163a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801163e:	bfac      	ite	ge
 8011640:	6563      	strge	r3, [r4, #84]	; 0x54
 8011642:	81a3      	strhlt	r3, [r4, #12]
 8011644:	bd10      	pop	{r4, pc}

08011646 <__swrite>:
 8011646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801164a:	461f      	mov	r7, r3
 801164c:	898b      	ldrh	r3, [r1, #12]
 801164e:	05db      	lsls	r3, r3, #23
 8011650:	4605      	mov	r5, r0
 8011652:	460c      	mov	r4, r1
 8011654:	4616      	mov	r6, r2
 8011656:	d505      	bpl.n	8011664 <__swrite+0x1e>
 8011658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801165c:	2302      	movs	r3, #2
 801165e:	2200      	movs	r2, #0
 8011660:	f000 f868 	bl	8011734 <_lseek_r>
 8011664:	89a3      	ldrh	r3, [r4, #12]
 8011666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801166a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801166e:	81a3      	strh	r3, [r4, #12]
 8011670:	4632      	mov	r2, r6
 8011672:	463b      	mov	r3, r7
 8011674:	4628      	mov	r0, r5
 8011676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801167a:	f000 b817 	b.w	80116ac <_write_r>

0801167e <__sseek>:
 801167e:	b510      	push	{r4, lr}
 8011680:	460c      	mov	r4, r1
 8011682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011686:	f000 f855 	bl	8011734 <_lseek_r>
 801168a:	1c43      	adds	r3, r0, #1
 801168c:	89a3      	ldrh	r3, [r4, #12]
 801168e:	bf15      	itete	ne
 8011690:	6560      	strne	r0, [r4, #84]	; 0x54
 8011692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801169a:	81a3      	strheq	r3, [r4, #12]
 801169c:	bf18      	it	ne
 801169e:	81a3      	strhne	r3, [r4, #12]
 80116a0:	bd10      	pop	{r4, pc}

080116a2 <__sclose>:
 80116a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116a6:	f000 b813 	b.w	80116d0 <_close_r>
	...

080116ac <_write_r>:
 80116ac:	b538      	push	{r3, r4, r5, lr}
 80116ae:	4d07      	ldr	r5, [pc, #28]	; (80116cc <_write_r+0x20>)
 80116b0:	4604      	mov	r4, r0
 80116b2:	4608      	mov	r0, r1
 80116b4:	4611      	mov	r1, r2
 80116b6:	2200      	movs	r2, #0
 80116b8:	602a      	str	r2, [r5, #0]
 80116ba:	461a      	mov	r2, r3
 80116bc:	f7ef ff37 	bl	800152e <_write>
 80116c0:	1c43      	adds	r3, r0, #1
 80116c2:	d102      	bne.n	80116ca <_write_r+0x1e>
 80116c4:	682b      	ldr	r3, [r5, #0]
 80116c6:	b103      	cbz	r3, 80116ca <_write_r+0x1e>
 80116c8:	6023      	str	r3, [r4, #0]
 80116ca:	bd38      	pop	{r3, r4, r5, pc}
 80116cc:	20006b7c 	.word	0x20006b7c

080116d0 <_close_r>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	4d06      	ldr	r5, [pc, #24]	; (80116ec <_close_r+0x1c>)
 80116d4:	2300      	movs	r3, #0
 80116d6:	4604      	mov	r4, r0
 80116d8:	4608      	mov	r0, r1
 80116da:	602b      	str	r3, [r5, #0]
 80116dc:	f7ef ff43 	bl	8001566 <_close>
 80116e0:	1c43      	adds	r3, r0, #1
 80116e2:	d102      	bne.n	80116ea <_close_r+0x1a>
 80116e4:	682b      	ldr	r3, [r5, #0]
 80116e6:	b103      	cbz	r3, 80116ea <_close_r+0x1a>
 80116e8:	6023      	str	r3, [r4, #0]
 80116ea:	bd38      	pop	{r3, r4, r5, pc}
 80116ec:	20006b7c 	.word	0x20006b7c

080116f0 <_fstat_r>:
 80116f0:	b538      	push	{r3, r4, r5, lr}
 80116f2:	4d07      	ldr	r5, [pc, #28]	; (8011710 <_fstat_r+0x20>)
 80116f4:	2300      	movs	r3, #0
 80116f6:	4604      	mov	r4, r0
 80116f8:	4608      	mov	r0, r1
 80116fa:	4611      	mov	r1, r2
 80116fc:	602b      	str	r3, [r5, #0]
 80116fe:	f7ef ff3e 	bl	800157e <_fstat>
 8011702:	1c43      	adds	r3, r0, #1
 8011704:	d102      	bne.n	801170c <_fstat_r+0x1c>
 8011706:	682b      	ldr	r3, [r5, #0]
 8011708:	b103      	cbz	r3, 801170c <_fstat_r+0x1c>
 801170a:	6023      	str	r3, [r4, #0]
 801170c:	bd38      	pop	{r3, r4, r5, pc}
 801170e:	bf00      	nop
 8011710:	20006b7c 	.word	0x20006b7c

08011714 <_isatty_r>:
 8011714:	b538      	push	{r3, r4, r5, lr}
 8011716:	4d06      	ldr	r5, [pc, #24]	; (8011730 <_isatty_r+0x1c>)
 8011718:	2300      	movs	r3, #0
 801171a:	4604      	mov	r4, r0
 801171c:	4608      	mov	r0, r1
 801171e:	602b      	str	r3, [r5, #0]
 8011720:	f7ef ff3d 	bl	800159e <_isatty>
 8011724:	1c43      	adds	r3, r0, #1
 8011726:	d102      	bne.n	801172e <_isatty_r+0x1a>
 8011728:	682b      	ldr	r3, [r5, #0]
 801172a:	b103      	cbz	r3, 801172e <_isatty_r+0x1a>
 801172c:	6023      	str	r3, [r4, #0]
 801172e:	bd38      	pop	{r3, r4, r5, pc}
 8011730:	20006b7c 	.word	0x20006b7c

08011734 <_lseek_r>:
 8011734:	b538      	push	{r3, r4, r5, lr}
 8011736:	4d07      	ldr	r5, [pc, #28]	; (8011754 <_lseek_r+0x20>)
 8011738:	4604      	mov	r4, r0
 801173a:	4608      	mov	r0, r1
 801173c:	4611      	mov	r1, r2
 801173e:	2200      	movs	r2, #0
 8011740:	602a      	str	r2, [r5, #0]
 8011742:	461a      	mov	r2, r3
 8011744:	f7ef ff36 	bl	80015b4 <_lseek>
 8011748:	1c43      	adds	r3, r0, #1
 801174a:	d102      	bne.n	8011752 <_lseek_r+0x1e>
 801174c:	682b      	ldr	r3, [r5, #0]
 801174e:	b103      	cbz	r3, 8011752 <_lseek_r+0x1e>
 8011750:	6023      	str	r3, [r4, #0]
 8011752:	bd38      	pop	{r3, r4, r5, pc}
 8011754:	20006b7c 	.word	0x20006b7c

08011758 <_read_r>:
 8011758:	b538      	push	{r3, r4, r5, lr}
 801175a:	4d07      	ldr	r5, [pc, #28]	; (8011778 <_read_r+0x20>)
 801175c:	4604      	mov	r4, r0
 801175e:	4608      	mov	r0, r1
 8011760:	4611      	mov	r1, r2
 8011762:	2200      	movs	r2, #0
 8011764:	602a      	str	r2, [r5, #0]
 8011766:	461a      	mov	r2, r3
 8011768:	f7ef fec4 	bl	80014f4 <_read>
 801176c:	1c43      	adds	r3, r0, #1
 801176e:	d102      	bne.n	8011776 <_read_r+0x1e>
 8011770:	682b      	ldr	r3, [r5, #0]
 8011772:	b103      	cbz	r3, 8011776 <_read_r+0x1e>
 8011774:	6023      	str	r3, [r4, #0]
 8011776:	bd38      	pop	{r3, r4, r5, pc}
 8011778:	20006b7c 	.word	0x20006b7c

0801177c <_init>:
 801177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177e:	bf00      	nop
 8011780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011782:	bc08      	pop	{r3}
 8011784:	469e      	mov	lr, r3
 8011786:	4770      	bx	lr

08011788 <_fini>:
 8011788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801178a:	bf00      	nop
 801178c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801178e:	bc08      	pop	{r3}
 8011790:	469e      	mov	lr, r3
 8011792:	4770      	bx	lr
