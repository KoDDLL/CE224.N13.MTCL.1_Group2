
Lab4_BT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e410  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f4c  0800e5c0  0800e5c0  0001e5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801050c  0801050c  00030348  2**0
                  CONTENTS
  4 .ARM          00000008  0801050c  0801050c  0002050c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010514  08010514  00030348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010514  08010514  00020514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010518  08010518  00020518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  0801051c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030348  2**0
                  CONTENTS
 10 .bss          00001e98  20000348  20000348  00030348  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  200021e0  200021e0  00030348  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ac43  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000472d  00000000  00000000  0004afbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  0004f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001558  00000000  00000000  00050e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b69  00000000  00000000  000523c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f175  00000000  00000000  0007bf29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3e3c  00000000  00000000  0009b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017eeda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071f8  00000000  00000000  0017ef2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000348 	.word	0x20000348
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e5a8 	.word	0x0800e5a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000034c 	.word	0x2000034c
 80001ec:	0800e5a8 	.word	0x0800e5a8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f001 ffe3 	bl	8002f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f8db 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  BSP_GYRO_Init();
 8000f7a:	f001 f917 	bl	80021ac <BSP_GYRO_Init>
  BSP_SDRAM_Init();
 8000f7e:	f001 fe13 	bl	8002ba8 <BSP_SDRAM_Init>
  MX_GPIO_Init();
 8000f82:	f000 f93f 	bl	8001204 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f86:	f009 fedf 	bl	800ad48 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000f8a:	f001 f975 	bl	8002278 <BSP_LCD_Init>
    //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000f8e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f92:	2001      	movs	r0, #1
 8000f94:	f001 f9f2 	bl	800237c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f001 fa53 	bl	8002444 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000f9e:	f001 fc05 	bl	80027ac <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000fa2:	4859      	ldr	r0, [pc, #356]	; (8001108 <main+0x19c>)
 8000fa4:	f001 fac0 	bl	8002528 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000fa8:	4857      	ldr	r0, [pc, #348]	; (8001108 <main+0x19c>)
 8000faa:	f001 fa73 	bl	8002494 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000fae:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb2:	f001 fa57 	bl	8002464 <BSP_LCD_SetTextColor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  L3GD20_ReadXYZAngRate(&DATA);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fda8 	bl	8001b10 <L3GD20_ReadXYZAngRate>

	  if (DATA[0] < -10){
 8000fc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fc4:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8000fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd0:	d508      	bpl.n	8000fe4 <main+0x78>
		  BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"       ^");
 8000fd2:	494e      	ldr	r1, [pc, #312]	; (800110c <main+0x1a0>)
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f001 fbd1 	bl	800277c <BSP_LCD_DisplayStringAtLine>
	  	  BSP_LCD_DisplayStringAtLine(10, (uint8_t*)"        ");
 8000fda:	494d      	ldr	r1, [pc, #308]	; (8001110 <main+0x1a4>)
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f001 fbcd 	bl	800277c <BSP_LCD_DisplayStringAtLine>
 8000fe2:	e019      	b.n	8001018 <main+0xac>
	  }
	  else if (DATA[0] > 10){
 8000fe4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fe8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	dd08      	ble.n	8001008 <main+0x9c>
		  BSP_LCD_DisplayStringAtLine(10, (uint8_t*)"       v");
 8000ff6:	4947      	ldr	r1, [pc, #284]	; (8001114 <main+0x1a8>)
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f001 fbbf 	bl	800277c <BSP_LCD_DisplayStringAtLine>
	  	  BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"        ");
 8000ffe:	4944      	ldr	r1, [pc, #272]	; (8001110 <main+0x1a4>)
 8001000:	2000      	movs	r0, #0
 8001002:	f001 fbbb 	bl	800277c <BSP_LCD_DisplayStringAtLine>
 8001006:	e007      	b.n	8001018 <main+0xac>
	  }
	  else{
		  BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"        ");
 8001008:	4941      	ldr	r1, [pc, #260]	; (8001110 <main+0x1a4>)
 800100a:	2000      	movs	r0, #0
 800100c:	f001 fbb6 	bl	800277c <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(10, (uint8_t*)"        ");
 8001010:	493f      	ldr	r1, [pc, #252]	; (8001110 <main+0x1a4>)
 8001012:	200a      	movs	r0, #10
 8001014:	f001 fbb2 	bl	800277c <BSP_LCD_DisplayStringAtLine>
	  }

	  if (DATA[1] > 10)
 8001018:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800101c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	dd04      	ble.n	8001034 <main+0xc8>
		  BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"             >");
 800102a:	493b      	ldr	r1, [pc, #236]	; (8001118 <main+0x1ac>)
 800102c:	2005      	movs	r0, #5
 800102e:	f001 fba5 	bl	800277c <BSP_LCD_DisplayStringAtLine>
 8001032:	e011      	b.n	8001058 <main+0xec>
	  else if (DATA[1] < -10)
 8001034:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001038:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800103c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001044:	d504      	bpl.n	8001050 <main+0xe4>
		  BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"<");
 8001046:	4935      	ldr	r1, [pc, #212]	; (800111c <main+0x1b0>)
 8001048:	2005      	movs	r0, #5
 800104a:	f001 fb97 	bl	800277c <BSP_LCD_DisplayStringAtLine>
 800104e:	e003      	b.n	8001058 <main+0xec>
	  else
		  BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"              ");
 8001050:	4933      	ldr	r1, [pc, #204]	; (8001120 <main+0x1b4>)
 8001052:	2005      	movs	r0, #5
 8001054:	f001 fb92 	bl	800277c <BSP_LCD_DisplayStringAtLine>

	  sprintf(X, "%f", DATA[0]);
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa84 	bl	8000568 <__aeabi_f2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	f107 0018 	add.w	r0, r7, #24
 8001068:	492e      	ldr	r1, [pc, #184]	; (8001124 <main+0x1b8>)
 800106a:	f00b f825 	bl	800c0b8 <siprintf>
	  sprintf(Y, "%f", DATA[1]);
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa79 	bl	8000568 <__aeabi_f2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	f107 000c 	add.w	r0, r7, #12
 800107e:	4929      	ldr	r1, [pc, #164]	; (8001124 <main+0x1b8>)
 8001080:	f00b f81a 	bl	800c0b8 <siprintf>
	  sprintf(Z, "%f", DATA[2]);
 8001084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa6e 	bl	8000568 <__aeabi_f2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4638      	mov	r0, r7
 8001092:	4924      	ldr	r1, [pc, #144]	; (8001124 <main+0x1b8>)
 8001094:	f00b f810 	bl	800c0b8 <siprintf>

	  CDC_Transmit_HS((uint8_t*)"\n XYZ: ", 8);
 8001098:	2108      	movs	r1, #8
 800109a:	4823      	ldr	r0, [pc, #140]	; (8001128 <main+0x1bc>)
 800109c:	f009 ff12 	bl	800aec4 <CDC_Transmit_HS>
	  HAL_Delay(50);
 80010a0:	2032      	movs	r0, #50	; 0x32
 80010a2:	f001 ffbd 	bl	8003020 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)X, 10);
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	210a      	movs	r1, #10
 80010ac:	4618      	mov	r0, r3
 80010ae:	f009 ff09 	bl	800aec4 <CDC_Transmit_HS>
	  HAL_Delay(50);
 80010b2:	2032      	movs	r0, #50	; 0x32
 80010b4:	f001 ffb4 	bl	8003020 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)" ", 1);
 80010b8:	2101      	movs	r1, #1
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <main+0x1c0>)
 80010bc:	f009 ff02 	bl	800aec4 <CDC_Transmit_HS>
	  HAL_Delay(50);
 80010c0:	2032      	movs	r0, #50	; 0x32
 80010c2:	f001 ffad 	bl	8003020 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)Y, 10);
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	210a      	movs	r1, #10
 80010cc:	4618      	mov	r0, r3
 80010ce:	f009 fef9 	bl	800aec4 <CDC_Transmit_HS>
	  HAL_Delay(50);
 80010d2:	2032      	movs	r0, #50	; 0x32
 80010d4:	f001 ffa4 	bl	8003020 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)" ", 1);
 80010d8:	2101      	movs	r1, #1
 80010da:	4814      	ldr	r0, [pc, #80]	; (800112c <main+0x1c0>)
 80010dc:	f009 fef2 	bl	800aec4 <CDC_Transmit_HS>
	  HAL_Delay(50);
 80010e0:	2032      	movs	r0, #50	; 0x32
 80010e2:	f001 ff9d 	bl	8003020 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)Z, 10);
 80010e6:	463b      	mov	r3, r7
 80010e8:	210a      	movs	r1, #10
 80010ea:	4618      	mov	r0, r3
 80010ec:	f009 feea 	bl	800aec4 <CDC_Transmit_HS>
	  HAL_Delay(50);
 80010f0:	2032      	movs	r0, #50	; 0x32
 80010f2:	f001 ff95 	bl	8003020 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)" ", 1);
 80010f6:	2101      	movs	r1, #1
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <main+0x1c0>)
 80010fa:	f009 fee3 	bl	800aec4 <CDC_Transmit_HS>

	  HAL_Delay(200);
 80010fe:	20c8      	movs	r0, #200	; 0xc8
 8001100:	f001 ff8e 	bl	8003020 <HAL_Delay>
	  L3GD20_ReadXYZAngRate(&DATA);
 8001104:	e757      	b.n	8000fb6 <main+0x4a>
 8001106:	bf00      	nop
 8001108:	ff0000ff 	.word	0xff0000ff
 800110c:	0800e5c0 	.word	0x0800e5c0
 8001110:	0800e5cc 	.word	0x0800e5cc
 8001114:	0800e5d8 	.word	0x0800e5d8
 8001118:	0800e5e4 	.word	0x0800e5e4
 800111c:	0800e5f4 	.word	0x0800e5f4
 8001120:	0800e5f8 	.word	0x0800e5f8
 8001124:	0800e608 	.word	0x0800e608
 8001128:	0800e60c 	.word	0x0800e60c
 800112c:	0800e614 	.word	0x0800e614

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00a fb48 	bl	800b7d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <SystemClock_Config+0xcc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a27      	ldr	r2, [pc, #156]	; (80011fc <SystemClock_Config+0xcc>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <SystemClock_Config+0xcc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <SystemClock_Config+0xd0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <SystemClock_Config+0xd0>)
 800117a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <SystemClock_Config+0xd0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011a0:	2308      	movs	r3, #8
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ae:	2307      	movs	r3, #7
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fbd8 	bl	800596c <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011c2:	f000 f855 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ca:	2302      	movs	r3, #2
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2105      	movs	r1, #5
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 fe39 	bl	8005e5c <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011f0:	f000 f83e 	bl	8001270 <Error_Handler>
  }
}
 80011f4:	bf00      	nop
 80011f6:	3750      	adds	r7, #80	; 0x50
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_GPIO_Init+0x68>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <MX_GPIO_Init+0x68>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_GPIO_Init+0x68>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_GPIO_Init+0x68>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a0f      	ldr	r2, [pc, #60]	; (800126c <MX_GPIO_Init+0x68>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_GPIO_Init+0x68>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_GPIO_Init+0x68>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <MX_GPIO_Init+0x68>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_GPIO_Init+0x68>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	e7fe      	b.n	8001278 <Error_Handler+0x8>
	...

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_MspInit+0x4c>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <HAL_MspInit+0x4c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f001 fe62 	bl	8002fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <OTG_HS_IRQHandler+0x10>)
 8001326:	f003 f9f4 	bl	8004712 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20001aa4 	.word	0x20001aa4

08001334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	return 1;
 8001338:	2301      	movs	r3, #1
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_kill>:

int _kill(int pid, int sig)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800134e:	f00a fa17 	bl	800b780 <__errno>
 8001352:	4603      	mov	r3, r0
 8001354:	2216      	movs	r2, #22
 8001356:	601a      	str	r2, [r3, #0]
	return -1;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <_exit>:

void _exit (int status)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffe7 	bl	8001344 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001376:	e7fe      	b.n	8001376 <_exit+0x12>

08001378 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	e00a      	b.n	80013a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800138a:	f3af 8000 	nop.w
 800138e:	4601      	mov	r1, r0
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	60ba      	str	r2, [r7, #8]
 8001396:	b2ca      	uxtb	r2, r1
 8001398:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbf0      	blt.n	800138a <_read+0x12>
	}

return len;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e009      	b.n	80013d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf1      	blt.n	80013c4 <_write+0x12>
	}
	return len;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_close>:

int _close(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
	return -1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001412:	605a      	str	r2, [r3, #4]
	return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_isatty>:

int _isatty(int file)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
	return 1;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
	return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f00a f97c 	bl	800b780 <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20030000 	.word	0x20030000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	20000364 	.word	0x20000364
 80014bc:	200021e0 	.word	0x200021e0

080014c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001500:	4c0b      	ldr	r4, [pc, #44]	; (8001530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150e:	f7ff ffd7 	bl	80014c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f00a f93b 	bl	800b78c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff fd29 	bl	8000f6c <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800151c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8001528:	0801051c 	.word	0x0801051c
  ldr r2, =_sbss
 800152c:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8001530:	200021e0 	.word	0x200021e0

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>

08001536 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800153a:	f000 fc85 	bl	8001e48 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800153e:	20ca      	movs	r0, #202	; 0xca
 8001540:	f000 f95d 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001544:	20c3      	movs	r0, #195	; 0xc3
 8001546:	f000 f967 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800154a:	2008      	movs	r0, #8
 800154c:	f000 f964 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001550:	2050      	movs	r0, #80	; 0x50
 8001552:	f000 f961 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001556:	20cf      	movs	r0, #207	; 0xcf
 8001558:	f000 f951 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800155c:	2000      	movs	r0, #0
 800155e:	f000 f95b 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001562:	20c1      	movs	r0, #193	; 0xc1
 8001564:	f000 f958 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001568:	2030      	movs	r0, #48	; 0x30
 800156a:	f000 f955 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800156e:	20ed      	movs	r0, #237	; 0xed
 8001570:	f000 f945 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f000 f94f 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800157a:	2003      	movs	r0, #3
 800157c:	f000 f94c 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001580:	2012      	movs	r0, #18
 8001582:	f000 f949 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001586:	2081      	movs	r0, #129	; 0x81
 8001588:	f000 f946 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800158c:	20e8      	movs	r0, #232	; 0xe8
 800158e:	f000 f936 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001592:	2085      	movs	r0, #133	; 0x85
 8001594:	f000 f940 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f000 f93d 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 f93a 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80015a4:	20cb      	movs	r0, #203	; 0xcb
 80015a6:	f000 f92a 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80015aa:	2039      	movs	r0, #57	; 0x39
 80015ac:	f000 f934 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80015b0:	202c      	movs	r0, #44	; 0x2c
 80015b2:	f000 f931 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f92e 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80015bc:	2034      	movs	r0, #52	; 0x34
 80015be:	f000 f92b 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80015c2:	2002      	movs	r0, #2
 80015c4:	f000 f928 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80015c8:	20f7      	movs	r0, #247	; 0xf7
 80015ca:	f000 f918 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80015ce:	2020      	movs	r0, #32
 80015d0:	f000 f922 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80015d4:	20ea      	movs	r0, #234	; 0xea
 80015d6:	f000 f912 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f91c 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 f919 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80015e6:	20b1      	movs	r0, #177	; 0xb1
 80015e8:	f000 f909 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f913 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80015f2:	201b      	movs	r0, #27
 80015f4:	f000 f910 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80015f8:	20b6      	movs	r0, #182	; 0xb6
 80015fa:	f000 f900 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80015fe:	200a      	movs	r0, #10
 8001600:	f000 f90a 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001604:	20a2      	movs	r0, #162	; 0xa2
 8001606:	f000 f907 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800160a:	20c0      	movs	r0, #192	; 0xc0
 800160c:	f000 f8f7 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001610:	2010      	movs	r0, #16
 8001612:	f000 f901 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001616:	20c1      	movs	r0, #193	; 0xc1
 8001618:	f000 f8f1 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800161c:	2010      	movs	r0, #16
 800161e:	f000 f8fb 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001622:	20c5      	movs	r0, #197	; 0xc5
 8001624:	f000 f8eb 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001628:	2045      	movs	r0, #69	; 0x45
 800162a:	f000 f8f5 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800162e:	2015      	movs	r0, #21
 8001630:	f000 f8f2 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001634:	20c7      	movs	r0, #199	; 0xc7
 8001636:	f000 f8e2 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800163a:	2090      	movs	r0, #144	; 0x90
 800163c:	f000 f8ec 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001640:	2036      	movs	r0, #54	; 0x36
 8001642:	f000 f8dc 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001646:	20c8      	movs	r0, #200	; 0xc8
 8001648:	f000 f8e6 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800164c:	20f2      	movs	r0, #242	; 0xf2
 800164e:	f000 f8d6 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f8e0 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001658:	20b0      	movs	r0, #176	; 0xb0
 800165a:	f000 f8d0 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800165e:	20c2      	movs	r0, #194	; 0xc2
 8001660:	f000 f8da 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001664:	20b6      	movs	r0, #182	; 0xb6
 8001666:	f000 f8ca 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800166a:	200a      	movs	r0, #10
 800166c:	f000 f8d4 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001670:	20a7      	movs	r0, #167	; 0xa7
 8001672:	f000 f8d1 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001676:	2027      	movs	r0, #39	; 0x27
 8001678:	f000 f8ce 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800167c:	2004      	movs	r0, #4
 800167e:	f000 f8cb 	bl	8001818 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001682:	202a      	movs	r0, #42	; 0x2a
 8001684:	f000 f8bb 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f8c5 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f8c2 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001694:	2000      	movs	r0, #0
 8001696:	f000 f8bf 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800169a:	20ef      	movs	r0, #239	; 0xef
 800169c:	f000 f8bc 	bl	8001818 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80016a0:	202b      	movs	r0, #43	; 0x2b
 80016a2:	f000 f8ac 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 f8b6 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f000 f8b3 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 f8b0 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80016b8:	203f      	movs	r0, #63	; 0x3f
 80016ba:	f000 f8ad 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80016be:	20f6      	movs	r0, #246	; 0xf6
 80016c0:	f000 f89d 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f000 f8a7 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f8a4 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80016d0:	2006      	movs	r0, #6
 80016d2:	f000 f8a1 	bl	8001818 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80016d6:	202c      	movs	r0, #44	; 0x2c
 80016d8:	f000 f891 	bl	80017fe <ili9341_WriteReg>
  LCD_Delay(200);
 80016dc:	20c8      	movs	r0, #200	; 0xc8
 80016de:	f000 fca1 	bl	8002024 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80016e2:	2026      	movs	r0, #38	; 0x26
 80016e4:	f000 f88b 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f000 f895 	bl	8001818 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80016ee:	20e0      	movs	r0, #224	; 0xe0
 80016f0:	f000 f885 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80016f4:	200f      	movs	r0, #15
 80016f6:	f000 f88f 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80016fa:	2029      	movs	r0, #41	; 0x29
 80016fc:	f000 f88c 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001700:	2024      	movs	r0, #36	; 0x24
 8001702:	f000 f889 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001706:	200c      	movs	r0, #12
 8001708:	f000 f886 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800170c:	200e      	movs	r0, #14
 800170e:	f000 f883 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001712:	2009      	movs	r0, #9
 8001714:	f000 f880 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001718:	204e      	movs	r0, #78	; 0x4e
 800171a:	f000 f87d 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800171e:	2078      	movs	r0, #120	; 0x78
 8001720:	f000 f87a 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001724:	203c      	movs	r0, #60	; 0x3c
 8001726:	f000 f877 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800172a:	2009      	movs	r0, #9
 800172c:	f000 f874 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001730:	2013      	movs	r0, #19
 8001732:	f000 f871 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001736:	2005      	movs	r0, #5
 8001738:	f000 f86e 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800173c:	2017      	movs	r0, #23
 800173e:	f000 f86b 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001742:	2011      	movs	r0, #17
 8001744:	f000 f868 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001748:	2000      	movs	r0, #0
 800174a:	f000 f865 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800174e:	20e1      	movs	r0, #225	; 0xe1
 8001750:	f000 f855 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001754:	2000      	movs	r0, #0
 8001756:	f000 f85f 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800175a:	2016      	movs	r0, #22
 800175c:	f000 f85c 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001760:	201b      	movs	r0, #27
 8001762:	f000 f859 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001766:	2004      	movs	r0, #4
 8001768:	f000 f856 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800176c:	2011      	movs	r0, #17
 800176e:	f000 f853 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001772:	2007      	movs	r0, #7
 8001774:	f000 f850 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001778:	2031      	movs	r0, #49	; 0x31
 800177a:	f000 f84d 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800177e:	2033      	movs	r0, #51	; 0x33
 8001780:	f000 f84a 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001784:	2042      	movs	r0, #66	; 0x42
 8001786:	f000 f847 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800178a:	2005      	movs	r0, #5
 800178c:	f000 f844 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001790:	200c      	movs	r0, #12
 8001792:	f000 f841 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001796:	200a      	movs	r0, #10
 8001798:	f000 f83e 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800179c:	2028      	movs	r0, #40	; 0x28
 800179e:	f000 f83b 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80017a2:	202f      	movs	r0, #47	; 0x2f
 80017a4:	f000 f838 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80017a8:	200f      	movs	r0, #15
 80017aa:	f000 f835 	bl	8001818 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80017ae:	2011      	movs	r0, #17
 80017b0:	f000 f825 	bl	80017fe <ili9341_WriteReg>
  LCD_Delay(200);
 80017b4:	20c8      	movs	r0, #200	; 0xc8
 80017b6:	f000 fc35 	bl	8002024 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80017ba:	2029      	movs	r0, #41	; 0x29
 80017bc:	f000 f81f 	bl	80017fe <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80017c0:	202c      	movs	r0, #44	; 0x2c
 80017c2:	f000 f81c 	bl	80017fe <ili9341_WriteReg>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}

080017ca <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80017ce:	f000 fb3b 	bl	8001e48 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80017d2:	2103      	movs	r1, #3
 80017d4:	20d3      	movs	r0, #211	; 0xd3
 80017d6:	f000 f82c 	bl	8001832 <ili9341_ReadData>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29b      	uxth	r3, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80017e6:	2029      	movs	r0, #41	; 0x29
 80017e8:	f000 f809 	bl	80017fe <ili9341_WriteReg>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80017f4:	2028      	movs	r0, #40	; 0x28
 80017f6:	f000 f802 	bl	80017fe <ili9341_WriteReg>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}

080017fe <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fbb6 	bl	8001f7c <LCD_IO_WriteReg>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fb87 	bl	8001f38 <LCD_IO_WriteData>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	460a      	mov	r2, r1
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	4613      	mov	r3, r2
 8001840:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001842:	797a      	ldrb	r2, [r7, #5]
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fbb9 	bl	8001fc0 <LCD_IO_ReadData>
 800184e:	4603      	mov	r3, r0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800185c:	23f0      	movs	r3, #240	; 0xf0
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800186c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001888:	f000 fbd8 	bl	800203c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001892:	f107 030f 	add.w	r3, r7, #15
 8001896:	2201      	movs	r2, #1
 8001898:	2120      	movs	r1, #32
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fc1a 	bl	80020d4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80018aa:	f107 030f 	add.w	r3, r7, #15
 80018ae:	2201      	movs	r2, #1
 80018b0:	2123      	movs	r1, #35	; 0x23
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fc0e 	bl	80020d4 <GYRO_IO_Write>
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80018d4:	f000 fbb2 	bl	800203c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80018d8:	1dfb      	adds	r3, r7, #7
 80018da:	2201      	movs	r2, #1
 80018dc:	210f      	movs	r1, #15
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fc2a 	bl	8002138 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80018f4:	1dfb      	adds	r3, r7, #7
 80018f6:	2201      	movs	r2, #1
 80018f8:	2124      	movs	r1, #36	; 0x24
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fc1c 	bl	8002138 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001906:	b2db      	uxtb	r3, r3
 8001908:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	2201      	movs	r2, #1
 800190e:	2124      	movs	r1, #36	; 0x24
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fbdf 	bl	80020d4 <GYRO_IO_Write>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001928:	2300      	movs	r3, #0
 800192a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001932:	f107 030f 	add.w	r3, r7, #15
 8001936:	2201      	movs	r2, #1
 8001938:	2120      	movs	r1, #32
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fbca 	bl	80020d4 <GYRO_IO_Write>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	2300      	movs	r3, #0
 8001958:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800195a:	f107 030f 	add.w	r3, r7, #15
 800195e:	2201      	movs	r2, #1
 8001960:	2130      	movs	r1, #48	; 0x30
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fbe8 	bl	8002138 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001968:	f107 030e 	add.w	r3, r7, #14
 800196c:	2201      	movs	r2, #1
 800196e:	2122      	movs	r1, #34	; 0x22
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fbe1 	bl	8002138 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800197c:	b2db      	uxtb	r3, r3
 800197e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	121b      	asrs	r3, r3, #8
 8001986:	b25a      	sxtb	r2, r3
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	b25b      	sxtb	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b25b      	sxtb	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001994:	7bbb      	ldrb	r3, [r7, #14]
 8001996:	f023 0320 	bic.w	r3, r3, #32
 800199a:	b2db      	uxtb	r3, r3
 800199c:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	7bbb      	ldrb	r3, [r7, #14]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80019aa:	f107 030f 	add.w	r3, r7, #15
 80019ae:	2201      	movs	r2, #1
 80019b0:	2130      	movs	r1, #48	; 0x30
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fb8e 	bl	80020d4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80019b8:	f107 030e 	add.w	r3, r7, #14
 80019bc:	2201      	movs	r2, #1
 80019be:	2122      	movs	r1, #34	; 0x22
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fb87 	bl	80020d4 <GYRO_IO_Write>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80019d8:	f107 030f 	add.w	r3, r7, #15
 80019dc:	2201      	movs	r2, #1
 80019de:	2122      	movs	r1, #34	; 0x22
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fba9 	bl	8002138 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10a      	bne.n	8001a02 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e00c      	b.n	8001a1c <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d109      	bne.n	8001a1c <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	f023 0308 	bic.w	r3, r3, #8
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	f043 0308 	orr.w	r3, r3, #8
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001a1c:	f107 030f 	add.w	r3, r7, #15
 8001a20:	2201      	movs	r2, #1
 8001a22:	2122      	movs	r1, #34	; 0x22
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fb55 	bl	80020d4 <GYRO_IO_Write>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001a3c:	f107 030f 	add.w	r3, r7, #15
 8001a40:	2201      	movs	r2, #1
 8001a42:	2122      	movs	r1, #34	; 0x22
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fb77 	bl	8002138 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	e009      	b.n	8001a74 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d106      	bne.n	8001a74 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f023 0308 	bic.w	r3, r3, #8
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001a74:	f107 030f 	add.w	r3, r7, #15
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2122      	movs	r1, #34	; 0x22
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fb29 	bl	80020d4 <GYRO_IO_Write>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001a94:	f107 030f 	add.w	r3, r7, #15
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2121      	movs	r1, #33	; 0x21
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fb4b 	bl	8002138 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001ab6:	f107 030f 	add.w	r3, r7, #15
 8001aba:	2201      	movs	r2, #1
 8001abc:	2121      	movs	r1, #33	; 0x21
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fb08 	bl	80020d4 <GYRO_IO_Write>
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001ad6:	f107 030f 	add.w	r3, r7, #15
 8001ada:	2201      	movs	r2, #1
 8001adc:	2124      	movs	r1, #36	; 0x24
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fb2a 	bl	8002138 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	f023 0310 	bic.w	r3, r3, #16
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001af8:	f107 030f 	add.w	r3, r7, #15
 8001afc:	2201      	movs	r2, #1
 8001afe:	2124      	movs	r1, #36	; 0x24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fae7 	bl	80020d4 <GYRO_IO_Write>
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b08b      	sub	sp, #44	; 0x2c
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001b38:	f107 030f 	add.w	r3, r7, #15
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2123      	movs	r1, #35	; 0x23
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 faf9 	bl	8002138 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001b46:	f107 0318 	add.w	r3, r7, #24
 8001b4a:	2206      	movs	r2, #6
 8001b4c:	2128      	movs	r1, #40	; 0x28
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 faf2 	bl	8002138 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d123      	bne.n	8001ba6 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	e01c      	b.n	8001b9e <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	3301      	adds	r3, #1
 8001b6a:	3328      	adds	r3, #40	; 0x28
 8001b6c:	443b      	add	r3, r7
 8001b6e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	3328      	adds	r3, #40	; 0x28
 8001b7e:	443b      	add	r3, r7
 8001b80:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	3328      	adds	r3, #40	; 0x28
 8001b92:	443b      	add	r3, r7
 8001b94:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	623b      	str	r3, [r7, #32]
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	dddf      	ble.n	8001b64 <L3GD20_ReadXYZAngRate+0x54>
 8001ba4:	e022      	b.n	8001bec <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
 8001baa:	e01c      	b.n	8001be6 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	3328      	adds	r3, #40	; 0x28
 8001bb2:	443b      	add	r3, r7
 8001bb4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	3328      	adds	r3, #40	; 0x28
 8001bc6:	443b      	add	r3, r7
 8001bc8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	3328      	adds	r3, #40	; 0x28
 8001bda:	443b      	add	r3, r7
 8001bdc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	3301      	adds	r3, #1
 8001be4:	623b      	str	r3, [r7, #32]
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	dddf      	ble.n	8001bac <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d00c      	beq.n	8001c10 <L3GD20_ReadXYZAngRate+0x100>
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	dc0d      	bgt.n	8001c16 <L3GD20_ReadXYZAngRate+0x106>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <L3GD20_ReadXYZAngRate+0xf4>
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d003      	beq.n	8001c0a <L3GD20_ReadXYZAngRate+0xfa>
 8001c02:	e008      	b.n	8001c16 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <L3GD20_ReadXYZAngRate+0x170>)
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001c08:	e005      	b.n	8001c16 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <L3GD20_ReadXYZAngRate+0x174>)
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001c0e:	e002      	b.n	8001c16 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <L3GD20_ReadXYZAngRate+0x178>)
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001c14:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
 8001c1a:	e025      	b.n	8001c68 <L3GD20_ReadXYZAngRate+0x158>
  {
    pfData[i]=(float)(RawData[i] * sensitivity * 0.001);
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	3328      	adds	r3, #40	; 0x28
 8001c22:	443b      	add	r3, r7
 8001c24:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c38:	ee17 0a90 	vmov	r0, s15
 8001c3c:	f7fe fc94 	bl	8000568 <__aeabi_f2d>
 8001c40:	a30d      	add	r3, pc, #52	; (adr r3, 8001c78 <L3GD20_ReadXYZAngRate+0x168>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fce7 	bl	8000618 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	18d4      	adds	r4, r2, r3
 8001c5a:	f7fe ffb5 	bl	8000bc8 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6023      	str	r3, [r4, #0]
  for(i=0; i<3; i++)
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	3301      	adds	r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	ddd6      	ble.n	8001c1c <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	372c      	adds	r7, #44	; 0x2c
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}
 8001c78:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c7c:	3f50624d 	.word	0x3f50624d
 8001c80:	410c0000 	.word	0x410c0000
 8001c84:	418c0000 	.word	0x418c0000
 8001c88:	428c0000 	.word	0x428c0000

08001c8c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001c90:	4819      	ldr	r0, [pc, #100]	; (8001cf8 <SPIx_Init+0x6c>)
 8001c92:	f005 f9ea 	bl	800706a <HAL_SPI_GetState>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d12b      	bne.n	8001cf4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <SPIx_Init+0x6c>)
 8001c9e:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <SPIx_Init+0x70>)
 8001ca0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <SPIx_Init+0x6c>)
 8001ca4:	2218      	movs	r2, #24
 8001ca6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <SPIx_Init+0x6c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <SPIx_Init+0x6c>)
 8001ce2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001ce8:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cea:	f000 f873 	bl	8001dd4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001cee:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <SPIx_Init+0x6c>)
 8001cf0:	f004 fd07 	bl	8006702 <HAL_SPI_Init>
  } 
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000368 	.word	0x20000368
 8001cfc:	40015000 	.word	0x40015000

08001d00 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <SPIx_Read+0x38>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f107 0108 	add.w	r1, r7, #8
 8001d1a:	4808      	ldr	r0, [pc, #32]	; (8001d3c <SPIx_Read+0x3c>)
 8001d1c:	f004 fef2 	bl	8006b04 <HAL_SPI_Receive>
 8001d20:	4603      	mov	r3, r0
 8001d22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001d2a:	f000 f847 	bl	8001dbc <SPIx_Error>
  }
  
  return readvalue;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000070 	.word	0x20000070
 8001d3c:	20000368 	.word	0x20000368

08001d40 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <SPIx_Write+0x34>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	1db9      	adds	r1, r7, #6
 8001d54:	2201      	movs	r2, #1
 8001d56:	4808      	ldr	r0, [pc, #32]	; (8001d78 <SPIx_Write+0x38>)
 8001d58:	f004 fd98 	bl	800688c <HAL_SPI_Transmit>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001d66:	f000 f829 	bl	8001dbc <SPIx_Error>
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000070 	.word	0x20000070
 8001d78:	20000368 	.word	0x20000368

08001d7c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <SPIx_WriteRead+0x38>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f107 020f 	add.w	r2, r7, #15
 8001d92:	1df9      	adds	r1, r7, #7
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2301      	movs	r3, #1
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <SPIx_WriteRead+0x3c>)
 8001d9a:	f004 ffc4 	bl	8006d26 <HAL_SPI_TransmitReceive>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001da4:	f000 f80a 	bl	8001dbc <SPIx_Error>
  }
  
  return receivedbyte;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000070 	.word	0x20000070
 8001db8:	20000368 	.word	0x20000368

08001dbc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <SPIx_Error+0x14>)
 8001dc2:	f004 fd27 	bl	8006814 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001dc6:	f7ff ff61 	bl	8001c8c <SPIx_Init>
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000368 	.word	0x20000368

08001dd4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <SPIx_MspInit+0x6c>)
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <SPIx_MspInit+0x6c>)
 8001de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dea:	6453      	str	r3, [r2, #68]	; 0x44
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <SPIx_MspInit+0x6c>)
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <SPIx_MspInit+0x6c>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a0f      	ldr	r2, [pc, #60]	; (8001e40 <SPIx_MspInit+0x6c>)
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <SPIx_MspInit+0x6c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001e14:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001e22:	2301      	movs	r3, #1
 8001e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001e26:	2305      	movs	r3, #5
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <SPIx_MspInit+0x70>)
 8001e32:	f001 fe7f 	bl	8003b34 <HAL_GPIO_Init>
}
 8001e36:	bf00      	nop
 8001e38:	3728      	adds	r7, #40	; 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40021400 	.word	0x40021400

08001e48 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001e4e:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <LCD_IO_Init+0xe0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d164      	bne.n	8001f20 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001e56:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <LCD_IO_Init+0xe0>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <LCD_IO_Init+0xe4>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <LCD_IO_Init+0xe4>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <LCD_IO_Init+0xe4>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4827      	ldr	r0, [pc, #156]	; (8001f30 <LCD_IO_Init+0xe8>)
 8001e92:	f001 fe4f 	bl	8003b34 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <LCD_IO_Init+0xe4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <LCD_IO_Init+0xe4>)
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <LCD_IO_Init+0xe4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4819      	ldr	r0, [pc, #100]	; (8001f30 <LCD_IO_Init+0xe8>)
 8001ecc:	f001 fe32 	bl	8003b34 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <LCD_IO_Init+0xe4>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <LCD_IO_Init+0xe4>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <LCD_IO_Init+0xe4>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001eec:	2304      	movs	r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	4619      	mov	r1, r3
 8001f02:	480c      	ldr	r0, [pc, #48]	; (8001f34 <LCD_IO_Init+0xec>)
 8001f04:	f001 fe16 	bl	8003b34 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	4809      	ldr	r0, [pc, #36]	; (8001f34 <LCD_IO_Init+0xec>)
 8001f0e:	f001 ffbd 	bl	8003e8c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001f12:	2201      	movs	r2, #1
 8001f14:	2104      	movs	r1, #4
 8001f16:	4807      	ldr	r0, [pc, #28]	; (8001f34 <LCD_IO_Init+0xec>)
 8001f18:	f001 ffb8 	bl	8003e8c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001f1c:	f7ff feb6 	bl	8001c8c <SPIx_Init>
  }
}
 8001f20:	bf00      	nop
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200003c0 	.word	0x200003c0
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40020800 	.word	0x40020800

08001f38 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f48:	480a      	ldr	r0, [pc, #40]	; (8001f74 <LCD_IO_WriteData+0x3c>)
 8001f4a:	f001 ff9f 	bl	8003e8c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2104      	movs	r1, #4
 8001f52:	4809      	ldr	r0, [pc, #36]	; (8001f78 <LCD_IO_WriteData+0x40>)
 8001f54:	f001 ff9a 	bl	8003e8c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fef0 	bl	8001d40 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f60:	2201      	movs	r2, #1
 8001f62:	2104      	movs	r1, #4
 8001f64:	4804      	ldr	r0, [pc, #16]	; (8001f78 <LCD_IO_WriteData+0x40>)
 8001f66:	f001 ff91 	bl	8003e8c <HAL_GPIO_WritePin>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40020800 	.word	0x40020800

08001f7c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001f86:	2200      	movs	r2, #0
 8001f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8c:	480a      	ldr	r0, [pc, #40]	; (8001fb8 <LCD_IO_WriteReg+0x3c>)
 8001f8e:	f001 ff7d 	bl	8003e8c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001f92:	2200      	movs	r2, #0
 8001f94:	2104      	movs	r1, #4
 8001f96:	4809      	ldr	r0, [pc, #36]	; (8001fbc <LCD_IO_WriteReg+0x40>)
 8001f98:	f001 ff78 	bl	8003e8c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fecd 	bl	8001d40 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2104      	movs	r1, #4
 8001faa:	4804      	ldr	r0, [pc, #16]	; (8001fbc <LCD_IO_WriteReg+0x40>)
 8001fac:	f001 ff6e 	bl	8003e8c <HAL_GPIO_WritePin>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40020c00 	.word	0x40020c00
 8001fbc:	40020800 	.word	0x40020800

08001fc0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460a      	mov	r2, r1
 8001fca:	80fb      	strh	r3, [r7, #6]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	4810      	ldr	r0, [pc, #64]	; (800201c <LCD_IO_ReadData+0x5c>)
 8001fda:	f001 ff57 	bl	8003e8c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe4:	480e      	ldr	r0, [pc, #56]	; (8002020 <LCD_IO_ReadData+0x60>)
 8001fe6:	f001 ff51 	bl	8003e8c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fea7 	bl	8001d40 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001ff2:	797b      	ldrb	r3, [r7, #5]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fe83 	bl	8001d00 <SPIx_Read>
 8001ffa:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002002:	4807      	ldr	r0, [pc, #28]	; (8002020 <LCD_IO_ReadData+0x60>)
 8002004:	f001 ff42 	bl	8003e8c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002008:	2201      	movs	r2, #1
 800200a:	2104      	movs	r1, #4
 800200c:	4803      	ldr	r0, [pc, #12]	; (800201c <LCD_IO_ReadData+0x5c>)
 800200e:	f001 ff3d 	bl	8003e8c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00

08002024 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fff7 	bl	8003020 <HAL_Delay>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <GYRO_IO_Init+0x8c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <GYRO_IO_Init+0x8c>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <GYRO_IO_Init+0x8c>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800205e:	2302      	movs	r3, #2
 8002060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	4619      	mov	r1, r3
 8002074:	4815      	ldr	r0, [pc, #84]	; (80020cc <GYRO_IO_Init+0x90>)
 8002076:	f001 fd5d 	bl	8003b34 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800207a:	2201      	movs	r2, #1
 800207c:	2102      	movs	r1, #2
 800207e:	4813      	ldr	r0, [pc, #76]	; (80020cc <GYRO_IO_Init+0x90>)
 8002080:	f001 ff04 	bl	8003e8c <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <GYRO_IO_Init+0x8c>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <GYRO_IO_Init+0x8c>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <GYRO_IO_Init+0x8c>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80020a0:	2306      	movs	r3, #6
 80020a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	4619      	mov	r1, r3
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <GYRO_IO_Init+0x94>)
 80020b8:	f001 fd3c 	bl	8003b34 <HAL_GPIO_Init>

  SPIx_Init();
 80020bc:	f7ff fde6 	bl	8001c8c <SPIx_Init>
}
 80020c0:	bf00      	nop
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020000 	.word	0x40020000

080020d4 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
 80020e0:	4613      	mov	r3, r2
 80020e2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80020e4:	883b      	ldrh	r3, [r7, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d903      	bls.n	80020f2 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020f0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80020f2:	2200      	movs	r2, #0
 80020f4:	2102      	movs	r1, #2
 80020f6:	480f      	ldr	r0, [pc, #60]	; (8002134 <GYRO_IO_Write+0x60>)
 80020f8:	f001 fec8 	bl	8003e8c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fe3c 	bl	8001d7c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002104:	e00a      	b.n	800211c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fe36 	bl	8001d7c <SPIx_WriteRead>
    NumByteToWrite--;
 8002110:	883b      	ldrh	r3, [r7, #0]
 8002112:	3b01      	subs	r3, #1
 8002114:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3301      	adds	r3, #1
 800211a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800211c:	883b      	ldrh	r3, [r7, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f1      	bne.n	8002106 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002122:	2201      	movs	r2, #1
 8002124:	2102      	movs	r1, #2
 8002126:	4803      	ldr	r0, [pc, #12]	; (8002134 <GYRO_IO_Write+0x60>)
 8002128:	f001 feb0 	bl	8003e8c <HAL_GPIO_WritePin>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40020800 	.word	0x40020800

08002138 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
 8002144:	4613      	mov	r3, r2
 8002146:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002148:	883b      	ldrh	r3, [r7, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d904      	bls.n	8002158 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002154:	70fb      	strb	r3, [r7, #3]
 8002156:	e003      	b.n	8002160 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800215e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002160:	2200      	movs	r2, #0
 8002162:	2102      	movs	r1, #2
 8002164:	4810      	ldr	r0, [pc, #64]	; (80021a8 <GYRO_IO_Read+0x70>)
 8002166:	f001 fe91 	bl	8003e8c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fe05 	bl	8001d7c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002172:	e00c      	b.n	800218e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff fe01 	bl	8001d7c <SPIx_WriteRead>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002182:	883b      	ldrh	r3, [r7, #0]
 8002184:	3b01      	subs	r3, #1
 8002186:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3301      	adds	r3, #1
 800218c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800218e:	883b      	ldrh	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ef      	bne.n	8002174 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002194:	2201      	movs	r2, #1
 8002196:	2102      	movs	r1, #2
 8002198:	4803      	ldr	r0, [pc, #12]	; (80021a8 <GYRO_IO_Read+0x70>)
 800219a:	f001 fe77 	bl	8003e8c <HAL_GPIO_WritePin>
}  
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40020800 	.word	0x40020800

080021ac <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80021b6:	2300      	movs	r3, #0
 80021b8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80021ba:	2300      	movs	r3, #0
 80021bc:	703b      	strb	r3, [r7, #0]
 80021be:	2300      	movs	r3, #0
 80021c0:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <BSP_GYRO_Init+0xc4>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4798      	blx	r3
 80021c8:	4603      	mov	r3, r0
 80021ca:	2bd4      	cmp	r3, #212	; 0xd4
 80021cc:	d005      	beq.n	80021da <BSP_GYRO_Init+0x2e>
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <BSP_GYRO_Init+0xc4>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4798      	blx	r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	2bd5      	cmp	r3, #213	; 0xd5
 80021d8:	d145      	bne.n	8002266 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80021da:	4b26      	ldr	r3, [pc, #152]	; (8002274 <BSP_GYRO_Init+0xc8>)
 80021dc:	4a24      	ldr	r2, [pc, #144]	; (8002270 <BSP_GYRO_Init+0xc4>)
 80021de:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80021e0:	2308      	movs	r3, #8
 80021e2:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80021e8:	2307      	movs	r3, #7
 80021ea:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80021ec:	2330      	movs	r3, #48	; 0x30
 80021ee:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80021f0:	2300      	movs	r3, #0
 80021f2:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80021f4:	2300      	movs	r3, #0
 80021f6:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80021f8:	2310      	movs	r3, #16
 80021fa:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80021fc:	793a      	ldrb	r2, [r7, #4]
 80021fe:	797b      	ldrb	r3, [r7, #5]
 8002200:	4313      	orrs	r3, r2
 8002202:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002204:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002206:	4313      	orrs	r3, r2
 8002208:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800220a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800220c:	4313      	orrs	r3, r2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002212:	7a3a      	ldrb	r2, [r7, #8]
 8002214:	7a7b      	ldrb	r3, [r7, #9]
 8002216:	4313      	orrs	r3, r2
 8002218:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800221a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800221c:	4313      	orrs	r3, r2
 800221e:	b2db      	uxtb	r3, r3
 8002220:	b29b      	uxth	r3, r3
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b29a      	uxth	r2, r3
 8002226:	89bb      	ldrh	r3, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <BSP_GYRO_Init+0xc8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	89ba      	ldrh	r2, [r7, #12]
 8002234:	4610      	mov	r0, r2
 8002236:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002238:	2300      	movs	r3, #0
 800223a:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 800223c:	2300      	movs	r3, #0
 800223e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002240:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002242:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002244:	4313      	orrs	r3, r2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <BSP_GYRO_Init+0xc8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	89ba      	ldrh	r2, [r7, #12]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	4610      	mov	r0, r2
 8002256:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <BSP_GYRO_Init+0xc8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	2010      	movs	r0, #16
 8002260:	4798      	blx	r3

    ret = GYRO_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000003c 	.word	0x2000003c
 8002274:	200003c4 	.word	0x200003c4

08002278 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <BSP_LCD_Init+0xbc>)
 800227e:	4a2e      	ldr	r2, [pc, #184]	; (8002338 <BSP_LCD_Init+0xc0>)
 8002280:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002282:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <BSP_LCD_Init+0xbc>)
 8002284:	2209      	movs	r2, #9
 8002286:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <BSP_LCD_Init+0xbc>)
 800228a:	2201      	movs	r2, #1
 800228c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <BSP_LCD_Init+0xbc>)
 8002290:	221d      	movs	r2, #29
 8002292:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <BSP_LCD_Init+0xbc>)
 8002296:	2203      	movs	r2, #3
 8002298:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <BSP_LCD_Init+0xbc>)
 800229c:	f240 120d 	movw	r2, #269	; 0x10d
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <BSP_LCD_Init+0xbc>)
 80022a4:	f240 1243 	movw	r2, #323	; 0x143
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <BSP_LCD_Init+0xbc>)
 80022ac:	f240 1217 	movw	r2, #279	; 0x117
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <BSP_LCD_Init+0xbc>)
 80022b4:	f240 1247 	movw	r2, #327	; 0x147
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <BSP_LCD_Init+0xbc>)
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <BSP_LCD_Init+0xbc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <BSP_LCD_Init+0xbc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <BSP_LCD_Init+0xc4>)
 80022d4:	2208      	movs	r2, #8
 80022d6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <BSP_LCD_Init+0xc4>)
 80022da:	22c0      	movs	r2, #192	; 0xc0
 80022dc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <BSP_LCD_Init+0xc4>)
 80022e0:	2204      	movs	r2, #4
 80022e2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <BSP_LCD_Init+0xc4>)
 80022e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80022ec:	4813      	ldr	r0, [pc, #76]	; (800233c <BSP_LCD_Init+0xc4>)
 80022ee:	f003 ffad 	bl	800624c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <BSP_LCD_Init+0xbc>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <BSP_LCD_Init+0xbc>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <BSP_LCD_Init+0xbc>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <BSP_LCD_Init+0xbc>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800230a:	f000 fa5f 	bl	80027cc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800230e:	4809      	ldr	r0, [pc, #36]	; (8002334 <BSP_LCD_Init+0xbc>)
 8002310:	f001 fdd6 	bl	8003ec0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <BSP_LCD_Init+0xc8>)
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <BSP_LCD_Init+0xcc>)
 8002318:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <BSP_LCD_Init+0xc8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002322:	f000 fc41 	bl	8002ba8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002326:	4808      	ldr	r0, [pc, #32]	; (8002348 <BSP_LCD_Init+0xd0>)
 8002328:	f000 f8ce 	bl	80024c8 <BSP_LCD_SetFont>

  return LCD_OK;
 800232c:	2300      	movs	r3, #0
}  
 800232e:	4618      	mov	r0, r3
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200003c8 	.word	0x200003c8
 8002338:	40016800 	.word	0x40016800
 800233c:	200004b0 	.word	0x200004b0
 8002340:	200004fc 	.word	0x200004fc
 8002344:	20000004 	.word	0x20000004
 8002348:	20000074 	.word	0x20000074

0800234c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <BSP_LCD_GetXSize+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	4798      	blx	r3
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200004fc 	.word	0x200004fc

08002364 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <BSP_LCD_GetYSize+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	4798      	blx	r3
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200004fc 	.word	0x200004fc

0800237c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800237c:	b580      	push	{r7, lr}
 800237e:	b090      	sub	sp, #64	; 0x40
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800238c:	f7ff ffde 	bl	800234c <BSP_LCD_GetXSize>
 8002390:	4603      	mov	r3, r0
 8002392:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002398:	f7ff ffe4 	bl	8002364 <BSP_LCD_GetYSize>
 800239c:	4603      	mov	r3, r0
 800239e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80023a8:	23ff      	movs	r3, #255	; 0xff
 80023aa:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80023c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023c8:	2307      	movs	r3, #7
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80023cc:	f7ff ffbe 	bl	800234c <BSP_LCD_GetXSize>
 80023d0:	4603      	mov	r3, r0
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80023d4:	f7ff ffc6 	bl	8002364 <BSP_LCD_GetYSize>
 80023d8:	4603      	mov	r3, r0
 80023da:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4619      	mov	r1, r3
 80023e4:	4814      	ldr	r0, [pc, #80]	; (8002438 <BSP_LCD_LayerDefaultInit+0xbc>)
 80023e6:	f001 fe45 	bl	8004074 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	4913      	ldr	r1, [pc, #76]	; (800243c <BSP_LCD_LayerDefaultInit+0xc0>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3304      	adds	r3, #4
 80023fa:	f04f 32ff 	mov.w	r2, #4294967295
 80023fe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002400:	88fa      	ldrh	r2, [r7, #6]
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3308      	adds	r3, #8
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002412:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	4909      	ldr	r1, [pc, #36]	; (800243c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002426:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002428:	4803      	ldr	r0, [pc, #12]	; (8002438 <BSP_LCD_LayerDefaultInit+0xbc>)
 800242a:	f001 fe61 	bl	80040f0 <HAL_LTDC_EnableDither>
}
 800242e:	bf00      	nop
 8002430:	3740      	adds	r7, #64	; 0x40
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200003c8 	.word	0x200003c8
 800243c:	200004e4 	.word	0x200004e4
 8002440:	20000074 	.word	0x20000074

08002444 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <BSP_LCD_SelectLayer+0x1c>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200004e0 	.word	0x200004e0

08002464 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <BSP_LCD_SetTextColor+0x28>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <BSP_LCD_SetTextColor+0x2c>)
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	200004e0 	.word	0x200004e0
 8002490:	200004e4 	.word	0x200004e4

08002494 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <BSP_LCD_SetBackColor+0x2c>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4908      	ldr	r1, [pc, #32]	; (80024c4 <BSP_LCD_SetBackColor+0x30>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3304      	adds	r3, #4
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	200004e0 	.word	0x200004e0
 80024c4:	200004e4 	.word	0x200004e4

080024c8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <BSP_LCD_SetFont+0x2c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4908      	ldr	r1, [pc, #32]	; (80024f8 <BSP_LCD_SetFont+0x30>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3308      	adds	r3, #8
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	601a      	str	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	200004e0 	.word	0x200004e0
 80024f8:	200004e4 	.word	0x200004e4

080024fc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <BSP_LCD_GetFont+0x24>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4907      	ldr	r1, [pc, #28]	; (8002524 <BSP_LCD_GetFont+0x28>)
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3308      	adds	r3, #8
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	200004e0 	.word	0x200004e0
 8002524:	200004e4 	.word	0x200004e4

08002528 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af02      	add	r7, sp, #8
 800252e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <BSP_LCD_Clear+0x48>)
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <BSP_LCD_Clear+0x48>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <BSP_LCD_Clear+0x4c>)
 800253a:	2134      	movs	r1, #52	; 0x34
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	335c      	adds	r3, #92	; 0x5c
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461e      	mov	r6, r3
 8002548:	f7ff ff00 	bl	800234c <BSP_LCD_GetXSize>
 800254c:	4605      	mov	r5, r0
 800254e:	f7ff ff09 	bl	8002364 <BSP_LCD_GetYSize>
 8002552:	4602      	mov	r2, r0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	2300      	movs	r3, #0
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	462a      	mov	r2, r5
 8002560:	4631      	mov	r1, r6
 8002562:	4620      	mov	r0, r4
 8002564:	f000 fae8 	bl	8002b38 <FillBuffer>
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002570:	200004e0 	.word	0x200004e0
 8002574:	200003c8 	.word	0x200003c8

08002578 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
 8002582:	460b      	mov	r3, r1
 8002584:	80bb      	strh	r3, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <BSP_LCD_DisplayChar+0x80>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	491b      	ldr	r1, [pc, #108]	; (80025fc <BSP_LCD_DisplayChar+0x84>)
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	3308      	adds	r3, #8
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <BSP_LCD_DisplayChar+0x80>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4c14      	ldr	r4, [pc, #80]	; (80025fc <BSP_LCD_DisplayChar+0x84>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4423      	add	r3, r4
 80025b6:	3308      	adds	r3, #8
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80025bc:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <BSP_LCD_DisplayChar+0x80>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4c0d      	ldr	r4, [pc, #52]	; (80025fc <BSP_LCD_DisplayChar+0x84>)
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4423      	add	r3, r4
 80025d0:	3308      	adds	r3, #8
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	889b      	ldrh	r3, [r3, #4]
 80025d6:	3307      	adds	r3, #7
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da00      	bge.n	80025de <BSP_LCD_DisplayChar+0x66>
 80025dc:	3307      	adds	r3, #7
 80025de:	10db      	asrs	r3, r3, #3
 80025e0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80025e4:	18ca      	adds	r2, r1, r3
 80025e6:	88b9      	ldrh	r1, [r7, #4]
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f9ea 	bl	80029c4 <DrawChar>
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}
 80025f8:	200004e0 	.word	0x200004e0
 80025fc:	200004e4 	.word	0x200004e4

08002600 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002600:	b5b0      	push	{r4, r5, r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	60ba      	str	r2, [r7, #8]
 8002608:	461a      	mov	r2, r3
 800260a:	4603      	mov	r3, r0
 800260c:	81fb      	strh	r3, [r7, #14]
 800260e:	460b      	mov	r3, r1
 8002610:	81bb      	strh	r3, [r7, #12]
 8002612:	4613      	mov	r3, r2
 8002614:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002616:	2301      	movs	r3, #1
 8002618:	83fb      	strh	r3, [r7, #30]
 800261a:	2300      	movs	r3, #0
 800261c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800262a:	e002      	b.n	8002632 <BSP_LCD_DisplayStringAt+0x32>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	3301      	adds	r3, #1
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	617a      	str	r2, [r7, #20]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f6      	bne.n	800262c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800263e:	f7ff fe85 	bl	800234c <BSP_LCD_GetXSize>
 8002642:	4601      	mov	r1, r0
 8002644:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <BSP_LCD_DisplayStringAt+0x174>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	484b      	ldr	r0, [pc, #300]	; (8002778 <BSP_LCD_DisplayStringAt+0x178>)
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4403      	add	r3, r0
 8002654:	3308      	adds	r3, #8
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	889b      	ldrh	r3, [r3, #4]
 800265a:	fbb1 f3f3 	udiv	r3, r1, r3
 800265e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d01c      	beq.n	80026a0 <BSP_LCD_DisplayStringAt+0xa0>
 8002666:	2b03      	cmp	r3, #3
 8002668:	dc33      	bgt.n	80026d2 <BSP_LCD_DisplayStringAt+0xd2>
 800266a:	2b01      	cmp	r3, #1
 800266c:	d002      	beq.n	8002674 <BSP_LCD_DisplayStringAt+0x74>
 800266e:	2b02      	cmp	r3, #2
 8002670:	d019      	beq.n	80026a6 <BSP_LCD_DisplayStringAt+0xa6>
 8002672:	e02e      	b.n	80026d2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	1ad1      	subs	r1, r2, r3
 800267a:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <BSP_LCD_DisplayStringAt+0x174>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	483e      	ldr	r0, [pc, #248]	; (8002778 <BSP_LCD_DisplayStringAt+0x178>)
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4403      	add	r3, r0
 800268a:	3308      	adds	r3, #8
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	889b      	ldrh	r3, [r3, #4]
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	89fb      	ldrh	r3, [r7, #14]
 800269a:	4413      	add	r3, r2
 800269c:	83fb      	strh	r3, [r7, #30]
      break;
 800269e:	e01b      	b.n	80026d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80026a0:	89fb      	ldrh	r3, [r7, #14]
 80026a2:	83fb      	strh	r3, [r7, #30]
      break;
 80026a4:	e018      	b.n	80026d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	b299      	uxth	r1, r3
 80026ae:	4b31      	ldr	r3, [pc, #196]	; (8002774 <BSP_LCD_DisplayStringAt+0x174>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4831      	ldr	r0, [pc, #196]	; (8002778 <BSP_LCD_DisplayStringAt+0x178>)
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4403      	add	r3, r0
 80026be:	3308      	adds	r3, #8
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	889b      	ldrh	r3, [r3, #4]
 80026c4:	fb11 f303 	smulbb	r3, r1, r3
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	89fb      	ldrh	r3, [r7, #14]
 80026cc:	4413      	add	r3, r2
 80026ce:	83fb      	strh	r3, [r7, #30]
      break;
 80026d0:	e002      	b.n	80026d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80026d2:	89fb      	ldrh	r3, [r7, #14]
 80026d4:	83fb      	strh	r3, [r7, #30]
      break;
 80026d6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80026d8:	e01a      	b.n	8002710 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	89b9      	ldrh	r1, [r7, #12]
 80026e0:	8bfb      	ldrh	r3, [r7, #30]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff48 	bl	8002578 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <BSP_LCD_DisplayStringAt+0x174>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4922      	ldr	r1, [pc, #136]	; (8002778 <BSP_LCD_DisplayStringAt+0x178>)
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	3308      	adds	r3, #8
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	889a      	ldrh	r2, [r3, #4]
 80026fe:	8bfb      	ldrh	r3, [r7, #30]
 8002700:	4413      	add	r3, r2
 8002702:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3301      	adds	r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
    i++;
 800270a:	8bbb      	ldrh	r3, [r7, #28]
 800270c:	3301      	adds	r3, #1
 800270e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2dc      	uxtb	r4, r3
 800271e:	f7ff fe15 	bl	800234c <BSP_LCD_GetXSize>
 8002722:	8bb9      	ldrh	r1, [r7, #28]
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <BSP_LCD_DisplayStringAt+0x174>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4d13      	ldr	r5, [pc, #76]	; (8002778 <BSP_LCD_DisplayStringAt+0x178>)
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	442b      	add	r3, r5
 8002734:	3308      	adds	r3, #8
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	889b      	ldrh	r3, [r3, #4]
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	1ac3      	subs	r3, r0, r3
 8002740:	b299      	uxth	r1, r3
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <BSP_LCD_DisplayStringAt+0x174>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	480c      	ldr	r0, [pc, #48]	; (8002778 <BSP_LCD_DisplayStringAt+0x178>)
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4403      	add	r3, r0
 8002752:	3308      	adds	r3, #8
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	889b      	ldrh	r3, [r3, #4]
 8002758:	4299      	cmp	r1, r3
 800275a:	bf2c      	ite	cs
 800275c:	2301      	movcs	r3, #1
 800275e:	2300      	movcc	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4023      	ands	r3, r4
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1b7      	bne.n	80026da <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bdb0      	pop	{r4, r5, r7, pc}
 8002774:	200004e0 	.word	0x200004e0
 8002778:	200004e4 	.word	0x200004e4

0800277c <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002788:	f7ff feb8 	bl	80024fc <BSP_LCD_GetFont>
 800278c:	4603      	mov	r3, r0
 800278e:	88db      	ldrh	r3, [r3, #6]
 8002790:	88fa      	ldrh	r2, [r7, #6]
 8002792:	fb12 f303 	smulbb	r3, r2, r3
 8002796:	b299      	uxth	r1, r3
 8002798:	2303      	movs	r3, #3
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	2000      	movs	r0, #0
 800279e:	f7ff ff2f 	bl	8002600 <BSP_LCD_DisplayStringAt>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <BSP_LCD_DisplayOn+0x1c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80027ba:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <BSP_LCD_DisplayOn+0x1c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4798      	blx	r3
  }
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200004fc 	.word	0x200004fc

080027cc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08e      	sub	sp, #56	; 0x38
 80027d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	4b61      	ldr	r3, [pc, #388]	; (800295c <BSP_LCD_MspInit+0x190>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a60      	ldr	r2, [pc, #384]	; (800295c <BSP_LCD_MspInit+0x190>)
 80027dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b5e      	ldr	r3, [pc, #376]	; (800295c <BSP_LCD_MspInit+0x190>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	4b5a      	ldr	r3, [pc, #360]	; (800295c <BSP_LCD_MspInit+0x190>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a59      	ldr	r2, [pc, #356]	; (800295c <BSP_LCD_MspInit+0x190>)
 80027f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b57      	ldr	r3, [pc, #348]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	4b53      	ldr	r3, [pc, #332]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a52      	ldr	r2, [pc, #328]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b50      	ldr	r3, [pc, #320]	; (800295c <BSP_LCD_MspInit+0x190>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	4b4c      	ldr	r3, [pc, #304]	; (800295c <BSP_LCD_MspInit+0x190>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a4b      	ldr	r2, [pc, #300]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b49      	ldr	r3, [pc, #292]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b45      	ldr	r3, [pc, #276]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a44      	ldr	r2, [pc, #272]	; (800295c <BSP_LCD_MspInit+0x190>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b42      	ldr	r3, [pc, #264]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b3e      	ldr	r3, [pc, #248]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a3d      	ldr	r2, [pc, #244]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b3b      	ldr	r3, [pc, #236]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	4b37      	ldr	r3, [pc, #220]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a36      	ldr	r2, [pc, #216]	; (800295c <BSP_LCD_MspInit+0x190>)
 8002884:	f043 0320 	orr.w	r3, r3, #32
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b34      	ldr	r3, [pc, #208]	; (800295c <BSP_LCD_MspInit+0x190>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	4b30      	ldr	r3, [pc, #192]	; (800295c <BSP_LCD_MspInit+0x190>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a2f      	ldr	r2, [pc, #188]	; (800295c <BSP_LCD_MspInit+0x190>)
 80028a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <BSP_LCD_MspInit+0x190>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80028b2:	f641 0358 	movw	r3, #6232	; 0x1858
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80028c0:	2302      	movs	r3, #2
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80028c4:	230e      	movs	r3, #14
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028cc:	4619      	mov	r1, r3
 80028ce:	4824      	ldr	r0, [pc, #144]	; (8002960 <BSP_LCD_MspInit+0x194>)
 80028d0:	f001 f930 	bl	8003b34 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80028d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80028da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028de:	4619      	mov	r1, r3
 80028e0:	4820      	ldr	r0, [pc, #128]	; (8002964 <BSP_LCD_MspInit+0x198>)
 80028e2:	f001 f927 	bl	8003b34 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80028e6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80028ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f0:	4619      	mov	r1, r3
 80028f2:	481d      	ldr	r0, [pc, #116]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 80028f4:	f001 f91e 	bl	8003b34 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80028f8:	2348      	movs	r3, #72	; 0x48
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80028fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002900:	4619      	mov	r1, r3
 8002902:	481a      	ldr	r0, [pc, #104]	; (800296c <BSP_LCD_MspInit+0x1a0>)
 8002904:	f001 f916 	bl	8003b34 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800290e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002912:	4619      	mov	r1, r3
 8002914:	4816      	ldr	r0, [pc, #88]	; (8002970 <BSP_LCD_MspInit+0x1a4>)
 8002916:	f001 f90d 	bl	8003b34 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800291a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002924:	4619      	mov	r1, r3
 8002926:	4813      	ldr	r0, [pc, #76]	; (8002974 <BSP_LCD_MspInit+0x1a8>)
 8002928:	f001 f904 	bl	8003b34 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800292c:	2303      	movs	r3, #3
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002930:	2309      	movs	r3, #9
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	480a      	ldr	r0, [pc, #40]	; (8002964 <BSP_LCD_MspInit+0x198>)
 800293c:	f001 f8fa 	bl	8003b34 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002940:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294a:	4619      	mov	r1, r3
 800294c:	4809      	ldr	r0, [pc, #36]	; (8002974 <BSP_LCD_MspInit+0x1a8>)
 800294e:	f001 f8f1 	bl	8003b34 <HAL_GPIO_Init>
}
 8002952:	bf00      	nop
 8002954:	3738      	adds	r7, #56	; 0x38
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40020000 	.word	0x40020000
 8002964:	40020400 	.word	0x40020400
 8002968:	40020800 	.word	0x40020800
 800296c:	40020c00 	.word	0x40020c00
 8002970:	40021400 	.word	0x40021400
 8002974:	40021800 	.word	0x40021800

08002978 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	603a      	str	r2, [r7, #0]
 8002982:	80fb      	strh	r3, [r7, #6]
 8002984:	460b      	mov	r3, r1
 8002986:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <BSP_LCD_DrawPixel+0x44>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <BSP_LCD_DrawPixel+0x48>)
 800298e:	2134      	movs	r1, #52	; 0x34
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	335c      	adds	r3, #92	; 0x5c
 8002998:	681c      	ldr	r4, [r3, #0]
 800299a:	88bd      	ldrh	r5, [r7, #4]
 800299c:	f7ff fcd6 	bl	800234c <BSP_LCD_GetXSize>
 80029a0:	4603      	mov	r3, r0
 80029a2:	fb03 f205 	mul.w	r2, r3, r5
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4423      	add	r3, r4
 80029ae:	461a      	mov	r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdb0      	pop	{r4, r5, r7, pc}
 80029bc:	200004e0 	.word	0x200004e0
 80029c0:	200003c8 	.word	0x200003c8

080029c4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	603a      	str	r2, [r7, #0]
 80029ce:	80fb      	strh	r3, [r7, #6]
 80029d0:	460b      	mov	r3, r1
 80029d2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <DrawChar+0x16c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4953      	ldr	r1, [pc, #332]	; (8002b34 <DrawChar+0x170>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3308      	adds	r3, #8
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	88db      	ldrh	r3, [r3, #6]
 80029f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80029f8:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <DrawChar+0x16c>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	494d      	ldr	r1, [pc, #308]	; (8002b34 <DrawChar+0x170>)
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3308      	adds	r3, #8
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	889b      	ldrh	r3, [r3, #4]
 8002a0e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002a10:	8a3b      	ldrh	r3, [r7, #16]
 8002a12:	3307      	adds	r3, #7
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da00      	bge.n	8002a1a <DrawChar+0x56>
 8002a18:	3307      	adds	r3, #7
 8002a1a:	10db      	asrs	r3, r3, #3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	8a3b      	ldrh	r3, [r7, #16]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	e076      	b.n	8002b1e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002a30:	8a3b      	ldrh	r3, [r7, #16]
 8002a32:	3307      	adds	r3, #7
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da00      	bge.n	8002a3a <DrawChar+0x76>
 8002a38:	3307      	adds	r3, #7
 8002a3a:	10db      	asrs	r3, r3, #3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002a4a:	8a3b      	ldrh	r3, [r7, #16]
 8002a4c:	3307      	adds	r3, #7
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	da00      	bge.n	8002a54 <DrawChar+0x90>
 8002a52:	3307      	adds	r3, #7
 8002a54:	10db      	asrs	r3, r3, #3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d002      	beq.n	8002a60 <DrawChar+0x9c>
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d004      	beq.n	8002a68 <DrawChar+0xa4>
 8002a5e:	e00c      	b.n	8002a7a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	617b      	str	r3, [r7, #20]
      break;
 8002a66:	e016      	b.n	8002a96 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	3201      	adds	r2, #1
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
      break;
 8002a78:	e00d      	b.n	8002a96 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	041a      	lsls	r2, r3, #16
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	3301      	adds	r3, #1
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	3202      	adds	r2, #2
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
      break;
 8002a94:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	e036      	b.n	8002b0a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002a9c:	8a3a      	ldrh	r2, [r7, #16]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	1ad2      	subs	r2, r2, r3
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d012      	beq.n	8002ade <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	4413      	add	r3, r2
 8002ac0:	b298      	uxth	r0, r3
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <DrawChar+0x16c>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	491b      	ldr	r1, [pc, #108]	; (8002b34 <DrawChar+0x170>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	88bb      	ldrh	r3, [r7, #4]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7ff ff4e 	bl	8002978 <BSP_LCD_DrawPixel>
 8002adc:	e012      	b.n	8002b04 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b298      	uxth	r0, r3
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <DrawChar+0x16c>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4911      	ldr	r1, [pc, #68]	; (8002b34 <DrawChar+0x170>)
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	3304      	adds	r3, #4
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	88bb      	ldrh	r3, [r7, #4]
 8002afe:	4619      	mov	r1, r3
 8002b00:	f7ff ff3a 	bl	8002978 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	8a3b      	ldrh	r3, [r7, #16]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d3c4      	bcc.n	8002a9c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002b12:	88bb      	ldrh	r3, [r7, #4]
 8002b14:	3301      	adds	r3, #1
 8002b16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	8a7b      	ldrh	r3, [r7, #18]
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d384      	bcc.n	8002a30 <DrawChar+0x6c>
  }
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200004e0 	.word	0x200004e0
 8002b34:	200004e4 	.word	0x200004e4

08002b38 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <FillBuffer+0x68>)
 8002b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b4c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <FillBuffer+0x68>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002b54:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <FillBuffer+0x68>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <FillBuffer+0x68>)
 8002b5c:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <FillBuffer+0x6c>)
 8002b5e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002b60:	480f      	ldr	r0, [pc, #60]	; (8002ba0 <FillBuffer+0x68>)
 8002b62:	f000 fd51 	bl	8003608 <HAL_DMA2D_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d115      	bne.n	8002b98 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <FillBuffer+0x68>)
 8002b70:	f000 feb2 	bl	80038d8 <HAL_DMA2D_ConfigLayer>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10e      	bne.n	8002b98 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69f9      	ldr	r1, [r7, #28]
 8002b84:	4806      	ldr	r0, [pc, #24]	; (8002ba0 <FillBuffer+0x68>)
 8002b86:	f000 fd92 	bl	80036ae <HAL_DMA2D_Start>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d103      	bne.n	8002b98 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002b90:	210a      	movs	r1, #10
 8002b92:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <FillBuffer+0x68>)
 8002b94:	f000 fdb6 	bl	8003704 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000470 	.word	0x20000470
 8002ba4:	4002b000 	.word	0x4002b000

08002ba8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002bac:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002bae:	4a2a      	ldr	r2, [pc, #168]	; (8002c58 <BSP_SDRAM_Init+0xb0>)
 8002bb0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <BSP_SDRAM_Init+0xb4>)
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002bb8:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <BSP_SDRAM_Init+0xb4>)
 8002bba:	2207      	movs	r2, #7
 8002bbc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <BSP_SDRAM_Init+0xb4>)
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <BSP_SDRAM_Init+0xb4>)
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <BSP_SDRAM_Init+0xb4>)
 8002bcc:	2202      	movs	r2, #2
 8002bce:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <BSP_SDRAM_Init+0xb4>)
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002bd6:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <BSP_SDRAM_Init+0xb4>)
 8002bd8:	2202      	movs	r2, #2
 8002bda:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002be2:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002bea:	2204      	movs	r2, #4
 8002bec:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002bf6:	2240      	movs	r2, #64	; 0x40
 8002bf8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002bfc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002c00:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002c0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c0e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002c18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002c1e:	2100      	movs	r1, #0
 8002c20:	480c      	ldr	r0, [pc, #48]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002c22:	f000 f87f 	bl	8002d24 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002c26:	490d      	ldr	r1, [pc, #52]	; (8002c5c <BSP_SDRAM_Init+0xb4>)
 8002c28:	480a      	ldr	r0, [pc, #40]	; (8002c54 <BSP_SDRAM_Init+0xac>)
 8002c2a:	f003 fccf 	bl	80065cc <HAL_SDRAM_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <BSP_SDRAM_Init+0xb8>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e002      	b.n	8002c42 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <BSP_SDRAM_Init+0xb8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002c42:	f240 506a 	movw	r0, #1386	; 0x56a
 8002c46:	f000 f80d 	bl	8002c64 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <BSP_SDRAM_Init+0xb8>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000500 	.word	0x20000500
 8002c58:	a0000140 	.word	0xa0000140
 8002c5c:	20000534 	.word	0x20000534
 8002c60:	2000007c 	.word	0x2000007c

08002c64 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002c70:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c76:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c78:	2208      	movs	r2, #8
 8002c7a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8c:	4923      	ldr	r1, [pc, #140]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c8e:	4824      	ldr	r0, [pc, #144]	; (8002d20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c90:	f003 fcda 	bl	8006648 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002c94:	2001      	movs	r0, #1
 8002c96:	f000 f9c3 	bl	8003020 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb6:	4919      	ldr	r1, [pc, #100]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cb8:	4819      	ldr	r0, [pc, #100]	; (8002d20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cba:	f003 fcc5 	bl	8006648 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ccc:	2204      	movs	r2, #4
 8002cce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cda:	4910      	ldr	r1, [pc, #64]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cdc:	4810      	ldr	r0, [pc, #64]	; (8002d20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cde:	f003 fcb3 	bl	8006648 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002ce2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002ce6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cea:	2204      	movs	r2, #4
 8002cec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cfe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d04:	4905      	ldr	r1, [pc, #20]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d06:	4806      	ldr	r0, [pc, #24]	; (8002d20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d08:	f003 fc9e 	bl	8006648 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4804      	ldr	r0, [pc, #16]	; (8002d20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d10:	f003 fccf 	bl	80066b2 <HAL_SDRAM_ProgramRefreshRate>
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000550 	.word	0x20000550
 8002d20:	20000500 	.word	0x20000500

08002d24 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b090      	sub	sp, #64	; 0x40
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80ec 	beq.w	8002f0e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d3a:	4b77      	ldr	r3, [pc, #476]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4a76      	ldr	r2, [pc, #472]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6393      	str	r3, [r2, #56]	; 0x38
 8002d46:	4b74      	ldr	r3, [pc, #464]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
 8002d56:	4b70      	ldr	r3, [pc, #448]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a6f      	ldr	r2, [pc, #444]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]
 8002d72:	4b69      	ldr	r3, [pc, #420]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a68      	ldr	r2, [pc, #416]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a61      	ldr	r2, [pc, #388]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	4b5b      	ldr	r3, [pc, #364]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a5a      	ldr	r2, [pc, #360]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b58      	ldr	r3, [pc, #352]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	4b54      	ldr	r3, [pc, #336]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a53      	ldr	r2, [pc, #332]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002dcc:	f043 0310 	orr.w	r3, r3, #16
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a4c      	ldr	r2, [pc, #304]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002de8:	f043 0320 	orr.w	r3, r3, #32
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b4a      	ldr	r3, [pc, #296]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b46      	ldr	r3, [pc, #280]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a45      	ldr	r2, [pc, #276]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b43      	ldr	r3, [pc, #268]	; (8002f18 <BSP_SDRAM_MspInit+0x1f4>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002e22:	230c      	movs	r3, #12
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002e26:	2360      	movs	r3, #96	; 0x60
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e2e:	4619      	mov	r1, r3
 8002e30:	483a      	ldr	r0, [pc, #232]	; (8002f1c <BSP_SDRAM_MspInit+0x1f8>)
 8002e32:	f000 fe7f 	bl	8003b34 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002e36:	2301      	movs	r3, #1
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4837      	ldr	r0, [pc, #220]	; (8002f20 <BSP_SDRAM_MspInit+0x1fc>)
 8002e42:	f000 fe77 	bl	8003b34 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002e46:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e50:	4619      	mov	r1, r3
 8002e52:	4834      	ldr	r0, [pc, #208]	; (8002f24 <BSP_SDRAM_MspInit+0x200>)
 8002e54:	f000 fe6e 	bl	8003b34 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002e58:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e62:	4619      	mov	r1, r3
 8002e64:	4830      	ldr	r0, [pc, #192]	; (8002f28 <BSP_SDRAM_MspInit+0x204>)
 8002e66:	f000 fe65 	bl	8003b34 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002e6a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e74:	4619      	mov	r1, r3
 8002e76:	482d      	ldr	r0, [pc, #180]	; (8002f2c <BSP_SDRAM_MspInit+0x208>)
 8002e78:	f000 fe5c 	bl	8003b34 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002e7c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e86:	4619      	mov	r1, r3
 8002e88:	4829      	ldr	r0, [pc, #164]	; (8002f30 <BSP_SDRAM_MspInit+0x20c>)
 8002e8a:	f000 fe53 	bl	8003b34 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002e8e:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eb0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002eb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eb8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002eba:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002ec2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ec6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002ee2:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <BSP_SDRAM_MspInit+0x214>)
 8002ee4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
 8002eec:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002ef2:	4810      	ldr	r0, [pc, #64]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002ef4:	f000 fa78 	bl	80033e8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002ef8:	480e      	ldr	r0, [pc, #56]	; (8002f34 <BSP_SDRAM_MspInit+0x210>)
 8002efa:	f000 f9c7 	bl	800328c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	210f      	movs	r1, #15
 8002f02:	2038      	movs	r0, #56	; 0x38
 8002f04:	f000 f98b 	bl	800321e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002f08:	2038      	movs	r0, #56	; 0x38
 8002f0a:	f000 f9a4 	bl	8003256 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002f0e:	bf00      	nop
 8002f10:	3740      	adds	r7, #64	; 0x40
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020c00 	.word	0x40020c00
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40021400 	.word	0x40021400
 8002f30:	40021800 	.word	0x40021800
 8002f34:	20000560 	.word	0x20000560
 8002f38:	40026410 	.word	0x40026410

08002f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <HAL_Init+0x40>)
 8002f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <HAL_Init+0x40>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_Init+0x40>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f64:	2003      	movs	r0, #3
 8002f66:	f000 f94f 	bl	8003208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6a:	200f      	movs	r0, #15
 8002f6c:	f000 f808 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f70:	f7fe f984 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00

08002f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_InitTick+0x54>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_InitTick+0x58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f967 	bl	8003272 <HAL_SYSTICK_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00e      	b.n	8002fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	d80a      	bhi.n	8002fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f000 f92f 	bl	800321e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <HAL_InitTick+0x5c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	20000084 	.word	0x20000084
 8002fdc:	20000080 	.word	0x20000080

08002fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_IncTick+0x20>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x24>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_IncTick+0x24>)
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000084 	.word	0x20000084
 8003004:	200005c0 	.word	0x200005c0

08003008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return uwTick;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_GetTick+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	200005c0 	.word	0x200005c0

08003020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff ffee 	bl	8003008 <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d005      	beq.n	8003046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_Delay+0x44>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003046:	bf00      	nop
 8003048:	f7ff ffde 	bl	8003008 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d8f7      	bhi.n	8003048 <HAL_Delay+0x28>
  {
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000084 	.word	0x20000084

08003068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309a:	4a04      	ldr	r2, [pc, #16]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	60d3      	str	r3, [r2, #12]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <__NVIC_GetPriorityGrouping+0x18>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 0307 	and.w	r3, r3, #7
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db0b      	blt.n	80030f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4907      	ldr	r1, [pc, #28]	; (8003104 <__NVIC_EnableIRQ+0x38>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2001      	movs	r0, #1
 80030ee:	fa00 f202 	lsl.w	r2, r0, r2
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000e100 	.word	0xe000e100

08003108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0a      	blt.n	8003132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	490c      	ldr	r1, [pc, #48]	; (8003154 <__NVIC_SetPriority+0x4c>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	440b      	add	r3, r1
 800312c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003130:	e00a      	b.n	8003148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <__NVIC_SetPriority+0x50>)
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3b04      	subs	r3, #4
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	440b      	add	r3, r1
 8003146:	761a      	strb	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	bf28      	it	cs
 800317a:	2304      	movcs	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3304      	adds	r3, #4
 8003182:	2b06      	cmp	r3, #6
 8003184:	d902      	bls.n	800318c <NVIC_EncodePriority+0x30>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b03      	subs	r3, #3
 800318a:	e000      	b.n	800318e <NVIC_EncodePriority+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	401a      	ands	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	4313      	orrs	r3, r2
         );
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d4:	d301      	bcc.n	80031da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00f      	b.n	80031fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <SysTick_Config+0x40>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e2:	210f      	movs	r1, #15
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f7ff ff8e 	bl	8003108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <SysTick_Config+0x40>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <SysTick_Config+0x40>)
 80031f4:	2207      	movs	r2, #7
 80031f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000e010 	.word	0xe000e010

08003208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff29 	bl	8003068 <__NVIC_SetPriorityGrouping>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	4603      	mov	r3, r0
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003230:	f7ff ff3e 	bl	80030b0 <__NVIC_GetPriorityGrouping>
 8003234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff ff8e 	bl	800315c <NVIC_EncodePriority>
 8003240:	4602      	mov	r2, r0
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff5d 	bl	8003108 <__NVIC_SetPriority>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff31 	bl	80030cc <__NVIC_EnableIRQ>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ffa2 	bl	80031c4 <SysTick_Config>
 8003280:	4603      	mov	r3, r0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff feb6 	bl	8003008 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e099      	b.n	80033dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c8:	e00f      	b.n	80032ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ca:	f7ff fe9d 	bl	8003008 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d908      	bls.n	80032ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e078      	b.n	80033dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e8      	bne.n	80032ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_DMA_Init+0x158>)
 8003304:	4013      	ands	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b04      	cmp	r3, #4
 8003342:	d107      	bne.n	8003354 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	4313      	orrs	r3, r2
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0307 	bic.w	r3, r3, #7
 800336a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2b04      	cmp	r3, #4
 800337c:	d117      	bne.n	80033ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f8bd 	bl	8003510 <DMA_CheckFifoParam>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033aa:	2301      	movs	r3, #1
 80033ac:	e016      	b.n	80033dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f874 	bl	80034a4 <DMA_CalcBaseAndBitshift>
 80033bc:	4603      	mov	r3, r0
 80033be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	223f      	movs	r2, #63	; 0x3f
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	f010803f 	.word	0xf010803f

080033e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e050      	b.n	800349c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d101      	bne.n	800340a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
 8003408:	e048      	b.n	800349c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2221      	movs	r2, #33	; 0x21
 8003448:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f82a 	bl	80034a4 <DMA_CalcBaseAndBitshift>
 8003450:	4603      	mov	r3, r0
 8003452:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	409a      	lsls	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	3b10      	subs	r3, #16
 80034b4:	4a14      	ldr	r2, [pc, #80]	; (8003508 <DMA_CalcBaseAndBitshift+0x64>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <DMA_CalcBaseAndBitshift+0x68>)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d909      	bls.n	80034e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	1d1a      	adds	r2, r3, #4
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	659a      	str	r2, [r3, #88]	; 0x58
 80034e4:	e007      	b.n	80034f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	aaaaaaab 	.word	0xaaaaaaab
 800350c:	08010128 	.word	0x08010128

08003510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d11f      	bne.n	800356a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d856      	bhi.n	80035de <DMA_CheckFifoParam+0xce>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <DMA_CheckFifoParam+0x28>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	08003549 	.word	0x08003549
 800353c:	0800355b 	.word	0x0800355b
 8003540:	08003549 	.word	0x08003549
 8003544:	080035df 	.word	0x080035df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d046      	beq.n	80035e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003558:	e043      	b.n	80035e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003562:	d140      	bne.n	80035e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e03d      	b.n	80035e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	d121      	bne.n	80035b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d837      	bhi.n	80035ea <DMA_CheckFifoParam+0xda>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <DMA_CheckFifoParam+0x70>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	08003591 	.word	0x08003591
 8003584:	08003597 	.word	0x08003597
 8003588:	08003591 	.word	0x08003591
 800358c:	080035a9 	.word	0x080035a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      break;
 8003594:	e030      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d025      	beq.n	80035ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a6:	e022      	b.n	80035ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035b0:	d11f      	bne.n	80035f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035b6:	e01c      	b.n	80035f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d903      	bls.n	80035c6 <DMA_CheckFifoParam+0xb6>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d003      	beq.n	80035cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035c4:	e018      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
      break;
 80035ca:	e015      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      break;
 80035dc:	e00b      	b.n	80035f6 <DMA_CheckFifoParam+0xe6>
      break;
 80035de:	bf00      	nop
 80035e0:	e00a      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e008      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
 80035e8:	e006      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035ea:	bf00      	nop
 80035ec:	e004      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035f6:	bf00      	nop
    }
  } 
  
  return status; 
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop

08003608 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e03b      	b.n	8003692 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f833 	bl	800369a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	f023 0107 	bic.w	r1, r3, #7
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003672:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d1      	ldr	r1, [r2, #12]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	430b      	orrs	r3, r1
 8003680:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af02      	add	r7, sp, #8
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_DMA2D_Start+0x1c>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e018      	b.n	80036fc <HAL_DMA2D_Start+0x4e>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f989 	bl	80039fc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d056      	beq.n	80037ce <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003720:	f7ff fc72 	bl	8003008 <HAL_GetTick>
 8003724:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003726:	e04b      	b.n	80037c0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003736:	2b00      	cmp	r3, #0
 8003738:	d023      	beq.n	8003782 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	f043 0202 	orr.w	r2, r3, #2
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2221      	movs	r2, #33	; 0x21
 800376c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2204      	movs	r2, #4
 8003772:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0a5      	b.n	80038ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d01a      	beq.n	80037c0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7ff fc3d 	bl	8003008 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <HAL_DMA2D_PollForTransfer+0x9c>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10f      	bne.n	80037c0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2203      	movs	r2, #3
 80037b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e086      	b.n	80038ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ac      	beq.n	8003728 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d061      	beq.n	80038b4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80037f0:	f7ff fc0a 	bl	8003008 <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037f6:	e056      	b.n	80038a6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003806:	2b00      	cmp	r3, #0
 8003808:	d02e      	beq.n	8003868 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2229      	movs	r2, #41	; 0x29
 8003852:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2204      	movs	r2, #4
 8003858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d01a      	beq.n	80038a6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003870:	f7ff fbca 	bl	8003008 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d302      	bcc.n	8003886 <HAL_DMA2D_PollForTransfer+0x182>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e013      	b.n	80038ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0a1      	beq.n	80037f8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2212      	movs	r2, #18
 80038ba:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_DMA2D_ConfigLayer+0x20>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e079      	b.n	80039ec <HAL_DMA2D_ConfigLayer+0x114>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	3318      	adds	r3, #24
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003922:	4b35      	ldr	r3, [pc, #212]	; (80039f8 <HAL_DMA2D_ConfigLayer+0x120>)
 8003924:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b0a      	cmp	r3, #10
 800392c:	d003      	beq.n	8003936 <HAL_DMA2D_ConfigLayer+0x5e>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b09      	cmp	r3, #9
 8003934:	d107      	bne.n	8003946 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	e005      	b.n	8003952 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d120      	bne.n	800399a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43db      	mvns	r3, r3
 8003962:	ea02 0103 	and.w	r1, r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	430a      	orrs	r2, r1
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b0a      	cmp	r3, #10
 8003980:	d003      	beq.n	800398a <HAL_DMA2D_ConfigLayer+0xb2>
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b09      	cmp	r3, #9
 8003988:	d127      	bne.n	80039da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
 8003998:	e01f      	b.n	80039da <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	ea02 0103 	and.w	r1, r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b0a      	cmp	r3, #10
 80039c2:	d003      	beq.n	80039cc <HAL_DMA2D_ConfigLayer+0xf4>
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b09      	cmp	r3, #9
 80039ca:	d106      	bne.n	80039da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80039d8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	ff03000f 	.word	0xff03000f

080039fc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b08b      	sub	sp, #44	; 0x2c
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	041a      	lsls	r2, r3, #16
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a34:	d174      	bne.n	8003b20 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a3c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a44:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a4c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6c:	e053      	b.n	8003b16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d106      	bne.n	8003a84 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
 8003a82:	e048      	b.n	8003b16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d111      	bne.n	8003ab0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	0cdb      	lsrs	r3, r3, #19
 8003a90:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	0a9b      	lsrs	r3, r3, #10
 8003a96:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	08db      	lsrs	r3, r3, #3
 8003a9c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	02db      	lsls	r3, r3, #11
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e032      	b.n	8003b16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d117      	bne.n	8003ae8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	0fdb      	lsrs	r3, r3, #31
 8003abc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	0cdb      	lsrs	r3, r3, #19
 8003ac2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	0adb      	lsrs	r3, r3, #11
 8003ac8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	029b      	lsls	r3, r3, #10
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	03db      	lsls	r3, r3, #15
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae6:	e016      	b.n	8003b16 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	0f1b      	lsrs	r3, r3, #28
 8003aec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	0d1b      	lsrs	r3, r3, #20
 8003af2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	0b1b      	lsrs	r3, r3, #12
 8003af8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	011a      	lsls	r2, r3, #4
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	031b      	lsls	r3, r3, #12
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003b1e:	e003      	b.n	8003b28 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	60da      	str	r2, [r3, #12]
}
 8003b28:	bf00      	nop
 8003b2a:	372c      	adds	r7, #44	; 0x2c
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	e177      	b.n	8003e40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	f040 8166 	bne.w	8003e3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d005      	beq.n	8003b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d130      	bne.n	8003be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	2203      	movs	r2, #3
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 0201 	and.w	r2, r3, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d017      	beq.n	8003c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d123      	bne.n	8003c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	220f      	movs	r2, #15
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	69b9      	ldr	r1, [r7, #24]
 8003c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	2203      	movs	r2, #3
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0203 	and.w	r2, r3, #3
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80c0 	beq.w	8003e3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <HAL_GPIO_Init+0x324>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	4a65      	ldr	r2, [pc, #404]	; (8003e58 <HAL_GPIO_Init+0x324>)
 8003cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cca:	4b63      	ldr	r3, [pc, #396]	; (8003e58 <HAL_GPIO_Init+0x324>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cd6:	4a61      	ldr	r2, [pc, #388]	; (8003e5c <HAL_GPIO_Init+0x328>)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	3302      	adds	r3, #2
 8003cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	220f      	movs	r2, #15
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a58      	ldr	r2, [pc, #352]	; (8003e60 <HAL_GPIO_Init+0x32c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d037      	beq.n	8003d72 <HAL_GPIO_Init+0x23e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a57      	ldr	r2, [pc, #348]	; (8003e64 <HAL_GPIO_Init+0x330>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d031      	beq.n	8003d6e <HAL_GPIO_Init+0x23a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a56      	ldr	r2, [pc, #344]	; (8003e68 <HAL_GPIO_Init+0x334>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02b      	beq.n	8003d6a <HAL_GPIO_Init+0x236>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a55      	ldr	r2, [pc, #340]	; (8003e6c <HAL_GPIO_Init+0x338>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d025      	beq.n	8003d66 <HAL_GPIO_Init+0x232>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a54      	ldr	r2, [pc, #336]	; (8003e70 <HAL_GPIO_Init+0x33c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <HAL_GPIO_Init+0x22e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a53      	ldr	r2, [pc, #332]	; (8003e74 <HAL_GPIO_Init+0x340>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d019      	beq.n	8003d5e <HAL_GPIO_Init+0x22a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a52      	ldr	r2, [pc, #328]	; (8003e78 <HAL_GPIO_Init+0x344>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0x226>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a51      	ldr	r2, [pc, #324]	; (8003e7c <HAL_GPIO_Init+0x348>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_Init+0x222>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a50      	ldr	r2, [pc, #320]	; (8003e80 <HAL_GPIO_Init+0x34c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_Init+0x21e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a4f      	ldr	r2, [pc, #316]	; (8003e84 <HAL_GPIO_Init+0x350>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_Init+0x21a>
 8003d4a:	2309      	movs	r3, #9
 8003d4c:	e012      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d4e:	230a      	movs	r3, #10
 8003d50:	e010      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d52:	2308      	movs	r3, #8
 8003d54:	e00e      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d56:	2307      	movs	r3, #7
 8003d58:	e00c      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d5a:	2306      	movs	r3, #6
 8003d5c:	e00a      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d5e:	2305      	movs	r3, #5
 8003d60:	e008      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d62:	2304      	movs	r3, #4
 8003d64:	e006      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d66:	2303      	movs	r3, #3
 8003d68:	e004      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e002      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_GPIO_Init+0x240>
 8003d72:	2300      	movs	r3, #0
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	f002 0203 	and.w	r2, r2, #3
 8003d7a:	0092      	lsls	r2, r2, #2
 8003d7c:	4093      	lsls	r3, r2
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d84:	4935      	ldr	r1, [pc, #212]	; (8003e5c <HAL_GPIO_Init+0x328>)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d92:	4b3d      	ldr	r3, [pc, #244]	; (8003e88 <HAL_GPIO_Init+0x354>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003db6:	4a34      	ldr	r2, [pc, #208]	; (8003e88 <HAL_GPIO_Init+0x354>)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dbc:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <HAL_GPIO_Init+0x354>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003de0:	4a29      	ldr	r2, [pc, #164]	; (8003e88 <HAL_GPIO_Init+0x354>)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_GPIO_Init+0x354>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <HAL_GPIO_Init+0x354>)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <HAL_GPIO_Init+0x354>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e34:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <HAL_GPIO_Init+0x354>)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	f67f ae84 	bls.w	8003b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	3724      	adds	r7, #36	; 0x24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40013800 	.word	0x40013800
 8003e60:	40020000 	.word	0x40020000
 8003e64:	40020400 	.word	0x40020400
 8003e68:	40020800 	.word	0x40020800
 8003e6c:	40020c00 	.word	0x40020c00
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40021400 	.word	0x40021400
 8003e78:	40021800 	.word	0x40021800
 8003e7c:	40021c00 	.word	0x40021c00
 8003e80:	40022000 	.word	0x40022000
 8003e84:	40022400 	.word	0x40022400
 8003e88:	40013c00 	.word	0x40013c00

08003e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e9c:	787b      	ldrb	r3, [r7, #1]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ea8:	e003      	b.n	8003eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	041a      	lsls	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	619a      	str	r2, [r3, #24]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0bf      	b.n	8004052 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8ba 	bl	8004060 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003f02:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6999      	ldr	r1, [r3, #24]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f18:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6899      	ldr	r1, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b4a      	ldr	r3, [pc, #296]	; (800405c <HAL_LTDC_Init+0x19c>)
 8003f34:	400b      	ands	r3, r1
 8003f36:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6899      	ldr	r1, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68d9      	ldr	r1, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_LTDC_Init+0x19c>)
 8003f62:	400b      	ands	r3, r1
 8003f64:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68d9      	ldr	r1, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1a      	ldr	r2, [r3, #32]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6919      	ldr	r1, [r3, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_LTDC_Init+0x19c>)
 8003f90:	400b      	ands	r3, r1
 8003f92:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6919      	ldr	r1, [r3, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6959      	ldr	r1, [r3, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <HAL_LTDC_Init+0x19c>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6959      	ldr	r1, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0206 	orr.w	r2, r2, #6
 800402e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	f000f800 	.word	0xf000f800

08004060 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004074:	b5b0      	push	{r4, r5, r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_LTDC_ConfigLayer+0x1a>
 800408a:	2302      	movs	r3, #2
 800408c:	e02c      	b.n	80040e8 <HAL_LTDC_ConfigLayer+0x74>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2202      	movs	r2, #2
 800409a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2134      	movs	r1, #52	; 0x34
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4614      	mov	r4, r2
 80040b2:	461d      	mov	r5, r3
 80040b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f83b 	bl	8004144 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bdb0      	pop	{r4, r5, r7, pc}

080040f0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_LTDC_EnableDither+0x16>
 8004102:	2302      	movs	r3, #2
 8004104:	e016      	b.n	8004134 <HAL_LTDC_EnableDither+0x44>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <HAL_LTDC_EnableDither+0x50>)
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_LTDC_EnableDither+0x50>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40016800 	.word	0x40016800

08004144 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004160:	4413      	add	r3, r2
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	01db      	lsls	r3, r3, #7
 8004170:	4413      	add	r3, r2
 8004172:	3384      	adds	r3, #132	; 0x84
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	4611      	mov	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	01d2      	lsls	r2, r2, #7
 8004180:	440a      	add	r2, r1
 8004182:	3284      	adds	r2, #132	; 0x84
 8004184:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004188:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800419a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800419c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4619      	mov	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	01db      	lsls	r3, r3, #7
 80041a8:	440b      	add	r3, r1
 80041aa:	3384      	adds	r3, #132	; 0x84
 80041ac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041c2:	4413      	add	r3, r2
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	01db      	lsls	r3, r3, #7
 80041d2:	4413      	add	r3, r2
 80041d4:	3384      	adds	r3, #132	; 0x84
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	4611      	mov	r1, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	01d2      	lsls	r2, r2, #7
 80041e2:	440a      	add	r2, r1
 80041e4:	3284      	adds	r2, #132	; 0x84
 80041e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041fa:	4413      	add	r3, r2
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4619      	mov	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	01db      	lsls	r3, r3, #7
 8004208:	440b      	add	r3, r1
 800420a:	3384      	adds	r3, #132	; 0x84
 800420c:	4619      	mov	r1, r3
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4313      	orrs	r3, r2
 8004212:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	01db      	lsls	r3, r3, #7
 800421e:	4413      	add	r3, r2
 8004220:	3384      	adds	r3, #132	; 0x84
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	4611      	mov	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	01d2      	lsls	r2, r2, #7
 800422e:	440a      	add	r2, r1
 8004230:	3284      	adds	r2, #132	; 0x84
 8004232:	f023 0307 	bic.w	r3, r3, #7
 8004236:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	01db      	lsls	r3, r3, #7
 8004242:	4413      	add	r3, r2
 8004244:	3384      	adds	r3, #132	; 0x84
 8004246:	461a      	mov	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	4413      	add	r3, r2
 8004276:	3384      	adds	r3, #132	; 0x84
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	01db      	lsls	r3, r3, #7
 8004284:	4413      	add	r3, r2
 8004286:	3384      	adds	r3, #132	; 0x84
 8004288:	461a      	mov	r2, r3
 800428a:	2300      	movs	r3, #0
 800428c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004294:	461a      	mov	r2, r3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	431a      	orrs	r2, r3
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	431a      	orrs	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	01db      	lsls	r3, r3, #7
 80042a8:	440b      	add	r3, r1
 80042aa:	3384      	adds	r3, #132	; 0x84
 80042ac:	4619      	mov	r1, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	01db      	lsls	r3, r3, #7
 80042be:	4413      	add	r3, r2
 80042c0:	3384      	adds	r3, #132	; 0x84
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	4611      	mov	r1, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	01d2      	lsls	r2, r2, #7
 80042ce:	440a      	add	r2, r1
 80042d0:	3284      	adds	r2, #132	; 0x84
 80042d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	01db      	lsls	r3, r3, #7
 80042e2:	4413      	add	r3, r2
 80042e4:	3384      	adds	r3, #132	; 0x84
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	01db      	lsls	r3, r3, #7
 80042f8:	4413      	add	r3, r2
 80042fa:	3384      	adds	r3, #132	; 0x84
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	4611      	mov	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	01d2      	lsls	r2, r2, #7
 8004308:	440a      	add	r2, r1
 800430a:	3284      	adds	r2, #132	; 0x84
 800430c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004310:	f023 0307 	bic.w	r3, r3, #7
 8004314:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	6809      	ldr	r1, [r1, #0]
 8004322:	4608      	mov	r0, r1
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	01c9      	lsls	r1, r1, #7
 8004328:	4401      	add	r1, r0
 800432a:	3184      	adds	r1, #132	; 0x84
 800432c:	4313      	orrs	r3, r2
 800432e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	01db      	lsls	r3, r3, #7
 800433a:	4413      	add	r3, r2
 800433c:	3384      	adds	r3, #132	; 0x84
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	01db      	lsls	r3, r3, #7
 800434a:	4413      	add	r3, r2
 800434c:	3384      	adds	r3, #132	; 0x84
 800434e:	461a      	mov	r2, r3
 8004350:	2300      	movs	r3, #0
 8004352:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	01db      	lsls	r3, r3, #7
 800435e:	4413      	add	r3, r2
 8004360:	3384      	adds	r3, #132	; 0x84
 8004362:	461a      	mov	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004372:	2304      	movs	r3, #4
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	e01b      	b.n	80043b0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d102      	bne.n	8004386 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004380:	2303      	movs	r3, #3
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e014      	b.n	80043b0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d00b      	beq.n	80043a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004392:	2b02      	cmp	r3, #2
 8004394:	d007      	beq.n	80043a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800439a:	2b03      	cmp	r3, #3
 800439c:	d003      	beq.n	80043a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80043a2:	2b07      	cmp	r3, #7
 80043a4:	d102      	bne.n	80043ac <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80043a6:	2302      	movs	r3, #2
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	e001      	b.n	80043b0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80043ac:	2301      	movs	r3, #1
 80043ae:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	01db      	lsls	r3, r3, #7
 80043ba:	4413      	add	r3, r2
 80043bc:	3384      	adds	r3, #132	; 0x84
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	4611      	mov	r1, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	01d2      	lsls	r2, r2, #7
 80043ca:	440a      	add	r2, r1
 80043cc:	3284      	adds	r2, #132	; 0x84
 80043ce:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80043d2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	1acb      	subs	r3, r1, r3
 80043ea:	69f9      	ldr	r1, [r7, #28]
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	6809      	ldr	r1, [r1, #0]
 80043f6:	4608      	mov	r0, r1
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	01c9      	lsls	r1, r1, #7
 80043fc:	4401      	add	r1, r0
 80043fe:	3184      	adds	r1, #132	; 0x84
 8004400:	4313      	orrs	r3, r2
 8004402:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	01db      	lsls	r3, r3, #7
 800440e:	4413      	add	r3, r2
 8004410:	3384      	adds	r3, #132	; 0x84
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	4611      	mov	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	01d2      	lsls	r2, r2, #7
 800441e:	440a      	add	r2, r1
 8004420:	3284      	adds	r2, #132	; 0x84
 8004422:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	01db      	lsls	r3, r3, #7
 8004436:	4413      	add	r3, r2
 8004438:	3384      	adds	r3, #132	; 0x84
 800443a:	461a      	mov	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	01db      	lsls	r3, r3, #7
 800444c:	4413      	add	r3, r2
 800444e:	3384      	adds	r3, #132	; 0x84
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	4611      	mov	r1, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	01d2      	lsls	r2, r2, #7
 800445c:	440a      	add	r2, r1
 800445e:	3284      	adds	r2, #132	; 0x84
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6013      	str	r3, [r2, #0]
}
 8004466:	bf00      	nop
 8004468:	3724      	adds	r7, #36	; 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004474:	b08f      	sub	sp, #60	; 0x3c
 8004476:	af0a      	add	r7, sp, #40	; 0x28
 8004478:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e10f      	b.n	80046a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f006 fe58 	bl	800b154 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2203      	movs	r2, #3
 80044a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f003 f93f 	bl	8007746 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	687e      	ldr	r6, [r7, #4]
 80044d0:	466d      	mov	r5, sp
 80044d2:	f106 0410 	add.w	r4, r6, #16
 80044d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80044e6:	1d33      	adds	r3, r6, #4
 80044e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ea:	6838      	ldr	r0, [r7, #0]
 80044ec:	f003 f816 	bl	800751c <USB_CoreInit>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0d0      	b.n	80046a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f003 f92d 	bl	8007768 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
 8004512:	e04a      	b.n	80045aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004514:	7bfa      	ldrb	r2, [r7, #15]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	333d      	adds	r3, #61	; 0x3d
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	333c      	adds	r3, #60	; 0x3c
 8004538:	7bfa      	ldrb	r2, [r7, #15]
 800453a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	b298      	uxth	r0, r3
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	3344      	adds	r3, #68	; 0x44
 8004550:	4602      	mov	r2, r0
 8004552:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	3340      	adds	r3, #64	; 0x40
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3348      	adds	r3, #72	; 0x48
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	334c      	adds	r3, #76	; 0x4c
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	3354      	adds	r3, #84	; 0x54
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	3301      	adds	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
 80045aa:	7bfa      	ldrb	r2, [r7, #15]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d3af      	bcc.n	8004514 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b4:	2300      	movs	r3, #0
 80045b6:	73fb      	strb	r3, [r7, #15]
 80045b8:	e044      	b.n	8004644 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80045e2:	7bfa      	ldrb	r2, [r7, #15]
 80045e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004612:	7bfa      	ldrb	r2, [r7, #15]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	3301      	adds	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	429a      	cmp	r2, r3
 800464c:	d3b5      	bcc.n	80045ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	687e      	ldr	r6, [r7, #4]
 8004656:	466d      	mov	r5, sp
 8004658:	f106 0410 	add.w	r4, r6, #16
 800465c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800465e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004668:	e885 0003 	stmia.w	r5, {r0, r1}
 800466c:	1d33      	adds	r3, r6, #4
 800466e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004670:	6838      	ldr	r0, [r7, #0]
 8004672:	f003 f8c5 	bl	8007800 <USB_DevInit>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e00d      	b.n	80046a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f004 fa14 	bl	8008aca <USB_DevDisconnect>

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_PCD_Start+0x1c>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e020      	b.n	800470a <HAL_PCD_Start+0x5e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d109      	bne.n	80046ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d005      	beq.n	80046ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f003 f817 	bl	8007724 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f004 f9c4 	bl	8008a88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004712:	b590      	push	{r4, r7, lr}
 8004714:	b08d      	sub	sp, #52	; 0x34
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f004 fa82 	bl	8008c32 <USB_GetMode>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 848a 	bne.w	800504a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f004 f9e6 	bl	8008b0c <USB_ReadInterrupts>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8480 	beq.w	8005048 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	0a1b      	lsrs	r3, r3, #8
 8004752:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f004 f9d3 	bl	8008b0c <USB_ReadInterrupts>
 8004766:	4603      	mov	r3, r0
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b02      	cmp	r3, #2
 800476e:	d107      	bne.n	8004780 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f002 0202 	and.w	r2, r2, #2
 800477e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f004 f9c1 	bl	8008b0c <USB_ReadInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b10      	cmp	r3, #16
 8004792:	d161      	bne.n	8004858 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0210 	bic.w	r2, r2, #16
 80047a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f003 020f 	and.w	r2, r3, #15
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	3304      	adds	r3, #4
 80047c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	0c5b      	lsrs	r3, r3, #17
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d124      	bne.n	800481a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d035      	beq.n	8004848 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	6a38      	ldr	r0, [r7, #32]
 80047f0:	f003 fff8 	bl	80087e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004800:	441a      	add	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004812:	441a      	add	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
 8004818:	e016      	b.n	8004848 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	0c5b      	lsrs	r3, r3, #17
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	2b06      	cmp	r3, #6
 8004824:	d110      	bne.n	8004848 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800482c:	2208      	movs	r2, #8
 800482e:	4619      	mov	r1, r3
 8004830:	6a38      	ldr	r0, [r7, #32]
 8004832:	f003 ffd7 	bl	80087e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	6a1a      	ldr	r2, [r3, #32]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004842:	441a      	add	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0210 	orr.w	r2, r2, #16
 8004856:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f004 f955 	bl	8008b0c <USB_ReadInterrupts>
 8004862:	4603      	mov	r3, r0
 8004864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004868:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800486c:	f040 80a7 	bne.w	80049be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f004 f95a 	bl	8008b32 <USB_ReadDevAllOutEpInterrupt>
 800487e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004880:	e099      	b.n	80049b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 808e 	beq.w	80049aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f004 f97e 	bl	8008b9a <USB_ReadDevOutEPInterrupt>
 800489e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00c      	beq.n	80048c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b6:	461a      	mov	r2, r3
 80048b8:	2301      	movs	r3, #1
 80048ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fec2 	bl	8005648 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00c      	beq.n	80048e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	461a      	mov	r2, r3
 80048dc:	2308      	movs	r3, #8
 80048de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80048e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 ff98 	bl	8005818 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fe:	461a      	mov	r2, r3
 8004900:	2310      	movs	r3, #16
 8004902:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d030      	beq.n	8004970 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004916:	2b80      	cmp	r3, #128	; 0x80
 8004918:	d109      	bne.n	800492e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004928:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800492c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	3304      	adds	r3, #4
 8004942:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	78db      	ldrb	r3, [r3, #3]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d108      	bne.n	800495e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	b2db      	uxtb	r3, r3
 8004956:	4619      	mov	r1, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f006 fcfd 	bl	800b358 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	461a      	mov	r2, r3
 800496c:	2302      	movs	r3, #2
 800496e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d008      	beq.n	800498c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	461a      	mov	r2, r3
 8004988:	2320      	movs	r3, #32
 800498a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	461a      	mov	r2, r3
 80049a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	3301      	adds	r3, #1
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f47f af62 	bne.w	8004882 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f004 f8a2 	bl	8008b0c <USB_ReadInterrupts>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049d2:	f040 80db 	bne.w	8004b8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f004 f8c3 	bl	8008b66 <USB_ReadDevAllInEpInterrupt>
 80049e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80049e6:	e0cd      	b.n	8004b84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 80c2 	beq.w	8004b78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f004 f8e9 	bl	8008bd6 <USB_ReadDevInEPInterrupt>
 8004a04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d057      	beq.n	8004ac0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	2201      	movs	r2, #1
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69f9      	ldr	r1, [r7, #28]
 8004a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a30:	4013      	ands	r3, r2
 8004a32:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	461a      	mov	r2, r3
 8004a42:	2301      	movs	r3, #1
 8004a44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d132      	bne.n	8004ab4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	334c      	adds	r3, #76	; 0x4c
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4403      	add	r3, r0
 8004a6e:	3348      	adds	r3, #72	; 0x48
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4419      	add	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4403      	add	r3, r0
 8004a82:	334c      	adds	r3, #76	; 0x4c
 8004a84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d113      	bne.n	8004ab4 <HAL_PCD_IRQHandler+0x3a2>
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3354      	adds	r3, #84	; 0x54
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d108      	bne.n	8004ab4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004aac:	461a      	mov	r2, r3
 8004aae:	2101      	movs	r1, #1
 8004ab0:	f004 f8f0 	bl	8008c94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f006 fbc7 	bl	800b24e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2308      	movs	r3, #8
 8004ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	461a      	mov	r2, r3
 8004af4:	2310      	movs	r3, #16
 8004af6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2340      	movs	r3, #64	; 0x40
 8004b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d023      	beq.n	8004b66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b20:	6a38      	ldr	r0, [r7, #32]
 8004b22:	f002 ffd1 	bl	8007ac8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	3338      	adds	r3, #56	; 0x38
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	3304      	adds	r3, #4
 8004b38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	78db      	ldrb	r3, [r3, #3]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d108      	bne.n	8004b54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f006 fc14 	bl	800b37c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	461a      	mov	r2, r3
 8004b62:	2302      	movs	r3, #2
 8004b64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fcdb 	bl	800552e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	085b      	lsrs	r3, r3, #1
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f47f af2e 	bne.w	80049e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f003 ffbb 	bl	8008b0c <USB_ReadInterrupts>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ba0:	d122      	bne.n	8004be8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d108      	bne.n	8004bd2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fec2 	bl	8005954 <HAL_PCDEx_LPM_Callback>
 8004bd0:	e002      	b.n	8004bd8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f006 fbb2 	bl	800b33c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f003 ff8d 	bl	8008b0c <USB_ReadInterrupts>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfc:	d112      	bne.n	8004c24 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d102      	bne.n	8004c14 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f006 fb6e 	bl	800b2f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c22:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f003 ff6f 	bl	8008b0c <USB_ReadInterrupts>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c38:	f040 80b7 	bne.w	8004daa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2110      	movs	r1, #16
 8004c56:	4618      	mov	r0, r3
 8004c58:	f002 ff36 	bl	8007ac8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c60:	e046      	b.n	8004cf0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ca8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cba:	0151      	lsls	r1, r2, #5
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ce8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	3301      	adds	r3, #1
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d3b3      	bcc.n	8004c62 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004d0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d016      	beq.n	8004d44 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d26:	f043 030b 	orr.w	r3, r3, #11
 8004d2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d3c:	f043 030b 	orr.w	r3, r3, #11
 8004d40:	6453      	str	r3, [r2, #68]	; 0x44
 8004d42:	e015      	b.n	8004d70 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d6a:	f043 030b 	orr.w	r3, r3, #11
 8004d6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d94:	461a      	mov	r2, r3
 8004d96:	f003 ff7d 	bl	8008c94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695a      	ldr	r2, [r3, #20]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f003 feac 	bl	8008b0c <USB_ReadInterrupts>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dbe:	d124      	bne.n	8004e0a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f003 ff42 	bl	8008c4e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f002 fef7 	bl	8007bc2 <USB_GetDevSpeed>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681c      	ldr	r4, [r3, #0]
 8004de0:	f001 fa28 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 8004de4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	4620      	mov	r0, r4
 8004df0:	f002 fbf6 	bl	80075e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f006 fa52 	bl	800b29e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f003 fe7c 	bl	8008b0c <USB_ReadInterrupts>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d10a      	bne.n	8004e34 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f006 fa2f 	bl	800b282 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f002 0208 	and.w	r2, r2, #8
 8004e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f003 fe67 	bl	8008b0c <USB_ReadInterrupts>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d122      	bne.n	8004e8e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e54:	2301      	movs	r3, #1
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
 8004e58:	e014      	b.n	8004e84 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	4613      	mov	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d105      	bne.n	8004e7e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fb27 	bl	80054cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	3301      	adds	r3, #1
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d3e5      	bcc.n	8004e5a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f003 fe3a 	bl	8008b0c <USB_ReadInterrupts>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea2:	d13b      	bne.n	8004f1c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea8:	e02b      	b.n	8004f02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3340      	adds	r3, #64	; 0x40
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d115      	bne.n	8004efc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004ed0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	da12      	bge.n	8004efc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	333f      	adds	r3, #63	; 0x3f
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fae8 	bl	80054cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	3301      	adds	r3, #1
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3ce      	bcc.n	8004eaa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f003 fdf3 	bl	8008b0c <USB_ReadInterrupts>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f30:	d155      	bne.n	8004fde <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f32:	2301      	movs	r3, #1
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
 8004f36:	e045      	b.n	8004fc4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d12e      	bne.n	8004fbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da2b      	bge.n	8004fbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004f72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d121      	bne.n	8004fbe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fba:	6053      	str	r3, [r2, #4]
            break;
 8004fbc:	e007      	b.n	8004fce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d3b4      	bcc.n	8004f38 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f003 fd92 	bl	8008b0c <USB_ReadInterrupts>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff2:	d10a      	bne.n	800500a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f006 f9d3 	bl	800b3a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f003 fd7c 	bl	8008b0c <USB_ReadInterrupts>
 8005014:	4603      	mov	r3, r0
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b04      	cmp	r3, #4
 800501c:	d115      	bne.n	800504a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f006 f9c3 	bl	800b3bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6859      	ldr	r1, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
 8005046:	e000      	b.n	800504a <HAL_PCD_IRQHandler+0x938>
      return;
 8005048:	bf00      	nop
    }
  }
}
 800504a:	3734      	adds	r7, #52	; 0x34
 800504c:	46bd      	mov	sp, r7
 800504e:	bd90      	pop	{r4, r7, pc}

08005050 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_PCD_SetAddress+0x1a>
 8005066:	2302      	movs	r3, #2
 8005068:	e013      	b.n	8005092 <HAL_PCD_SetAddress+0x42>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f003 fcda 	bl	8008a3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	4608      	mov	r0, r1
 80050a4:	4611      	mov	r1, r2
 80050a6:	461a      	mov	r2, r3
 80050a8:	4603      	mov	r3, r0
 80050aa:	70fb      	strb	r3, [r7, #3]
 80050ac:	460b      	mov	r3, r1
 80050ae:	803b      	strh	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da0f      	bge.n	80050e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 020f 	and.w	r2, r3, #15
 80050c6:	4613      	mov	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	3338      	adds	r3, #56	; 0x38
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	3304      	adds	r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	705a      	strb	r2, [r3, #1]
 80050de:	e00f      	b.n	8005100 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	f003 020f 	and.w	r2, r3, #15
 80050e6:	4613      	mov	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	3304      	adds	r3, #4
 80050f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	b2da      	uxtb	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800510c:	883a      	ldrh	r2, [r7, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	78ba      	ldrb	r2, [r7, #2]
 8005116:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800512a:	78bb      	ldrb	r3, [r7, #2]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d102      	bne.n	8005136 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_PCD_EP_Open+0xaa>
 8005140:	2302      	movs	r3, #2
 8005142:	e00e      	b.n	8005162 <HAL_PCD_EP_Open+0xc8>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	4618      	mov	r0, r3
 8005154:	f002 fd5a 	bl	8007c0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005160:	7afb      	ldrb	r3, [r7, #11]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	460b      	mov	r3, r1
 8005174:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800517a:	2b00      	cmp	r3, #0
 800517c:	da0f      	bge.n	800519e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	f003 020f 	and.w	r2, r3, #15
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	3338      	adds	r3, #56	; 0x38
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	3304      	adds	r3, #4
 8005194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2201      	movs	r2, #1
 800519a:	705a      	strb	r2, [r3, #1]
 800519c:	e00f      	b.n	80051be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	f003 020f 	and.w	r2, r3, #15
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	3304      	adds	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_PCD_EP_Close+0x6e>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e00e      	b.n	80051f6 <HAL_PCD_EP_Close+0x8c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f002 fd98 	bl	8007d1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	460b      	mov	r3, r1
 800520c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800520e:	7afb      	ldrb	r3, [r7, #11]
 8005210:	f003 020f 	and.w	r2, r3, #15
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	3304      	adds	r3, #4
 8005226:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2200      	movs	r2, #0
 800523e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005240:	7afb      	ldrb	r3, [r7, #11]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	b2da      	uxtb	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d102      	bne.n	800525a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800525a:	7afb      	ldrb	r3, [r7, #11]
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	6979      	ldr	r1, [r7, #20]
 8005272:	f003 f877 	bl	8008364 <USB_EP0StartXfer>
 8005276:	e008      	b.n	800528a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	6979      	ldr	r1, [r7, #20]
 8005286:	f002 fe25 	bl	8007ed4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	f003 020f 	and.w	r2, r3, #15
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80052b6:	681b      	ldr	r3, [r3, #0]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	460b      	mov	r3, r1
 80052d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052d4:	7afb      	ldrb	r3, [r7, #11]
 80052d6:	f003 020f 	and.w	r2, r3, #15
 80052da:	4613      	mov	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	3338      	adds	r3, #56	; 0x38
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	3304      	adds	r3, #4
 80052ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2200      	movs	r2, #0
 80052fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2201      	movs	r2, #1
 8005302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005304:	7afb      	ldrb	r3, [r7, #11]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	b2da      	uxtb	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d102      	bne.n	800531e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800531e:	7afb      	ldrb	r3, [r7, #11]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	f003 f815 	bl	8008364 <USB_EP0StartXfer>
 800533a:	e008      	b.n	800534e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	6979      	ldr	r1, [r7, #20]
 800534a:	f002 fdc3 	bl	8007ed4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	f003 020f 	and.w	r2, r3, #15
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d901      	bls.n	8005376 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e050      	b.n	8005418 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800537a:	2b00      	cmp	r3, #0
 800537c:	da0f      	bge.n	800539e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	f003 020f 	and.w	r2, r3, #15
 8005384:	4613      	mov	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	3338      	adds	r3, #56	; 0x38
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	4413      	add	r3, r2
 8005392:	3304      	adds	r3, #4
 8005394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	705a      	strb	r2, [r3, #1]
 800539c:	e00d      	b.n	80053ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	3304      	adds	r3, #4
 80053b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_PCD_EP_SetStall+0x82>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e01e      	b.n	8005418 <HAL_PCD_EP_SetStall+0xc0>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f003 fa53 	bl	8008894 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	b2d9      	uxtb	r1, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005408:	461a      	mov	r2, r3
 800540a:	f003 fc43 	bl	8008c94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	f003 020f 	and.w	r2, r3, #15
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d901      	bls.n	800543e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e042      	b.n	80054c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800543e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005442:	2b00      	cmp	r3, #0
 8005444:	da0f      	bge.n	8005466 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	f003 020f 	and.w	r2, r3, #15
 800544c:	4613      	mov	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	3338      	adds	r3, #56	; 0x38
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4413      	add	r3, r2
 800545a:	3304      	adds	r3, #4
 800545c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	705a      	strb	r2, [r3, #1]
 8005464:	e00f      	b.n	8005486 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	f003 020f 	and.w	r2, r3, #15
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	4413      	add	r3, r2
 800547c:	3304      	adds	r3, #4
 800547e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	b2da      	uxtb	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_PCD_EP_ClrStall+0x86>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e00e      	b.n	80054c4 <HAL_PCD_EP_ClrStall+0xa4>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f003 fa5b 	bl	8008970 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80054d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	da0c      	bge.n	80054fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	4613      	mov	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	3338      	adds	r3, #56	; 0x38
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	3304      	adds	r3, #4
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e00c      	b.n	8005514 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4413      	add	r3, r2
 8005510:	3304      	adds	r3, #4
 8005512:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68f9      	ldr	r1, [r7, #12]
 800551a:	4618      	mov	r0, r3
 800551c:	f003 f87a 	bl	8008614 <USB_EPStopXfer>
 8005520:	4603      	mov	r3, r0
 8005522:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005524:	7afb      	ldrb	r3, [r7, #11]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b08a      	sub	sp, #40	; 0x28
 8005532:	af02      	add	r7, sp, #8
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	3338      	adds	r3, #56	; 0x38
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	3304      	adds	r3, #4
 8005554:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	429a      	cmp	r2, r3
 8005560:	d901      	bls.n	8005566 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e06c      	b.n	8005640 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	429a      	cmp	r2, r3
 800557a:	d902      	bls.n	8005582 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	3303      	adds	r3, #3
 8005586:	089b      	lsrs	r3, r3, #2
 8005588:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800558a:	e02b      	b.n	80055e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d902      	bls.n	80055a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	3303      	adds	r3, #3
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6919      	ldr	r1, [r3, #16]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	4603      	mov	r3, r0
 80055c6:	6978      	ldr	r0, [r7, #20]
 80055c8:	f003 f8ce 	bl	8008768 <USB_WritePacket>

    ep->xfer_buff  += len;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	441a      	add	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1a      	ldr	r2, [r3, #32]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	441a      	add	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d809      	bhi.n	800560e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005602:	429a      	cmp	r2, r3
 8005604:	d203      	bcs.n	800560e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1be      	bne.n	800558c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	429a      	cmp	r2, r3
 8005618:	d811      	bhi.n	800563e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	2201      	movs	r2, #1
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	43db      	mvns	r3, r3
 8005634:	6939      	ldr	r1, [r7, #16]
 8005636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800563a:	4013      	ands	r3, r2
 800563c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	333c      	adds	r3, #60	; 0x3c
 8005660:	3304      	adds	r3, #4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d17b      	bne.n	8005776 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d015      	beq.n	80056b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4a61      	ldr	r2, [pc, #388]	; (8005810 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	f240 80b9 	bls.w	8005804 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80b3 	beq.w	8005804 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	461a      	mov	r2, r3
 80056ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b0:	6093      	str	r3, [r2, #8]
 80056b2:	e0a7      	b.n	8005804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	461a      	mov	r2, r3
 80056cc:	2320      	movs	r3, #32
 80056ce:	6093      	str	r3, [r2, #8]
 80056d0:	e098      	b.n	8005804 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f040 8093 	bne.w	8005804 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	4a4b      	ldr	r2, [pc, #300]	; (8005810 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d90f      	bls.n	8005706 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	461a      	mov	r2, r3
 80056fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005702:	6093      	str	r3, [r2, #8]
 8005704:	e07e      	b.n	8005804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	4413      	add	r3, r2
 8005718:	3304      	adds	r3, #4
 800571a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	0159      	lsls	r1, r3, #5
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	440b      	add	r3, r1
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005732:	1ad2      	subs	r2, r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d114      	bne.n	8005768 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005750:	461a      	mov	r2, r3
 8005752:	2101      	movs	r1, #1
 8005754:	f003 fa9e 	bl	8008c94 <USB_EP0_OutStart>
 8005758:	e006      	b.n	8005768 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	441a      	add	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f005 fd52 	bl	800b218 <HAL_PCD_DataOutStageCallback>
 8005774:	e046      	b.n	8005804 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4a26      	ldr	r2, [pc, #152]	; (8005814 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d124      	bne.n	80057c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	461a      	mov	r2, r3
 8005796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579a:	6093      	str	r3, [r2, #8]
 800579c:	e032      	b.n	8005804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	2320      	movs	r3, #32
 80057b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f005 fd29 	bl	800b218 <HAL_PCD_DataOutStageCallback>
 80057c6:	e01d      	b.n	8005804 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d114      	bne.n	80057f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d108      	bne.n	80057f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057f0:	461a      	mov	r2, r3
 80057f2:	2100      	movs	r1, #0
 80057f4:	f003 fa4e 	bl	8008c94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f005 fd0a 	bl	800b218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	4f54300a 	.word	0x4f54300a
 8005814:	4f54310a 	.word	0x4f54310a

08005818 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	333c      	adds	r3, #60	; 0x3c
 8005830:	3304      	adds	r3, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d90e      	bls.n	800586c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005864:	461a      	mov	r2, r3
 8005866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800586a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f005 fcc1 	bl	800b1f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a0a      	ldr	r2, [pc, #40]	; (80058a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d90c      	bls.n	8005894 <PCD_EP_OutSetupPacket_int+0x7c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d108      	bne.n	8005894 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800588c:	461a      	mov	r2, r3
 800588e:	2101      	movs	r1, #1
 8005890:	f003 fa00 	bl	8008c94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	4f54300a 	.word	0x4f54300a

080058a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
 80058b0:	4613      	mov	r3, r2
 80058b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d107      	bne.n	80058d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80058c2:	883b      	ldrh	r3, [r7, #0]
 80058c4:	0419      	lsls	r1, r3, #16
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
 80058d0:	e028      	b.n	8005924 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	0c1b      	lsrs	r3, r3, #16
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4413      	add	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]
 80058e4:	e00d      	b.n	8005902 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	3340      	adds	r3, #64	; 0x40
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	0c1b      	lsrs	r3, r3, #16
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	3301      	adds	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
 8005902:	7bfa      	ldrb	r2, [r7, #15]
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	3b01      	subs	r3, #1
 8005908:	429a      	cmp	r2, r3
 800590a:	d3ec      	bcc.n	80058e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800590c:	883b      	ldrh	r3, [r7, #0]
 800590e:	0418      	lsls	r0, r3, #16
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	3b01      	subs	r3, #1
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	4302      	orrs	r2, r0
 800591c:	3340      	adds	r3, #64	; 0x40
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	460b      	mov	r3, r1
 800593c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	887a      	ldrh	r2, [r7, #2]
 8005944:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e267      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d075      	beq.n	8005a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800598a:	4b88      	ldr	r3, [pc, #544]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	2b04      	cmp	r3, #4
 8005994:	d00c      	beq.n	80059b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005996:	4b85      	ldr	r3, [pc, #532]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d112      	bne.n	80059c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059a2:	4b82      	ldr	r3, [pc, #520]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ae:	d10b      	bne.n	80059c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b0:	4b7e      	ldr	r3, [pc, #504]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d05b      	beq.n	8005a74 <HAL_RCC_OscConfig+0x108>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d157      	bne.n	8005a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e242      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d0:	d106      	bne.n	80059e0 <HAL_RCC_OscConfig+0x74>
 80059d2:	4b76      	ldr	r3, [pc, #472]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a75      	ldr	r2, [pc, #468]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 80059d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e01d      	b.n	8005a1c <HAL_RCC_OscConfig+0xb0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e8:	d10c      	bne.n	8005a04 <HAL_RCC_OscConfig+0x98>
 80059ea:	4b70      	ldr	r3, [pc, #448]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a6f      	ldr	r2, [pc, #444]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 80059f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	4b6d      	ldr	r3, [pc, #436]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a6c      	ldr	r2, [pc, #432]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 80059fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e00b      	b.n	8005a1c <HAL_RCC_OscConfig+0xb0>
 8005a04:	4b69      	ldr	r3, [pc, #420]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a68      	ldr	r2, [pc, #416]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	4b66      	ldr	r3, [pc, #408]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a65      	ldr	r2, [pc, #404]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d013      	beq.n	8005a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a24:	f7fd faf0 	bl	8003008 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a2c:	f7fd faec 	bl	8003008 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b64      	cmp	r3, #100	; 0x64
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e207      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3e:	4b5b      	ldr	r3, [pc, #364]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0xc0>
 8005a4a:	e014      	b.n	8005a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4c:	f7fd fadc 	bl	8003008 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a54:	f7fd fad8 	bl	8003008 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b64      	cmp	r3, #100	; 0x64
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e1f3      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a66:	4b51      	ldr	r3, [pc, #324]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0xe8>
 8005a72:	e000      	b.n	8005a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d063      	beq.n	8005b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a82:	4b4a      	ldr	r3, [pc, #296]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a8e:	4b47      	ldr	r3, [pc, #284]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d11c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a9a:	4b44      	ldr	r3, [pc, #272]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d116      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aa6:	4b41      	ldr	r3, [pc, #260]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_RCC_OscConfig+0x152>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d001      	beq.n	8005abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e1c7      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abe:	4b3b      	ldr	r3, [pc, #236]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4937      	ldr	r1, [pc, #220]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ad2:	e03a      	b.n	8005b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d020      	beq.n	8005b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005adc:	4b34      	ldr	r3, [pc, #208]	; (8005bb0 <HAL_RCC_OscConfig+0x244>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae2:	f7fd fa91 	bl	8003008 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aea:	f7fd fa8d 	bl	8003008 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e1a8      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afc:	4b2b      	ldr	r3, [pc, #172]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b08:	4b28      	ldr	r3, [pc, #160]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	4925      	ldr	r1, [pc, #148]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	600b      	str	r3, [r1, #0]
 8005b1c:	e015      	b.n	8005b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_RCC_OscConfig+0x244>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b24:	f7fd fa70 	bl	8003008 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b2c:	f7fd fa6c 	bl	8003008 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e187      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b3e:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d036      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d016      	beq.n	8005b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b5e:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <HAL_RCC_OscConfig+0x248>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b64:	f7fd fa50 	bl	8003008 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b6c:	f7fd fa4c 	bl	8003008 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e167      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCC_OscConfig+0x240>)
 8005b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x200>
 8005b8a:	e01b      	b.n	8005bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_RCC_OscConfig+0x248>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b92:	f7fd fa39 	bl	8003008 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b98:	e00e      	b.n	8005bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b9a:	f7fd fa35 	bl	8003008 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d907      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e150      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	42470000 	.word	0x42470000
 8005bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb8:	4b88      	ldr	r3, [pc, #544]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ea      	bne.n	8005b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8097 	beq.w	8005d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd6:	4b81      	ldr	r3, [pc, #516]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10f      	bne.n	8005c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	4b7d      	ldr	r3, [pc, #500]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	4a7c      	ldr	r2, [pc, #496]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bf2:	4b7a      	ldr	r3, [pc, #488]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c02:	4b77      	ldr	r3, [pc, #476]	; (8005de0 <HAL_RCC_OscConfig+0x474>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d118      	bne.n	8005c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c0e:	4b74      	ldr	r3, [pc, #464]	; (8005de0 <HAL_RCC_OscConfig+0x474>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a73      	ldr	r2, [pc, #460]	; (8005de0 <HAL_RCC_OscConfig+0x474>)
 8005c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1a:	f7fd f9f5 	bl	8003008 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c22:	f7fd f9f1 	bl	8003008 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e10c      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c34:	4b6a      	ldr	r3, [pc, #424]	; (8005de0 <HAL_RCC_OscConfig+0x474>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d106      	bne.n	8005c56 <HAL_RCC_OscConfig+0x2ea>
 8005c48:	4b64      	ldr	r3, [pc, #400]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4c:	4a63      	ldr	r2, [pc, #396]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	6713      	str	r3, [r2, #112]	; 0x70
 8005c54:	e01c      	b.n	8005c90 <HAL_RCC_OscConfig+0x324>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	d10c      	bne.n	8005c78 <HAL_RCC_OscConfig+0x30c>
 8005c5e:	4b5f      	ldr	r3, [pc, #380]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	4a5e      	ldr	r2, [pc, #376]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c64:	f043 0304 	orr.w	r3, r3, #4
 8005c68:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6a:	4b5c      	ldr	r3, [pc, #368]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	4a5b      	ldr	r2, [pc, #364]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c70:	f043 0301 	orr.w	r3, r3, #1
 8005c74:	6713      	str	r3, [r2, #112]	; 0x70
 8005c76:	e00b      	b.n	8005c90 <HAL_RCC_OscConfig+0x324>
 8005c78:	4b58      	ldr	r3, [pc, #352]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	4a57      	ldr	r2, [pc, #348]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c7e:	f023 0301 	bic.w	r3, r3, #1
 8005c82:	6713      	str	r3, [r2, #112]	; 0x70
 8005c84:	4b55      	ldr	r3, [pc, #340]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	4a54      	ldr	r2, [pc, #336]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005c8a:	f023 0304 	bic.w	r3, r3, #4
 8005c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d015      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c98:	f7fd f9b6 	bl	8003008 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9e:	e00a      	b.n	8005cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca0:	f7fd f9b2 	bl	8003008 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e0cb      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb6:	4b49      	ldr	r3, [pc, #292]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0ee      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x334>
 8005cc2:	e014      	b.n	8005cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc4:	f7fd f9a0 	bl	8003008 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ccc:	f7fd f99c 	bl	8003008 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e0b5      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce2:	4b3e      	ldr	r3, [pc, #248]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1ee      	bne.n	8005ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d105      	bne.n	8005d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf4:	4b39      	ldr	r3, [pc, #228]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	4a38      	ldr	r2, [pc, #224]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 80a1 	beq.w	8005e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d0a:	4b34      	ldr	r3, [pc, #208]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 030c 	and.w	r3, r3, #12
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d05c      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d141      	bne.n	8005da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1e:	4b31      	ldr	r3, [pc, #196]	; (8005de4 <HAL_RCC_OscConfig+0x478>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d24:	f7fd f970 	bl	8003008 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fd f96c 	bl	8003008 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e087      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3e:	4b27      	ldr	r3, [pc, #156]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69da      	ldr	r2, [r3, #28]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	019b      	lsls	r3, r3, #6
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	3b01      	subs	r3, #1
 8005d64:	041b      	lsls	r3, r3, #16
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	061b      	lsls	r3, r3, #24
 8005d6e:	491b      	ldr	r1, [pc, #108]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d74:	4b1b      	ldr	r3, [pc, #108]	; (8005de4 <HAL_RCC_OscConfig+0x478>)
 8005d76:	2201      	movs	r2, #1
 8005d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7a:	f7fd f945 	bl	8003008 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d82:	f7fd f941 	bl	8003008 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e05c      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d94:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0f0      	beq.n	8005d82 <HAL_RCC_OscConfig+0x416>
 8005da0:	e054      	b.n	8005e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da2:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <HAL_RCC_OscConfig+0x478>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fd f92e 	bl	8003008 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db0:	f7fd f92a 	bl	8003008 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e045      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <HAL_RCC_OscConfig+0x470>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f0      	bne.n	8005db0 <HAL_RCC_OscConfig+0x444>
 8005dce:	e03d      	b.n	8005e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d107      	bne.n	8005de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e038      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	40007000 	.word	0x40007000
 8005de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005de8:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <HAL_RCC_OscConfig+0x4ec>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d028      	beq.n	8005e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d121      	bne.n	8005e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d11a      	bne.n	8005e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e18:	4013      	ands	r3, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d111      	bne.n	8005e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	3b01      	subs	r3, #1
 8005e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d107      	bne.n	8005e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40023800 	.word	0x40023800

08005e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0cc      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e70:	4b68      	ldr	r3, [pc, #416]	; (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d90c      	bls.n	8005e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	4b65      	ldr	r3, [pc, #404]	; (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e86:	4b63      	ldr	r3, [pc, #396]	; (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d001      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0b8      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d020      	beq.n	8005ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eb0:	4b59      	ldr	r3, [pc, #356]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4a58      	ldr	r2, [pc, #352]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ec8:	4b53      	ldr	r3, [pc, #332]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4a52      	ldr	r2, [pc, #328]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed4:	4b50      	ldr	r3, [pc, #320]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	494d      	ldr	r1, [pc, #308]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d044      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efa:	4b47      	ldr	r3, [pc, #284]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d119      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e07f      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d003      	beq.n	8005f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d107      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1a:	4b3f      	ldr	r3, [pc, #252]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e06f      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2a:	4b3b      	ldr	r3, [pc, #236]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e067      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f3a:	4b37      	ldr	r3, [pc, #220]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f023 0203 	bic.w	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4934      	ldr	r1, [pc, #208]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f4c:	f7fd f85c 	bl	8003008 <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f52:	e00a      	b.n	8005f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f54:	f7fd f858 	bl	8003008 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e04f      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6a:	4b2b      	ldr	r3, [pc, #172]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 020c 	and.w	r2, r3, #12
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d1eb      	bne.n	8005f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f7c:	4b25      	ldr	r3, [pc, #148]	; (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d20c      	bcs.n	8005fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8a:	4b22      	ldr	r3, [pc, #136]	; (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f92:	4b20      	ldr	r3, [pc, #128]	; (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d001      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e032      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d008      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fb0:	4b19      	ldr	r3, [pc, #100]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	4916      	ldr	r1, [pc, #88]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d009      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fce:	4b12      	ldr	r3, [pc, #72]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	490e      	ldr	r1, [pc, #56]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fe2:	f000 f821 	bl	8006028 <HAL_RCC_GetSysClockFreq>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	091b      	lsrs	r3, r3, #4
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	490a      	ldr	r1, [pc, #40]	; (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005ff4:	5ccb      	ldrb	r3, [r1, r3]
 8005ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffa:	4a09      	ldr	r2, [pc, #36]	; (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ffe:	4b09      	ldr	r3, [pc, #36]	; (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f7fc ffbc 	bl	8002f80 <HAL_InitTick>

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40023c00 	.word	0x40023c00
 8006018:	40023800 	.word	0x40023800
 800601c:	0800e660 	.word	0x0800e660
 8006020:	20000000 	.word	0x20000000
 8006024:	20000080 	.word	0x20000080

08006028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800602c:	b094      	sub	sp, #80	; 0x50
 800602e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	647b      	str	r3, [r7, #68]	; 0x44
 8006034:	2300      	movs	r3, #0
 8006036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006038:	2300      	movs	r3, #0
 800603a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006040:	4b79      	ldr	r3, [pc, #484]	; (8006228 <HAL_RCC_GetSysClockFreq+0x200>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 030c 	and.w	r3, r3, #12
 8006048:	2b08      	cmp	r3, #8
 800604a:	d00d      	beq.n	8006068 <HAL_RCC_GetSysClockFreq+0x40>
 800604c:	2b08      	cmp	r3, #8
 800604e:	f200 80e1 	bhi.w	8006214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_RCC_GetSysClockFreq+0x34>
 8006056:	2b04      	cmp	r3, #4
 8006058:	d003      	beq.n	8006062 <HAL_RCC_GetSysClockFreq+0x3a>
 800605a:	e0db      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800605c:	4b73      	ldr	r3, [pc, #460]	; (800622c <HAL_RCC_GetSysClockFreq+0x204>)
 800605e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006060:	e0db      	b.n	800621a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006062:	4b73      	ldr	r3, [pc, #460]	; (8006230 <HAL_RCC_GetSysClockFreq+0x208>)
 8006064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006066:	e0d8      	b.n	800621a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006068:	4b6f      	ldr	r3, [pc, #444]	; (8006228 <HAL_RCC_GetSysClockFreq+0x200>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006070:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006072:	4b6d      	ldr	r3, [pc, #436]	; (8006228 <HAL_RCC_GetSysClockFreq+0x200>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d063      	beq.n	8006146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800607e:	4b6a      	ldr	r3, [pc, #424]	; (8006228 <HAL_RCC_GetSysClockFreq+0x200>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	099b      	lsrs	r3, r3, #6
 8006084:	2200      	movs	r2, #0
 8006086:	63bb      	str	r3, [r7, #56]	; 0x38
 8006088:	63fa      	str	r2, [r7, #60]	; 0x3c
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006090:	633b      	str	r3, [r7, #48]	; 0x30
 8006092:	2300      	movs	r3, #0
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
 8006096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800609a:	4622      	mov	r2, r4
 800609c:	462b      	mov	r3, r5
 800609e:	f04f 0000 	mov.w	r0, #0
 80060a2:	f04f 0100 	mov.w	r1, #0
 80060a6:	0159      	lsls	r1, r3, #5
 80060a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060ac:	0150      	lsls	r0, r2, #5
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4621      	mov	r1, r4
 80060b4:	1a51      	subs	r1, r2, r1
 80060b6:	6139      	str	r1, [r7, #16]
 80060b8:	4629      	mov	r1, r5
 80060ba:	eb63 0301 	sbc.w	r3, r3, r1
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060cc:	4659      	mov	r1, fp
 80060ce:	018b      	lsls	r3, r1, #6
 80060d0:	4651      	mov	r1, sl
 80060d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060d6:	4651      	mov	r1, sl
 80060d8:	018a      	lsls	r2, r1, #6
 80060da:	4651      	mov	r1, sl
 80060dc:	ebb2 0801 	subs.w	r8, r2, r1
 80060e0:	4659      	mov	r1, fp
 80060e2:	eb63 0901 	sbc.w	r9, r3, r1
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060fa:	4690      	mov	r8, r2
 80060fc:	4699      	mov	r9, r3
 80060fe:	4623      	mov	r3, r4
 8006100:	eb18 0303 	adds.w	r3, r8, r3
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	462b      	mov	r3, r5
 8006108:	eb49 0303 	adc.w	r3, r9, r3
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800611a:	4629      	mov	r1, r5
 800611c:	024b      	lsls	r3, r1, #9
 800611e:	4621      	mov	r1, r4
 8006120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006124:	4621      	mov	r1, r4
 8006126:	024a      	lsls	r2, r1, #9
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612e:	2200      	movs	r2, #0
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
 8006132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006138:	f7fa fd96 	bl	8000c68 <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4613      	mov	r3, r2
 8006142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006144:	e058      	b.n	80061f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006146:	4b38      	ldr	r3, [pc, #224]	; (8006228 <HAL_RCC_GetSysClockFreq+0x200>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	099b      	lsrs	r3, r3, #6
 800614c:	2200      	movs	r2, #0
 800614e:	4618      	mov	r0, r3
 8006150:	4611      	mov	r1, r2
 8006152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006156:	623b      	str	r3, [r7, #32]
 8006158:	2300      	movs	r3, #0
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
 800615c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f04f 0100 	mov.w	r1, #0
 800616c:	0159      	lsls	r1, r3, #5
 800616e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006172:	0150      	lsls	r0, r2, #5
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4641      	mov	r1, r8
 800617a:	ebb2 0a01 	subs.w	sl, r2, r1
 800617e:	4649      	mov	r1, r9
 8006180:	eb63 0b01 	sbc.w	fp, r3, r1
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006198:	ebb2 040a 	subs.w	r4, r2, sl
 800619c:	eb63 050b 	sbc.w	r5, r3, fp
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	00eb      	lsls	r3, r5, #3
 80061aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ae:	00e2      	lsls	r2, r4, #3
 80061b0:	4614      	mov	r4, r2
 80061b2:	461d      	mov	r5, r3
 80061b4:	4643      	mov	r3, r8
 80061b6:	18e3      	adds	r3, r4, r3
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	464b      	mov	r3, r9
 80061bc:	eb45 0303 	adc.w	r3, r5, r3
 80061c0:	607b      	str	r3, [r7, #4]
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061ce:	4629      	mov	r1, r5
 80061d0:	028b      	lsls	r3, r1, #10
 80061d2:	4621      	mov	r1, r4
 80061d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061d8:	4621      	mov	r1, r4
 80061da:	028a      	lsls	r2, r1, #10
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e2:	2200      	movs	r2, #0
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	61fa      	str	r2, [r7, #28]
 80061e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ec:	f7fa fd3c 	bl	8000c68 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4613      	mov	r3, r2
 80061f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <HAL_RCC_GetSysClockFreq+0x200>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	3301      	adds	r3, #1
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800620a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006212:	e002      	b.n	800621a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <HAL_RCC_GetSysClockFreq+0x204>)
 8006216:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800621a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800621c:	4618      	mov	r0, r3
 800621e:	3750      	adds	r7, #80	; 0x50
 8006220:	46bd      	mov	sp, r7
 8006222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006226:	bf00      	nop
 8006228:	40023800 	.word	0x40023800
 800622c:	00f42400 	.word	0x00f42400
 8006230:	007a1200 	.word	0x007a1200

08006234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006238:	4b03      	ldr	r3, [pc, #12]	; (8006248 <HAL_RCC_GetHCLKFreq+0x14>)
 800623a:	681b      	ldr	r3, [r3, #0]
}
 800623c:	4618      	mov	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000000 	.word	0x20000000

0800624c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10b      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800627c:	2b00      	cmp	r3, #0
 800627e:	d075      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006280:	4b91      	ldr	r3, [pc, #580]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006286:	f7fc febf 	bl	8003008 <HAL_GetTick>
 800628a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800628c:	e008      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800628e:	f7fc febb 	bl	8003008 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e189      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062a0:	4b8a      	ldr	r3, [pc, #552]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f0      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	019a      	lsls	r2, r3, #6
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	071b      	lsls	r3, r3, #28
 80062c4:	4981      	ldr	r1, [pc, #516]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01f      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062d8:	4b7c      	ldr	r3, [pc, #496]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062de:	0f1b      	lsrs	r3, r3, #28
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	019a      	lsls	r2, r3, #6
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	061b      	lsls	r3, r3, #24
 80062f2:	431a      	orrs	r2, r3
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	071b      	lsls	r3, r3, #28
 80062f8:	4974      	ldr	r1, [pc, #464]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006300:	4b72      	ldr	r3, [pc, #456]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006306:	f023 021f 	bic.w	r2, r3, #31
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	3b01      	subs	r3, #1
 8006310:	496e      	ldr	r1, [pc, #440]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	019a      	lsls	r2, r3, #6
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	061b      	lsls	r3, r3, #24
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	071b      	lsls	r3, r3, #28
 8006338:	4964      	ldr	r1, [pc, #400]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006340:	4b61      	ldr	r3, [pc, #388]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006342:	2201      	movs	r2, #1
 8006344:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006346:	f7fc fe5f 	bl	8003008 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800634e:	f7fc fe5b 	bl	8003008 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e129      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006360:	4b5a      	ldr	r3, [pc, #360]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f0      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006380:	2b00      	cmp	r3, #0
 8006382:	d079      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006384:	4b52      	ldr	r3, [pc, #328]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800638a:	f7fc fe3d 	bl	8003008 <HAL_GetTick>
 800638e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006392:	f7fc fe39 	bl	8003008 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e107      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063a4:	4b49      	ldr	r3, [pc, #292]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b0:	d0ef      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d020      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063be:	4b43      	ldr	r3, [pc, #268]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c4:	0f1b      	lsrs	r3, r3, #28
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	019a      	lsls	r2, r3, #6
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	061b      	lsls	r3, r3, #24
 80063d8:	431a      	orrs	r2, r3
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	071b      	lsls	r3, r3, #28
 80063de:	493b      	ldr	r1, [pc, #236]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063e6:	4b39      	ldr	r3, [pc, #228]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	4934      	ldr	r1, [pc, #208]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01e      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800640c:	4b2f      	ldr	r3, [pc, #188]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	0e1b      	lsrs	r3, r3, #24
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	019a      	lsls	r2, r3, #6
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	061b      	lsls	r3, r3, #24
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	071b      	lsls	r3, r3, #28
 800642c:	4927      	ldr	r1, [pc, #156]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006434:	4b25      	ldr	r3, [pc, #148]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800643a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	4922      	ldr	r1, [pc, #136]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006444:	4313      	orrs	r3, r2
 8006446:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800644a:	4b21      	ldr	r3, [pc, #132]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800644c:	2201      	movs	r2, #1
 800644e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006450:	f7fc fdda 	bl	8003008 <HAL_GetTick>
 8006454:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006456:	e008      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006458:	f7fc fdd6 	bl	8003008 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e0a4      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800646a:	4b18      	ldr	r3, [pc, #96]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006476:	d1ef      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 808b 	beq.w	800659c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	4a0f      	ldr	r2, [pc, #60]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006494:	6413      	str	r3, [r2, #64]	; 0x40
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064a2:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a0b      	ldr	r2, [pc, #44]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80064a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064ae:	f7fc fdab 	bl	8003008 <HAL_GetTick>
 80064b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064b4:	e010      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064b6:	f7fc fda7 	bl	8003008 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d909      	bls.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e075      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80064c8:	42470068 	.word	0x42470068
 80064cc:	40023800 	.word	0x40023800
 80064d0:	42470070 	.word	0x42470070
 80064d4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064d8:	4b38      	ldr	r3, [pc, #224]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0e8      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d02f      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d028      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006502:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800650c:	4b2d      	ldr	r3, [pc, #180]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006512:	4b2c      	ldr	r3, [pc, #176]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006518:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800651e:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b01      	cmp	r3, #1
 8006528:	d114      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800652a:	f7fc fd6d 	bl	8003008 <HAL_GetTick>
 800652e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006530:	e00a      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006532:	f7fc fd69 	bl	8003008 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e035      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800654a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0ee      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006560:	d10d      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006576:	4912      	ldr	r1, [pc, #72]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006578:	4313      	orrs	r3, r2
 800657a:	608b      	str	r3, [r1, #8]
 800657c:	e005      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800657e:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006584:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006588:	6093      	str	r3, [r2, #8]
 800658a:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800658c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006596:	490a      	ldr	r1, [pc, #40]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006598:	4313      	orrs	r3, r2
 800659a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80065b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40007000 	.word	0x40007000
 80065c0:	40023800 	.word	0x40023800
 80065c4:	42470e40 	.word	0x42470e40
 80065c8:	424711e0 	.word	0x424711e0

080065cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e025      	b.n	800662c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d106      	bne.n	80065fa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f81d 	bl	8006634 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2202      	movs	r2, #2
 80065fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3304      	adds	r3, #4
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f000 fe6b 	bl	80072e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	461a      	mov	r2, r3
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	f000 fec0 	bl	80073a2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800665a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d101      	bne.n	8006666 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006662:	2302      	movs	r3, #2
 8006664:	e021      	b.n	80066aa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d002      	beq.n	8006672 <HAL_SDRAM_SendCommand+0x2a>
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	2b05      	cmp	r3, #5
 8006670:	d118      	bne.n	80066a4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2202      	movs	r2, #2
 8006676:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fef6 	bl	8007474 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d104      	bne.n	800669a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2205      	movs	r2, #5
 8006694:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006698:	e006      	b.n	80066a8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80066a2:	e001      	b.n	80066a8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d101      	bne.n	80066cc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80066c8:	2302      	movs	r3, #2
 80066ca:	e016      	b.n	80066fa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d10f      	bne.n	80066f8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 ff01 	bl	80074ee <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e07b      	b.n	800680c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	2b00      	cmp	r3, #0
 800671a:	d108      	bne.n	800672e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006724:	d009      	beq.n	800673a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	61da      	str	r2, [r3, #28]
 800672c:	e005      	b.n	800673a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f885 	bl	8006864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006770:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067be:	ea42 0103 	orr.w	r1, r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	0c1b      	lsrs	r3, r3, #16
 80067d8:	f003 0104 	and.w	r1, r3, #4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	f003 0210 	and.w	r2, r3, #16
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69da      	ldr	r2, [r3, #28]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e01a      	b.n	800685c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2202      	movs	r2, #2
 800682a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f81a 	bl	8006878 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	4613      	mov	r3, r2
 800689a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_SPI_Transmit+0x22>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e126      	b.n	8006afc <HAL_SPI_Transmit+0x270>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068b6:	f7fc fba7 	bl	8003008 <HAL_GetTick>
 80068ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d002      	beq.n	80068d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068cc:	2302      	movs	r3, #2
 80068ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068d0:	e10b      	b.n	8006aea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_SPI_Transmit+0x52>
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068e2:	e102      	b.n	8006aea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2203      	movs	r2, #3
 80068e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	88fa      	ldrh	r2, [r7, #6]
 8006902:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692a:	d10f      	bne.n	800694c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800693a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800694a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d007      	beq.n	800696a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006968:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006972:	d14b      	bne.n	8006a0c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_SPI_Transmit+0xf6>
 800697c:	8afb      	ldrh	r3, [r7, #22]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d13e      	bne.n	8006a00 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	881a      	ldrh	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	1c9a      	adds	r2, r3, #2
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069a6:	e02b      	b.n	8006a00 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d112      	bne.n	80069dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ba:	881a      	ldrh	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c6:	1c9a      	adds	r2, r3, #2
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80069da:	e011      	b.n	8006a00 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069dc:	f7fc fb14 	bl	8003008 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d803      	bhi.n	80069f4 <HAL_SPI_Transmit+0x168>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d102      	bne.n	80069fa <HAL_SPI_Transmit+0x16e>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069fe:	e074      	b.n	8006aea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1ce      	bne.n	80069a8 <HAL_SPI_Transmit+0x11c>
 8006a0a:	e04c      	b.n	8006aa6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <HAL_SPI_Transmit+0x18e>
 8006a14:	8afb      	ldrh	r3, [r7, #22]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d140      	bne.n	8006a9c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	330c      	adds	r3, #12
 8006a24:	7812      	ldrb	r2, [r2, #0]
 8006a26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a40:	e02c      	b.n	8006a9c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d113      	bne.n	8006a78 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	7812      	ldrb	r2, [r2, #0]
 8006a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a76:	e011      	b.n	8006a9c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a78:	f7fc fac6 	bl	8003008 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d803      	bhi.n	8006a90 <HAL_SPI_Transmit+0x204>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8e:	d102      	bne.n	8006a96 <HAL_SPI_Transmit+0x20a>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a9a:	e026      	b.n	8006aea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1cd      	bne.n	8006a42 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fbda 	bl	8007264 <SPI_EndRxTxTransaction>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e000      	b.n	8006aea <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ae8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006afa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b20:	d112      	bne.n	8006b48 <HAL_SPI_Receive+0x44>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10e      	bne.n	8006b48 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b32:	88fa      	ldrh	r2, [r7, #6]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f8f1 	bl	8006d26 <HAL_SPI_TransmitReceive>
 8006b44:	4603      	mov	r3, r0
 8006b46:	e0ea      	b.n	8006d1e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_SPI_Receive+0x52>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e0e3      	b.n	8006d1e <HAL_SPI_Receive+0x21a>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b5e:	f7fc fa53 	bl	8003008 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d002      	beq.n	8006b76 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b70:	2302      	movs	r3, #2
 8006b72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b74:	e0ca      	b.n	8006d0c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_SPI_Receive+0x7e>
 8006b7c:	88fb      	ldrh	r3, [r7, #6]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b86:	e0c1      	b.n	8006d0c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	88fa      	ldrh	r2, [r7, #6]
 8006ba6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bce:	d10f      	bne.n	8006bf0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d007      	beq.n	8006c0e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d162      	bne.n	8006cdc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c16:	e02e      	b.n	8006c76 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d115      	bne.n	8006c52 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f103 020c 	add.w	r2, r3, #12
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	7812      	ldrb	r2, [r2, #0]
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c50:	e011      	b.n	8006c76 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c52:	f7fc f9d9 	bl	8003008 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d803      	bhi.n	8006c6a <HAL_SPI_Receive+0x166>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d102      	bne.n	8006c70 <HAL_SPI_Receive+0x16c>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d102      	bne.n	8006c76 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c74:	e04a      	b.n	8006d0c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1cb      	bne.n	8006c18 <HAL_SPI_Receive+0x114>
 8006c80:	e031      	b.n	8006ce6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d113      	bne.n	8006cb8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	b292      	uxth	r2, r2
 8006c9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	1c9a      	adds	r2, r3, #2
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cb6:	e011      	b.n	8006cdc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb8:	f7fc f9a6 	bl	8003008 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d803      	bhi.n	8006cd0 <HAL_SPI_Receive+0x1cc>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d102      	bne.n	8006cd6 <HAL_SPI_Receive+0x1d2>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006cda:	e017      	b.n	8006d0c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1cd      	bne.n	8006c82 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 fa54 	bl	8007198 <SPI_EndRxTransaction>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
 8006d08:	e000      	b.n	8006d0c <HAL_SPI_Receive+0x208>
  }

error :
 8006d0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b08c      	sub	sp, #48	; 0x30
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
 8006d32:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d34:	2301      	movs	r3, #1
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_SPI_TransmitReceive+0x26>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e18a      	b.n	8007062 <HAL_SPI_TransmitReceive+0x33c>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d54:	f7fc f958 	bl	8003008 <HAL_GetTick>
 8006d58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d6a:	887b      	ldrh	r3, [r7, #2]
 8006d6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d00f      	beq.n	8006d96 <HAL_SPI_TransmitReceive+0x70>
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d7c:	d107      	bne.n	8006d8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <HAL_SPI_TransmitReceive+0x68>
 8006d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d003      	beq.n	8006d96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d94:	e15b      	b.n	800704e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x82>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x82>
 8006da2:	887b      	ldrh	r3, [r7, #2]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d103      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006dae:	e14e      	b.n	800704e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d003      	beq.n	8006dc4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2205      	movs	r2, #5
 8006dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	887a      	ldrh	r2, [r7, #2]
 8006dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	887a      	ldrh	r2, [r7, #2]
 8006dda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	887a      	ldrh	r2, [r7, #2]
 8006de6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d007      	beq.n	8006e18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e20:	d178      	bne.n	8006f14 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_SPI_TransmitReceive+0x10a>
 8006e2a:	8b7b      	ldrh	r3, [r7, #26]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d166      	bne.n	8006efe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	881a      	ldrh	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e54:	e053      	b.n	8006efe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d11b      	bne.n	8006e9c <HAL_SPI_TransmitReceive+0x176>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d016      	beq.n	8006e9c <HAL_SPI_TransmitReceive+0x176>
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d113      	bne.n	8006e9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	881a      	ldrh	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	1c9a      	adds	r2, r3, #2
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d119      	bne.n	8006ede <HAL_SPI_TransmitReceive+0x1b8>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d014      	beq.n	8006ede <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	b292      	uxth	r2, r2
 8006ec0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	1c9a      	adds	r2, r3, #2
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eda:	2301      	movs	r3, #1
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ede:	f7fc f893 	bl	8003008 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d807      	bhi.n	8006efe <HAL_SPI_TransmitReceive+0x1d8>
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d003      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006efc:	e0a7      	b.n	800704e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1a6      	bne.n	8006e56 <HAL_SPI_TransmitReceive+0x130>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1a1      	bne.n	8006e56 <HAL_SPI_TransmitReceive+0x130>
 8006f12:	e07c      	b.n	800700e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_SPI_TransmitReceive+0x1fc>
 8006f1c:	8b7b      	ldrh	r3, [r7, #26]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d16b      	bne.n	8006ffa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f48:	e057      	b.n	8006ffa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d11c      	bne.n	8006f92 <HAL_SPI_TransmitReceive+0x26c>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d017      	beq.n	8006f92 <HAL_SPI_TransmitReceive+0x26c>
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d114      	bne.n	8006f92 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	7812      	ldrb	r2, [r2, #0]
 8006f74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d119      	bne.n	8006fd4 <HAL_SPI_TransmitReceive+0x2ae>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d014      	beq.n	8006fd4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fd4:	f7fc f818 	bl	8003008 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d803      	bhi.n	8006fec <HAL_SPI_TransmitReceive+0x2c6>
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	d102      	bne.n	8006ff2 <HAL_SPI_TransmitReceive+0x2cc>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ff8:	e029      	b.n	800704e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1a2      	bne.n	8006f4a <HAL_SPI_TransmitReceive+0x224>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d19d      	bne.n	8006f4a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800700e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007010:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 f926 	bl	8007264 <SPI_EndRxTxTransaction>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d006      	beq.n	800702c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800702a:	e010      	b.n	800704e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10b      	bne.n	800704c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	e000      	b.n	800704e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800704c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800705e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007062:	4618      	mov	r0, r3
 8007064:	3730      	adds	r7, #48	; 0x30
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007078:	b2db      	uxtb	r3, r3
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
	...

08007088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	4613      	mov	r3, r2
 8007096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007098:	f7fb ffb6 	bl	8003008 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4413      	add	r3, r2
 80070a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070a8:	f7fb ffae 	bl	8003008 <HAL_GetTick>
 80070ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070ae:	4b39      	ldr	r3, [pc, #228]	; (8007194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	015b      	lsls	r3, r3, #5
 80070b4:	0d1b      	lsrs	r3, r3, #20
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	fb02 f303 	mul.w	r3, r2, r3
 80070bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070be:	e054      	b.n	800716a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d050      	beq.n	800716a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070c8:	f7fb ff9e 	bl	8003008 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d902      	bls.n	80070de <SPI_WaitFlagStateUntilTimeout+0x56>
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d13d      	bne.n	800715a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f6:	d111      	bne.n	800711c <SPI_WaitFlagStateUntilTimeout+0x94>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007100:	d004      	beq.n	800710c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710a:	d107      	bne.n	800711c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800711a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007124:	d10f      	bne.n	8007146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e017      	b.n	800718a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	3b01      	subs	r3, #1
 8007168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4013      	ands	r3, r2
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	429a      	cmp	r2, r3
 8007178:	bf0c      	ite	eq
 800717a:	2301      	moveq	r3, #1
 800717c:	2300      	movne	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	429a      	cmp	r2, r3
 8007186:	d19b      	bne.n	80070c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000000 	.word	0x20000000

08007198 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ac:	d111      	bne.n	80071d2 <SPI_EndRxTransaction+0x3a>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b6:	d004      	beq.n	80071c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c0:	d107      	bne.n	80071d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071da:	d12a      	bne.n	8007232 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e4:	d012      	beq.n	800720c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2200      	movs	r2, #0
 80071ee:	2180      	movs	r1, #128	; 0x80
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff ff49 	bl	8007088 <SPI_WaitFlagStateUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d02d      	beq.n	8007258 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e026      	b.n	800725a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	2101      	movs	r1, #1
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff ff36 	bl	8007088 <SPI_WaitFlagStateUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d01a      	beq.n	8007258 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007226:	f043 0220 	orr.w	r2, r3, #32
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e013      	b.n	800725a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	2101      	movs	r1, #1
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff ff23 	bl	8007088 <SPI_WaitFlagStateUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d007      	beq.n	8007258 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724c:	f043 0220 	orr.w	r2, r3, #32
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e000      	b.n	800725a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <SPI_EndRxTxTransaction+0x7c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <SPI_EndRxTxTransaction+0x80>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	0d5b      	lsrs	r3, r3, #21
 800727c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007280:	fb02 f303 	mul.w	r3, r2, r3
 8007284:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728e:	d112      	bne.n	80072b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	2180      	movs	r1, #128	; 0x80
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff fef4 	bl	8007088 <SPI_WaitFlagStateUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d016      	beq.n	80072d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072aa:	f043 0220 	orr.w	r2, r3, #32
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e00f      	b.n	80072d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3b01      	subs	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	2b80      	cmp	r3, #128	; 0x80
 80072ce:	d0f2      	beq.n	80072b6 <SPI_EndRxTxTransaction+0x52>
 80072d0:	e000      	b.n	80072d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80072d2:	bf00      	nop
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000000 	.word	0x20000000
 80072e4:	165e9f81 	.word	0x165e9f81

080072e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d123      	bne.n	8007342 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007302:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	6851      	ldr	r1, [r2, #4]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	6892      	ldr	r2, [r2, #8]
 800730e:	4311      	orrs	r1, r2
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	68d2      	ldr	r2, [r2, #12]
 8007314:	4311      	orrs	r1, r2
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	6912      	ldr	r2, [r2, #16]
 800731a:	4311      	orrs	r1, r2
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	6952      	ldr	r2, [r2, #20]
 8007320:	4311      	orrs	r1, r2
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	6992      	ldr	r2, [r2, #24]
 8007326:	4311      	orrs	r1, r2
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	69d2      	ldr	r2, [r2, #28]
 800732c:	4311      	orrs	r1, r2
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	6a12      	ldr	r2, [r2, #32]
 8007332:	4311      	orrs	r1, r2
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007338:	430a      	orrs	r2, r1
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	e028      	b.n	8007394 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	69d9      	ldr	r1, [r3, #28]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	4319      	orrs	r1, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	430b      	orrs	r3, r1
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007368:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	6851      	ldr	r1, [r2, #4]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	6892      	ldr	r2, [r2, #8]
 8007374:	4311      	orrs	r1, r2
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	68d2      	ldr	r2, [r2, #12]
 800737a:	4311      	orrs	r1, r2
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	6912      	ldr	r2, [r2, #16]
 8007380:	4311      	orrs	r1, r2
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	6952      	ldr	r2, [r2, #20]
 8007386:	4311      	orrs	r1, r2
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	6992      	ldr	r2, [r2, #24]
 800738c:	430a      	orrs	r2, r1
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d128      	bne.n	8007406 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	1e59      	subs	r1, r3, #1
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	4319      	orrs	r1, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	4319      	orrs	r1, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	3b01      	subs	r3, #1
 80073dc:	031b      	lsls	r3, r3, #12
 80073de:	4319      	orrs	r1, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	4319      	orrs	r1, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	051b      	lsls	r3, r3, #20
 80073f2:	4319      	orrs	r1, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	061b      	lsls	r3, r3, #24
 80073fc:	430b      	orrs	r3, r1
 80073fe:	431a      	orrs	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	609a      	str	r2, [r3, #8]
 8007404:	e02f      	b.n	8007466 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800740e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	68d2      	ldr	r2, [r2, #12]
 8007416:	3a01      	subs	r2, #1
 8007418:	0311      	lsls	r1, r2, #12
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	6952      	ldr	r2, [r2, #20]
 800741e:	3a01      	subs	r2, #1
 8007420:	0512      	lsls	r2, r2, #20
 8007422:	430a      	orrs	r2, r1
 8007424:	431a      	orrs	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	1e59      	subs	r1, r3, #1
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	3b01      	subs	r3, #1
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	4319      	orrs	r1, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	3b01      	subs	r3, #1
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	4319      	orrs	r1, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	3b01      	subs	r3, #1
 8007452:	041b      	lsls	r3, r3, #16
 8007454:	4319      	orrs	r1, r3
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	3b01      	subs	r3, #1
 800745c:	061b      	lsls	r3, r3, #24
 800745e:	430b      	orrs	r3, r1
 8007460:	431a      	orrs	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	0d9b      	lsrs	r3, r3, #22
 800748a:	059b      	lsls	r3, r3, #22
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	6811      	ldr	r1, [r2, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	6852      	ldr	r2, [r2, #4]
 8007494:	4311      	orrs	r1, r2
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	6892      	ldr	r2, [r2, #8]
 800749a:	3a01      	subs	r2, #1
 800749c:	0152      	lsls	r2, r2, #5
 800749e:	4311      	orrs	r1, r2
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	68d2      	ldr	r2, [r2, #12]
 80074a4:	0252      	lsls	r2, r2, #9
 80074a6:	430a      	orrs	r2, r1
 80074a8:	431a      	orrs	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80074ae:	f7fb fdab 	bl	8003008 <HAL_GetTick>
 80074b2:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80074b4:	e010      	b.n	80074d8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d00c      	beq.n	80074d8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <FMC_SDRAM_SendCommand+0x60>
 80074c4:	f7fb fda0 	bl	8003008 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d201      	bcs.n	80074d8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e006      	b.n	80074e6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d0e8      	beq.n	80074b6 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007500:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	0052      	lsls	r2, r2, #1
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800751c:	b084      	sub	sp, #16
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	f107 001c 	add.w	r0, r7, #28
 800752a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	2b01      	cmp	r3, #1
 8007532:	d122      	bne.n	800757a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800755c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755e:	2b01      	cmp	r3, #1
 8007560:	d105      	bne.n	800756e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fbee 	bl	8008d50 <USB_CoreReset>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	e01a      	b.n	80075b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 fbe2 	bl	8008d50 <USB_CoreReset>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d106      	bne.n	80075a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
 80075a2:	e005      	b.n	80075b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d10b      	bne.n	80075ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f043 0206 	orr.w	r2, r3, #6
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f043 0220 	orr.w	r2, r3, #32
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075da:	b004      	add	sp, #16
 80075dc:	4770      	bx	lr
	...

080075e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d165      	bne.n	80076c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4a41      	ldr	r2, [pc, #260]	; (80076fc <USB_SetTurnaroundTime+0x11c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d906      	bls.n	800760a <USB_SetTurnaroundTime+0x2a>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4a40      	ldr	r2, [pc, #256]	; (8007700 <USB_SetTurnaroundTime+0x120>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d202      	bcs.n	800760a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007604:	230f      	movs	r3, #15
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	e062      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	4a3c      	ldr	r2, [pc, #240]	; (8007700 <USB_SetTurnaroundTime+0x120>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d306      	bcc.n	8007620 <USB_SetTurnaroundTime+0x40>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	4a3b      	ldr	r2, [pc, #236]	; (8007704 <USB_SetTurnaroundTime+0x124>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d202      	bcs.n	8007620 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800761a:	230e      	movs	r3, #14
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	e057      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4a38      	ldr	r2, [pc, #224]	; (8007704 <USB_SetTurnaroundTime+0x124>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d306      	bcc.n	8007636 <USB_SetTurnaroundTime+0x56>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4a37      	ldr	r2, [pc, #220]	; (8007708 <USB_SetTurnaroundTime+0x128>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d202      	bcs.n	8007636 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007630:	230d      	movs	r3, #13
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e04c      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	4a33      	ldr	r2, [pc, #204]	; (8007708 <USB_SetTurnaroundTime+0x128>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d306      	bcc.n	800764c <USB_SetTurnaroundTime+0x6c>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4a32      	ldr	r2, [pc, #200]	; (800770c <USB_SetTurnaroundTime+0x12c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d802      	bhi.n	800764c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007646:	230c      	movs	r3, #12
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e041      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4a2f      	ldr	r2, [pc, #188]	; (800770c <USB_SetTurnaroundTime+0x12c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d906      	bls.n	8007662 <USB_SetTurnaroundTime+0x82>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4a2e      	ldr	r2, [pc, #184]	; (8007710 <USB_SetTurnaroundTime+0x130>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d802      	bhi.n	8007662 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800765c:	230b      	movs	r3, #11
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e036      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4a2a      	ldr	r2, [pc, #168]	; (8007710 <USB_SetTurnaroundTime+0x130>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d906      	bls.n	8007678 <USB_SetTurnaroundTime+0x98>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	4a29      	ldr	r2, [pc, #164]	; (8007714 <USB_SetTurnaroundTime+0x134>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d802      	bhi.n	8007678 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007672:	230a      	movs	r3, #10
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e02b      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4a26      	ldr	r2, [pc, #152]	; (8007714 <USB_SetTurnaroundTime+0x134>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d906      	bls.n	800768e <USB_SetTurnaroundTime+0xae>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4a25      	ldr	r2, [pc, #148]	; (8007718 <USB_SetTurnaroundTime+0x138>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d202      	bcs.n	800768e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007688:	2309      	movs	r3, #9
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e020      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	4a21      	ldr	r2, [pc, #132]	; (8007718 <USB_SetTurnaroundTime+0x138>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d306      	bcc.n	80076a4 <USB_SetTurnaroundTime+0xc4>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4a20      	ldr	r2, [pc, #128]	; (800771c <USB_SetTurnaroundTime+0x13c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d802      	bhi.n	80076a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800769e:	2308      	movs	r3, #8
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	e015      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4a1d      	ldr	r2, [pc, #116]	; (800771c <USB_SetTurnaroundTime+0x13c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d906      	bls.n	80076ba <USB_SetTurnaroundTime+0xda>
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4a1c      	ldr	r2, [pc, #112]	; (8007720 <USB_SetTurnaroundTime+0x140>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d202      	bcs.n	80076ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80076b4:	2307      	movs	r3, #7
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	e00a      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80076ba:	2306      	movs	r3, #6
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	e007      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80076c6:	2309      	movs	r3, #9
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	e001      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80076cc:	2309      	movs	r3, #9
 80076ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	029b      	lsls	r3, r3, #10
 80076e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80076e8:	431a      	orrs	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	00d8acbf 	.word	0x00d8acbf
 8007700:	00e4e1c0 	.word	0x00e4e1c0
 8007704:	00f42400 	.word	0x00f42400
 8007708:	01067380 	.word	0x01067380
 800770c:	011a499f 	.word	0x011a499f
 8007710:	01312cff 	.word	0x01312cff
 8007714:	014ca43f 	.word	0x014ca43f
 8007718:	016e3600 	.word	0x016e3600
 800771c:	01a6ab1f 	.word	0x01a6ab1f
 8007720:	01e84800 	.word	0x01e84800

08007724 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f043 0201 	orr.w	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f023 0201 	bic.w	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d115      	bne.n	80077b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007796:	2001      	movs	r0, #1
 8007798:	f7fb fc42 	bl	8003020 <HAL_Delay>
      ms++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3301      	adds	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 fa45 	bl	8008c32 <USB_GetMode>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d01e      	beq.n	80077ec <USB_SetCurrentMode+0x84>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b31      	cmp	r3, #49	; 0x31
 80077b2:	d9f0      	bls.n	8007796 <USB_SetCurrentMode+0x2e>
 80077b4:	e01a      	b.n	80077ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d115      	bne.n	80077e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077c8:	2001      	movs	r0, #1
 80077ca:	f7fb fc29 	bl	8003020 <HAL_Delay>
      ms++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 fa2c 	bl	8008c32 <USB_GetMode>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <USB_SetCurrentMode+0x84>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b31      	cmp	r3, #49	; 0x31
 80077e4:	d9f0      	bls.n	80077c8 <USB_SetCurrentMode+0x60>
 80077e6:	e001      	b.n	80077ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e005      	b.n	80077f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b32      	cmp	r3, #50	; 0x32
 80077f0:	d101      	bne.n	80077f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e000      	b.n	80077f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007800:	b084      	sub	sp, #16
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800780e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800781a:	2300      	movs	r3, #0
 800781c:	613b      	str	r3, [r7, #16]
 800781e:	e009      	b.n	8007834 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	3340      	adds	r3, #64	; 0x40
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	2200      	movs	r2, #0
 800782c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	3301      	adds	r3, #1
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2b0e      	cmp	r3, #14
 8007838:	d9f2      	bls.n	8007820 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800783a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d11c      	bne.n	800787a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800784e:	f043 0302 	orr.w	r3, r3, #2
 8007852:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
 8007878:	e00b      	b.n	8007892 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007898:	461a      	mov	r2, r3
 800789a:	2300      	movs	r3, #0
 800789c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a4:	4619      	mov	r1, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ac:	461a      	mov	r2, r3
 80078ae:	680b      	ldr	r3, [r1, #0]
 80078b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d10c      	bne.n	80078d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d104      	bne.n	80078c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078be:	2100      	movs	r1, #0
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f965 	bl	8007b90 <USB_SetDevSpeed>
 80078c6:	e008      	b.n	80078da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078c8:	2101      	movs	r1, #1
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f960 	bl	8007b90 <USB_SetDevSpeed>
 80078d0:	e003      	b.n	80078da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078d2:	2103      	movs	r1, #3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f95b 	bl	8007b90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078da:	2110      	movs	r1, #16
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f8f3 	bl	8007ac8 <USB_FlushTxFifo>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f91f 	bl	8007b30 <USB_FlushRxFifo>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007902:	461a      	mov	r2, r3
 8007904:	2300      	movs	r3, #0
 8007906:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	461a      	mov	r2, r3
 8007910:	2300      	movs	r3, #0
 8007912:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	461a      	mov	r2, r3
 800791c:	2300      	movs	r3, #0
 800791e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007920:	2300      	movs	r3, #0
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	e043      	b.n	80079ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800793c:	d118      	bne.n	8007970 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007950:	461a      	mov	r2, r3
 8007952:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	e013      	b.n	8007982 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007966:	461a      	mov	r2, r3
 8007968:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	e008      	b.n	8007982 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797c:	461a      	mov	r2, r3
 800797e:	2300      	movs	r3, #0
 8007980:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798e:	461a      	mov	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a0:	461a      	mov	r2, r3
 80079a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	3301      	adds	r3, #1
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d3b7      	bcc.n	8007926 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	e043      	b.n	8007a44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d2:	d118      	bne.n	8007a06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10a      	bne.n	80079f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	461a      	mov	r2, r3
 80079e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	e013      	b.n	8007a18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fc:	461a      	mov	r2, r3
 80079fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	e008      	b.n	8007a18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a12:	461a      	mov	r2, r3
 8007a14:	2300      	movs	r3, #0
 8007a16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	461a      	mov	r2, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a36:	461a      	mov	r2, r3
 8007a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	3301      	adds	r3, #1
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d3b7      	bcc.n	80079bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d105      	bne.n	8007a80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f043 0210 	orr.w	r2, r3, #16
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699a      	ldr	r2, [r3, #24]
 8007a84:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <USB_DevInit+0x2c4>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f043 0208 	orr.w	r2, r3, #8
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d107      	bne.n	8007ab4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aac:	f043 0304 	orr.w	r3, r3, #4
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ac0:	b004      	add	sp, #16
 8007ac2:	4770      	bx	lr
 8007ac4:	803c3800 	.word	0x803c3800

08007ac8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <USB_FlushTxFifo+0x64>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d901      	bls.n	8007ae8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e01b      	b.n	8007b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	daf2      	bge.n	8007ad6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	019b      	lsls	r3, r3, #6
 8007af8:	f043 0220 	orr.w	r2, r3, #32
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a08      	ldr	r2, [pc, #32]	; (8007b2c <USB_FlushTxFifo+0x64>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d901      	bls.n	8007b12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e006      	b.n	8007b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	d0f0      	beq.n	8007b00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	00030d40 	.word	0x00030d40

08007b30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4a11      	ldr	r2, [pc, #68]	; (8007b8c <USB_FlushRxFifo+0x5c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d901      	bls.n	8007b4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e018      	b.n	8007b80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	daf2      	bge.n	8007b3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2210      	movs	r2, #16
 8007b5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3301      	adds	r3, #1
 8007b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4a08      	ldr	r2, [pc, #32]	; (8007b8c <USB_FlushRxFifo+0x5c>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d901      	bls.n	8007b72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e006      	b.n	8007b80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b10      	cmp	r3, #16
 8007b7c:	d0f0      	beq.n	8007b60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	00030d40 	.word	0x00030d40

08007b90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	68f9      	ldr	r1, [r7, #12]
 8007bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b087      	sub	sp, #28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 0306 	and.w	r3, r3, #6
 8007bda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d102      	bne.n	8007be8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007be2:	2300      	movs	r3, #0
 8007be4:	75fb      	strb	r3, [r7, #23]
 8007be6:	e00a      	b.n	8007bfe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d002      	beq.n	8007bf4 <USB_GetDevSpeed+0x32>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b06      	cmp	r3, #6
 8007bf2:	d102      	bne.n	8007bfa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	75fb      	strb	r3, [r7, #23]
 8007bf8:	e001      	b.n	8007bfe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007bfa:	230f      	movs	r3, #15
 8007bfc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d13a      	bne.n	8007c9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2e:	69da      	ldr	r2, [r3, #28]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 030f 	and.w	r3, r3, #15
 8007c38:	2101      	movs	r1, #1
 8007c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	68f9      	ldr	r1, [r7, #12]
 8007c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c46:	4313      	orrs	r3, r2
 8007c48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d155      	bne.n	8007d0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	791b      	ldrb	r3, [r3, #4]
 8007c7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	059b      	lsls	r3, r3, #22
 8007c82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c84:	4313      	orrs	r3, r2
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	0151      	lsls	r1, r2, #5
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	440a      	add	r2, r1
 8007c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	e036      	b.n	8007d0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca4:	69da      	ldr	r2, [r3, #28]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	2101      	movs	r1, #1
 8007cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb4:	041b      	lsls	r3, r3, #16
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d11a      	bne.n	8007d0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	791b      	ldrb	r3, [r3, #4]
 8007cf0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d161      	bne.n	8007dfc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d4e:	d11f      	bne.n	8007d90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	0151      	lsls	r1, r2, #5
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	440a      	add	r2, r1
 8007d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	2101      	movs	r1, #1
 8007da2:	fa01 f303 	lsl.w	r3, r1, r3
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	43db      	mvns	r3, r3
 8007daa:	68f9      	ldr	r1, [r7, #12]
 8007dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007db0:	4013      	ands	r3, r2
 8007db2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	43db      	mvns	r3, r3
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	0159      	lsls	r1, r3, #5
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	440b      	add	r3, r1
 8007dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df2:	4619      	mov	r1, r3
 8007df4:	4b35      	ldr	r3, [pc, #212]	; (8007ecc <USB_DeactivateEndpoint+0x1b0>)
 8007df6:	4013      	ands	r3, r2
 8007df8:	600b      	str	r3, [r1, #0]
 8007dfa:	e060      	b.n	8007ebe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e12:	d11f      	bne.n	8007e54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	0151      	lsls	r1, r2, #5
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	440a      	add	r2, r1
 8007e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	0151      	lsls	r1, r2, #5
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	440a      	add	r2, r1
 8007e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	2101      	movs	r1, #1
 8007e66:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6a:	041b      	lsls	r3, r3, #16
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e74:	4013      	ands	r3, r2
 8007e76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7e:	69da      	ldr	r2, [r3, #28]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	2101      	movs	r1, #1
 8007e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	43db      	mvns	r3, r3
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e98:	4013      	ands	r3, r2
 8007e9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	0159      	lsls	r1, r3, #5
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	440b      	add	r3, r1
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <USB_DeactivateEndpoint+0x1b4>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	ec337800 	.word	0xec337800
 8007ed0:	eff37800 	.word	0xeff37800

08007ed4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08a      	sub	sp, #40	; 0x28
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	785b      	ldrb	r3, [r3, #1]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	f040 815c 	bne.w	80081ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d132      	bne.n	8007f64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	0151      	lsls	r1, r2, #5
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	440a      	add	r2, r1
 8007f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	0151      	lsls	r1, r2, #5
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	440a      	add	r2, r1
 8007f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5c:	0cdb      	lsrs	r3, r3, #19
 8007f5e:	04db      	lsls	r3, r3, #19
 8007f60:	6113      	str	r3, [r2, #16]
 8007f62:	e074      	b.n	800804e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	0151      	lsls	r1, r2, #5
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	440a      	add	r2, r1
 8007f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f7e:	0cdb      	lsrs	r3, r3, #19
 8007f80:	04db      	lsls	r3, r3, #19
 8007f82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fa2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6999      	ldr	r1, [r3, #24]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	440b      	add	r3, r1
 8007fc0:	1e59      	subs	r1, r3, #1
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007fcc:	4b9d      	ldr	r3, [pc, #628]	; (8008244 <USB_EPStartXfer+0x370>)
 8007fce:	400b      	ands	r3, r1
 8007fd0:	69b9      	ldr	r1, [r7, #24]
 8007fd2:	0148      	lsls	r0, r1, #5
 8007fd4:	69f9      	ldr	r1, [r7, #28]
 8007fd6:	4401      	add	r1, r0
 8007fd8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fec:	691a      	ldr	r2, [r3, #16]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff6:	69b9      	ldr	r1, [r7, #24]
 8007ff8:	0148      	lsls	r0, r1, #5
 8007ffa:	69f9      	ldr	r1, [r7, #28]
 8007ffc:	4401      	add	r1, r0
 8007ffe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008002:	4313      	orrs	r3, r2
 8008004:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	791b      	ldrb	r3, [r3, #4]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d11f      	bne.n	800804e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	440a      	add	r2, r1
 8008024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008028:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800802c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	0151      	lsls	r1, r2, #5
 8008040:	69fa      	ldr	r2, [r7, #28]
 8008042:	440a      	add	r2, r1
 8008044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008048:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800804c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d14b      	bne.n	80080ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d009      	beq.n	8008070 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008068:	461a      	mov	r2, r3
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	791b      	ldrb	r3, [r3, #4]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d128      	bne.n	80080ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008084:	2b00      	cmp	r3, #0
 8008086:	d110      	bne.n	80080aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	0151      	lsls	r1, r2, #5
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	440a      	add	r2, r1
 800809e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	e00f      	b.n	80080ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	0151      	lsls	r1, r2, #5
 80080bc:	69fa      	ldr	r2, [r7, #28]
 80080be:	440a      	add	r2, r1
 80080c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	e133      	b.n	8008354 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	440a      	add	r2, r1
 8008102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008106:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800810a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	791b      	ldrb	r3, [r3, #4]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d015      	beq.n	8008140 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 811b 	beq.w	8008354 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f003 030f 	and.w	r3, r3, #15
 800812e:	2101      	movs	r1, #1
 8008130:	fa01 f303 	lsl.w	r3, r1, r3
 8008134:	69f9      	ldr	r1, [r7, #28]
 8008136:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800813a:	4313      	orrs	r3, r2
 800813c:	634b      	str	r3, [r1, #52]	; 0x34
 800813e:	e109      	b.n	8008354 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814c:	2b00      	cmp	r3, #0
 800814e:	d110      	bne.n	8008172 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	0151      	lsls	r1, r2, #5
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	440a      	add	r2, r1
 8008166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800816a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	e00f      	b.n	8008192 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	4413      	add	r3, r2
 800817a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	0151      	lsls	r1, r2, #5
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	440a      	add	r2, r1
 8008188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008190:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	6919      	ldr	r1, [r3, #16]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	781a      	ldrb	r2, [r3, #0]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	b298      	uxth	r0, r3
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	4603      	mov	r3, r0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fade 	bl	8008768 <USB_WritePacket>
 80081ac:	e0d2      	b.n	8008354 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	69fa      	ldr	r2, [r7, #28]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081c8:	0cdb      	lsrs	r3, r3, #19
 80081ca:	04db      	lsls	r3, r3, #19
 80081cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	0151      	lsls	r1, r2, #5
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	440a      	add	r2, r1
 80081e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d126      	bne.n	8008248 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008206:	691a      	ldr	r2, [r3, #16]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008210:	69b9      	ldr	r1, [r7, #24]
 8008212:	0148      	lsls	r0, r1, #5
 8008214:	69f9      	ldr	r1, [r7, #28]
 8008216:	4401      	add	r1, r0
 8008218:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800821c:	4313      	orrs	r3, r2
 800821e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	440a      	add	r2, r1
 8008236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800823a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800823e:	6113      	str	r3, [r2, #16]
 8008240:	e03a      	b.n	80082b8 <USB_EPStartXfer+0x3e4>
 8008242:	bf00      	nop
 8008244:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	699a      	ldr	r2, [r3, #24]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	4413      	add	r3, r2
 8008252:	1e5a      	subs	r2, r3, #1
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	fbb2 f3f3 	udiv	r3, r2, r3
 800825c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	8afa      	ldrh	r2, [r7, #22]
 8008264:	fb03 f202 	mul.w	r2, r3, r2
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008278:	691a      	ldr	r2, [r3, #16]
 800827a:	8afb      	ldrh	r3, [r7, #22]
 800827c:	04d9      	lsls	r1, r3, #19
 800827e:	4b38      	ldr	r3, [pc, #224]	; (8008360 <USB_EPStartXfer+0x48c>)
 8008280:	400b      	ands	r3, r1
 8008282:	69b9      	ldr	r1, [r7, #24]
 8008284:	0148      	lsls	r0, r1, #5
 8008286:	69f9      	ldr	r1, [r7, #28]
 8008288:	4401      	add	r1, r0
 800828a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800828e:	4313      	orrs	r3, r2
 8008290:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082a8:	69b9      	ldr	r1, [r7, #24]
 80082aa:	0148      	lsls	r0, r1, #5
 80082ac:	69f9      	ldr	r1, [r7, #28]
 80082ae:	4401      	add	r1, r0
 80082b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082b4:	4313      	orrs	r3, r2
 80082b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d10d      	bne.n	80082da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6919      	ldr	r1, [r3, #16]
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d6:	460a      	mov	r2, r1
 80082d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	791b      	ldrb	r3, [r3, #4]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d128      	bne.n	8008334 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d110      	bne.n	8008314 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	e00f      	b.n	8008334 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	440a      	add	r2, r1
 800832a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800832e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008332:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	440a      	add	r2, r1
 800834a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800834e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008352:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	1ff80000 	.word	0x1ff80000

08008364 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	785b      	ldrb	r3, [r3, #1]
 8008380:	2b01      	cmp	r3, #1
 8008382:	f040 80ce 	bne.w	8008522 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d132      	bne.n	80083f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	0151      	lsls	r1, r2, #5
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	440a      	add	r2, r1
 80083e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ec:	0cdb      	lsrs	r3, r3, #19
 80083ee:	04db      	lsls	r3, r3, #19
 80083f0:	6113      	str	r3, [r2, #16]
 80083f2:	e04e      	b.n	8008492 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	0151      	lsls	r1, r2, #5
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	440a      	add	r2, r1
 800840a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800840e:	0cdb      	lsrs	r3, r3, #19
 8008410:	04db      	lsls	r3, r3, #19
 8008412:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008432:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008436:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	699a      	ldr	r2, [r3, #24]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	429a      	cmp	r2, r3
 8008442:	d903      	bls.n	800844c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008466:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800846a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008478:	691a      	ldr	r2, [r3, #16]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008482:	6939      	ldr	r1, [r7, #16]
 8008484:	0148      	lsls	r0, r1, #5
 8008486:	6979      	ldr	r1, [r7, #20]
 8008488:	4401      	add	r1, r0
 800848a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800848e:	4313      	orrs	r3, r2
 8008490:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d11e      	bne.n	80084d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ac:	461a      	mov	r2, r3
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	e097      	b.n	8008606 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 8083 	beq.w	8008606 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f303 	lsl.w	r3, r1, r3
 8008516:	6979      	ldr	r1, [r7, #20]
 8008518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800851c:	4313      	orrs	r3, r2
 800851e:	634b      	str	r3, [r1, #52]	; 0x34
 8008520:	e071      	b.n	8008606 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	440a      	add	r2, r1
 8008538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800853c:	0cdb      	lsrs	r3, r3, #19
 800853e:	04db      	lsls	r3, r3, #19
 8008540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800855c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008560:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008564:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	440a      	add	r2, r1
 8008594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800859c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085b4:	6939      	ldr	r1, [r7, #16]
 80085b6:	0148      	lsls	r0, r1, #5
 80085b8:	6979      	ldr	r1, [r7, #20]
 80085ba:	4401      	add	r1, r0
 80085bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085c0:	4313      	orrs	r3, r2
 80085c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d10d      	bne.n	80085e6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d009      	beq.n	80085e6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6919      	ldr	r1, [r3, #16]
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e2:	460a      	mov	r2, r1
 80085e4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	0151      	lsls	r1, r2, #5
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	440a      	add	r2, r1
 80085fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008600:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008604:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	785b      	ldrb	r3, [r3, #1]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d14a      	bne.n	80086c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800864a:	f040 8086 	bne.w	800875a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008670:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	7812      	ldrb	r2, [r2, #0]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	440a      	add	r2, r1
 800868c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008694:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3301      	adds	r3, #1
 800869a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f242 7210 	movw	r2, #10000	; 0x2710
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d902      	bls.n	80086ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	75fb      	strb	r3, [r7, #23]
          break;
 80086aa:	e056      	b.n	800875a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086c4:	d0e7      	beq.n	8008696 <USB_EPStopXfer+0x82>
 80086c6:	e048      	b.n	800875a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086e0:	d13b      	bne.n	800875a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	7812      	ldrb	r2, [r2, #0]
 80086f6:	0151      	lsls	r1, r2, #5
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	440a      	add	r2, r1
 80086fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008700:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008704:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	0151      	lsls	r1, r2, #5
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	440a      	add	r2, r1
 8008720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008728:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f242 7210 	movw	r2, #10000	; 0x2710
 8008736:	4293      	cmp	r3, r2
 8008738:	d902      	bls.n	8008740 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	75fb      	strb	r3, [r7, #23]
          break;
 800873e:	e00c      	b.n	800875a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008758:	d0e7      	beq.n	800872a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
}
 800875c:	4618      	mov	r0, r3
 800875e:	371c      	adds	r7, #28
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008768:	b480      	push	{r7}
 800876a:	b089      	sub	sp, #36	; 0x24
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4611      	mov	r1, r2
 8008774:	461a      	mov	r2, r3
 8008776:	460b      	mov	r3, r1
 8008778:	71fb      	strb	r3, [r7, #7]
 800877a:	4613      	mov	r3, r2
 800877c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008786:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800878a:	2b00      	cmp	r3, #0
 800878c:	d123      	bne.n	80087d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800878e:	88bb      	ldrh	r3, [r7, #4]
 8008790:	3303      	adds	r3, #3
 8008792:	089b      	lsrs	r3, r3, #2
 8008794:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008796:	2300      	movs	r3, #0
 8008798:	61bb      	str	r3, [r7, #24]
 800879a:	e018      	b.n	80087ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	031a      	lsls	r2, r3, #12
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a8:	461a      	mov	r2, r3
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	3301      	adds	r3, #1
 80087b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	3301      	adds	r3, #1
 80087ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	3301      	adds	r3, #1
 80087c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	3301      	adds	r3, #1
 80087c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	3301      	adds	r3, #1
 80087cc:	61bb      	str	r3, [r7, #24]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d3e2      	bcc.n	800879c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3724      	adds	r7, #36	; 0x24
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b08b      	sub	sp, #44	; 0x2c
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	4613      	mov	r3, r2
 80087f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	089b      	lsrs	r3, r3, #2
 80087fe:	b29b      	uxth	r3, r3
 8008800:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	f003 0303 	and.w	r3, r3, #3
 8008808:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800880a:	2300      	movs	r3, #0
 800880c:	623b      	str	r3, [r7, #32]
 800880e:	e014      	b.n	800883a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	601a      	str	r2, [r3, #0]
    pDest++;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	3301      	adds	r3, #1
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	3301      	adds	r3, #1
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	3301      	adds	r3, #1
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	3301      	adds	r3, #1
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	3301      	adds	r3, #1
 8008838:	623b      	str	r3, [r7, #32]
 800883a:	6a3a      	ldr	r2, [r7, #32]
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	429a      	cmp	r2, r3
 8008840:	d3e6      	bcc.n	8008810 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008842:	8bfb      	ldrh	r3, [r7, #30]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01e      	beq.n	8008886 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008852:	461a      	mov	r2, r3
 8008854:	f107 0310 	add.w	r3, r7, #16
 8008858:	6812      	ldr	r2, [r2, #0]
 800885a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
 8008868:	b2da      	uxtb	r2, r3
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	701a      	strb	r2, [r3, #0]
      i++;
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	3301      	adds	r3, #1
 8008872:	623b      	str	r3, [r7, #32]
      pDest++;
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	3301      	adds	r3, #1
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800887a:	8bfb      	ldrh	r3, [r7, #30]
 800887c:	3b01      	subs	r3, #1
 800887e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008880:	8bfb      	ldrh	r3, [r7, #30]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1ea      	bne.n	800885c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008888:	4618      	mov	r0, r3
 800888a:	372c      	adds	r7, #44	; 0x2c
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d12c      	bne.n	800890a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	db12      	blt.n	80088e8 <USB_EPSetStall+0x54>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00f      	beq.n	80088e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	e02b      	b.n	8008962 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	db12      	blt.n	8008942 <USB_EPSetStall+0xae>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00f      	beq.n	8008942 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	0151      	lsls	r1, r2, #5
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	440a      	add	r2, r1
 8008938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800893c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008940:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4413      	add	r3, r2
 800894a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	440a      	add	r2, r1
 8008958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800895c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008960:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d128      	bne.n	80089de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	791b      	ldrb	r3, [r3, #4]
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d003      	beq.n	80089bc <USB_EPClearStall+0x4c>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	791b      	ldrb	r3, [r3, #4]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d138      	bne.n	8008a2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	e027      	b.n	8008a2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	0151      	lsls	r1, r2, #5
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	440a      	add	r2, r1
 80089f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	791b      	ldrb	r3, [r3, #4]
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d003      	beq.n	8008a0e <USB_EPClearStall+0x9e>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	791b      	ldrb	r3, [r3, #4]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d10f      	bne.n	8008a2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	0151      	lsls	r1, r2, #5
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	440a      	add	r2, r1
 8008a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008a70:	68f9      	ldr	r1, [r7, #12]
 8008a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a76:	4313      	orrs	r3, r2
 8008a78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ab6:	f023 0302 	bic.w	r3, r3, #2
 8008aba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b085      	sub	sp, #20
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ae4:	f023 0303 	bic.w	r3, r3, #3
 8008ae8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008af8:	f043 0302 	orr.w	r3, r3, #2
 8008afc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4013      	ands	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b24:	68fb      	ldr	r3, [r7, #12]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	4013      	ands	r3, r2
 8008b54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	0c1b      	lsrs	r3, r3, #16
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	4013      	ands	r3, r2
 8008b88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	b29b      	uxth	r3, r3
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008baa:	78fb      	ldrb	r3, [r7, #3]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b087      	sub	sp, #28
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	fa22 f303 	lsr.w	r3, r2, r3
 8008c06:	01db      	lsls	r3, r3, #7
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	4013      	ands	r3, r2
 8008c22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c24:	68bb      	ldr	r3, [r7, #8]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	371c      	adds	r7, #28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f003 0301 	and.w	r3, r3, #1
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b085      	sub	sp, #20
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c6c:	f023 0307 	bic.w	r3, r3, #7
 8008c70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	333c      	adds	r3, #60	; 0x3c
 8008caa:	3304      	adds	r3, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4a26      	ldr	r2, [pc, #152]	; (8008d4c <USB_EP0_OutStart+0xb8>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d90a      	bls.n	8008cce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cc8:	d101      	bne.n	8008cce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e037      	b.n	8008d3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cfc:	f043 0318 	orr.w	r3, r3, #24
 8008d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008d14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008d16:	7afb      	ldrb	r3, [r7, #11]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d10f      	bne.n	8008d3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d22:	461a      	mov	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008d3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	4f54300a 	.word	0x4f54300a

08008d50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4a13      	ldr	r2, [pc, #76]	; (8008db4 <USB_CoreReset+0x64>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d901      	bls.n	8008d6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e01b      	b.n	8008da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	daf2      	bge.n	8008d5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	f043 0201 	orr.w	r2, r3, #1
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <USB_CoreReset+0x64>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d901      	bls.n	8008d98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e006      	b.n	8008da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d0f0      	beq.n	8008d86 <USB_CoreReset+0x36>

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	00030d40 	.word	0x00030d40

08008db8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008dc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008dc8:	f002 fc96 	bl	800b6f8 <USBD_static_malloc>
 8008dcc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d109      	bne.n	8008de8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	32b0      	adds	r2, #176	; 0xb0
 8008dde:	2100      	movs	r1, #0
 8008de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008de4:	2302      	movs	r3, #2
 8008de6:	e0d4      	b.n	8008f92 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008de8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008dec:	2100      	movs	r1, #0
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f002 fcf0 	bl	800b7d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	32b0      	adds	r2, #176	; 0xb0
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	32b0      	adds	r2, #176	; 0xb0
 8008e0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7c1b      	ldrb	r3, [r3, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d138      	bne.n	8008e92 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008e20:	4b5e      	ldr	r3, [pc, #376]	; (8008f9c <USBD_CDC_Init+0x1e4>)
 8008e22:	7819      	ldrb	r1, [r3, #0]
 8008e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e28:	2202      	movs	r2, #2
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f002 fb41 	bl	800b4b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008e30:	4b5a      	ldr	r3, [pc, #360]	; (8008f9c <USBD_CDC_Init+0x1e4>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f003 020f 	and.w	r2, r3, #15
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	440b      	add	r3, r1
 8008e44:	3324      	adds	r3, #36	; 0x24
 8008e46:	2201      	movs	r2, #1
 8008e48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008e4a:	4b55      	ldr	r3, [pc, #340]	; (8008fa0 <USBD_CDC_Init+0x1e8>)
 8008e4c:	7819      	ldrb	r1, [r3, #0]
 8008e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e52:	2202      	movs	r2, #2
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f002 fb2c 	bl	800b4b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008e5a:	4b51      	ldr	r3, [pc, #324]	; (8008fa0 <USBD_CDC_Init+0x1e8>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	f003 020f 	and.w	r2, r3, #15
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e72:	2201      	movs	r2, #1
 8008e74:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008e76:	4b4b      	ldr	r3, [pc, #300]	; (8008fa4 <USBD_CDC_Init+0x1ec>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	f003 020f 	and.w	r2, r3, #15
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	4613      	mov	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	440b      	add	r3, r1
 8008e8a:	3326      	adds	r3, #38	; 0x26
 8008e8c:	2210      	movs	r2, #16
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	e035      	b.n	8008efe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008e92:	4b42      	ldr	r3, [pc, #264]	; (8008f9c <USBD_CDC_Init+0x1e4>)
 8008e94:	7819      	ldrb	r1, [r3, #0]
 8008e96:	2340      	movs	r3, #64	; 0x40
 8008e98:	2202      	movs	r2, #2
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f002 fb09 	bl	800b4b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ea0:	4b3e      	ldr	r3, [pc, #248]	; (8008f9c <USBD_CDC_Init+0x1e4>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	f003 020f 	and.w	r2, r3, #15
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	3324      	adds	r3, #36	; 0x24
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008eba:	4b39      	ldr	r3, [pc, #228]	; (8008fa0 <USBD_CDC_Init+0x1e8>)
 8008ebc:	7819      	ldrb	r1, [r3, #0]
 8008ebe:	2340      	movs	r3, #64	; 0x40
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f002 faf5 	bl	800b4b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ec8:	4b35      	ldr	r3, [pc, #212]	; (8008fa0 <USBD_CDC_Init+0x1e8>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	f003 020f 	and.w	r2, r3, #15
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ee4:	4b2f      	ldr	r3, [pc, #188]	; (8008fa4 <USBD_CDC_Init+0x1ec>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 020f 	and.w	r2, r3, #15
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	3326      	adds	r3, #38	; 0x26
 8008efa:	2210      	movs	r2, #16
 8008efc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008efe:	4b29      	ldr	r3, [pc, #164]	; (8008fa4 <USBD_CDC_Init+0x1ec>)
 8008f00:	7819      	ldrb	r1, [r3, #0]
 8008f02:	2308      	movs	r3, #8
 8008f04:	2203      	movs	r2, #3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f002 fad3 	bl	800b4b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008f0c:	4b25      	ldr	r3, [pc, #148]	; (8008fa4 <USBD_CDC_Init+0x1ec>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	f003 020f 	and.w	r2, r3, #15
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	4613      	mov	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	440b      	add	r3, r1
 8008f20:	3324      	adds	r3, #36	; 0x24
 8008f22:	2201      	movs	r2, #1
 8008f24:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	33b0      	adds	r3, #176	; 0xb0
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e018      	b.n	8008f92 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7c1b      	ldrb	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <USBD_CDC_Init+0x1e8>)
 8008f6a:	7819      	ldrb	r1, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f002 fb8a 	bl	800b690 <USBD_LL_PrepareReceive>
 8008f7c:	e008      	b.n	8008f90 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f7e:	4b08      	ldr	r3, [pc, #32]	; (8008fa0 <USBD_CDC_Init+0x1e8>)
 8008f80:	7819      	ldrb	r1, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f88:	2340      	movs	r3, #64	; 0x40
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f002 fb80 	bl	800b690 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	2000010f 	.word	0x2000010f
 8008fa0:	20000110 	.word	0x20000110
 8008fa4:	20000111 	.word	0x20000111

08008fa8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008fb4:	4b3a      	ldr	r3, [pc, #232]	; (80090a0 <USBD_CDC_DeInit+0xf8>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f002 fa9f 	bl	800b4fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008fc0:	4b37      	ldr	r3, [pc, #220]	; (80090a0 <USBD_CDC_DeInit+0xf8>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	f003 020f 	and.w	r2, r3, #15
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	3324      	adds	r3, #36	; 0x24
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008fda:	4b32      	ldr	r3, [pc, #200]	; (80090a4 <USBD_CDC_DeInit+0xfc>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f002 fa8c 	bl	800b4fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008fe6:	4b2f      	ldr	r3, [pc, #188]	; (80090a4 <USBD_CDC_DeInit+0xfc>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	f003 020f 	and.w	r2, r3, #15
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	440b      	add	r3, r1
 8008ffa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ffe:	2200      	movs	r2, #0
 8009000:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009002:	4b29      	ldr	r3, [pc, #164]	; (80090a8 <USBD_CDC_DeInit+0x100>)
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f002 fa78 	bl	800b4fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800900e:	4b26      	ldr	r3, [pc, #152]	; (80090a8 <USBD_CDC_DeInit+0x100>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	f003 020f 	and.w	r2, r3, #15
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	4613      	mov	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	440b      	add	r3, r1
 8009022:	3324      	adds	r3, #36	; 0x24
 8009024:	2200      	movs	r2, #0
 8009026:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009028:	4b1f      	ldr	r3, [pc, #124]	; (80090a8 <USBD_CDC_DeInit+0x100>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	f003 020f 	and.w	r2, r3, #15
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	4613      	mov	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	440b      	add	r3, r1
 800903c:	3326      	adds	r3, #38	; 0x26
 800903e:	2200      	movs	r2, #0
 8009040:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	32b0      	adds	r2, #176	; 0xb0
 800904c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d01f      	beq.n	8009094 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	33b0      	adds	r3, #176	; 0xb0
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	32b0      	adds	r2, #176	; 0xb0
 8009072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009076:	4618      	mov	r0, r3
 8009078:	f002 fb4c 	bl	800b714 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	32b0      	adds	r2, #176	; 0xb0
 8009086:	2100      	movs	r1, #0
 8009088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	2000010f 	.word	0x2000010f
 80090a4:	20000110 	.word	0x20000110
 80090a8:	20000111 	.word	0x20000111

080090ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	32b0      	adds	r2, #176	; 0xb0
 80090c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80090c6:	2300      	movs	r3, #0
 80090c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80090d8:	2303      	movs	r3, #3
 80090da:	e0bf      	b.n	800925c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d050      	beq.n	800918a <USBD_CDC_Setup+0xde>
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	f040 80af 	bne.w	800924c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88db      	ldrh	r3, [r3, #6]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d03a      	beq.n	800916c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	da1b      	bge.n	8009138 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	33b0      	adds	r3, #176	; 0xb0
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009116:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	88d2      	ldrh	r2, [r2, #6]
 800911c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	88db      	ldrh	r3, [r3, #6]
 8009122:	2b07      	cmp	r3, #7
 8009124:	bf28      	it	cs
 8009126:	2307      	movcs	r3, #7
 8009128:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	89fa      	ldrh	r2, [r7, #14]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fd89 	bl	800ac48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009136:	e090      	b.n	800925a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	785a      	ldrb	r2, [r3, #1]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	88db      	ldrh	r3, [r3, #6]
 8009146:	2b3f      	cmp	r3, #63	; 0x3f
 8009148:	d803      	bhi.n	8009152 <USBD_CDC_Setup+0xa6>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	88db      	ldrh	r3, [r3, #6]
 800914e:	b2da      	uxtb	r2, r3
 8009150:	e000      	b.n	8009154 <USBD_CDC_Setup+0xa8>
 8009152:	2240      	movs	r2, #64	; 0x40
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800915a:	6939      	ldr	r1, [r7, #16]
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009162:	461a      	mov	r2, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 fd9b 	bl	800aca0 <USBD_CtlPrepareRx>
      break;
 800916a:	e076      	b.n	800925a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	33b0      	adds	r3, #176	; 0xb0
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	7850      	ldrb	r0, [r2, #1]
 8009182:	2200      	movs	r2, #0
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	4798      	blx	r3
      break;
 8009188:	e067      	b.n	800925a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	785b      	ldrb	r3, [r3, #1]
 800918e:	2b0b      	cmp	r3, #11
 8009190:	d851      	bhi.n	8009236 <USBD_CDC_Setup+0x18a>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <USBD_CDC_Setup+0xec>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091c9 	.word	0x080091c9
 800919c:	08009245 	.word	0x08009245
 80091a0:	08009237 	.word	0x08009237
 80091a4:	08009237 	.word	0x08009237
 80091a8:	08009237 	.word	0x08009237
 80091ac:	08009237 	.word	0x08009237
 80091b0:	08009237 	.word	0x08009237
 80091b4:	08009237 	.word	0x08009237
 80091b8:	08009237 	.word	0x08009237
 80091bc:	08009237 	.word	0x08009237
 80091c0:	080091f3 	.word	0x080091f3
 80091c4:	0800921d 	.word	0x0800921d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d107      	bne.n	80091e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80091d4:	f107 030a 	add.w	r3, r7, #10
 80091d8:	2202      	movs	r2, #2
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 fd33 	bl	800ac48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091e2:	e032      	b.n	800924a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 fcbd 	bl	800ab66 <USBD_CtlError>
            ret = USBD_FAIL;
 80091ec:	2303      	movs	r3, #3
 80091ee:	75fb      	strb	r3, [r7, #23]
          break;
 80091f0:	e02b      	b.n	800924a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d107      	bne.n	800920e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80091fe:	f107 030d 	add.w	r3, r7, #13
 8009202:	2201      	movs	r2, #1
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 fd1e 	bl	800ac48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800920c:	e01d      	b.n	800924a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 fca8 	bl	800ab66 <USBD_CtlError>
            ret = USBD_FAIL;
 8009216:	2303      	movs	r3, #3
 8009218:	75fb      	strb	r3, [r7, #23]
          break;
 800921a:	e016      	b.n	800924a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b03      	cmp	r3, #3
 8009226:	d00f      	beq.n	8009248 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f001 fc9b 	bl	800ab66 <USBD_CtlError>
            ret = USBD_FAIL;
 8009230:	2303      	movs	r3, #3
 8009232:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009234:	e008      	b.n	8009248 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 fc94 	bl	800ab66 <USBD_CtlError>
          ret = USBD_FAIL;
 800923e:	2303      	movs	r3, #3
 8009240:	75fb      	strb	r3, [r7, #23]
          break;
 8009242:	e002      	b.n	800924a <USBD_CDC_Setup+0x19e>
          break;
 8009244:	bf00      	nop
 8009246:	e008      	b.n	800925a <USBD_CDC_Setup+0x1ae>
          break;
 8009248:	bf00      	nop
      }
      break;
 800924a:	e006      	b.n	800925a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 fc89 	bl	800ab66 <USBD_CtlError>
      ret = USBD_FAIL;
 8009254:	2303      	movs	r3, #3
 8009256:	75fb      	strb	r3, [r7, #23]
      break;
 8009258:	bf00      	nop
  }

  return (uint8_t)ret;
 800925a:	7dfb      	ldrb	r3, [r7, #23]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009276:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	32b0      	adds	r2, #176	; 0xb0
 8009282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800928a:	2303      	movs	r3, #3
 800928c:	e065      	b.n	800935a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	32b0      	adds	r2, #176	; 0xb0
 8009298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	f003 020f 	and.w	r2, r3, #15
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	4613      	mov	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	440b      	add	r3, r1
 80092b0:	3318      	adds	r3, #24
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d02f      	beq.n	8009318 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	f003 020f 	and.w	r2, r3, #15
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	440b      	add	r3, r1
 80092ca:	3318      	adds	r3, #24
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	f003 010f 	and.w	r1, r3, #15
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	460b      	mov	r3, r1
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	440b      	add	r3, r1
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4403      	add	r3, r0
 80092e0:	3348      	adds	r3, #72	; 0x48
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80092e8:	fb01 f303 	mul.w	r3, r1, r3
 80092ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d112      	bne.n	8009318 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	f003 020f 	and.w	r2, r3, #15
 80092f8:	6879      	ldr	r1, [r7, #4]
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	440b      	add	r3, r1
 8009304:	3318      	adds	r3, #24
 8009306:	2200      	movs	r2, #0
 8009308:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800930a:	78f9      	ldrb	r1, [r7, #3]
 800930c:	2300      	movs	r3, #0
 800930e:	2200      	movs	r2, #0
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f002 f99c 	bl	800b64e <USBD_LL_Transmit>
 8009316:	e01f      	b.n	8009358 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2200      	movs	r2, #0
 800931c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	33b0      	adds	r3, #176	; 0xb0
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d010      	beq.n	8009358 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	33b0      	adds	r3, #176	; 0xb0
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	460b      	mov	r3, r1
 800936c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	32b0      	adds	r2, #176	; 0xb0
 8009378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	32b0      	adds	r2, #176	; 0xb0
 8009388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009390:	2303      	movs	r3, #3
 8009392:	e01a      	b.n	80093ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f002 f99a 	bl	800b6d2 <USBD_LL_GetRxDataSize>
 800939e:	4602      	mov	r2, r0
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	33b0      	adds	r3, #176	; 0xb0
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80093c4:	4611      	mov	r1, r2
 80093c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	32b0      	adds	r2, #176	; 0xb0
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e025      	b.n	8009440 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	33b0      	adds	r3, #176	; 0xb0
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d01a      	beq.n	800943e <USBD_CDC_EP0_RxReady+0x6c>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800940e:	2bff      	cmp	r3, #255	; 0xff
 8009410:	d015      	beq.n	800943e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	33b0      	adds	r3, #176	; 0xb0
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800942a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009432:	b292      	uxth	r2, r2
 8009434:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	22ff      	movs	r2, #255	; 0xff
 800943a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009450:	2182      	movs	r1, #130	; 0x82
 8009452:	4818      	ldr	r0, [pc, #96]	; (80094b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009454:	f000 fd4f 	bl	8009ef6 <USBD_GetEpDesc>
 8009458:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800945a:	2101      	movs	r1, #1
 800945c:	4815      	ldr	r0, [pc, #84]	; (80094b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800945e:	f000 fd4a 	bl	8009ef6 <USBD_GetEpDesc>
 8009462:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009464:	2181      	movs	r1, #129	; 0x81
 8009466:	4813      	ldr	r0, [pc, #76]	; (80094b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009468:	f000 fd45 	bl	8009ef6 <USBD_GetEpDesc>
 800946c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2210      	movs	r2, #16
 8009478:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d006      	beq.n	800948e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2200      	movs	r2, #0
 8009484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009488:	711a      	strb	r2, [r3, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d006      	beq.n	80094a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800949c:	711a      	strb	r2, [r3, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2243      	movs	r2, #67	; 0x43
 80094a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094a8:	4b02      	ldr	r3, [pc, #8]	; (80094b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	200000cc 	.word	0x200000cc

080094b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80094c0:	2182      	movs	r1, #130	; 0x82
 80094c2:	4818      	ldr	r0, [pc, #96]	; (8009524 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80094c4:	f000 fd17 	bl	8009ef6 <USBD_GetEpDesc>
 80094c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80094ca:	2101      	movs	r1, #1
 80094cc:	4815      	ldr	r0, [pc, #84]	; (8009524 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80094ce:	f000 fd12 	bl	8009ef6 <USBD_GetEpDesc>
 80094d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094d4:	2181      	movs	r1, #129	; 0x81
 80094d6:	4813      	ldr	r0, [pc, #76]	; (8009524 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80094d8:	f000 fd0d 	bl	8009ef6 <USBD_GetEpDesc>
 80094dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2210      	movs	r2, #16
 80094e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d006      	beq.n	80094fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	2200      	movs	r2, #0
 80094f4:	711a      	strb	r2, [r3, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f042 0202 	orr.w	r2, r2, #2
 80094fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d006      	beq.n	8009512 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	711a      	strb	r2, [r3, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f042 0202 	orr.w	r2, r2, #2
 8009510:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2243      	movs	r2, #67	; 0x43
 8009516:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009518:	4b02      	ldr	r3, [pc, #8]	; (8009524 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	200000cc 	.word	0x200000cc

08009528 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009530:	2182      	movs	r1, #130	; 0x82
 8009532:	4818      	ldr	r0, [pc, #96]	; (8009594 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009534:	f000 fcdf 	bl	8009ef6 <USBD_GetEpDesc>
 8009538:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800953a:	2101      	movs	r1, #1
 800953c:	4815      	ldr	r0, [pc, #84]	; (8009594 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800953e:	f000 fcda 	bl	8009ef6 <USBD_GetEpDesc>
 8009542:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009544:	2181      	movs	r1, #129	; 0x81
 8009546:	4813      	ldr	r0, [pc, #76]	; (8009594 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009548:	f000 fcd5 	bl	8009ef6 <USBD_GetEpDesc>
 800954c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2210      	movs	r2, #16
 8009558:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d006      	beq.n	800956e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	2200      	movs	r2, #0
 8009564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009568:	711a      	strb	r2, [r3, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d006      	beq.n	8009582 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800957c:	711a      	strb	r2, [r3, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2243      	movs	r2, #67	; 0x43
 8009586:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009588:	4b02      	ldr	r3, [pc, #8]	; (8009594 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	200000cc 	.word	0x200000cc

08009598 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	220a      	movs	r2, #10
 80095a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095a6:	4b03      	ldr	r3, [pc, #12]	; (80095b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	20000088 	.word	0x20000088

080095b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e009      	b.n	80095e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	33b0      	adds	r3, #176	; 0xb0
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	32b0      	adds	r2, #176	; 0xb0
 8009602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009606:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800960e:	2303      	movs	r3, #3
 8009610:	e008      	b.n	8009624 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	371c      	adds	r7, #28
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	32b0      	adds	r2, #176	; 0xb0
 8009644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009648:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009650:	2303      	movs	r3, #3
 8009652:	e004      	b.n	800965e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	32b0      	adds	r2, #176	; 0xb0
 800967e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009682:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009684:	2301      	movs	r3, #1
 8009686:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	32b0      	adds	r2, #176	; 0xb0
 8009692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800969a:	2303      	movs	r3, #3
 800969c:	e025      	b.n	80096ea <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d11f      	bne.n	80096e8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80096b0:	4b10      	ldr	r3, [pc, #64]	; (80096f4 <USBD_CDC_TransmitPacket+0x88>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	f003 020f 	and.w	r2, r3, #15
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4403      	add	r3, r0
 80096ca:	3318      	adds	r3, #24
 80096cc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80096ce:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <USBD_CDC_TransmitPacket+0x88>)
 80096d0:	7819      	ldrb	r1, [r3, #0]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f001 ffb5 	bl	800b64e <USBD_LL_Transmit>

    ret = USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	2000010f 	.word	0x2000010f

080096f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	32b0      	adds	r2, #176	; 0xb0
 800970a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	32b0      	adds	r2, #176	; 0xb0
 800971a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009722:	2303      	movs	r3, #3
 8009724:	e018      	b.n	8009758 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	7c1b      	ldrb	r3, [r3, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800972e:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <USBD_CDC_ReceivePacket+0x68>)
 8009730:	7819      	ldrb	r1, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 ffa7 	bl	800b690 <USBD_LL_PrepareReceive>
 8009742:	e008      	b.n	8009756 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009744:	4b06      	ldr	r3, [pc, #24]	; (8009760 <USBD_CDC_ReceivePacket+0x68>)
 8009746:	7819      	ldrb	r1, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 ff9d 	bl	800b690 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20000110 	.word	0x20000110

08009764 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	4613      	mov	r3, r2
 8009770:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	e01f      	b.n	80097bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	79fa      	ldrb	r2, [r7, #7]
 80097ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f001 fe11 	bl	800b3d8 <USBD_LL_Init>
 80097b6:	4603      	mov	r3, r0
 80097b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80097d8:	2303      	movs	r3, #3
 80097da:	e025      	b.n	8009828 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	32ae      	adds	r2, #174	; 0xae
 80097ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00f      	beq.n	8009818 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	32ae      	adds	r2, #174	; 0xae
 8009802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	f107 020e 	add.w	r2, r7, #14
 800980c:	4610      	mov	r0, r2
 800980e:	4798      	blx	r3
 8009810:	4602      	mov	r2, r0
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800981e:	1c5a      	adds	r2, r3, #1
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 fe1f 	bl	800b47c <USBD_LL_Start>
 800983e:	4603      	mov	r3, r0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009850:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009874:	2b00      	cmp	r3, #0
 8009876:	d009      	beq.n	800988c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	78fa      	ldrb	r2, [r7, #3]
 8009882:	4611      	mov	r1, r2
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800988c:	7bfb      	ldrb	r3, [r7, #15]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	4611      	mov	r1, r2
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	4798      	blx	r3
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80098bc:	2303      	movs	r3, #3
 80098be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	4618      	mov	r0, r3
 80098de:	f001 f908 	bl	800aaf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80098f0:	461a      	mov	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098fe:	f003 031f 	and.w	r3, r3, #31
 8009902:	2b02      	cmp	r3, #2
 8009904:	d01a      	beq.n	800993c <USBD_LL_SetupStage+0x72>
 8009906:	2b02      	cmp	r3, #2
 8009908:	d822      	bhi.n	8009950 <USBD_LL_SetupStage+0x86>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <USBD_LL_SetupStage+0x4a>
 800990e:	2b01      	cmp	r3, #1
 8009910:	d00a      	beq.n	8009928 <USBD_LL_SetupStage+0x5e>
 8009912:	e01d      	b.n	8009950 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fb5f 	bl	8009fe0 <USBD_StdDevReq>
 8009922:	4603      	mov	r3, r0
 8009924:	73fb      	strb	r3, [r7, #15]
      break;
 8009926:	e020      	b.n	800996a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fbc7 	bl	800a0c4 <USBD_StdItfReq>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]
      break;
 800993a:	e016      	b.n	800996a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fc29 	bl	800a19c <USBD_StdEPReq>
 800994a:	4603      	mov	r3, r0
 800994c:	73fb      	strb	r3, [r7, #15]
      break;
 800994e:	e00c      	b.n	800996a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009956:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800995a:	b2db      	uxtb	r3, r3
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 fdec 	bl	800b53c <USBD_LL_StallEP>
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]
      break;
 8009968:	bf00      	nop
  }

  return ret;
 800996a:	7bfb      	ldrb	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	460b      	mov	r3, r1
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009986:	7afb      	ldrb	r3, [r7, #11]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d16e      	bne.n	8009a6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009992:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800999a:	2b03      	cmp	r3, #3
 800999c:	f040 8098 	bne.w	8009ad0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	689a      	ldr	r2, [r3, #8]
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d913      	bls.n	80099d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	1ad2      	subs	r2, r2, r3
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	68da      	ldr	r2, [r3, #12]
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	4293      	cmp	r3, r2
 80099c4:	bf28      	it	cs
 80099c6:	4613      	movcs	r3, r2
 80099c8:	461a      	mov	r2, r3
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f001 f984 	bl	800acda <USBD_CtlContinueRx>
 80099d2:	e07d      	b.n	8009ad0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80099da:	f003 031f 	and.w	r3, r3, #31
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d014      	beq.n	8009a0c <USBD_LL_DataOutStage+0x98>
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d81d      	bhi.n	8009a22 <USBD_LL_DataOutStage+0xae>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d002      	beq.n	80099f0 <USBD_LL_DataOutStage+0x7c>
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d003      	beq.n	80099f6 <USBD_LL_DataOutStage+0x82>
 80099ee:	e018      	b.n	8009a22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	75bb      	strb	r3, [r7, #22]
            break;
 80099f4:	e018      	b.n	8009a28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	4619      	mov	r1, r3
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 fa5e 	bl	8009ec2 <USBD_CoreFindIF>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75bb      	strb	r3, [r7, #22]
            break;
 8009a0a:	e00d      	b.n	8009a28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	4619      	mov	r1, r3
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 fa60 	bl	8009edc <USBD_CoreFindEP>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	75bb      	strb	r3, [r7, #22]
            break;
 8009a20:	e002      	b.n	8009a28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75bb      	strb	r3, [r7, #22]
            break;
 8009a26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009a28:	7dbb      	ldrb	r3, [r7, #22]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d119      	bne.n	8009a62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d113      	bne.n	8009a62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009a3a:	7dba      	ldrb	r2, [r7, #22]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	32ae      	adds	r2, #174	; 0xae
 8009a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00b      	beq.n	8009a62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009a4a:	7dba      	ldrb	r2, [r7, #22]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009a52:	7dba      	ldrb	r2, [r7, #22]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	32ae      	adds	r2, #174	; 0xae
 8009a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f001 f94a 	bl	800acfc <USBD_CtlSendStatus>
 8009a68:	e032      	b.n	8009ad0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009a6a:	7afb      	ldrb	r3, [r7, #11]
 8009a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	4619      	mov	r1, r3
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 fa31 	bl	8009edc <USBD_CoreFindEP>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a7e:	7dbb      	ldrb	r3, [r7, #22]
 8009a80:	2bff      	cmp	r3, #255	; 0xff
 8009a82:	d025      	beq.n	8009ad0 <USBD_LL_DataOutStage+0x15c>
 8009a84:	7dbb      	ldrb	r3, [r7, #22]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d122      	bne.n	8009ad0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d117      	bne.n	8009ac6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009a96:	7dba      	ldrb	r2, [r7, #22]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	32ae      	adds	r2, #174	; 0xae
 8009a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00f      	beq.n	8009ac6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009aa6:	7dba      	ldrb	r2, [r7, #22]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009aae:	7dba      	ldrb	r2, [r7, #22]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	32ae      	adds	r2, #174	; 0xae
 8009ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	7afa      	ldrb	r2, [r7, #11]
 8009abc:	4611      	mov	r1, r2
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	4798      	blx	r3
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009acc:	7dfb      	ldrb	r3, [r7, #23]
 8009ace:	e000      	b.n	8009ad2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b086      	sub	sp, #24
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	607a      	str	r2, [r7, #4]
 8009ae6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ae8:	7afb      	ldrb	r3, [r7, #11]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d16f      	bne.n	8009bce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3314      	adds	r3, #20
 8009af2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d15a      	bne.n	8009bb4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	689a      	ldr	r2, [r3, #8]
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d914      	bls.n	8009b34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	1ad2      	subs	r2, r2, r3
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f001 f8ac 	bl	800ac7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b26:	2300      	movs	r3, #0
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f001 fdaf 	bl	800b690 <USBD_LL_PrepareReceive>
 8009b32:	e03f      	b.n	8009bb4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d11c      	bne.n	8009b7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	685a      	ldr	r2, [r3, #4]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d316      	bcc.n	8009b7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d20f      	bcs.n	8009b7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f001 f88d 	bl	800ac7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2100      	movs	r1, #0
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f001 fd8c 	bl	800b690 <USBD_LL_PrepareReceive>
 8009b78:	e01c      	b.n	8009bb4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d10f      	bne.n	8009ba6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ba6:	2180      	movs	r1, #128	; 0x80
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f001 fcc7 	bl	800b53c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f001 f8b7 	bl	800ad22 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d03a      	beq.n	8009c34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7ff fe42 	bl	8009848 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009bcc:	e032      	b.n	8009c34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009bce:	7afb      	ldrb	r3, [r7, #11]
 8009bd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f97f 	bl	8009edc <USBD_CoreFindEP>
 8009bde:	4603      	mov	r3, r0
 8009be0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	2bff      	cmp	r3, #255	; 0xff
 8009be6:	d025      	beq.n	8009c34 <USBD_LL_DataInStage+0x15a>
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d122      	bne.n	8009c34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d11c      	bne.n	8009c34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009bfa:	7dfa      	ldrb	r2, [r7, #23]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	32ae      	adds	r2, #174	; 0xae
 8009c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d014      	beq.n	8009c34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009c0a:	7dfa      	ldrb	r2, [r7, #23]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009c12:	7dfa      	ldrb	r2, [r7, #23]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	32ae      	adds	r2, #174	; 0xae
 8009c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	7afa      	ldrb	r2, [r7, #11]
 8009c20:	4611      	mov	r1, r2
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	4798      	blx	r3
 8009c26:	4603      	mov	r3, r0
 8009c28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009c2a:	7dbb      	ldrb	r3, [r7, #22]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009c30:	7dbb      	ldrb	r3, [r7, #22]
 8009c32:	e000      	b.n	8009c36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d014      	beq.n	8009ca4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00e      	beq.n	8009ca4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6852      	ldr	r2, [r2, #4]
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	4611      	mov	r1, r2
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	4798      	blx	r3
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ca4:	2340      	movs	r3, #64	; 0x40
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2100      	movs	r1, #0
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f001 fc01 	bl	800b4b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2240      	movs	r2, #64	; 0x40
 8009cbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cc0:	2340      	movs	r3, #64	; 0x40
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2180      	movs	r1, #128	; 0x80
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 fbf3 	bl	800b4b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2240      	movs	r2, #64	; 0x40
 8009cd6:	621a      	str	r2, [r3, #32]

  return ret;
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	78fa      	ldrb	r2, [r7, #3]
 8009cf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2204      	movs	r2, #4
 8009d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d106      	bne.n	8009d50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d110      	bne.n	8009d94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	460b      	mov	r3, r1
 8009da8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	32ae      	adds	r2, #174	; 0xae
 8009db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e01c      	b.n	8009dfa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d115      	bne.n	8009df8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	32ae      	adds	r2, #174	; 0xae
 8009dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00b      	beq.n	8009df8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	32ae      	adds	r2, #174	; 0xae
 8009dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	78fa      	ldrb	r2, [r7, #3]
 8009df2:	4611      	mov	r1, r2
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	32ae      	adds	r2, #174	; 0xae
 8009e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d101      	bne.n	8009e24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e01c      	b.n	8009e5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b03      	cmp	r3, #3
 8009e2e:	d115      	bne.n	8009e5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	32ae      	adds	r2, #174	; 0xae
 8009e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	32ae      	adds	r2, #174	; 0xae
 8009e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e54:	78fa      	ldrb	r2, [r7, #3]
 8009e56:	4611      	mov	r1, r2
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00e      	beq.n	8009eb8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6852      	ldr	r2, [r2, #4]
 8009ea6:	b2d2      	uxtb	r2, r2
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	4798      	blx	r3
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ece:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ee8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b086      	sub	sp, #24
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	885b      	ldrh	r3, [r3, #2]
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d920      	bls.n	8009f60 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009f26:	e013      	b.n	8009f50 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009f28:	f107 030a 	add.w	r3, r7, #10
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6978      	ldr	r0, [r7, #20]
 8009f30:	f000 f81b 	bl	8009f6a <USBD_GetNextDesc>
 8009f34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	785b      	ldrb	r3, [r3, #1]
 8009f3a:	2b05      	cmp	r3, #5
 8009f3c:	d108      	bne.n	8009f50 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	789b      	ldrb	r3, [r3, #2]
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d008      	beq.n	8009f5e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	885b      	ldrh	r3, [r3, #2]
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	897b      	ldrh	r3, [r7, #10]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d8e5      	bhi.n	8009f28 <USBD_GetEpDesc+0x32>
 8009f5c:	e000      	b.n	8009f60 <USBD_GetEpDesc+0x6a>
          break;
 8009f5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009f60:	693b      	ldr	r3, [r7, #16]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3718      	adds	r7, #24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b085      	sub	sp, #20
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	881a      	ldrh	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	4413      	add	r3, r2
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4413      	add	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009f96:	68fb      	ldr	r3, [r7, #12]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009fc2:	8a3b      	ldrh	r3, [r7, #16]
 8009fc4:	021b      	lsls	r3, r3, #8
 8009fc6:	b21a      	sxth	r2, r3
 8009fc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	b21b      	sxth	r3, r3
 8009fd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009fd2:	89fb      	ldrh	r3, [r7, #14]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	371c      	adds	r7, #28
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ff6:	2b40      	cmp	r3, #64	; 0x40
 8009ff8:	d005      	beq.n	800a006 <USBD_StdDevReq+0x26>
 8009ffa:	2b40      	cmp	r3, #64	; 0x40
 8009ffc:	d857      	bhi.n	800a0ae <USBD_StdDevReq+0xce>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00f      	beq.n	800a022 <USBD_StdDevReq+0x42>
 800a002:	2b20      	cmp	r3, #32
 800a004:	d153      	bne.n	800a0ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	32ae      	adds	r2, #174	; 0xae
 800a010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	4798      	blx	r3
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]
      break;
 800a020:	e04a      	b.n	800a0b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	785b      	ldrb	r3, [r3, #1]
 800a026:	2b09      	cmp	r3, #9
 800a028:	d83b      	bhi.n	800a0a2 <USBD_StdDevReq+0xc2>
 800a02a:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <USBD_StdDevReq+0x50>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a085 	.word	0x0800a085
 800a034:	0800a099 	.word	0x0800a099
 800a038:	0800a0a3 	.word	0x0800a0a3
 800a03c:	0800a08f 	.word	0x0800a08f
 800a040:	0800a0a3 	.word	0x0800a0a3
 800a044:	0800a063 	.word	0x0800a063
 800a048:	0800a059 	.word	0x0800a059
 800a04c:	0800a0a3 	.word	0x0800a0a3
 800a050:	0800a07b 	.word	0x0800a07b
 800a054:	0800a06d 	.word	0x0800a06d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fa3c 	bl	800a4d8 <USBD_GetDescriptor>
          break;
 800a060:	e024      	b.n	800a0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fba1 	bl	800a7ac <USBD_SetAddress>
          break;
 800a06a:	e01f      	b.n	800a0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fbe0 	bl	800a834 <USBD_SetConfig>
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]
          break;
 800a078:	e018      	b.n	800a0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fc83 	bl	800a988 <USBD_GetConfig>
          break;
 800a082:	e013      	b.n	800a0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fcb4 	bl	800a9f4 <USBD_GetStatus>
          break;
 800a08c:	e00e      	b.n	800a0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fce3 	bl	800aa5c <USBD_SetFeature>
          break;
 800a096:	e009      	b.n	800a0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fd07 	bl	800aaae <USBD_ClrFeature>
          break;
 800a0a0:	e004      	b.n	800a0ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fd5e 	bl	800ab66 <USBD_CtlError>
          break;
 800a0aa:	bf00      	nop
      }
      break;
 800a0ac:	e004      	b.n	800a0b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fd58 	bl	800ab66 <USBD_CtlError>
      break;
 800a0b6:	bf00      	nop
  }

  return ret;
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop

0800a0c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0da:	2b40      	cmp	r3, #64	; 0x40
 800a0dc:	d005      	beq.n	800a0ea <USBD_StdItfReq+0x26>
 800a0de:	2b40      	cmp	r3, #64	; 0x40
 800a0e0:	d852      	bhi.n	800a188 <USBD_StdItfReq+0xc4>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <USBD_StdItfReq+0x26>
 800a0e6:	2b20      	cmp	r3, #32
 800a0e8:	d14e      	bne.n	800a188 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d840      	bhi.n	800a17a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	889b      	ldrh	r3, [r3, #4]
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d836      	bhi.n	800a170 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	889b      	ldrh	r3, [r3, #4]
 800a106:	b2db      	uxtb	r3, r3
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7ff fed9 	bl	8009ec2 <USBD_CoreFindIF>
 800a110:	4603      	mov	r3, r0
 800a112:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a114:	7bbb      	ldrb	r3, [r7, #14]
 800a116:	2bff      	cmp	r3, #255	; 0xff
 800a118:	d01d      	beq.n	800a156 <USBD_StdItfReq+0x92>
 800a11a:	7bbb      	ldrb	r3, [r7, #14]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d11a      	bne.n	800a156 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a120:	7bba      	ldrb	r2, [r7, #14]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	32ae      	adds	r2, #174	; 0xae
 800a126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00f      	beq.n	800a150 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a130:	7bba      	ldrb	r2, [r7, #14]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a138:	7bba      	ldrb	r2, [r7, #14]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	32ae      	adds	r2, #174	; 0xae
 800a13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	4798      	blx	r3
 800a14a:	4603      	mov	r3, r0
 800a14c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a14e:	e004      	b.n	800a15a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a150:	2303      	movs	r3, #3
 800a152:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a154:	e001      	b.n	800a15a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a156:	2303      	movs	r3, #3
 800a158:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	88db      	ldrh	r3, [r3, #6]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d110      	bne.n	800a184 <USBD_StdItfReq+0xc0>
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10d      	bne.n	800a184 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fdc7 	bl	800acfc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a16e:	e009      	b.n	800a184 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fcf7 	bl	800ab66 <USBD_CtlError>
          break;
 800a178:	e004      	b.n	800a184 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fcf2 	bl	800ab66 <USBD_CtlError>
          break;
 800a182:	e000      	b.n	800a186 <USBD_StdItfReq+0xc2>
          break;
 800a184:	bf00      	nop
      }
      break;
 800a186:	e004      	b.n	800a192 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fceb 	bl	800ab66 <USBD_CtlError>
      break;
 800a190:	bf00      	nop
  }

  return ret;
 800a192:	7bfb      	ldrb	r3, [r7, #15]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	889b      	ldrh	r3, [r3, #4]
 800a1ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1b8:	2b40      	cmp	r3, #64	; 0x40
 800a1ba:	d007      	beq.n	800a1cc <USBD_StdEPReq+0x30>
 800a1bc:	2b40      	cmp	r3, #64	; 0x40
 800a1be:	f200 817f 	bhi.w	800a4c0 <USBD_StdEPReq+0x324>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d02a      	beq.n	800a21c <USBD_StdEPReq+0x80>
 800a1c6:	2b20      	cmp	r3, #32
 800a1c8:	f040 817a 	bne.w	800a4c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff fe83 	bl	8009edc <USBD_CoreFindEP>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1da:	7b7b      	ldrb	r3, [r7, #13]
 800a1dc:	2bff      	cmp	r3, #255	; 0xff
 800a1de:	f000 8174 	beq.w	800a4ca <USBD_StdEPReq+0x32e>
 800a1e2:	7b7b      	ldrb	r3, [r7, #13]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f040 8170 	bne.w	800a4ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a1ea:	7b7a      	ldrb	r2, [r7, #13]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a1f2:	7b7a      	ldrb	r2, [r7, #13]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	32ae      	adds	r2, #174	; 0xae
 800a1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 8163 	beq.w	800a4ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a204:	7b7a      	ldrb	r2, [r7, #13]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	32ae      	adds	r2, #174	; 0xae
 800a20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	4798      	blx	r3
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a21a:	e156      	b.n	800a4ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	785b      	ldrb	r3, [r3, #1]
 800a220:	2b03      	cmp	r3, #3
 800a222:	d008      	beq.n	800a236 <USBD_StdEPReq+0x9a>
 800a224:	2b03      	cmp	r3, #3
 800a226:	f300 8145 	bgt.w	800a4b4 <USBD_StdEPReq+0x318>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 809b 	beq.w	800a366 <USBD_StdEPReq+0x1ca>
 800a230:	2b01      	cmp	r3, #1
 800a232:	d03c      	beq.n	800a2ae <USBD_StdEPReq+0x112>
 800a234:	e13e      	b.n	800a4b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d002      	beq.n	800a248 <USBD_StdEPReq+0xac>
 800a242:	2b03      	cmp	r3, #3
 800a244:	d016      	beq.n	800a274 <USBD_StdEPReq+0xd8>
 800a246:	e02c      	b.n	800a2a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a248:	7bbb      	ldrb	r3, [r7, #14]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00d      	beq.n	800a26a <USBD_StdEPReq+0xce>
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	2b80      	cmp	r3, #128	; 0x80
 800a252:	d00a      	beq.n	800a26a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 f96f 	bl	800b53c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a25e:	2180      	movs	r1, #128	; 0x80
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 f96b 	bl	800b53c <USBD_LL_StallEP>
 800a266:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a268:	e020      	b.n	800a2ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fc7a 	bl	800ab66 <USBD_CtlError>
              break;
 800a272:	e01b      	b.n	800a2ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	885b      	ldrh	r3, [r3, #2]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10e      	bne.n	800a29a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a27c:	7bbb      	ldrb	r3, [r7, #14]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <USBD_StdEPReq+0xfe>
 800a282:	7bbb      	ldrb	r3, [r7, #14]
 800a284:	2b80      	cmp	r3, #128	; 0x80
 800a286:	d008      	beq.n	800a29a <USBD_StdEPReq+0xfe>
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	88db      	ldrh	r3, [r3, #6]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d104      	bne.n	800a29a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a290:	7bbb      	ldrb	r3, [r7, #14]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 f951 	bl	800b53c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fd2e 	bl	800acfc <USBD_CtlSendStatus>

              break;
 800a2a0:	e004      	b.n	800a2ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fc5e 	bl	800ab66 <USBD_CtlError>
              break;
 800a2aa:	bf00      	nop
          }
          break;
 800a2ac:	e107      	b.n	800a4be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d002      	beq.n	800a2c0 <USBD_StdEPReq+0x124>
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d016      	beq.n	800a2ec <USBD_StdEPReq+0x150>
 800a2be:	e04b      	b.n	800a358 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00d      	beq.n	800a2e2 <USBD_StdEPReq+0x146>
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	2b80      	cmp	r3, #128	; 0x80
 800a2ca:	d00a      	beq.n	800a2e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 f933 	bl	800b53c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2d6:	2180      	movs	r1, #128	; 0x80
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 f92f 	bl	800b53c <USBD_LL_StallEP>
 800a2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2e0:	e040      	b.n	800a364 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fc3e 	bl	800ab66 <USBD_CtlError>
              break;
 800a2ea:	e03b      	b.n	800a364 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	885b      	ldrh	r3, [r3, #2]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d136      	bne.n	800a362 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
 800a2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 f939 	bl	800b57a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fcf7 	bl	800acfc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	4619      	mov	r1, r3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff fde2 	bl	8009edc <USBD_CoreFindEP>
 800a318:	4603      	mov	r3, r0
 800a31a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a31c:	7b7b      	ldrb	r3, [r7, #13]
 800a31e:	2bff      	cmp	r3, #255	; 0xff
 800a320:	d01f      	beq.n	800a362 <USBD_StdEPReq+0x1c6>
 800a322:	7b7b      	ldrb	r3, [r7, #13]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d11c      	bne.n	800a362 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a328:	7b7a      	ldrb	r2, [r7, #13]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a330:	7b7a      	ldrb	r2, [r7, #13]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	32ae      	adds	r2, #174	; 0xae
 800a336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d010      	beq.n	800a362 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a340:	7b7a      	ldrb	r2, [r7, #13]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	32ae      	adds	r2, #174	; 0xae
 800a346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	4798      	blx	r3
 800a352:	4603      	mov	r3, r0
 800a354:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a356:	e004      	b.n	800a362 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fc03 	bl	800ab66 <USBD_CtlError>
              break;
 800a360:	e000      	b.n	800a364 <USBD_StdEPReq+0x1c8>
              break;
 800a362:	bf00      	nop
          }
          break;
 800a364:	e0ab      	b.n	800a4be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d002      	beq.n	800a378 <USBD_StdEPReq+0x1dc>
 800a372:	2b03      	cmp	r3, #3
 800a374:	d032      	beq.n	800a3dc <USBD_StdEPReq+0x240>
 800a376:	e097      	b.n	800a4a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d007      	beq.n	800a38e <USBD_StdEPReq+0x1f2>
 800a37e:	7bbb      	ldrb	r3, [r7, #14]
 800a380:	2b80      	cmp	r3, #128	; 0x80
 800a382:	d004      	beq.n	800a38e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fbed 	bl	800ab66 <USBD_CtlError>
                break;
 800a38c:	e091      	b.n	800a4b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a38e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a392:	2b00      	cmp	r3, #0
 800a394:	da0b      	bge.n	800a3ae <USBD_StdEPReq+0x212>
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	3310      	adds	r3, #16
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	e00b      	b.n	800a3c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fc37 	bl	800ac48 <USBD_CtlSendData>
              break;
 800a3da:	e06a      	b.n	800a4b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	da11      	bge.n	800a408 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
 800a3e6:	f003 020f 	and.w	r2, r3, #15
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	440b      	add	r3, r1
 800a3f6:	3324      	adds	r3, #36	; 0x24
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d117      	bne.n	800a42e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fbb0 	bl	800ab66 <USBD_CtlError>
                  break;
 800a406:	e054      	b.n	800a4b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	f003 020f 	and.w	r2, r3, #15
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d104      	bne.n	800a42e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fb9d 	bl	800ab66 <USBD_CtlError>
                  break;
 800a42c:	e041      	b.n	800a4b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a42e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a432:	2b00      	cmp	r3, #0
 800a434:	da0b      	bge.n	800a44e <USBD_StdEPReq+0x2b2>
 800a436:	7bbb      	ldrb	r3, [r7, #14]
 800a438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a43c:	4613      	mov	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	3310      	adds	r3, #16
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	4413      	add	r3, r2
 800a44a:	3304      	adds	r3, #4
 800a44c:	e00b      	b.n	800a466 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a454:	4613      	mov	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4413      	add	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	4413      	add	r3, r2
 800a464:	3304      	adds	r3, #4
 800a466:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <USBD_StdEPReq+0x2d8>
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	2b80      	cmp	r3, #128	; 0x80
 800a472:	d103      	bne.n	800a47c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2200      	movs	r2, #0
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	e00e      	b.n	800a49a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 f899 	bl	800b5b8 <USBD_LL_IsStallEP>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d003      	beq.n	800a494 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2201      	movs	r2, #1
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	e002      	b.n	800a49a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2200      	movs	r2, #0
 800a498:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	2202      	movs	r2, #2
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fbd1 	bl	800ac48 <USBD_CtlSendData>
              break;
 800a4a6:	e004      	b.n	800a4b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fb5b 	bl	800ab66 <USBD_CtlError>
              break;
 800a4b0:	bf00      	nop
          }
          break;
 800a4b2:	e004      	b.n	800a4be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fb55 	bl	800ab66 <USBD_CtlError>
          break;
 800a4bc:	bf00      	nop
      }
      break;
 800a4be:	e005      	b.n	800a4cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fb4f 	bl	800ab66 <USBD_CtlError>
      break;
 800a4c8:	e000      	b.n	800a4cc <USBD_StdEPReq+0x330>
      break;
 800a4ca:	bf00      	nop
  }

  return ret;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	885b      	ldrh	r3, [r3, #2]
 800a4f2:	0a1b      	lsrs	r3, r3, #8
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	2b06      	cmp	r3, #6
 800a4fa:	f200 8128 	bhi.w	800a74e <USBD_GetDescriptor+0x276>
 800a4fe:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <USBD_GetDescriptor+0x2c>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a521 	.word	0x0800a521
 800a508:	0800a539 	.word	0x0800a539
 800a50c:	0800a579 	.word	0x0800a579
 800a510:	0800a74f 	.word	0x0800a74f
 800a514:	0800a74f 	.word	0x0800a74f
 800a518:	0800a6ef 	.word	0x0800a6ef
 800a51c:	0800a71b 	.word	0x0800a71b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	7c12      	ldrb	r2, [r2, #16]
 800a52c:	f107 0108 	add.w	r1, r7, #8
 800a530:	4610      	mov	r0, r2
 800a532:	4798      	blx	r3
 800a534:	60f8      	str	r0, [r7, #12]
      break;
 800a536:	e112      	b.n	800a75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	7c1b      	ldrb	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10d      	bne.n	800a55c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a548:	f107 0208 	add.w	r2, r7, #8
 800a54c:	4610      	mov	r0, r2
 800a54e:	4798      	blx	r3
 800a550:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3301      	adds	r3, #1
 800a556:	2202      	movs	r2, #2
 800a558:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a55a:	e100      	b.n	800a75e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	f107 0208 	add.w	r2, r7, #8
 800a568:	4610      	mov	r0, r2
 800a56a:	4798      	blx	r3
 800a56c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3301      	adds	r3, #1
 800a572:	2202      	movs	r2, #2
 800a574:	701a      	strb	r2, [r3, #0]
      break;
 800a576:	e0f2      	b.n	800a75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	885b      	ldrh	r3, [r3, #2]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b05      	cmp	r3, #5
 800a580:	f200 80ac 	bhi.w	800a6dc <USBD_GetDescriptor+0x204>
 800a584:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <USBD_GetDescriptor+0xb4>)
 800a586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58a:	bf00      	nop
 800a58c:	0800a5a5 	.word	0x0800a5a5
 800a590:	0800a5d9 	.word	0x0800a5d9
 800a594:	0800a60d 	.word	0x0800a60d
 800a598:	0800a641 	.word	0x0800a641
 800a59c:	0800a675 	.word	0x0800a675
 800a5a0:	0800a6a9 	.word	0x0800a6a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00b      	beq.n	800a5c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	7c12      	ldrb	r2, [r2, #16]
 800a5bc:	f107 0108 	add.w	r1, r7, #8
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4798      	blx	r3
 800a5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c6:	e091      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 facb 	bl	800ab66 <USBD_CtlError>
            err++;
 800a5d0:	7afb      	ldrb	r3, [r7, #11]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d6:	e089      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	7c12      	ldrb	r2, [r2, #16]
 800a5f0:	f107 0108 	add.w	r1, r7, #8
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3
 800a5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5fa:	e077      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fab1 	bl	800ab66 <USBD_CtlError>
            err++;
 800a604:	7afb      	ldrb	r3, [r7, #11]
 800a606:	3301      	adds	r3, #1
 800a608:	72fb      	strb	r3, [r7, #11]
          break;
 800a60a:	e06f      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	7c12      	ldrb	r2, [r2, #16]
 800a624:	f107 0108 	add.w	r1, r7, #8
 800a628:	4610      	mov	r0, r2
 800a62a:	4798      	blx	r3
 800a62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a62e:	e05d      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa97 	bl	800ab66 <USBD_CtlError>
            err++;
 800a638:	7afb      	ldrb	r3, [r7, #11]
 800a63a:	3301      	adds	r3, #1
 800a63c:	72fb      	strb	r3, [r7, #11]
          break;
 800a63e:	e055      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	7c12      	ldrb	r2, [r2, #16]
 800a658:	f107 0108 	add.w	r1, r7, #8
 800a65c:	4610      	mov	r0, r2
 800a65e:	4798      	blx	r3
 800a660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a662:	e043      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fa7d 	bl	800ab66 <USBD_CtlError>
            err++;
 800a66c:	7afb      	ldrb	r3, [r7, #11]
 800a66e:	3301      	adds	r3, #1
 800a670:	72fb      	strb	r3, [r7, #11]
          break;
 800a672:	e03b      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00b      	beq.n	800a698 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a686:	695b      	ldr	r3, [r3, #20]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	7c12      	ldrb	r2, [r2, #16]
 800a68c:	f107 0108 	add.w	r1, r7, #8
 800a690:	4610      	mov	r0, r2
 800a692:	4798      	blx	r3
 800a694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a696:	e029      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fa63 	bl	800ab66 <USBD_CtlError>
            err++;
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6a6:	e021      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00b      	beq.n	800a6cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	7c12      	ldrb	r2, [r2, #16]
 800a6c0:	f107 0108 	add.w	r1, r7, #8
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4798      	blx	r3
 800a6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ca:	e00f      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fa49 	bl	800ab66 <USBD_CtlError>
            err++;
 800a6d4:	7afb      	ldrb	r3, [r7, #11]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6da:	e007      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fa41 	bl	800ab66 <USBD_CtlError>
          err++;
 800a6e4:	7afb      	ldrb	r3, [r7, #11]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a6ea:	bf00      	nop
      }
      break;
 800a6ec:	e037      	b.n	800a75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	7c1b      	ldrb	r3, [r3, #16]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d109      	bne.n	800a70a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	f107 0208 	add.w	r2, r7, #8
 800a702:	4610      	mov	r0, r2
 800a704:	4798      	blx	r3
 800a706:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a708:	e029      	b.n	800a75e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fa2a 	bl	800ab66 <USBD_CtlError>
        err++;
 800a712:	7afb      	ldrb	r3, [r7, #11]
 800a714:	3301      	adds	r3, #1
 800a716:	72fb      	strb	r3, [r7, #11]
      break;
 800a718:	e021      	b.n	800a75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	7c1b      	ldrb	r3, [r3, #16]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10d      	bne.n	800a73e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72a:	f107 0208 	add.w	r2, r7, #8
 800a72e:	4610      	mov	r0, r2
 800a730:	4798      	blx	r3
 800a732:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3301      	adds	r3, #1
 800a738:	2207      	movs	r2, #7
 800a73a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a73c:	e00f      	b.n	800a75e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fa10 	bl	800ab66 <USBD_CtlError>
        err++;
 800a746:	7afb      	ldrb	r3, [r7, #11]
 800a748:	3301      	adds	r3, #1
 800a74a:	72fb      	strb	r3, [r7, #11]
      break;
 800a74c:	e007      	b.n	800a75e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fa08 	bl	800ab66 <USBD_CtlError>
      err++;
 800a756:	7afb      	ldrb	r3, [r7, #11]
 800a758:	3301      	adds	r3, #1
 800a75a:	72fb      	strb	r3, [r7, #11]
      break;
 800a75c:	bf00      	nop
  }

  if (err != 0U)
 800a75e:	7afb      	ldrb	r3, [r7, #11]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d11e      	bne.n	800a7a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	88db      	ldrh	r3, [r3, #6]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d016      	beq.n	800a79a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a76c:	893b      	ldrh	r3, [r7, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00e      	beq.n	800a790 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	88da      	ldrh	r2, [r3, #6]
 800a776:	893b      	ldrh	r3, [r7, #8]
 800a778:	4293      	cmp	r3, r2
 800a77a:	bf28      	it	cs
 800a77c:	4613      	movcs	r3, r2
 800a77e:	b29b      	uxth	r3, r3
 800a780:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a782:	893b      	ldrh	r3, [r7, #8]
 800a784:	461a      	mov	r2, r3
 800a786:	68f9      	ldr	r1, [r7, #12]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fa5d 	bl	800ac48 <USBD_CtlSendData>
 800a78e:	e009      	b.n	800a7a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f9e7 	bl	800ab66 <USBD_CtlError>
 800a798:	e004      	b.n	800a7a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 faae 	bl	800acfc <USBD_CtlSendStatus>
 800a7a0:	e000      	b.n	800a7a4 <USBD_GetDescriptor+0x2cc>
    return;
 800a7a2:	bf00      	nop
  }
}
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop

0800a7ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	889b      	ldrh	r3, [r3, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d131      	bne.n	800a822 <USBD_SetAddress+0x76>
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	88db      	ldrh	r3, [r3, #6]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d12d      	bne.n	800a822 <USBD_SetAddress+0x76>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	885b      	ldrh	r3, [r3, #2]
 800a7ca:	2b7f      	cmp	r3, #127	; 0x7f
 800a7cc:	d829      	bhi.n	800a822 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	885b      	ldrh	r3, [r3, #2]
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d104      	bne.n	800a7f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f9bc 	bl	800ab66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ee:	e01d      	b.n	800a82c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	7bfa      	ldrb	r2, [r7, #15]
 800a7f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 ff07 	bl	800b610 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fa7a 	bl	800acfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d004      	beq.n	800a818 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2202      	movs	r2, #2
 800a812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a816:	e009      	b.n	800a82c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a820:	e004      	b.n	800a82c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f99e 	bl	800ab66 <USBD_CtlError>
  }
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	885b      	ldrh	r3, [r3, #2]
 800a846:	b2da      	uxtb	r2, r3
 800a848:	4b4e      	ldr	r3, [pc, #312]	; (800a984 <USBD_SetConfig+0x150>)
 800a84a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a84c:	4b4d      	ldr	r3, [pc, #308]	; (800a984 <USBD_SetConfig+0x150>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d905      	bls.n	800a860 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f985 	bl	800ab66 <USBD_CtlError>
    return USBD_FAIL;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e08c      	b.n	800a97a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d002      	beq.n	800a872 <USBD_SetConfig+0x3e>
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d029      	beq.n	800a8c4 <USBD_SetConfig+0x90>
 800a870:	e075      	b.n	800a95e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a872:	4b44      	ldr	r3, [pc, #272]	; (800a984 <USBD_SetConfig+0x150>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d020      	beq.n	800a8bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a87a:	4b42      	ldr	r3, [pc, #264]	; (800a984 <USBD_SetConfig+0x150>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a884:	4b3f      	ldr	r3, [pc, #252]	; (800a984 <USBD_SetConfig+0x150>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7fe ffe7 	bl	800985e <USBD_SetClassConfig>
 800a890:	4603      	mov	r3, r0
 800a892:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d008      	beq.n	800a8ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f962 	bl	800ab66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a8aa:	e065      	b.n	800a978 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fa25 	bl	800acfc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2203      	movs	r2, #3
 800a8b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a8ba:	e05d      	b.n	800a978 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fa1d 	bl	800acfc <USBD_CtlSendStatus>
      break;
 800a8c2:	e059      	b.n	800a978 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a8c4:	4b2f      	ldr	r3, [pc, #188]	; (800a984 <USBD_SetConfig+0x150>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d112      	bne.n	800a8f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a8d4:	4b2b      	ldr	r3, [pc, #172]	; (800a984 <USBD_SetConfig+0x150>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8de:	4b29      	ldr	r3, [pc, #164]	; (800a984 <USBD_SetConfig+0x150>)
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7fe ffd6 	bl	8009896 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fa06 	bl	800acfc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a8f0:	e042      	b.n	800a978 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a8f2:	4b24      	ldr	r3, [pc, #144]	; (800a984 <USBD_SetConfig+0x150>)
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d02a      	beq.n	800a956 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7fe ffc4 	bl	8009896 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a90e:	4b1d      	ldr	r3, [pc, #116]	; (800a984 <USBD_SetConfig+0x150>)
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a918:	4b1a      	ldr	r3, [pc, #104]	; (800a984 <USBD_SetConfig+0x150>)
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	4619      	mov	r1, r3
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f7fe ff9d 	bl	800985e <USBD_SetClassConfig>
 800a924:	4603      	mov	r3, r0
 800a926:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a928:	7bfb      	ldrb	r3, [r7, #15]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00f      	beq.n	800a94e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f918 	bl	800ab66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7fe ffa9 	bl	8009896 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a94c:	e014      	b.n	800a978 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f9d4 	bl	800acfc <USBD_CtlSendStatus>
      break;
 800a954:	e010      	b.n	800a978 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f9d0 	bl	800acfc <USBD_CtlSendStatus>
      break;
 800a95c:	e00c      	b.n	800a978 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f900 	bl	800ab66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a966:	4b07      	ldr	r3, [pc, #28]	; (800a984 <USBD_SetConfig+0x150>)
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7fe ff92 	bl	8009896 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a972:	2303      	movs	r3, #3
 800a974:	73fb      	strb	r3, [r7, #15]
      break;
 800a976:	bf00      	nop
  }

  return ret;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	200005c4 	.word	0x200005c4

0800a988 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	88db      	ldrh	r3, [r3, #6]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d004      	beq.n	800a9a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f8e2 	bl	800ab66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a9a2:	e023      	b.n	800a9ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	dc02      	bgt.n	800a9b6 <USBD_GetConfig+0x2e>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dc03      	bgt.n	800a9bc <USBD_GetConfig+0x34>
 800a9b4:	e015      	b.n	800a9e2 <USBD_GetConfig+0x5a>
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d00b      	beq.n	800a9d2 <USBD_GetConfig+0x4a>
 800a9ba:	e012      	b.n	800a9e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f93c 	bl	800ac48 <USBD_CtlSendData>
        break;
 800a9d0:	e00c      	b.n	800a9ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f934 	bl	800ac48 <USBD_CtlSendData>
        break;
 800a9e0:	e004      	b.n	800a9ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f8be 	bl	800ab66 <USBD_CtlError>
        break;
 800a9ea:	bf00      	nop
}
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	3b01      	subs	r3, #1
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d81e      	bhi.n	800aa4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	88db      	ldrh	r3, [r3, #6]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d004      	beq.n	800aa1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f8a5 	bl	800ab66 <USBD_CtlError>
        break;
 800aa1c:	e01a      	b.n	800aa54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d005      	beq.n	800aa3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	f043 0202 	orr.w	r2, r3, #2
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	330c      	adds	r3, #12
 800aa3e:	2202      	movs	r2, #2
 800aa40:	4619      	mov	r1, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f900 	bl	800ac48 <USBD_CtlSendData>
      break;
 800aa48:	e004      	b.n	800aa54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f88a 	bl	800ab66 <USBD_CtlError>
      break;
 800aa52:	bf00      	nop
  }
}
 800aa54:	bf00      	nop
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	885b      	ldrh	r3, [r3, #2]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d107      	bne.n	800aa7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f940 	bl	800acfc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aa7c:	e013      	b.n	800aaa6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	885b      	ldrh	r3, [r3, #2]
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d10b      	bne.n	800aa9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	889b      	ldrh	r3, [r3, #4]
 800aa8a:	0a1b      	lsrs	r3, r3, #8
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f930 	bl	800acfc <USBD_CtlSendStatus>
}
 800aa9c:	e003      	b.n	800aaa6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aa9e:	6839      	ldr	r1, [r7, #0]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f860 	bl	800ab66 <USBD_CtlError>
}
 800aaa6:	bf00      	nop
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	3b01      	subs	r3, #1
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d80b      	bhi.n	800aade <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	885b      	ldrh	r3, [r3, #2]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d10c      	bne.n	800aae8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f910 	bl	800acfc <USBD_CtlSendStatus>
      }
      break;
 800aadc:	e004      	b.n	800aae8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f840 	bl	800ab66 <USBD_CtlError>
      break;
 800aae6:	e000      	b.n	800aaea <USBD_ClrFeature+0x3c>
      break;
 800aae8:	bf00      	nop
  }
}
 800aaea:	bf00      	nop
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	781a      	ldrb	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	781a      	ldrb	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f7ff fa41 	bl	8009fa4 <SWAPBYTE>
 800ab22:	4603      	mov	r3, r0
 800ab24:	461a      	mov	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3301      	adds	r3, #1
 800ab34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7ff fa34 	bl	8009fa4 <SWAPBYTE>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	461a      	mov	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	3301      	adds	r3, #1
 800ab48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7ff fa27 	bl	8009fa4 <SWAPBYTE>
 800ab56:	4603      	mov	r3, r0
 800ab58:	461a      	mov	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	80da      	strh	r2, [r3, #6]
}
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab70:	2180      	movs	r1, #128	; 0x80
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fce2 	bl	800b53c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ab78:	2100      	movs	r1, #0
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fcde 	bl	800b53c <USBD_LL_StallEP>
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d036      	beq.n	800ac0c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aba2:	6938      	ldr	r0, [r7, #16]
 800aba4:	f000 f836 	bl	800ac14 <USBD_GetLen>
 800aba8:	4603      	mov	r3, r0
 800abaa:	3301      	adds	r3, #1
 800abac:	b29b      	uxth	r3, r3
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	4413      	add	r3, r2
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	7812      	ldrb	r2, [r2, #0]
 800abc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
 800abc4:	3301      	adds	r3, #1
 800abc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	2203      	movs	r2, #3
 800abd0:	701a      	strb	r2, [r3, #0]
  idx++;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	3301      	adds	r3, #1
 800abd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800abd8:	e013      	b.n	800ac02 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800abda:	7dfb      	ldrb	r3, [r7, #23]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	4413      	add	r3, r2
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	7812      	ldrb	r2, [r2, #0]
 800abe4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	3301      	adds	r3, #1
 800abea:	613b      	str	r3, [r7, #16]
    idx++;
 800abec:	7dfb      	ldrb	r3, [r7, #23]
 800abee:	3301      	adds	r3, #1
 800abf0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	4413      	add	r3, r2
 800abf8:	2200      	movs	r2, #0
 800abfa:	701a      	strb	r2, [r3, #0]
    idx++;
 800abfc:	7dfb      	ldrb	r3, [r7, #23]
 800abfe:	3301      	adds	r3, #1
 800ac00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1e7      	bne.n	800abda <USBD_GetString+0x52>
 800ac0a:	e000      	b.n	800ac0e <USBD_GetString+0x86>
    return;
 800ac0c:	bf00      	nop
  }
}
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ac24:	e005      	b.n	800ac32 <USBD_GetLen+0x1e>
  {
    len++;
 800ac26:	7bfb      	ldrb	r3, [r7, #15]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1f5      	bne.n	800ac26 <USBD_GetLen+0x12>
  }

  return len;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2202      	movs	r2, #2
 800ac58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f000 fced 	bl	800b64e <USBD_LL_Transmit>

  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	2100      	movs	r1, #0
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 fcdc 	bl	800b64e <USBD_LL_Transmit>

  return USBD_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2203      	movs	r2, #3
 800acb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	2100      	movs	r1, #0
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 fce0 	bl	800b690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	2100      	movs	r1, #0
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 fccf 	bl	800b690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2204      	movs	r2, #4
 800ad08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2100      	movs	r1, #0
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fc9b 	bl	800b64e <USBD_LL_Transmit>

  return USBD_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2205      	movs	r2, #5
 800ad2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad32:	2300      	movs	r3, #0
 800ad34:	2200      	movs	r2, #0
 800ad36:	2100      	movs	r1, #0
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fca9 	bl	800b690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	4912      	ldr	r1, [pc, #72]	; (800ad98 <MX_USB_DEVICE_Init+0x50>)
 800ad50:	4812      	ldr	r0, [pc, #72]	; (800ad9c <MX_USB_DEVICE_Init+0x54>)
 800ad52:	f7fe fd07 	bl	8009764 <USBD_Init>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad5c:	f7f6 fa88 	bl	8001270 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800ad60:	490f      	ldr	r1, [pc, #60]	; (800ada0 <MX_USB_DEVICE_Init+0x58>)
 800ad62:	480e      	ldr	r0, [pc, #56]	; (800ad9c <MX_USB_DEVICE_Init+0x54>)
 800ad64:	f7fe fd2e 	bl	80097c4 <USBD_RegisterClass>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad6e:	f7f6 fa7f 	bl	8001270 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800ad72:	490c      	ldr	r1, [pc, #48]	; (800ada4 <MX_USB_DEVICE_Init+0x5c>)
 800ad74:	4809      	ldr	r0, [pc, #36]	; (800ad9c <MX_USB_DEVICE_Init+0x54>)
 800ad76:	f7fe fc1f 	bl	80095b8 <USBD_CDC_RegisterInterface>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad80:	f7f6 fa76 	bl	8001270 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ad84:	4805      	ldr	r0, [pc, #20]	; (800ad9c <MX_USB_DEVICE_Init+0x54>)
 800ad86:	f7fe fd53 	bl	8009830 <USBD_Start>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad90:	f7f6 fa6e 	bl	8001270 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad94:	bf00      	nop
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20000128 	.word	0x20000128
 800ad9c:	200005c8 	.word	0x200005c8
 800ada0:	20000094 	.word	0x20000094
 800ada4:	20000114 	.word	0x20000114

0800ada8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800adac:	2200      	movs	r2, #0
 800adae:	4905      	ldr	r1, [pc, #20]	; (800adc4 <CDC_Init_HS+0x1c>)
 800adb0:	4805      	ldr	r0, [pc, #20]	; (800adc8 <CDC_Init_HS+0x20>)
 800adb2:	f7fe fc1b 	bl	80095ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800adb6:	4905      	ldr	r1, [pc, #20]	; (800adcc <CDC_Init_HS+0x24>)
 800adb8:	4803      	ldr	r0, [pc, #12]	; (800adc8 <CDC_Init_HS+0x20>)
 800adba:	f7fe fc39 	bl	8009630 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800adbe:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	200010a4 	.word	0x200010a4
 800adc8:	200005c8 	.word	0x200005c8
 800adcc:	200008a4 	.word	0x200008a4

0800add0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800add4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800add6:	4618      	mov	r0, r3
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	6039      	str	r1, [r7, #0]
 800adea:	71fb      	strb	r3, [r7, #7]
 800adec:	4613      	mov	r3, r2
 800adee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800adf0:	79fb      	ldrb	r3, [r7, #7]
 800adf2:	2b23      	cmp	r3, #35	; 0x23
 800adf4:	d84a      	bhi.n	800ae8c <CDC_Control_HS+0xac>
 800adf6:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <CDC_Control_HS+0x1c>)
 800adf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfc:	0800ae8d 	.word	0x0800ae8d
 800ae00:	0800ae8d 	.word	0x0800ae8d
 800ae04:	0800ae8d 	.word	0x0800ae8d
 800ae08:	0800ae8d 	.word	0x0800ae8d
 800ae0c:	0800ae8d 	.word	0x0800ae8d
 800ae10:	0800ae8d 	.word	0x0800ae8d
 800ae14:	0800ae8d 	.word	0x0800ae8d
 800ae18:	0800ae8d 	.word	0x0800ae8d
 800ae1c:	0800ae8d 	.word	0x0800ae8d
 800ae20:	0800ae8d 	.word	0x0800ae8d
 800ae24:	0800ae8d 	.word	0x0800ae8d
 800ae28:	0800ae8d 	.word	0x0800ae8d
 800ae2c:	0800ae8d 	.word	0x0800ae8d
 800ae30:	0800ae8d 	.word	0x0800ae8d
 800ae34:	0800ae8d 	.word	0x0800ae8d
 800ae38:	0800ae8d 	.word	0x0800ae8d
 800ae3c:	0800ae8d 	.word	0x0800ae8d
 800ae40:	0800ae8d 	.word	0x0800ae8d
 800ae44:	0800ae8d 	.word	0x0800ae8d
 800ae48:	0800ae8d 	.word	0x0800ae8d
 800ae4c:	0800ae8d 	.word	0x0800ae8d
 800ae50:	0800ae8d 	.word	0x0800ae8d
 800ae54:	0800ae8d 	.word	0x0800ae8d
 800ae58:	0800ae8d 	.word	0x0800ae8d
 800ae5c:	0800ae8d 	.word	0x0800ae8d
 800ae60:	0800ae8d 	.word	0x0800ae8d
 800ae64:	0800ae8d 	.word	0x0800ae8d
 800ae68:	0800ae8d 	.word	0x0800ae8d
 800ae6c:	0800ae8d 	.word	0x0800ae8d
 800ae70:	0800ae8d 	.word	0x0800ae8d
 800ae74:	0800ae8d 	.word	0x0800ae8d
 800ae78:	0800ae8d 	.word	0x0800ae8d
 800ae7c:	0800ae8d 	.word	0x0800ae8d
 800ae80:	0800ae8d 	.word	0x0800ae8d
 800ae84:	0800ae8d 	.word	0x0800ae8d
 800ae88:	0800ae8d 	.word	0x0800ae8d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae8c:	bf00      	nop
  }

  return (USBD_OK);
 800ae8e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	4805      	ldr	r0, [pc, #20]	; (800aec0 <CDC_Receive_HS+0x24>)
 800aeaa:	f7fe fbc1 	bl	8009630 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800aeae:	4804      	ldr	r0, [pc, #16]	; (800aec0 <CDC_Receive_HS+0x24>)
 800aeb0:	f7fe fc22 	bl	80096f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aeb4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200005c8 	.word	0x200005c8

0800aec4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800aed4:	4b0d      	ldr	r3, [pc, #52]	; (800af0c <CDC_Transmit_HS+0x48>)
 800aed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aeda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e00b      	b.n	800af02 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800aeea:	887b      	ldrh	r3, [r7, #2]
 800aeec:	461a      	mov	r2, r3
 800aeee:	6879      	ldr	r1, [r7, #4]
 800aef0:	4806      	ldr	r0, [pc, #24]	; (800af0c <CDC_Transmit_HS+0x48>)
 800aef2:	f7fe fb7b 	bl	80095ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800aef6:	4805      	ldr	r0, [pc, #20]	; (800af0c <CDC_Transmit_HS+0x48>)
 800aef8:	f7fe fbb8 	bl	800966c <USBD_CDC_TransmitPacket>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800af00:	7bfb      	ldrb	r3, [r7, #15]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200005c8 	.word	0x200005c8

0800af10 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	4613      	mov	r3, r2
 800af1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800af22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af26:	4618      	mov	r0, r3
 800af28:	371c      	adds	r7, #28
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
	...

0800af34 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	6039      	str	r1, [r7, #0]
 800af3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	2212      	movs	r2, #18
 800af44:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800af46:	4b03      	ldr	r3, [pc, #12]	; (800af54 <USBD_HS_DeviceDescriptor+0x20>)
}
 800af48:	4618      	mov	r0, r3
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	20000144 	.word	0x20000144

0800af58 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	6039      	str	r1, [r7, #0]
 800af62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2204      	movs	r2, #4
 800af68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af6a:	4b03      	ldr	r3, [pc, #12]	; (800af78 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr
 800af78:	20000158 	.word	0x20000158

0800af7c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	6039      	str	r1, [r7, #0]
 800af86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af88:	79fb      	ldrb	r3, [r7, #7]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d105      	bne.n	800af9a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	4907      	ldr	r1, [pc, #28]	; (800afb0 <USBD_HS_ProductStrDescriptor+0x34>)
 800af92:	4808      	ldr	r0, [pc, #32]	; (800afb4 <USBD_HS_ProductStrDescriptor+0x38>)
 800af94:	f7ff fdf8 	bl	800ab88 <USBD_GetString>
 800af98:	e004      	b.n	800afa4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	4904      	ldr	r1, [pc, #16]	; (800afb0 <USBD_HS_ProductStrDescriptor+0x34>)
 800af9e:	4805      	ldr	r0, [pc, #20]	; (800afb4 <USBD_HS_ProductStrDescriptor+0x38>)
 800afa0:	f7ff fdf2 	bl	800ab88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afa4:	4b02      	ldr	r3, [pc, #8]	; (800afb0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	200018a4 	.word	0x200018a4
 800afb4:	0800e618 	.word	0x0800e618

0800afb8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	6039      	str	r1, [r7, #0]
 800afc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	4904      	ldr	r1, [pc, #16]	; (800afd8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800afc8:	4804      	ldr	r0, [pc, #16]	; (800afdc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800afca:	f7ff fddd 	bl	800ab88 <USBD_GetString>
  return USBD_StrDesc;
 800afce:	4b02      	ldr	r3, [pc, #8]	; (800afd8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	200018a4 	.word	0x200018a4
 800afdc:	0800e630 	.word	0x0800e630

0800afe0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	4603      	mov	r3, r0
 800afe8:	6039      	str	r1, [r7, #0]
 800afea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	221a      	movs	r2, #26
 800aff0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aff2:	f000 f843 	bl	800b07c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800aff6:	4b02      	ldr	r3, [pc, #8]	; (800b000 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	2000015c 	.word	0x2000015c

0800b004 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	4603      	mov	r3, r0
 800b00c:	6039      	str	r1, [r7, #0]
 800b00e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d105      	bne.n	800b022 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	4907      	ldr	r1, [pc, #28]	; (800b038 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b01a:	4808      	ldr	r0, [pc, #32]	; (800b03c <USBD_HS_ConfigStrDescriptor+0x38>)
 800b01c:	f7ff fdb4 	bl	800ab88 <USBD_GetString>
 800b020:	e004      	b.n	800b02c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	4904      	ldr	r1, [pc, #16]	; (800b038 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b026:	4805      	ldr	r0, [pc, #20]	; (800b03c <USBD_HS_ConfigStrDescriptor+0x38>)
 800b028:	f7ff fdae 	bl	800ab88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b02c:	4b02      	ldr	r3, [pc, #8]	; (800b038 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	200018a4 	.word	0x200018a4
 800b03c:	0800e644 	.word	0x0800e644

0800b040 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	6039      	str	r1, [r7, #0]
 800b04a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b04c:	79fb      	ldrb	r3, [r7, #7]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d105      	bne.n	800b05e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	4907      	ldr	r1, [pc, #28]	; (800b074 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b056:	4808      	ldr	r0, [pc, #32]	; (800b078 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b058:	f7ff fd96 	bl	800ab88 <USBD_GetString>
 800b05c:	e004      	b.n	800b068 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	4904      	ldr	r1, [pc, #16]	; (800b074 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b062:	4805      	ldr	r0, [pc, #20]	; (800b078 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b064:	f7ff fd90 	bl	800ab88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b068:	4b02      	ldr	r3, [pc, #8]	; (800b074 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	200018a4 	.word	0x200018a4
 800b078:	0800e650 	.word	0x0800e650

0800b07c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b082:	4b0f      	ldr	r3, [pc, #60]	; (800b0c0 <Get_SerialNum+0x44>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b088:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <Get_SerialNum+0x48>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b08e:	4b0e      	ldr	r3, [pc, #56]	; (800b0c8 <Get_SerialNum+0x4c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4413      	add	r3, r2
 800b09a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d009      	beq.n	800b0b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b0a2:	2208      	movs	r2, #8
 800b0a4:	4909      	ldr	r1, [pc, #36]	; (800b0cc <Get_SerialNum+0x50>)
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f000 f814 	bl	800b0d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b0ac:	2204      	movs	r2, #4
 800b0ae:	4908      	ldr	r1, [pc, #32]	; (800b0d0 <Get_SerialNum+0x54>)
 800b0b0:	68b8      	ldr	r0, [r7, #8]
 800b0b2:	f000 f80f 	bl	800b0d4 <IntToUnicode>
  }
}
 800b0b6:	bf00      	nop
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	1fff7a10 	.word	0x1fff7a10
 800b0c4:	1fff7a14 	.word	0x1fff7a14
 800b0c8:	1fff7a18 	.word	0x1fff7a18
 800b0cc:	2000015e 	.word	0x2000015e
 800b0d0:	2000016e 	.word	0x2000016e

0800b0d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	75fb      	strb	r3, [r7, #23]
 800b0ea:	e027      	b.n	800b13c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	0f1b      	lsrs	r3, r3, #28
 800b0f0:	2b09      	cmp	r3, #9
 800b0f2:	d80b      	bhi.n	800b10c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	0f1b      	lsrs	r3, r3, #28
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	005b      	lsls	r3, r3, #1
 800b0fe:	4619      	mov	r1, r3
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	440b      	add	r3, r1
 800b104:	3230      	adds	r2, #48	; 0x30
 800b106:	b2d2      	uxtb	r2, r2
 800b108:	701a      	strb	r2, [r3, #0]
 800b10a:	e00a      	b.n	800b122 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	0f1b      	lsrs	r3, r3, #28
 800b110:	b2da      	uxtb	r2, r3
 800b112:	7dfb      	ldrb	r3, [r7, #23]
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	4619      	mov	r1, r3
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	440b      	add	r3, r1
 800b11c:	3237      	adds	r2, #55	; 0x37
 800b11e:	b2d2      	uxtb	r2, r2
 800b120:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	011b      	lsls	r3, r3, #4
 800b126:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	3301      	adds	r3, #1
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	4413      	add	r3, r2
 800b132:	2200      	movs	r2, #0
 800b134:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b136:	7dfb      	ldrb	r3, [r7, #23]
 800b138:	3301      	adds	r3, #1
 800b13a:	75fb      	strb	r3, [r7, #23]
 800b13c:	7dfa      	ldrb	r2, [r7, #23]
 800b13e:	79fb      	ldrb	r3, [r7, #7]
 800b140:	429a      	cmp	r2, r3
 800b142:	d3d3      	bcc.n	800b0ec <IntToUnicode+0x18>
  }
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop
 800b148:	371c      	adds	r7, #28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
	...

0800b154 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b08a      	sub	sp, #40	; 0x28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b15c:	f107 0314 	add.w	r3, r7, #20
 800b160:	2200      	movs	r2, #0
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	605a      	str	r2, [r3, #4]
 800b166:	609a      	str	r2, [r3, #8]
 800b168:	60da      	str	r2, [r3, #12]
 800b16a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a1d      	ldr	r2, [pc, #116]	; (800b1e8 <HAL_PCD_MspInit+0x94>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d134      	bne.n	800b1e0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b176:	2300      	movs	r3, #0
 800b178:	613b      	str	r3, [r7, #16]
 800b17a:	4b1c      	ldr	r3, [pc, #112]	; (800b1ec <HAL_PCD_MspInit+0x98>)
 800b17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17e:	4a1b      	ldr	r2, [pc, #108]	; (800b1ec <HAL_PCD_MspInit+0x98>)
 800b180:	f043 0302 	orr.w	r3, r3, #2
 800b184:	6313      	str	r3, [r2, #48]	; 0x30
 800b186:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <HAL_PCD_MspInit+0x98>)
 800b188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18a:	f003 0302 	and.w	r3, r3, #2
 800b18e:	613b      	str	r3, [r7, #16]
 800b190:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800b192:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b198:	2302      	movs	r3, #2
 800b19a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19c:	2300      	movs	r3, #0
 800b19e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b1a4:	230c      	movs	r3, #12
 800b1a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b1a8:	f107 0314 	add.w	r3, r7, #20
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4810      	ldr	r0, [pc, #64]	; (800b1f0 <HAL_PCD_MspInit+0x9c>)
 800b1b0:	f7f8 fcc0 	bl	8003b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	4b0c      	ldr	r3, [pc, #48]	; (800b1ec <HAL_PCD_MspInit+0x98>)
 800b1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1bc:	4a0b      	ldr	r2, [pc, #44]	; (800b1ec <HAL_PCD_MspInit+0x98>)
 800b1be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1c2:	6313      	str	r3, [r2, #48]	; 0x30
 800b1c4:	4b09      	ldr	r3, [pc, #36]	; (800b1ec <HAL_PCD_MspInit+0x98>)
 800b1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	204d      	movs	r0, #77	; 0x4d
 800b1d6:	f7f8 f822 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b1da:	204d      	movs	r0, #77	; 0x4d
 800b1dc:	f7f8 f83b 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b1e0:	bf00      	nop
 800b1e2:	3728      	adds	r7, #40	; 0x28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	40040000 	.word	0x40040000
 800b1ec:	40023800 	.word	0x40023800
 800b1f0:	40020400 	.word	0x40020400

0800b1f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b208:	4619      	mov	r1, r3
 800b20a:	4610      	mov	r0, r2
 800b20c:	f7fe fb5d 	bl	80098ca <USBD_LL_SetupStage>
}
 800b210:	bf00      	nop
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b22a:	78fa      	ldrb	r2, [r7, #3]
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	4613      	mov	r3, r2
 800b230:	00db      	lsls	r3, r3, #3
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	440b      	add	r3, r1
 800b238:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	4619      	mov	r1, r3
 800b242:	f7fe fb97 	bl	8009974 <USBD_LL_DataOutStage>
}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b082      	sub	sp, #8
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	460b      	mov	r3, r1
 800b258:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b260:	78fa      	ldrb	r2, [r7, #3]
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	4613      	mov	r3, r2
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	4413      	add	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	440b      	add	r3, r1
 800b26e:	334c      	adds	r3, #76	; 0x4c
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	78fb      	ldrb	r3, [r7, #3]
 800b274:	4619      	mov	r1, r3
 800b276:	f7fe fc30 	bl	8009ada <USBD_LL_DataInStage>
}
 800b27a:	bf00      	nop
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe fd64 	bl	8009d5e <USBD_LL_SOF>
}
 800b296:	bf00      	nop
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d102      	bne.n	800b2b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	73fb      	strb	r3, [r7, #15]
 800b2b6:	e008      	b.n	800b2ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d102      	bne.n	800b2c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	73fb      	strb	r3, [r7, #15]
 800b2c4:	e001      	b.n	800b2ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b2c6:	f7f5 ffd3 	bl	8001270 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2d0:	7bfa      	ldrb	r2, [r7, #15]
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fe fd04 	bl	8009ce2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fe fcac 	bl	8009c3e <USBD_LL_Reset>
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe fcff 	bl	8009d02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	6812      	ldr	r2, [r2, #0]
 800b312:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b316:	f043 0301 	orr.w	r3, r3, #1
 800b31a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a1b      	ldr	r3, [r3, #32]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d005      	beq.n	800b330 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b324:	4b04      	ldr	r3, [pc, #16]	; (800b338 <HAL_PCD_SuspendCallback+0x48>)
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	4a03      	ldr	r2, [pc, #12]	; (800b338 <HAL_PCD_SuspendCallback+0x48>)
 800b32a:	f043 0306 	orr.w	r3, r3, #6
 800b32e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	e000ed00 	.word	0xe000ed00

0800b33c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe fcef 	bl	8009d2e <USBD_LL_Resume>
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b36a:	78fa      	ldrb	r2, [r7, #3]
 800b36c:	4611      	mov	r1, r2
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fe fd47 	bl	8009e02 <USBD_LL_IsoOUTIncomplete>
}
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b38e:	78fa      	ldrb	r2, [r7, #3]
 800b390:	4611      	mov	r1, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fd03 	bl	8009d9e <USBD_LL_IsoINIncomplete>
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe fd59 	bl	8009e66 <USBD_LL_DevConnected>
}
 800b3b4:	bf00      	nop
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe fd56 	bl	8009e7c <USBD_LL_DevDisconnected>
}
 800b3d0:	bf00      	nop
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d140      	bne.n	800b46a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b3e8:	4a22      	ldr	r2, [pc, #136]	; (800b474 <USBD_LL_Init+0x9c>)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a20      	ldr	r2, [pc, #128]	; (800b474 <USBD_LL_Init+0x9c>)
 800b3f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b3f8:	4b1e      	ldr	r3, [pc, #120]	; (800b474 <USBD_LL_Init+0x9c>)
 800b3fa:	4a1f      	ldr	r2, [pc, #124]	; (800b478 <USBD_LL_Init+0xa0>)
 800b3fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800b3fe:	4b1d      	ldr	r3, [pc, #116]	; (800b474 <USBD_LL_Init+0x9c>)
 800b400:	2206      	movs	r2, #6
 800b402:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b404:	4b1b      	ldr	r3, [pc, #108]	; (800b474 <USBD_LL_Init+0x9c>)
 800b406:	2202      	movs	r2, #2
 800b408:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b40a:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <USBD_LL_Init+0x9c>)
 800b40c:	2200      	movs	r2, #0
 800b40e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b410:	4b18      	ldr	r3, [pc, #96]	; (800b474 <USBD_LL_Init+0x9c>)
 800b412:	2202      	movs	r2, #2
 800b414:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b416:	4b17      	ldr	r3, [pc, #92]	; (800b474 <USBD_LL_Init+0x9c>)
 800b418:	2200      	movs	r2, #0
 800b41a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b41c:	4b15      	ldr	r3, [pc, #84]	; (800b474 <USBD_LL_Init+0x9c>)
 800b41e:	2200      	movs	r2, #0
 800b420:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b422:	4b14      	ldr	r3, [pc, #80]	; (800b474 <USBD_LL_Init+0x9c>)
 800b424:	2200      	movs	r2, #0
 800b426:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b428:	4b12      	ldr	r3, [pc, #72]	; (800b474 <USBD_LL_Init+0x9c>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b42e:	4b11      	ldr	r3, [pc, #68]	; (800b474 <USBD_LL_Init+0x9c>)
 800b430:	2200      	movs	r2, #0
 800b432:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b434:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <USBD_LL_Init+0x9c>)
 800b436:	2200      	movs	r2, #0
 800b438:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b43a:	480e      	ldr	r0, [pc, #56]	; (800b474 <USBD_LL_Init+0x9c>)
 800b43c:	f7f9 f819 	bl	8004472 <HAL_PCD_Init>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b446:	f7f5 ff13 	bl	8001270 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b44a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b44e:	4809      	ldr	r0, [pc, #36]	; (800b474 <USBD_LL_Init+0x9c>)
 800b450:	f7fa fa6f 	bl	8005932 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b454:	2280      	movs	r2, #128	; 0x80
 800b456:	2100      	movs	r1, #0
 800b458:	4806      	ldr	r0, [pc, #24]	; (800b474 <USBD_LL_Init+0x9c>)
 800b45a:	f7fa fa23 	bl	80058a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b45e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800b462:	2101      	movs	r1, #1
 800b464:	4803      	ldr	r0, [pc, #12]	; (800b474 <USBD_LL_Init+0x9c>)
 800b466:	f7fa fa1d 	bl	80058a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	20001aa4 	.word	0x20001aa4
 800b478:	40040000 	.word	0x40040000

0800b47c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b492:	4618      	mov	r0, r3
 800b494:	f7f9 f90a 	bl	80046ac <HAL_PCD_Start>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 f942 	bl	800b728 <USBD_Get_USB_Status>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	4611      	mov	r1, r2
 800b4be:	461a      	mov	r2, r3
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	70fb      	strb	r3, [r7, #3]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70bb      	strb	r3, [r7, #2]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b4da:	78bb      	ldrb	r3, [r7, #2]
 800b4dc:	883a      	ldrh	r2, [r7, #0]
 800b4de:	78f9      	ldrb	r1, [r7, #3]
 800b4e0:	f7f9 fddb 	bl	800509a <HAL_PCD_EP_Open>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f000 f91c 	bl	800b728 <USBD_Get_USB_Status>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b084      	sub	sp, #16
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	460b      	mov	r3, r1
 800b508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b518:	78fa      	ldrb	r2, [r7, #3]
 800b51a:	4611      	mov	r1, r2
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7f9 fe24 	bl	800516a <HAL_PCD_EP_Close>
 800b522:	4603      	mov	r3, r0
 800b524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 f8fd 	bl	800b728 <USBD_Get_USB_Status>
 800b52e:	4603      	mov	r3, r0
 800b530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b532:	7bbb      	ldrb	r3, [r7, #14]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	460b      	mov	r3, r1
 800b546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b556:	78fa      	ldrb	r2, [r7, #3]
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7f9 fefc 	bl	8005358 <HAL_PCD_EP_SetStall>
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	4618      	mov	r0, r3
 800b568:	f000 f8de 	bl	800b728 <USBD_Get_USB_Status>
 800b56c:	4603      	mov	r3, r0
 800b56e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b570:	7bbb      	ldrb	r3, [r7, #14]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b084      	sub	sp, #16
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	460b      	mov	r3, r1
 800b584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b594:	78fa      	ldrb	r2, [r7, #3]
 800b596:	4611      	mov	r1, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f7f9 ff41 	bl	8005420 <HAL_PCD_EP_ClrStall>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 f8bf 	bl	800b728 <USBD_Get_USB_Status>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b5cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	da0b      	bge.n	800b5ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b5d4:	78fb      	ldrb	r3, [r7, #3]
 800b5d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5da:	68f9      	ldr	r1, [r7, #12]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	333e      	adds	r3, #62	; 0x3e
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	e00b      	b.n	800b604 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5f2:	68f9      	ldr	r1, [r7, #12]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	440b      	add	r3, r1
 800b5fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b602:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b62a:	78fa      	ldrb	r2, [r7, #3]
 800b62c:	4611      	mov	r1, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f7f9 fd0e 	bl	8005050 <HAL_PCD_SetAddress>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b638:	7bfb      	ldrb	r3, [r7, #15]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 f874 	bl	800b728 <USBD_Get_USB_Status>
 800b640:	4603      	mov	r3, r0
 800b642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b644:	7bbb      	ldrb	r3, [r7, #14]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b086      	sub	sp, #24
 800b652:	af00      	add	r7, sp, #0
 800b654:	60f8      	str	r0, [r7, #12]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]
 800b65a:	460b      	mov	r3, r1
 800b65c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b66c:	7af9      	ldrb	r1, [r7, #11]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	f7f9 fe27 	bl	80052c4 <HAL_PCD_EP_Transmit>
 800b676:	4603      	mov	r3, r0
 800b678:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 f853 	bl	800b728 <USBD_Get_USB_Status>
 800b682:	4603      	mov	r3, r0
 800b684:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b686:	7dbb      	ldrb	r3, [r7, #22]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	603b      	str	r3, [r7, #0]
 800b69c:	460b      	mov	r3, r1
 800b69e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b6ae:	7af9      	ldrb	r1, [r7, #11]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	f7f9 fda3 	bl	80051fe <HAL_PCD_EP_Receive>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 f832 	bl	800b728 <USBD_Get_USB_Status>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b082      	sub	sp, #8
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6e4:	78fa      	ldrb	r2, [r7, #3]
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7f9 fdd3 	bl	8005294 <HAL_PCD_EP_GetRxCount>
 800b6ee:	4603      	mov	r3, r0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b700:	4b03      	ldr	r3, [pc, #12]	; (800b710 <USBD_static_malloc+0x18>)
}
 800b702:	4618      	mov	r0, r3
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	20001fb0 	.word	0x20001fb0

0800b714 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]

}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d817      	bhi.n	800b76c <USBD_Get_USB_Status+0x44>
 800b73c:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <USBD_Get_USB_Status+0x1c>)
 800b73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b742:	bf00      	nop
 800b744:	0800b755 	.word	0x0800b755
 800b748:	0800b75b 	.word	0x0800b75b
 800b74c:	0800b761 	.word	0x0800b761
 800b750:	0800b767 	.word	0x0800b767
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b754:	2300      	movs	r3, #0
 800b756:	73fb      	strb	r3, [r7, #15]
    break;
 800b758:	e00b      	b.n	800b772 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b75a:	2303      	movs	r3, #3
 800b75c:	73fb      	strb	r3, [r7, #15]
    break;
 800b75e:	e008      	b.n	800b772 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b760:	2301      	movs	r3, #1
 800b762:	73fb      	strb	r3, [r7, #15]
    break;
 800b764:	e005      	b.n	800b772 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b766:	2303      	movs	r3, #3
 800b768:	73fb      	strb	r3, [r7, #15]
    break;
 800b76a:	e002      	b.n	800b772 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b76c:	2303      	movs	r3, #3
 800b76e:	73fb      	strb	r3, [r7, #15]
    break;
 800b770:	bf00      	nop
  }
  return usb_status;
 800b772:	7bfb      	ldrb	r3, [r7, #15]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <__errno>:
 800b780:	4b01      	ldr	r3, [pc, #4]	; (800b788 <__errno+0x8>)
 800b782:	6818      	ldr	r0, [r3, #0]
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	20000178 	.word	0x20000178

0800b78c <__libc_init_array>:
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	4d0d      	ldr	r5, [pc, #52]	; (800b7c4 <__libc_init_array+0x38>)
 800b790:	4c0d      	ldr	r4, [pc, #52]	; (800b7c8 <__libc_init_array+0x3c>)
 800b792:	1b64      	subs	r4, r4, r5
 800b794:	10a4      	asrs	r4, r4, #2
 800b796:	2600      	movs	r6, #0
 800b798:	42a6      	cmp	r6, r4
 800b79a:	d109      	bne.n	800b7b0 <__libc_init_array+0x24>
 800b79c:	4d0b      	ldr	r5, [pc, #44]	; (800b7cc <__libc_init_array+0x40>)
 800b79e:	4c0c      	ldr	r4, [pc, #48]	; (800b7d0 <__libc_init_array+0x44>)
 800b7a0:	f002 ff02 	bl	800e5a8 <_init>
 800b7a4:	1b64      	subs	r4, r4, r5
 800b7a6:	10a4      	asrs	r4, r4, #2
 800b7a8:	2600      	movs	r6, #0
 800b7aa:	42a6      	cmp	r6, r4
 800b7ac:	d105      	bne.n	800b7ba <__libc_init_array+0x2e>
 800b7ae:	bd70      	pop	{r4, r5, r6, pc}
 800b7b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7b4:	4798      	blx	r3
 800b7b6:	3601      	adds	r6, #1
 800b7b8:	e7ee      	b.n	800b798 <__libc_init_array+0xc>
 800b7ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7be:	4798      	blx	r3
 800b7c0:	3601      	adds	r6, #1
 800b7c2:	e7f2      	b.n	800b7aa <__libc_init_array+0x1e>
 800b7c4:	08010514 	.word	0x08010514
 800b7c8:	08010514 	.word	0x08010514
 800b7cc:	08010514 	.word	0x08010514
 800b7d0:	08010518 	.word	0x08010518

0800b7d4 <memset>:
 800b7d4:	4402      	add	r2, r0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d100      	bne.n	800b7de <memset+0xa>
 800b7dc:	4770      	bx	lr
 800b7de:	f803 1b01 	strb.w	r1, [r3], #1
 800b7e2:	e7f9      	b.n	800b7d8 <memset+0x4>

0800b7e4 <__cvt>:
 800b7e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e8:	ec55 4b10 	vmov	r4, r5, d0
 800b7ec:	2d00      	cmp	r5, #0
 800b7ee:	460e      	mov	r6, r1
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	462b      	mov	r3, r5
 800b7f4:	bfbb      	ittet	lt
 800b7f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b7fa:	461d      	movlt	r5, r3
 800b7fc:	2300      	movge	r3, #0
 800b7fe:	232d      	movlt	r3, #45	; 0x2d
 800b800:	700b      	strb	r3, [r1, #0]
 800b802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b804:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b808:	4691      	mov	r9, r2
 800b80a:	f023 0820 	bic.w	r8, r3, #32
 800b80e:	bfbc      	itt	lt
 800b810:	4622      	movlt	r2, r4
 800b812:	4614      	movlt	r4, r2
 800b814:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b818:	d005      	beq.n	800b826 <__cvt+0x42>
 800b81a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b81e:	d100      	bne.n	800b822 <__cvt+0x3e>
 800b820:	3601      	adds	r6, #1
 800b822:	2102      	movs	r1, #2
 800b824:	e000      	b.n	800b828 <__cvt+0x44>
 800b826:	2103      	movs	r1, #3
 800b828:	ab03      	add	r3, sp, #12
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	ab02      	add	r3, sp, #8
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	ec45 4b10 	vmov	d0, r4, r5
 800b834:	4653      	mov	r3, sl
 800b836:	4632      	mov	r2, r6
 800b838:	f000 fcea 	bl	800c210 <_dtoa_r>
 800b83c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b840:	4607      	mov	r7, r0
 800b842:	d102      	bne.n	800b84a <__cvt+0x66>
 800b844:	f019 0f01 	tst.w	r9, #1
 800b848:	d022      	beq.n	800b890 <__cvt+0xac>
 800b84a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b84e:	eb07 0906 	add.w	r9, r7, r6
 800b852:	d110      	bne.n	800b876 <__cvt+0x92>
 800b854:	783b      	ldrb	r3, [r7, #0]
 800b856:	2b30      	cmp	r3, #48	; 0x30
 800b858:	d10a      	bne.n	800b870 <__cvt+0x8c>
 800b85a:	2200      	movs	r2, #0
 800b85c:	2300      	movs	r3, #0
 800b85e:	4620      	mov	r0, r4
 800b860:	4629      	mov	r1, r5
 800b862:	f7f5 f941 	bl	8000ae8 <__aeabi_dcmpeq>
 800b866:	b918      	cbnz	r0, 800b870 <__cvt+0x8c>
 800b868:	f1c6 0601 	rsb	r6, r6, #1
 800b86c:	f8ca 6000 	str.w	r6, [sl]
 800b870:	f8da 3000 	ldr.w	r3, [sl]
 800b874:	4499      	add	r9, r3
 800b876:	2200      	movs	r2, #0
 800b878:	2300      	movs	r3, #0
 800b87a:	4620      	mov	r0, r4
 800b87c:	4629      	mov	r1, r5
 800b87e:	f7f5 f933 	bl	8000ae8 <__aeabi_dcmpeq>
 800b882:	b108      	cbz	r0, 800b888 <__cvt+0xa4>
 800b884:	f8cd 900c 	str.w	r9, [sp, #12]
 800b888:	2230      	movs	r2, #48	; 0x30
 800b88a:	9b03      	ldr	r3, [sp, #12]
 800b88c:	454b      	cmp	r3, r9
 800b88e:	d307      	bcc.n	800b8a0 <__cvt+0xbc>
 800b890:	9b03      	ldr	r3, [sp, #12]
 800b892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b894:	1bdb      	subs	r3, r3, r7
 800b896:	4638      	mov	r0, r7
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	b004      	add	sp, #16
 800b89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a0:	1c59      	adds	r1, r3, #1
 800b8a2:	9103      	str	r1, [sp, #12]
 800b8a4:	701a      	strb	r2, [r3, #0]
 800b8a6:	e7f0      	b.n	800b88a <__cvt+0xa6>

0800b8a8 <__exponent>:
 800b8a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2900      	cmp	r1, #0
 800b8ae:	bfb8      	it	lt
 800b8b0:	4249      	neglt	r1, r1
 800b8b2:	f803 2b02 	strb.w	r2, [r3], #2
 800b8b6:	bfb4      	ite	lt
 800b8b8:	222d      	movlt	r2, #45	; 0x2d
 800b8ba:	222b      	movge	r2, #43	; 0x2b
 800b8bc:	2909      	cmp	r1, #9
 800b8be:	7042      	strb	r2, [r0, #1]
 800b8c0:	dd2a      	ble.n	800b918 <__exponent+0x70>
 800b8c2:	f10d 0407 	add.w	r4, sp, #7
 800b8c6:	46a4      	mov	ip, r4
 800b8c8:	270a      	movs	r7, #10
 800b8ca:	46a6      	mov	lr, r4
 800b8cc:	460a      	mov	r2, r1
 800b8ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800b8d2:	fb07 1516 	mls	r5, r7, r6, r1
 800b8d6:	3530      	adds	r5, #48	; 0x30
 800b8d8:	2a63      	cmp	r2, #99	; 0x63
 800b8da:	f104 34ff 	add.w	r4, r4, #4294967295
 800b8de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	dcf1      	bgt.n	800b8ca <__exponent+0x22>
 800b8e6:	3130      	adds	r1, #48	; 0x30
 800b8e8:	f1ae 0502 	sub.w	r5, lr, #2
 800b8ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b8f0:	1c44      	adds	r4, r0, #1
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	4561      	cmp	r1, ip
 800b8f6:	d30a      	bcc.n	800b90e <__exponent+0x66>
 800b8f8:	f10d 0209 	add.w	r2, sp, #9
 800b8fc:	eba2 020e 	sub.w	r2, r2, lr
 800b900:	4565      	cmp	r5, ip
 800b902:	bf88      	it	hi
 800b904:	2200      	movhi	r2, #0
 800b906:	4413      	add	r3, r2
 800b908:	1a18      	subs	r0, r3, r0
 800b90a:	b003      	add	sp, #12
 800b90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b912:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b916:	e7ed      	b.n	800b8f4 <__exponent+0x4c>
 800b918:	2330      	movs	r3, #48	; 0x30
 800b91a:	3130      	adds	r1, #48	; 0x30
 800b91c:	7083      	strb	r3, [r0, #2]
 800b91e:	70c1      	strb	r1, [r0, #3]
 800b920:	1d03      	adds	r3, r0, #4
 800b922:	e7f1      	b.n	800b908 <__exponent+0x60>

0800b924 <_printf_float>:
 800b924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	ed2d 8b02 	vpush	{d8}
 800b92c:	b08d      	sub	sp, #52	; 0x34
 800b92e:	460c      	mov	r4, r1
 800b930:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b934:	4616      	mov	r6, r2
 800b936:	461f      	mov	r7, r3
 800b938:	4605      	mov	r5, r0
 800b93a:	f001 fa57 	bl	800cdec <_localeconv_r>
 800b93e:	f8d0 a000 	ldr.w	sl, [r0]
 800b942:	4650      	mov	r0, sl
 800b944:	f7f4 fc54 	bl	80001f0 <strlen>
 800b948:	2300      	movs	r3, #0
 800b94a:	930a      	str	r3, [sp, #40]	; 0x28
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	9305      	str	r3, [sp, #20]
 800b950:	f8d8 3000 	ldr.w	r3, [r8]
 800b954:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b958:	3307      	adds	r3, #7
 800b95a:	f023 0307 	bic.w	r3, r3, #7
 800b95e:	f103 0208 	add.w	r2, r3, #8
 800b962:	f8c8 2000 	str.w	r2, [r8]
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b96e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b972:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b976:	9307      	str	r3, [sp, #28]
 800b978:	f8cd 8018 	str.w	r8, [sp, #24]
 800b97c:	ee08 0a10 	vmov	s16, r0
 800b980:	4b9f      	ldr	r3, [pc, #636]	; (800bc00 <_printf_float+0x2dc>)
 800b982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b986:	f04f 32ff 	mov.w	r2, #4294967295
 800b98a:	f7f5 f8df 	bl	8000b4c <__aeabi_dcmpun>
 800b98e:	bb88      	cbnz	r0, 800b9f4 <_printf_float+0xd0>
 800b990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b994:	4b9a      	ldr	r3, [pc, #616]	; (800bc00 <_printf_float+0x2dc>)
 800b996:	f04f 32ff 	mov.w	r2, #4294967295
 800b99a:	f7f5 f8b9 	bl	8000b10 <__aeabi_dcmple>
 800b99e:	bb48      	cbnz	r0, 800b9f4 <_printf_float+0xd0>
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	f7f5 f8a8 	bl	8000afc <__aeabi_dcmplt>
 800b9ac:	b110      	cbz	r0, 800b9b4 <_printf_float+0x90>
 800b9ae:	232d      	movs	r3, #45	; 0x2d
 800b9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9b4:	4b93      	ldr	r3, [pc, #588]	; (800bc04 <_printf_float+0x2e0>)
 800b9b6:	4894      	ldr	r0, [pc, #592]	; (800bc08 <_printf_float+0x2e4>)
 800b9b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b9bc:	bf94      	ite	ls
 800b9be:	4698      	movls	r8, r3
 800b9c0:	4680      	movhi	r8, r0
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	6123      	str	r3, [r4, #16]
 800b9c6:	9b05      	ldr	r3, [sp, #20]
 800b9c8:	f023 0204 	bic.w	r2, r3, #4
 800b9cc:	6022      	str	r2, [r4, #0]
 800b9ce:	f04f 0900 	mov.w	r9, #0
 800b9d2:	9700      	str	r7, [sp, #0]
 800b9d4:	4633      	mov	r3, r6
 800b9d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b9d8:	4621      	mov	r1, r4
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f000 f9d8 	bl	800bd90 <_printf_common>
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	f040 8090 	bne.w	800bb06 <_printf_float+0x1e2>
 800b9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ea:	b00d      	add	sp, #52	; 0x34
 800b9ec:	ecbd 8b02 	vpop	{d8}
 800b9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f4:	4642      	mov	r2, r8
 800b9f6:	464b      	mov	r3, r9
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	f7f5 f8a6 	bl	8000b4c <__aeabi_dcmpun>
 800ba00:	b140      	cbz	r0, 800ba14 <_printf_float+0xf0>
 800ba02:	464b      	mov	r3, r9
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	bfbc      	itt	lt
 800ba08:	232d      	movlt	r3, #45	; 0x2d
 800ba0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba0e:	487f      	ldr	r0, [pc, #508]	; (800bc0c <_printf_float+0x2e8>)
 800ba10:	4b7f      	ldr	r3, [pc, #508]	; (800bc10 <_printf_float+0x2ec>)
 800ba12:	e7d1      	b.n	800b9b8 <_printf_float+0x94>
 800ba14:	6863      	ldr	r3, [r4, #4]
 800ba16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ba1a:	9206      	str	r2, [sp, #24]
 800ba1c:	1c5a      	adds	r2, r3, #1
 800ba1e:	d13f      	bne.n	800baa0 <_printf_float+0x17c>
 800ba20:	2306      	movs	r3, #6
 800ba22:	6063      	str	r3, [r4, #4]
 800ba24:	9b05      	ldr	r3, [sp, #20]
 800ba26:	6861      	ldr	r1, [r4, #4]
 800ba28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9303      	str	r3, [sp, #12]
 800ba30:	ab0a      	add	r3, sp, #40	; 0x28
 800ba32:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ba36:	ab09      	add	r3, sp, #36	; 0x24
 800ba38:	ec49 8b10 	vmov	d0, r8, r9
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	6022      	str	r2, [r4, #0]
 800ba40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba44:	4628      	mov	r0, r5
 800ba46:	f7ff fecd 	bl	800b7e4 <__cvt>
 800ba4a:	9b06      	ldr	r3, [sp, #24]
 800ba4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba4e:	2b47      	cmp	r3, #71	; 0x47
 800ba50:	4680      	mov	r8, r0
 800ba52:	d108      	bne.n	800ba66 <_printf_float+0x142>
 800ba54:	1cc8      	adds	r0, r1, #3
 800ba56:	db02      	blt.n	800ba5e <_printf_float+0x13a>
 800ba58:	6863      	ldr	r3, [r4, #4]
 800ba5a:	4299      	cmp	r1, r3
 800ba5c:	dd41      	ble.n	800bae2 <_printf_float+0x1be>
 800ba5e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ba62:	fa5f fb8b 	uxtb.w	fp, fp
 800ba66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba6a:	d820      	bhi.n	800baae <_printf_float+0x18a>
 800ba6c:	3901      	subs	r1, #1
 800ba6e:	465a      	mov	r2, fp
 800ba70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba74:	9109      	str	r1, [sp, #36]	; 0x24
 800ba76:	f7ff ff17 	bl	800b8a8 <__exponent>
 800ba7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba7c:	1813      	adds	r3, r2, r0
 800ba7e:	2a01      	cmp	r2, #1
 800ba80:	4681      	mov	r9, r0
 800ba82:	6123      	str	r3, [r4, #16]
 800ba84:	dc02      	bgt.n	800ba8c <_printf_float+0x168>
 800ba86:	6822      	ldr	r2, [r4, #0]
 800ba88:	07d2      	lsls	r2, r2, #31
 800ba8a:	d501      	bpl.n	800ba90 <_printf_float+0x16c>
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	6123      	str	r3, [r4, #16]
 800ba90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d09c      	beq.n	800b9d2 <_printf_float+0xae>
 800ba98:	232d      	movs	r3, #45	; 0x2d
 800ba9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba9e:	e798      	b.n	800b9d2 <_printf_float+0xae>
 800baa0:	9a06      	ldr	r2, [sp, #24]
 800baa2:	2a47      	cmp	r2, #71	; 0x47
 800baa4:	d1be      	bne.n	800ba24 <_printf_float+0x100>
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1bc      	bne.n	800ba24 <_printf_float+0x100>
 800baaa:	2301      	movs	r3, #1
 800baac:	e7b9      	b.n	800ba22 <_printf_float+0xfe>
 800baae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bab2:	d118      	bne.n	800bae6 <_printf_float+0x1c2>
 800bab4:	2900      	cmp	r1, #0
 800bab6:	6863      	ldr	r3, [r4, #4]
 800bab8:	dd0b      	ble.n	800bad2 <_printf_float+0x1ae>
 800baba:	6121      	str	r1, [r4, #16]
 800babc:	b913      	cbnz	r3, 800bac4 <_printf_float+0x1a0>
 800babe:	6822      	ldr	r2, [r4, #0]
 800bac0:	07d0      	lsls	r0, r2, #31
 800bac2:	d502      	bpl.n	800baca <_printf_float+0x1a6>
 800bac4:	3301      	adds	r3, #1
 800bac6:	440b      	add	r3, r1
 800bac8:	6123      	str	r3, [r4, #16]
 800baca:	65a1      	str	r1, [r4, #88]	; 0x58
 800bacc:	f04f 0900 	mov.w	r9, #0
 800bad0:	e7de      	b.n	800ba90 <_printf_float+0x16c>
 800bad2:	b913      	cbnz	r3, 800bada <_printf_float+0x1b6>
 800bad4:	6822      	ldr	r2, [r4, #0]
 800bad6:	07d2      	lsls	r2, r2, #31
 800bad8:	d501      	bpl.n	800bade <_printf_float+0x1ba>
 800bada:	3302      	adds	r3, #2
 800badc:	e7f4      	b.n	800bac8 <_printf_float+0x1a4>
 800bade:	2301      	movs	r3, #1
 800bae0:	e7f2      	b.n	800bac8 <_printf_float+0x1a4>
 800bae2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bae8:	4299      	cmp	r1, r3
 800baea:	db05      	blt.n	800baf8 <_printf_float+0x1d4>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	6121      	str	r1, [r4, #16]
 800baf0:	07d8      	lsls	r0, r3, #31
 800baf2:	d5ea      	bpl.n	800baca <_printf_float+0x1a6>
 800baf4:	1c4b      	adds	r3, r1, #1
 800baf6:	e7e7      	b.n	800bac8 <_printf_float+0x1a4>
 800baf8:	2900      	cmp	r1, #0
 800bafa:	bfd4      	ite	le
 800bafc:	f1c1 0202 	rsble	r2, r1, #2
 800bb00:	2201      	movgt	r2, #1
 800bb02:	4413      	add	r3, r2
 800bb04:	e7e0      	b.n	800bac8 <_printf_float+0x1a4>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	055a      	lsls	r2, r3, #21
 800bb0a:	d407      	bmi.n	800bb1c <_printf_float+0x1f8>
 800bb0c:	6923      	ldr	r3, [r4, #16]
 800bb0e:	4642      	mov	r2, r8
 800bb10:	4631      	mov	r1, r6
 800bb12:	4628      	mov	r0, r5
 800bb14:	47b8      	blx	r7
 800bb16:	3001      	adds	r0, #1
 800bb18:	d12c      	bne.n	800bb74 <_printf_float+0x250>
 800bb1a:	e764      	b.n	800b9e6 <_printf_float+0xc2>
 800bb1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb20:	f240 80e0 	bls.w	800bce4 <_printf_float+0x3c0>
 800bb24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f7f4 ffdc 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d034      	beq.n	800bb9e <_printf_float+0x27a>
 800bb34:	4a37      	ldr	r2, [pc, #220]	; (800bc14 <_printf_float+0x2f0>)
 800bb36:	2301      	movs	r3, #1
 800bb38:	4631      	mov	r1, r6
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	47b8      	blx	r7
 800bb3e:	3001      	adds	r0, #1
 800bb40:	f43f af51 	beq.w	800b9e6 <_printf_float+0xc2>
 800bb44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	db02      	blt.n	800bb52 <_printf_float+0x22e>
 800bb4c:	6823      	ldr	r3, [r4, #0]
 800bb4e:	07d8      	lsls	r0, r3, #31
 800bb50:	d510      	bpl.n	800bb74 <_printf_float+0x250>
 800bb52:	ee18 3a10 	vmov	r3, s16
 800bb56:	4652      	mov	r2, sl
 800bb58:	4631      	mov	r1, r6
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	47b8      	blx	r7
 800bb5e:	3001      	adds	r0, #1
 800bb60:	f43f af41 	beq.w	800b9e6 <_printf_float+0xc2>
 800bb64:	f04f 0800 	mov.w	r8, #0
 800bb68:	f104 091a 	add.w	r9, r4, #26
 800bb6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	4543      	cmp	r3, r8
 800bb72:	dc09      	bgt.n	800bb88 <_printf_float+0x264>
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	079b      	lsls	r3, r3, #30
 800bb78:	f100 8105 	bmi.w	800bd86 <_printf_float+0x462>
 800bb7c:	68e0      	ldr	r0, [r4, #12]
 800bb7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb80:	4298      	cmp	r0, r3
 800bb82:	bfb8      	it	lt
 800bb84:	4618      	movlt	r0, r3
 800bb86:	e730      	b.n	800b9ea <_printf_float+0xc6>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	464a      	mov	r2, r9
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4628      	mov	r0, r5
 800bb90:	47b8      	blx	r7
 800bb92:	3001      	adds	r0, #1
 800bb94:	f43f af27 	beq.w	800b9e6 <_printf_float+0xc2>
 800bb98:	f108 0801 	add.w	r8, r8, #1
 800bb9c:	e7e6      	b.n	800bb6c <_printf_float+0x248>
 800bb9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	dc39      	bgt.n	800bc18 <_printf_float+0x2f4>
 800bba4:	4a1b      	ldr	r2, [pc, #108]	; (800bc14 <_printf_float+0x2f0>)
 800bba6:	2301      	movs	r3, #1
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4628      	mov	r0, r5
 800bbac:	47b8      	blx	r7
 800bbae:	3001      	adds	r0, #1
 800bbb0:	f43f af19 	beq.w	800b9e6 <_printf_float+0xc2>
 800bbb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	d102      	bne.n	800bbc2 <_printf_float+0x29e>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	07d9      	lsls	r1, r3, #31
 800bbc0:	d5d8      	bpl.n	800bb74 <_printf_float+0x250>
 800bbc2:	ee18 3a10 	vmov	r3, s16
 800bbc6:	4652      	mov	r2, sl
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4628      	mov	r0, r5
 800bbcc:	47b8      	blx	r7
 800bbce:	3001      	adds	r0, #1
 800bbd0:	f43f af09 	beq.w	800b9e6 <_printf_float+0xc2>
 800bbd4:	f04f 0900 	mov.w	r9, #0
 800bbd8:	f104 0a1a 	add.w	sl, r4, #26
 800bbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbde:	425b      	negs	r3, r3
 800bbe0:	454b      	cmp	r3, r9
 800bbe2:	dc01      	bgt.n	800bbe8 <_printf_float+0x2c4>
 800bbe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe6:	e792      	b.n	800bb0e <_printf_float+0x1ea>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	4652      	mov	r2, sl
 800bbec:	4631      	mov	r1, r6
 800bbee:	4628      	mov	r0, r5
 800bbf0:	47b8      	blx	r7
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	f43f aef7 	beq.w	800b9e6 <_printf_float+0xc2>
 800bbf8:	f109 0901 	add.w	r9, r9, #1
 800bbfc:	e7ee      	b.n	800bbdc <_printf_float+0x2b8>
 800bbfe:	bf00      	nop
 800bc00:	7fefffff 	.word	0x7fefffff
 800bc04:	08010134 	.word	0x08010134
 800bc08:	08010138 	.word	0x08010138
 800bc0c:	08010140 	.word	0x08010140
 800bc10:	0801013c 	.word	0x0801013c
 800bc14:	08010144 	.word	0x08010144
 800bc18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	bfa8      	it	ge
 800bc20:	461a      	movge	r2, r3
 800bc22:	2a00      	cmp	r2, #0
 800bc24:	4691      	mov	r9, r2
 800bc26:	dc37      	bgt.n	800bc98 <_printf_float+0x374>
 800bc28:	f04f 0b00 	mov.w	fp, #0
 800bc2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc30:	f104 021a 	add.w	r2, r4, #26
 800bc34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc36:	9305      	str	r3, [sp, #20]
 800bc38:	eba3 0309 	sub.w	r3, r3, r9
 800bc3c:	455b      	cmp	r3, fp
 800bc3e:	dc33      	bgt.n	800bca8 <_printf_float+0x384>
 800bc40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc44:	429a      	cmp	r2, r3
 800bc46:	db3b      	blt.n	800bcc0 <_printf_float+0x39c>
 800bc48:	6823      	ldr	r3, [r4, #0]
 800bc4a:	07da      	lsls	r2, r3, #31
 800bc4c:	d438      	bmi.n	800bcc0 <_printf_float+0x39c>
 800bc4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc50:	9a05      	ldr	r2, [sp, #20]
 800bc52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc54:	1a9a      	subs	r2, r3, r2
 800bc56:	eba3 0901 	sub.w	r9, r3, r1
 800bc5a:	4591      	cmp	r9, r2
 800bc5c:	bfa8      	it	ge
 800bc5e:	4691      	movge	r9, r2
 800bc60:	f1b9 0f00 	cmp.w	r9, #0
 800bc64:	dc35      	bgt.n	800bcd2 <_printf_float+0x3ae>
 800bc66:	f04f 0800 	mov.w	r8, #0
 800bc6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc6e:	f104 0a1a 	add.w	sl, r4, #26
 800bc72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc76:	1a9b      	subs	r3, r3, r2
 800bc78:	eba3 0309 	sub.w	r3, r3, r9
 800bc7c:	4543      	cmp	r3, r8
 800bc7e:	f77f af79 	ble.w	800bb74 <_printf_float+0x250>
 800bc82:	2301      	movs	r3, #1
 800bc84:	4652      	mov	r2, sl
 800bc86:	4631      	mov	r1, r6
 800bc88:	4628      	mov	r0, r5
 800bc8a:	47b8      	blx	r7
 800bc8c:	3001      	adds	r0, #1
 800bc8e:	f43f aeaa 	beq.w	800b9e6 <_printf_float+0xc2>
 800bc92:	f108 0801 	add.w	r8, r8, #1
 800bc96:	e7ec      	b.n	800bc72 <_printf_float+0x34e>
 800bc98:	4613      	mov	r3, r2
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	4642      	mov	r2, r8
 800bc9e:	4628      	mov	r0, r5
 800bca0:	47b8      	blx	r7
 800bca2:	3001      	adds	r0, #1
 800bca4:	d1c0      	bne.n	800bc28 <_printf_float+0x304>
 800bca6:	e69e      	b.n	800b9e6 <_printf_float+0xc2>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	4631      	mov	r1, r6
 800bcac:	4628      	mov	r0, r5
 800bcae:	9205      	str	r2, [sp, #20]
 800bcb0:	47b8      	blx	r7
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	f43f ae97 	beq.w	800b9e6 <_printf_float+0xc2>
 800bcb8:	9a05      	ldr	r2, [sp, #20]
 800bcba:	f10b 0b01 	add.w	fp, fp, #1
 800bcbe:	e7b9      	b.n	800bc34 <_printf_float+0x310>
 800bcc0:	ee18 3a10 	vmov	r3, s16
 800bcc4:	4652      	mov	r2, sl
 800bcc6:	4631      	mov	r1, r6
 800bcc8:	4628      	mov	r0, r5
 800bcca:	47b8      	blx	r7
 800bccc:	3001      	adds	r0, #1
 800bcce:	d1be      	bne.n	800bc4e <_printf_float+0x32a>
 800bcd0:	e689      	b.n	800b9e6 <_printf_float+0xc2>
 800bcd2:	9a05      	ldr	r2, [sp, #20]
 800bcd4:	464b      	mov	r3, r9
 800bcd6:	4442      	add	r2, r8
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4628      	mov	r0, r5
 800bcdc:	47b8      	blx	r7
 800bcde:	3001      	adds	r0, #1
 800bce0:	d1c1      	bne.n	800bc66 <_printf_float+0x342>
 800bce2:	e680      	b.n	800b9e6 <_printf_float+0xc2>
 800bce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bce6:	2a01      	cmp	r2, #1
 800bce8:	dc01      	bgt.n	800bcee <_printf_float+0x3ca>
 800bcea:	07db      	lsls	r3, r3, #31
 800bcec:	d538      	bpl.n	800bd60 <_printf_float+0x43c>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4642      	mov	r2, r8
 800bcf2:	4631      	mov	r1, r6
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	47b8      	blx	r7
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	f43f ae74 	beq.w	800b9e6 <_printf_float+0xc2>
 800bcfe:	ee18 3a10 	vmov	r3, s16
 800bd02:	4652      	mov	r2, sl
 800bd04:	4631      	mov	r1, r6
 800bd06:	4628      	mov	r0, r5
 800bd08:	47b8      	blx	r7
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	f43f ae6b 	beq.w	800b9e6 <_printf_float+0xc2>
 800bd10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd14:	2200      	movs	r2, #0
 800bd16:	2300      	movs	r3, #0
 800bd18:	f7f4 fee6 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd1c:	b9d8      	cbnz	r0, 800bd56 <_printf_float+0x432>
 800bd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd20:	f108 0201 	add.w	r2, r8, #1
 800bd24:	3b01      	subs	r3, #1
 800bd26:	4631      	mov	r1, r6
 800bd28:	4628      	mov	r0, r5
 800bd2a:	47b8      	blx	r7
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	d10e      	bne.n	800bd4e <_printf_float+0x42a>
 800bd30:	e659      	b.n	800b9e6 <_printf_float+0xc2>
 800bd32:	2301      	movs	r3, #1
 800bd34:	4652      	mov	r2, sl
 800bd36:	4631      	mov	r1, r6
 800bd38:	4628      	mov	r0, r5
 800bd3a:	47b8      	blx	r7
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	f43f ae52 	beq.w	800b9e6 <_printf_float+0xc2>
 800bd42:	f108 0801 	add.w	r8, r8, #1
 800bd46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	4543      	cmp	r3, r8
 800bd4c:	dcf1      	bgt.n	800bd32 <_printf_float+0x40e>
 800bd4e:	464b      	mov	r3, r9
 800bd50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd54:	e6dc      	b.n	800bb10 <_printf_float+0x1ec>
 800bd56:	f04f 0800 	mov.w	r8, #0
 800bd5a:	f104 0a1a 	add.w	sl, r4, #26
 800bd5e:	e7f2      	b.n	800bd46 <_printf_float+0x422>
 800bd60:	2301      	movs	r3, #1
 800bd62:	4642      	mov	r2, r8
 800bd64:	e7df      	b.n	800bd26 <_printf_float+0x402>
 800bd66:	2301      	movs	r3, #1
 800bd68:	464a      	mov	r2, r9
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	47b8      	blx	r7
 800bd70:	3001      	adds	r0, #1
 800bd72:	f43f ae38 	beq.w	800b9e6 <_printf_float+0xc2>
 800bd76:	f108 0801 	add.w	r8, r8, #1
 800bd7a:	68e3      	ldr	r3, [r4, #12]
 800bd7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd7e:	1a5b      	subs	r3, r3, r1
 800bd80:	4543      	cmp	r3, r8
 800bd82:	dcf0      	bgt.n	800bd66 <_printf_float+0x442>
 800bd84:	e6fa      	b.n	800bb7c <_printf_float+0x258>
 800bd86:	f04f 0800 	mov.w	r8, #0
 800bd8a:	f104 0919 	add.w	r9, r4, #25
 800bd8e:	e7f4      	b.n	800bd7a <_printf_float+0x456>

0800bd90 <_printf_common>:
 800bd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd94:	4616      	mov	r6, r2
 800bd96:	4699      	mov	r9, r3
 800bd98:	688a      	ldr	r2, [r1, #8]
 800bd9a:	690b      	ldr	r3, [r1, #16]
 800bd9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bda0:	4293      	cmp	r3, r2
 800bda2:	bfb8      	it	lt
 800bda4:	4613      	movlt	r3, r2
 800bda6:	6033      	str	r3, [r6, #0]
 800bda8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdac:	4607      	mov	r7, r0
 800bdae:	460c      	mov	r4, r1
 800bdb0:	b10a      	cbz	r2, 800bdb6 <_printf_common+0x26>
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	6033      	str	r3, [r6, #0]
 800bdb6:	6823      	ldr	r3, [r4, #0]
 800bdb8:	0699      	lsls	r1, r3, #26
 800bdba:	bf42      	ittt	mi
 800bdbc:	6833      	ldrmi	r3, [r6, #0]
 800bdbe:	3302      	addmi	r3, #2
 800bdc0:	6033      	strmi	r3, [r6, #0]
 800bdc2:	6825      	ldr	r5, [r4, #0]
 800bdc4:	f015 0506 	ands.w	r5, r5, #6
 800bdc8:	d106      	bne.n	800bdd8 <_printf_common+0x48>
 800bdca:	f104 0a19 	add.w	sl, r4, #25
 800bdce:	68e3      	ldr	r3, [r4, #12]
 800bdd0:	6832      	ldr	r2, [r6, #0]
 800bdd2:	1a9b      	subs	r3, r3, r2
 800bdd4:	42ab      	cmp	r3, r5
 800bdd6:	dc26      	bgt.n	800be26 <_printf_common+0x96>
 800bdd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bddc:	1e13      	subs	r3, r2, #0
 800bdde:	6822      	ldr	r2, [r4, #0]
 800bde0:	bf18      	it	ne
 800bde2:	2301      	movne	r3, #1
 800bde4:	0692      	lsls	r2, r2, #26
 800bde6:	d42b      	bmi.n	800be40 <_printf_common+0xb0>
 800bde8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdec:	4649      	mov	r1, r9
 800bdee:	4638      	mov	r0, r7
 800bdf0:	47c0      	blx	r8
 800bdf2:	3001      	adds	r0, #1
 800bdf4:	d01e      	beq.n	800be34 <_printf_common+0xa4>
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	68e5      	ldr	r5, [r4, #12]
 800bdfa:	6832      	ldr	r2, [r6, #0]
 800bdfc:	f003 0306 	and.w	r3, r3, #6
 800be00:	2b04      	cmp	r3, #4
 800be02:	bf08      	it	eq
 800be04:	1aad      	subeq	r5, r5, r2
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	6922      	ldr	r2, [r4, #16]
 800be0a:	bf0c      	ite	eq
 800be0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be10:	2500      	movne	r5, #0
 800be12:	4293      	cmp	r3, r2
 800be14:	bfc4      	itt	gt
 800be16:	1a9b      	subgt	r3, r3, r2
 800be18:	18ed      	addgt	r5, r5, r3
 800be1a:	2600      	movs	r6, #0
 800be1c:	341a      	adds	r4, #26
 800be1e:	42b5      	cmp	r5, r6
 800be20:	d11a      	bne.n	800be58 <_printf_common+0xc8>
 800be22:	2000      	movs	r0, #0
 800be24:	e008      	b.n	800be38 <_printf_common+0xa8>
 800be26:	2301      	movs	r3, #1
 800be28:	4652      	mov	r2, sl
 800be2a:	4649      	mov	r1, r9
 800be2c:	4638      	mov	r0, r7
 800be2e:	47c0      	blx	r8
 800be30:	3001      	adds	r0, #1
 800be32:	d103      	bne.n	800be3c <_printf_common+0xac>
 800be34:	f04f 30ff 	mov.w	r0, #4294967295
 800be38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3c:	3501      	adds	r5, #1
 800be3e:	e7c6      	b.n	800bdce <_printf_common+0x3e>
 800be40:	18e1      	adds	r1, r4, r3
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	2030      	movs	r0, #48	; 0x30
 800be46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be4a:	4422      	add	r2, r4
 800be4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be54:	3302      	adds	r3, #2
 800be56:	e7c7      	b.n	800bde8 <_printf_common+0x58>
 800be58:	2301      	movs	r3, #1
 800be5a:	4622      	mov	r2, r4
 800be5c:	4649      	mov	r1, r9
 800be5e:	4638      	mov	r0, r7
 800be60:	47c0      	blx	r8
 800be62:	3001      	adds	r0, #1
 800be64:	d0e6      	beq.n	800be34 <_printf_common+0xa4>
 800be66:	3601      	adds	r6, #1
 800be68:	e7d9      	b.n	800be1e <_printf_common+0x8e>
	...

0800be6c <_printf_i>:
 800be6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be70:	7e0f      	ldrb	r7, [r1, #24]
 800be72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be74:	2f78      	cmp	r7, #120	; 0x78
 800be76:	4691      	mov	r9, r2
 800be78:	4680      	mov	r8, r0
 800be7a:	460c      	mov	r4, r1
 800be7c:	469a      	mov	sl, r3
 800be7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be82:	d807      	bhi.n	800be94 <_printf_i+0x28>
 800be84:	2f62      	cmp	r7, #98	; 0x62
 800be86:	d80a      	bhi.n	800be9e <_printf_i+0x32>
 800be88:	2f00      	cmp	r7, #0
 800be8a:	f000 80d8 	beq.w	800c03e <_printf_i+0x1d2>
 800be8e:	2f58      	cmp	r7, #88	; 0x58
 800be90:	f000 80a3 	beq.w	800bfda <_printf_i+0x16e>
 800be94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be9c:	e03a      	b.n	800bf14 <_printf_i+0xa8>
 800be9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bea2:	2b15      	cmp	r3, #21
 800bea4:	d8f6      	bhi.n	800be94 <_printf_i+0x28>
 800bea6:	a101      	add	r1, pc, #4	; (adr r1, 800beac <_printf_i+0x40>)
 800bea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800beac:	0800bf05 	.word	0x0800bf05
 800beb0:	0800bf19 	.word	0x0800bf19
 800beb4:	0800be95 	.word	0x0800be95
 800beb8:	0800be95 	.word	0x0800be95
 800bebc:	0800be95 	.word	0x0800be95
 800bec0:	0800be95 	.word	0x0800be95
 800bec4:	0800bf19 	.word	0x0800bf19
 800bec8:	0800be95 	.word	0x0800be95
 800becc:	0800be95 	.word	0x0800be95
 800bed0:	0800be95 	.word	0x0800be95
 800bed4:	0800be95 	.word	0x0800be95
 800bed8:	0800c025 	.word	0x0800c025
 800bedc:	0800bf49 	.word	0x0800bf49
 800bee0:	0800c007 	.word	0x0800c007
 800bee4:	0800be95 	.word	0x0800be95
 800bee8:	0800be95 	.word	0x0800be95
 800beec:	0800c047 	.word	0x0800c047
 800bef0:	0800be95 	.word	0x0800be95
 800bef4:	0800bf49 	.word	0x0800bf49
 800bef8:	0800be95 	.word	0x0800be95
 800befc:	0800be95 	.word	0x0800be95
 800bf00:	0800c00f 	.word	0x0800c00f
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	1d1a      	adds	r2, r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	602a      	str	r2, [r5, #0]
 800bf0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf14:	2301      	movs	r3, #1
 800bf16:	e0a3      	b.n	800c060 <_printf_i+0x1f4>
 800bf18:	6820      	ldr	r0, [r4, #0]
 800bf1a:	6829      	ldr	r1, [r5, #0]
 800bf1c:	0606      	lsls	r6, r0, #24
 800bf1e:	f101 0304 	add.w	r3, r1, #4
 800bf22:	d50a      	bpl.n	800bf3a <_printf_i+0xce>
 800bf24:	680e      	ldr	r6, [r1, #0]
 800bf26:	602b      	str	r3, [r5, #0]
 800bf28:	2e00      	cmp	r6, #0
 800bf2a:	da03      	bge.n	800bf34 <_printf_i+0xc8>
 800bf2c:	232d      	movs	r3, #45	; 0x2d
 800bf2e:	4276      	negs	r6, r6
 800bf30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf34:	485e      	ldr	r0, [pc, #376]	; (800c0b0 <_printf_i+0x244>)
 800bf36:	230a      	movs	r3, #10
 800bf38:	e019      	b.n	800bf6e <_printf_i+0x102>
 800bf3a:	680e      	ldr	r6, [r1, #0]
 800bf3c:	602b      	str	r3, [r5, #0]
 800bf3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf42:	bf18      	it	ne
 800bf44:	b236      	sxthne	r6, r6
 800bf46:	e7ef      	b.n	800bf28 <_printf_i+0xbc>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	6820      	ldr	r0, [r4, #0]
 800bf4c:	1d19      	adds	r1, r3, #4
 800bf4e:	6029      	str	r1, [r5, #0]
 800bf50:	0601      	lsls	r1, r0, #24
 800bf52:	d501      	bpl.n	800bf58 <_printf_i+0xec>
 800bf54:	681e      	ldr	r6, [r3, #0]
 800bf56:	e002      	b.n	800bf5e <_printf_i+0xf2>
 800bf58:	0646      	lsls	r6, r0, #25
 800bf5a:	d5fb      	bpl.n	800bf54 <_printf_i+0xe8>
 800bf5c:	881e      	ldrh	r6, [r3, #0]
 800bf5e:	4854      	ldr	r0, [pc, #336]	; (800c0b0 <_printf_i+0x244>)
 800bf60:	2f6f      	cmp	r7, #111	; 0x6f
 800bf62:	bf0c      	ite	eq
 800bf64:	2308      	moveq	r3, #8
 800bf66:	230a      	movne	r3, #10
 800bf68:	2100      	movs	r1, #0
 800bf6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf6e:	6865      	ldr	r5, [r4, #4]
 800bf70:	60a5      	str	r5, [r4, #8]
 800bf72:	2d00      	cmp	r5, #0
 800bf74:	bfa2      	ittt	ge
 800bf76:	6821      	ldrge	r1, [r4, #0]
 800bf78:	f021 0104 	bicge.w	r1, r1, #4
 800bf7c:	6021      	strge	r1, [r4, #0]
 800bf7e:	b90e      	cbnz	r6, 800bf84 <_printf_i+0x118>
 800bf80:	2d00      	cmp	r5, #0
 800bf82:	d04d      	beq.n	800c020 <_printf_i+0x1b4>
 800bf84:	4615      	mov	r5, r2
 800bf86:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf8a:	fb03 6711 	mls	r7, r3, r1, r6
 800bf8e:	5dc7      	ldrb	r7, [r0, r7]
 800bf90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf94:	4637      	mov	r7, r6
 800bf96:	42bb      	cmp	r3, r7
 800bf98:	460e      	mov	r6, r1
 800bf9a:	d9f4      	bls.n	800bf86 <_printf_i+0x11a>
 800bf9c:	2b08      	cmp	r3, #8
 800bf9e:	d10b      	bne.n	800bfb8 <_printf_i+0x14c>
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	07de      	lsls	r6, r3, #31
 800bfa4:	d508      	bpl.n	800bfb8 <_printf_i+0x14c>
 800bfa6:	6923      	ldr	r3, [r4, #16]
 800bfa8:	6861      	ldr	r1, [r4, #4]
 800bfaa:	4299      	cmp	r1, r3
 800bfac:	bfde      	ittt	le
 800bfae:	2330      	movle	r3, #48	; 0x30
 800bfb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfb8:	1b52      	subs	r2, r2, r5
 800bfba:	6122      	str	r2, [r4, #16]
 800bfbc:	f8cd a000 	str.w	sl, [sp]
 800bfc0:	464b      	mov	r3, r9
 800bfc2:	aa03      	add	r2, sp, #12
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4640      	mov	r0, r8
 800bfc8:	f7ff fee2 	bl	800bd90 <_printf_common>
 800bfcc:	3001      	adds	r0, #1
 800bfce:	d14c      	bne.n	800c06a <_printf_i+0x1fe>
 800bfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd4:	b004      	add	sp, #16
 800bfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfda:	4835      	ldr	r0, [pc, #212]	; (800c0b0 <_printf_i+0x244>)
 800bfdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bfe0:	6829      	ldr	r1, [r5, #0]
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfe8:	6029      	str	r1, [r5, #0]
 800bfea:	061d      	lsls	r5, r3, #24
 800bfec:	d514      	bpl.n	800c018 <_printf_i+0x1ac>
 800bfee:	07df      	lsls	r7, r3, #31
 800bff0:	bf44      	itt	mi
 800bff2:	f043 0320 	orrmi.w	r3, r3, #32
 800bff6:	6023      	strmi	r3, [r4, #0]
 800bff8:	b91e      	cbnz	r6, 800c002 <_printf_i+0x196>
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	f023 0320 	bic.w	r3, r3, #32
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	2310      	movs	r3, #16
 800c004:	e7b0      	b.n	800bf68 <_printf_i+0xfc>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	f043 0320 	orr.w	r3, r3, #32
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	2378      	movs	r3, #120	; 0x78
 800c010:	4828      	ldr	r0, [pc, #160]	; (800c0b4 <_printf_i+0x248>)
 800c012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c016:	e7e3      	b.n	800bfe0 <_printf_i+0x174>
 800c018:	0659      	lsls	r1, r3, #25
 800c01a:	bf48      	it	mi
 800c01c:	b2b6      	uxthmi	r6, r6
 800c01e:	e7e6      	b.n	800bfee <_printf_i+0x182>
 800c020:	4615      	mov	r5, r2
 800c022:	e7bb      	b.n	800bf9c <_printf_i+0x130>
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	6826      	ldr	r6, [r4, #0]
 800c028:	6961      	ldr	r1, [r4, #20]
 800c02a:	1d18      	adds	r0, r3, #4
 800c02c:	6028      	str	r0, [r5, #0]
 800c02e:	0635      	lsls	r5, r6, #24
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	d501      	bpl.n	800c038 <_printf_i+0x1cc>
 800c034:	6019      	str	r1, [r3, #0]
 800c036:	e002      	b.n	800c03e <_printf_i+0x1d2>
 800c038:	0670      	lsls	r0, r6, #25
 800c03a:	d5fb      	bpl.n	800c034 <_printf_i+0x1c8>
 800c03c:	8019      	strh	r1, [r3, #0]
 800c03e:	2300      	movs	r3, #0
 800c040:	6123      	str	r3, [r4, #16]
 800c042:	4615      	mov	r5, r2
 800c044:	e7ba      	b.n	800bfbc <_printf_i+0x150>
 800c046:	682b      	ldr	r3, [r5, #0]
 800c048:	1d1a      	adds	r2, r3, #4
 800c04a:	602a      	str	r2, [r5, #0]
 800c04c:	681d      	ldr	r5, [r3, #0]
 800c04e:	6862      	ldr	r2, [r4, #4]
 800c050:	2100      	movs	r1, #0
 800c052:	4628      	mov	r0, r5
 800c054:	f7f4 f8d4 	bl	8000200 <memchr>
 800c058:	b108      	cbz	r0, 800c05e <_printf_i+0x1f2>
 800c05a:	1b40      	subs	r0, r0, r5
 800c05c:	6060      	str	r0, [r4, #4]
 800c05e:	6863      	ldr	r3, [r4, #4]
 800c060:	6123      	str	r3, [r4, #16]
 800c062:	2300      	movs	r3, #0
 800c064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c068:	e7a8      	b.n	800bfbc <_printf_i+0x150>
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	462a      	mov	r2, r5
 800c06e:	4649      	mov	r1, r9
 800c070:	4640      	mov	r0, r8
 800c072:	47d0      	blx	sl
 800c074:	3001      	adds	r0, #1
 800c076:	d0ab      	beq.n	800bfd0 <_printf_i+0x164>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	079b      	lsls	r3, r3, #30
 800c07c:	d413      	bmi.n	800c0a6 <_printf_i+0x23a>
 800c07e:	68e0      	ldr	r0, [r4, #12]
 800c080:	9b03      	ldr	r3, [sp, #12]
 800c082:	4298      	cmp	r0, r3
 800c084:	bfb8      	it	lt
 800c086:	4618      	movlt	r0, r3
 800c088:	e7a4      	b.n	800bfd4 <_printf_i+0x168>
 800c08a:	2301      	movs	r3, #1
 800c08c:	4632      	mov	r2, r6
 800c08e:	4649      	mov	r1, r9
 800c090:	4640      	mov	r0, r8
 800c092:	47d0      	blx	sl
 800c094:	3001      	adds	r0, #1
 800c096:	d09b      	beq.n	800bfd0 <_printf_i+0x164>
 800c098:	3501      	adds	r5, #1
 800c09a:	68e3      	ldr	r3, [r4, #12]
 800c09c:	9903      	ldr	r1, [sp, #12]
 800c09e:	1a5b      	subs	r3, r3, r1
 800c0a0:	42ab      	cmp	r3, r5
 800c0a2:	dcf2      	bgt.n	800c08a <_printf_i+0x21e>
 800c0a4:	e7eb      	b.n	800c07e <_printf_i+0x212>
 800c0a6:	2500      	movs	r5, #0
 800c0a8:	f104 0619 	add.w	r6, r4, #25
 800c0ac:	e7f5      	b.n	800c09a <_printf_i+0x22e>
 800c0ae:	bf00      	nop
 800c0b0:	08010146 	.word	0x08010146
 800c0b4:	08010157 	.word	0x08010157

0800c0b8 <siprintf>:
 800c0b8:	b40e      	push	{r1, r2, r3}
 800c0ba:	b500      	push	{lr}
 800c0bc:	b09c      	sub	sp, #112	; 0x70
 800c0be:	ab1d      	add	r3, sp, #116	; 0x74
 800c0c0:	9002      	str	r0, [sp, #8]
 800c0c2:	9006      	str	r0, [sp, #24]
 800c0c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0c8:	4809      	ldr	r0, [pc, #36]	; (800c0f0 <siprintf+0x38>)
 800c0ca:	9107      	str	r1, [sp, #28]
 800c0cc:	9104      	str	r1, [sp, #16]
 800c0ce:	4909      	ldr	r1, [pc, #36]	; (800c0f4 <siprintf+0x3c>)
 800c0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d4:	9105      	str	r1, [sp, #20]
 800c0d6:	6800      	ldr	r0, [r0, #0]
 800c0d8:	9301      	str	r3, [sp, #4]
 800c0da:	a902      	add	r1, sp, #8
 800c0dc:	f001 fb76 	bl	800d7cc <_svfiprintf_r>
 800c0e0:	9b02      	ldr	r3, [sp, #8]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	701a      	strb	r2, [r3, #0]
 800c0e6:	b01c      	add	sp, #112	; 0x70
 800c0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0ec:	b003      	add	sp, #12
 800c0ee:	4770      	bx	lr
 800c0f0:	20000178 	.word	0x20000178
 800c0f4:	ffff0208 	.word	0xffff0208

0800c0f8 <quorem>:
 800c0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	6903      	ldr	r3, [r0, #16]
 800c0fe:	690c      	ldr	r4, [r1, #16]
 800c100:	42a3      	cmp	r3, r4
 800c102:	4607      	mov	r7, r0
 800c104:	f2c0 8081 	blt.w	800c20a <quorem+0x112>
 800c108:	3c01      	subs	r4, #1
 800c10a:	f101 0814 	add.w	r8, r1, #20
 800c10e:	f100 0514 	add.w	r5, r0, #20
 800c112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c11c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c120:	3301      	adds	r3, #1
 800c122:	429a      	cmp	r2, r3
 800c124:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c128:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c12c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c130:	d331      	bcc.n	800c196 <quorem+0x9e>
 800c132:	f04f 0e00 	mov.w	lr, #0
 800c136:	4640      	mov	r0, r8
 800c138:	46ac      	mov	ip, r5
 800c13a:	46f2      	mov	sl, lr
 800c13c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c140:	b293      	uxth	r3, r2
 800c142:	fb06 e303 	mla	r3, r6, r3, lr
 800c146:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	ebaa 0303 	sub.w	r3, sl, r3
 800c150:	f8dc a000 	ldr.w	sl, [ip]
 800c154:	0c12      	lsrs	r2, r2, #16
 800c156:	fa13 f38a 	uxtah	r3, r3, sl
 800c15a:	fb06 e202 	mla	r2, r6, r2, lr
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	9b00      	ldr	r3, [sp, #0]
 800c162:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c166:	b292      	uxth	r2, r2
 800c168:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c16c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c170:	f8bd 3000 	ldrh.w	r3, [sp]
 800c174:	4581      	cmp	r9, r0
 800c176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c17a:	f84c 3b04 	str.w	r3, [ip], #4
 800c17e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c182:	d2db      	bcs.n	800c13c <quorem+0x44>
 800c184:	f855 300b 	ldr.w	r3, [r5, fp]
 800c188:	b92b      	cbnz	r3, 800c196 <quorem+0x9e>
 800c18a:	9b01      	ldr	r3, [sp, #4]
 800c18c:	3b04      	subs	r3, #4
 800c18e:	429d      	cmp	r5, r3
 800c190:	461a      	mov	r2, r3
 800c192:	d32e      	bcc.n	800c1f2 <quorem+0xfa>
 800c194:	613c      	str	r4, [r7, #16]
 800c196:	4638      	mov	r0, r7
 800c198:	f001 f8c4 	bl	800d324 <__mcmp>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	db24      	blt.n	800c1ea <quorem+0xf2>
 800c1a0:	3601      	adds	r6, #1
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f04f 0c00 	mov.w	ip, #0
 800c1a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c1ac:	f8d0 e000 	ldr.w	lr, [r0]
 800c1b0:	b293      	uxth	r3, r2
 800c1b2:	ebac 0303 	sub.w	r3, ip, r3
 800c1b6:	0c12      	lsrs	r2, r2, #16
 800c1b8:	fa13 f38e 	uxtah	r3, r3, lr
 800c1bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c1c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1ca:	45c1      	cmp	r9, r8
 800c1cc:	f840 3b04 	str.w	r3, [r0], #4
 800c1d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c1d4:	d2e8      	bcs.n	800c1a8 <quorem+0xb0>
 800c1d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1de:	b922      	cbnz	r2, 800c1ea <quorem+0xf2>
 800c1e0:	3b04      	subs	r3, #4
 800c1e2:	429d      	cmp	r5, r3
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	d30a      	bcc.n	800c1fe <quorem+0x106>
 800c1e8:	613c      	str	r4, [r7, #16]
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	b003      	add	sp, #12
 800c1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f2:	6812      	ldr	r2, [r2, #0]
 800c1f4:	3b04      	subs	r3, #4
 800c1f6:	2a00      	cmp	r2, #0
 800c1f8:	d1cc      	bne.n	800c194 <quorem+0x9c>
 800c1fa:	3c01      	subs	r4, #1
 800c1fc:	e7c7      	b.n	800c18e <quorem+0x96>
 800c1fe:	6812      	ldr	r2, [r2, #0]
 800c200:	3b04      	subs	r3, #4
 800c202:	2a00      	cmp	r2, #0
 800c204:	d1f0      	bne.n	800c1e8 <quorem+0xf0>
 800c206:	3c01      	subs	r4, #1
 800c208:	e7eb      	b.n	800c1e2 <quorem+0xea>
 800c20a:	2000      	movs	r0, #0
 800c20c:	e7ee      	b.n	800c1ec <quorem+0xf4>
	...

0800c210 <_dtoa_r>:
 800c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	ed2d 8b04 	vpush	{d8-d9}
 800c218:	ec57 6b10 	vmov	r6, r7, d0
 800c21c:	b093      	sub	sp, #76	; 0x4c
 800c21e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c224:	9106      	str	r1, [sp, #24]
 800c226:	ee10 aa10 	vmov	sl, s0
 800c22a:	4604      	mov	r4, r0
 800c22c:	9209      	str	r2, [sp, #36]	; 0x24
 800c22e:	930c      	str	r3, [sp, #48]	; 0x30
 800c230:	46bb      	mov	fp, r7
 800c232:	b975      	cbnz	r5, 800c252 <_dtoa_r+0x42>
 800c234:	2010      	movs	r0, #16
 800c236:	f000 fddd 	bl	800cdf4 <malloc>
 800c23a:	4602      	mov	r2, r0
 800c23c:	6260      	str	r0, [r4, #36]	; 0x24
 800c23e:	b920      	cbnz	r0, 800c24a <_dtoa_r+0x3a>
 800c240:	4ba7      	ldr	r3, [pc, #668]	; (800c4e0 <_dtoa_r+0x2d0>)
 800c242:	21ea      	movs	r1, #234	; 0xea
 800c244:	48a7      	ldr	r0, [pc, #668]	; (800c4e4 <_dtoa_r+0x2d4>)
 800c246:	f001 fbd1 	bl	800d9ec <__assert_func>
 800c24a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c24e:	6005      	str	r5, [r0, #0]
 800c250:	60c5      	str	r5, [r0, #12]
 800c252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c254:	6819      	ldr	r1, [r3, #0]
 800c256:	b151      	cbz	r1, 800c26e <_dtoa_r+0x5e>
 800c258:	685a      	ldr	r2, [r3, #4]
 800c25a:	604a      	str	r2, [r1, #4]
 800c25c:	2301      	movs	r3, #1
 800c25e:	4093      	lsls	r3, r2
 800c260:	608b      	str	r3, [r1, #8]
 800c262:	4620      	mov	r0, r4
 800c264:	f000 fe1c 	bl	800cea0 <_Bfree>
 800c268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	1e3b      	subs	r3, r7, #0
 800c270:	bfaa      	itet	ge
 800c272:	2300      	movge	r3, #0
 800c274:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c278:	f8c8 3000 	strge.w	r3, [r8]
 800c27c:	4b9a      	ldr	r3, [pc, #616]	; (800c4e8 <_dtoa_r+0x2d8>)
 800c27e:	bfbc      	itt	lt
 800c280:	2201      	movlt	r2, #1
 800c282:	f8c8 2000 	strlt.w	r2, [r8]
 800c286:	ea33 030b 	bics.w	r3, r3, fp
 800c28a:	d11b      	bne.n	800c2c4 <_dtoa_r+0xb4>
 800c28c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c28e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c292:	6013      	str	r3, [r2, #0]
 800c294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c298:	4333      	orrs	r3, r6
 800c29a:	f000 8592 	beq.w	800cdc2 <_dtoa_r+0xbb2>
 800c29e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2a0:	b963      	cbnz	r3, 800c2bc <_dtoa_r+0xac>
 800c2a2:	4b92      	ldr	r3, [pc, #584]	; (800c4ec <_dtoa_r+0x2dc>)
 800c2a4:	e022      	b.n	800c2ec <_dtoa_r+0xdc>
 800c2a6:	4b92      	ldr	r3, [pc, #584]	; (800c4f0 <_dtoa_r+0x2e0>)
 800c2a8:	9301      	str	r3, [sp, #4]
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2ae:	6013      	str	r3, [r2, #0]
 800c2b0:	9801      	ldr	r0, [sp, #4]
 800c2b2:	b013      	add	sp, #76	; 0x4c
 800c2b4:	ecbd 8b04 	vpop	{d8-d9}
 800c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	4b8b      	ldr	r3, [pc, #556]	; (800c4ec <_dtoa_r+0x2dc>)
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	3303      	adds	r3, #3
 800c2c2:	e7f3      	b.n	800c2ac <_dtoa_r+0x9c>
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	4650      	mov	r0, sl
 800c2ca:	4659      	mov	r1, fp
 800c2cc:	f7f4 fc0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2d0:	ec4b ab19 	vmov	d9, sl, fp
 800c2d4:	4680      	mov	r8, r0
 800c2d6:	b158      	cbz	r0, 800c2f0 <_dtoa_r+0xe0>
 800c2d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2da:	2301      	movs	r3, #1
 800c2dc:	6013      	str	r3, [r2, #0]
 800c2de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f000 856b 	beq.w	800cdbc <_dtoa_r+0xbac>
 800c2e6:	4883      	ldr	r0, [pc, #524]	; (800c4f4 <_dtoa_r+0x2e4>)
 800c2e8:	6018      	str	r0, [r3, #0]
 800c2ea:	1e43      	subs	r3, r0, #1
 800c2ec:	9301      	str	r3, [sp, #4]
 800c2ee:	e7df      	b.n	800c2b0 <_dtoa_r+0xa0>
 800c2f0:	ec4b ab10 	vmov	d0, sl, fp
 800c2f4:	aa10      	add	r2, sp, #64	; 0x40
 800c2f6:	a911      	add	r1, sp, #68	; 0x44
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f001 f8b9 	bl	800d470 <__d2b>
 800c2fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c302:	ee08 0a10 	vmov	s16, r0
 800c306:	2d00      	cmp	r5, #0
 800c308:	f000 8084 	beq.w	800c414 <_dtoa_r+0x204>
 800c30c:	ee19 3a90 	vmov	r3, s19
 800c310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c314:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c318:	4656      	mov	r6, sl
 800c31a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c31e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c322:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c326:	4b74      	ldr	r3, [pc, #464]	; (800c4f8 <_dtoa_r+0x2e8>)
 800c328:	2200      	movs	r2, #0
 800c32a:	4630      	mov	r0, r6
 800c32c:	4639      	mov	r1, r7
 800c32e:	f7f3 ffbb 	bl	80002a8 <__aeabi_dsub>
 800c332:	a365      	add	r3, pc, #404	; (adr r3, 800c4c8 <_dtoa_r+0x2b8>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	f7f4 f96e 	bl	8000618 <__aeabi_dmul>
 800c33c:	a364      	add	r3, pc, #400	; (adr r3, 800c4d0 <_dtoa_r+0x2c0>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	f7f3 ffb3 	bl	80002ac <__adddf3>
 800c346:	4606      	mov	r6, r0
 800c348:	4628      	mov	r0, r5
 800c34a:	460f      	mov	r7, r1
 800c34c:	f7f4 f8fa 	bl	8000544 <__aeabi_i2d>
 800c350:	a361      	add	r3, pc, #388	; (adr r3, 800c4d8 <_dtoa_r+0x2c8>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	f7f4 f95f 	bl	8000618 <__aeabi_dmul>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4630      	mov	r0, r6
 800c360:	4639      	mov	r1, r7
 800c362:	f7f3 ffa3 	bl	80002ac <__adddf3>
 800c366:	4606      	mov	r6, r0
 800c368:	460f      	mov	r7, r1
 800c36a:	f7f4 fc05 	bl	8000b78 <__aeabi_d2iz>
 800c36e:	2200      	movs	r2, #0
 800c370:	9000      	str	r0, [sp, #0]
 800c372:	2300      	movs	r3, #0
 800c374:	4630      	mov	r0, r6
 800c376:	4639      	mov	r1, r7
 800c378:	f7f4 fbc0 	bl	8000afc <__aeabi_dcmplt>
 800c37c:	b150      	cbz	r0, 800c394 <_dtoa_r+0x184>
 800c37e:	9800      	ldr	r0, [sp, #0]
 800c380:	f7f4 f8e0 	bl	8000544 <__aeabi_i2d>
 800c384:	4632      	mov	r2, r6
 800c386:	463b      	mov	r3, r7
 800c388:	f7f4 fbae 	bl	8000ae8 <__aeabi_dcmpeq>
 800c38c:	b910      	cbnz	r0, 800c394 <_dtoa_r+0x184>
 800c38e:	9b00      	ldr	r3, [sp, #0]
 800c390:	3b01      	subs	r3, #1
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	9b00      	ldr	r3, [sp, #0]
 800c396:	2b16      	cmp	r3, #22
 800c398:	d85a      	bhi.n	800c450 <_dtoa_r+0x240>
 800c39a:	9a00      	ldr	r2, [sp, #0]
 800c39c:	4b57      	ldr	r3, [pc, #348]	; (800c4fc <_dtoa_r+0x2ec>)
 800c39e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	ec51 0b19 	vmov	r0, r1, d9
 800c3aa:	f7f4 fba7 	bl	8000afc <__aeabi_dcmplt>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d050      	beq.n	800c454 <_dtoa_r+0x244>
 800c3b2:	9b00      	ldr	r3, [sp, #0]
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3be:	1b5d      	subs	r5, r3, r5
 800c3c0:	1e6b      	subs	r3, r5, #1
 800c3c2:	9305      	str	r3, [sp, #20]
 800c3c4:	bf45      	ittet	mi
 800c3c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c3ca:	9304      	strmi	r3, [sp, #16]
 800c3cc:	2300      	movpl	r3, #0
 800c3ce:	2300      	movmi	r3, #0
 800c3d0:	bf4c      	ite	mi
 800c3d2:	9305      	strmi	r3, [sp, #20]
 800c3d4:	9304      	strpl	r3, [sp, #16]
 800c3d6:	9b00      	ldr	r3, [sp, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	db3d      	blt.n	800c458 <_dtoa_r+0x248>
 800c3dc:	9b05      	ldr	r3, [sp, #20]
 800c3de:	9a00      	ldr	r2, [sp, #0]
 800c3e0:	920a      	str	r2, [sp, #40]	; 0x28
 800c3e2:	4413      	add	r3, r2
 800c3e4:	9305      	str	r3, [sp, #20]
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	9307      	str	r3, [sp, #28]
 800c3ea:	9b06      	ldr	r3, [sp, #24]
 800c3ec:	2b09      	cmp	r3, #9
 800c3ee:	f200 8089 	bhi.w	800c504 <_dtoa_r+0x2f4>
 800c3f2:	2b05      	cmp	r3, #5
 800c3f4:	bfc4      	itt	gt
 800c3f6:	3b04      	subgt	r3, #4
 800c3f8:	9306      	strgt	r3, [sp, #24]
 800c3fa:	9b06      	ldr	r3, [sp, #24]
 800c3fc:	f1a3 0302 	sub.w	r3, r3, #2
 800c400:	bfcc      	ite	gt
 800c402:	2500      	movgt	r5, #0
 800c404:	2501      	movle	r5, #1
 800c406:	2b03      	cmp	r3, #3
 800c408:	f200 8087 	bhi.w	800c51a <_dtoa_r+0x30a>
 800c40c:	e8df f003 	tbb	[pc, r3]
 800c410:	59383a2d 	.word	0x59383a2d
 800c414:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c418:	441d      	add	r5, r3
 800c41a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c41e:	2b20      	cmp	r3, #32
 800c420:	bfc1      	itttt	gt
 800c422:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c426:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c42a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c42e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c432:	bfda      	itte	le
 800c434:	f1c3 0320 	rsble	r3, r3, #32
 800c438:	fa06 f003 	lslle.w	r0, r6, r3
 800c43c:	4318      	orrgt	r0, r3
 800c43e:	f7f4 f871 	bl	8000524 <__aeabi_ui2d>
 800c442:	2301      	movs	r3, #1
 800c444:	4606      	mov	r6, r0
 800c446:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c44a:	3d01      	subs	r5, #1
 800c44c:	930e      	str	r3, [sp, #56]	; 0x38
 800c44e:	e76a      	b.n	800c326 <_dtoa_r+0x116>
 800c450:	2301      	movs	r3, #1
 800c452:	e7b2      	b.n	800c3ba <_dtoa_r+0x1aa>
 800c454:	900b      	str	r0, [sp, #44]	; 0x2c
 800c456:	e7b1      	b.n	800c3bc <_dtoa_r+0x1ac>
 800c458:	9b04      	ldr	r3, [sp, #16]
 800c45a:	9a00      	ldr	r2, [sp, #0]
 800c45c:	1a9b      	subs	r3, r3, r2
 800c45e:	9304      	str	r3, [sp, #16]
 800c460:	4253      	negs	r3, r2
 800c462:	9307      	str	r3, [sp, #28]
 800c464:	2300      	movs	r3, #0
 800c466:	930a      	str	r3, [sp, #40]	; 0x28
 800c468:	e7bf      	b.n	800c3ea <_dtoa_r+0x1da>
 800c46a:	2300      	movs	r3, #0
 800c46c:	9308      	str	r3, [sp, #32]
 800c46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c470:	2b00      	cmp	r3, #0
 800c472:	dc55      	bgt.n	800c520 <_dtoa_r+0x310>
 800c474:	2301      	movs	r3, #1
 800c476:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c47a:	461a      	mov	r2, r3
 800c47c:	9209      	str	r2, [sp, #36]	; 0x24
 800c47e:	e00c      	b.n	800c49a <_dtoa_r+0x28a>
 800c480:	2301      	movs	r3, #1
 800c482:	e7f3      	b.n	800c46c <_dtoa_r+0x25c>
 800c484:	2300      	movs	r3, #0
 800c486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c488:	9308      	str	r3, [sp, #32]
 800c48a:	9b00      	ldr	r3, [sp, #0]
 800c48c:	4413      	add	r3, r2
 800c48e:	9302      	str	r3, [sp, #8]
 800c490:	3301      	adds	r3, #1
 800c492:	2b01      	cmp	r3, #1
 800c494:	9303      	str	r3, [sp, #12]
 800c496:	bfb8      	it	lt
 800c498:	2301      	movlt	r3, #1
 800c49a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c49c:	2200      	movs	r2, #0
 800c49e:	6042      	str	r2, [r0, #4]
 800c4a0:	2204      	movs	r2, #4
 800c4a2:	f102 0614 	add.w	r6, r2, #20
 800c4a6:	429e      	cmp	r6, r3
 800c4a8:	6841      	ldr	r1, [r0, #4]
 800c4aa:	d93d      	bls.n	800c528 <_dtoa_r+0x318>
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f000 fcb7 	bl	800ce20 <_Balloc>
 800c4b2:	9001      	str	r0, [sp, #4]
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d13b      	bne.n	800c530 <_dtoa_r+0x320>
 800c4b8:	4b11      	ldr	r3, [pc, #68]	; (800c500 <_dtoa_r+0x2f0>)
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c4c0:	e6c0      	b.n	800c244 <_dtoa_r+0x34>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e7df      	b.n	800c486 <_dtoa_r+0x276>
 800c4c6:	bf00      	nop
 800c4c8:	636f4361 	.word	0x636f4361
 800c4cc:	3fd287a7 	.word	0x3fd287a7
 800c4d0:	8b60c8b3 	.word	0x8b60c8b3
 800c4d4:	3fc68a28 	.word	0x3fc68a28
 800c4d8:	509f79fb 	.word	0x509f79fb
 800c4dc:	3fd34413 	.word	0x3fd34413
 800c4e0:	08010175 	.word	0x08010175
 800c4e4:	0801018c 	.word	0x0801018c
 800c4e8:	7ff00000 	.word	0x7ff00000
 800c4ec:	08010171 	.word	0x08010171
 800c4f0:	08010168 	.word	0x08010168
 800c4f4:	08010145 	.word	0x08010145
 800c4f8:	3ff80000 	.word	0x3ff80000
 800c4fc:	08010280 	.word	0x08010280
 800c500:	080101e7 	.word	0x080101e7
 800c504:	2501      	movs	r5, #1
 800c506:	2300      	movs	r3, #0
 800c508:	9306      	str	r3, [sp, #24]
 800c50a:	9508      	str	r5, [sp, #32]
 800c50c:	f04f 33ff 	mov.w	r3, #4294967295
 800c510:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c514:	2200      	movs	r2, #0
 800c516:	2312      	movs	r3, #18
 800c518:	e7b0      	b.n	800c47c <_dtoa_r+0x26c>
 800c51a:	2301      	movs	r3, #1
 800c51c:	9308      	str	r3, [sp, #32]
 800c51e:	e7f5      	b.n	800c50c <_dtoa_r+0x2fc>
 800c520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c522:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c526:	e7b8      	b.n	800c49a <_dtoa_r+0x28a>
 800c528:	3101      	adds	r1, #1
 800c52a:	6041      	str	r1, [r0, #4]
 800c52c:	0052      	lsls	r2, r2, #1
 800c52e:	e7b8      	b.n	800c4a2 <_dtoa_r+0x292>
 800c530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c532:	9a01      	ldr	r2, [sp, #4]
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	9b03      	ldr	r3, [sp, #12]
 800c538:	2b0e      	cmp	r3, #14
 800c53a:	f200 809d 	bhi.w	800c678 <_dtoa_r+0x468>
 800c53e:	2d00      	cmp	r5, #0
 800c540:	f000 809a 	beq.w	800c678 <_dtoa_r+0x468>
 800c544:	9b00      	ldr	r3, [sp, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	dd32      	ble.n	800c5b0 <_dtoa_r+0x3a0>
 800c54a:	4ab7      	ldr	r2, [pc, #732]	; (800c828 <_dtoa_r+0x618>)
 800c54c:	f003 030f 	and.w	r3, r3, #15
 800c550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c554:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c558:	9b00      	ldr	r3, [sp, #0]
 800c55a:	05d8      	lsls	r0, r3, #23
 800c55c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c560:	d516      	bpl.n	800c590 <_dtoa_r+0x380>
 800c562:	4bb2      	ldr	r3, [pc, #712]	; (800c82c <_dtoa_r+0x61c>)
 800c564:	ec51 0b19 	vmov	r0, r1, d9
 800c568:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c56c:	f7f4 f97e 	bl	800086c <__aeabi_ddiv>
 800c570:	f007 070f 	and.w	r7, r7, #15
 800c574:	4682      	mov	sl, r0
 800c576:	468b      	mov	fp, r1
 800c578:	2503      	movs	r5, #3
 800c57a:	4eac      	ldr	r6, [pc, #688]	; (800c82c <_dtoa_r+0x61c>)
 800c57c:	b957      	cbnz	r7, 800c594 <_dtoa_r+0x384>
 800c57e:	4642      	mov	r2, r8
 800c580:	464b      	mov	r3, r9
 800c582:	4650      	mov	r0, sl
 800c584:	4659      	mov	r1, fp
 800c586:	f7f4 f971 	bl	800086c <__aeabi_ddiv>
 800c58a:	4682      	mov	sl, r0
 800c58c:	468b      	mov	fp, r1
 800c58e:	e028      	b.n	800c5e2 <_dtoa_r+0x3d2>
 800c590:	2502      	movs	r5, #2
 800c592:	e7f2      	b.n	800c57a <_dtoa_r+0x36a>
 800c594:	07f9      	lsls	r1, r7, #31
 800c596:	d508      	bpl.n	800c5aa <_dtoa_r+0x39a>
 800c598:	4640      	mov	r0, r8
 800c59a:	4649      	mov	r1, r9
 800c59c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c5a0:	f7f4 f83a 	bl	8000618 <__aeabi_dmul>
 800c5a4:	3501      	adds	r5, #1
 800c5a6:	4680      	mov	r8, r0
 800c5a8:	4689      	mov	r9, r1
 800c5aa:	107f      	asrs	r7, r7, #1
 800c5ac:	3608      	adds	r6, #8
 800c5ae:	e7e5      	b.n	800c57c <_dtoa_r+0x36c>
 800c5b0:	f000 809b 	beq.w	800c6ea <_dtoa_r+0x4da>
 800c5b4:	9b00      	ldr	r3, [sp, #0]
 800c5b6:	4f9d      	ldr	r7, [pc, #628]	; (800c82c <_dtoa_r+0x61c>)
 800c5b8:	425e      	negs	r6, r3
 800c5ba:	4b9b      	ldr	r3, [pc, #620]	; (800c828 <_dtoa_r+0x618>)
 800c5bc:	f006 020f 	and.w	r2, r6, #15
 800c5c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	ec51 0b19 	vmov	r0, r1, d9
 800c5cc:	f7f4 f824 	bl	8000618 <__aeabi_dmul>
 800c5d0:	1136      	asrs	r6, r6, #4
 800c5d2:	4682      	mov	sl, r0
 800c5d4:	468b      	mov	fp, r1
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2502      	movs	r5, #2
 800c5da:	2e00      	cmp	r6, #0
 800c5dc:	d17a      	bne.n	800c6d4 <_dtoa_r+0x4c4>
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1d3      	bne.n	800c58a <_dtoa_r+0x37a>
 800c5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 8082 	beq.w	800c6ee <_dtoa_r+0x4de>
 800c5ea:	4b91      	ldr	r3, [pc, #580]	; (800c830 <_dtoa_r+0x620>)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4650      	mov	r0, sl
 800c5f0:	4659      	mov	r1, fp
 800c5f2:	f7f4 fa83 	bl	8000afc <__aeabi_dcmplt>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d079      	beq.n	800c6ee <_dtoa_r+0x4de>
 800c5fa:	9b03      	ldr	r3, [sp, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d076      	beq.n	800c6ee <_dtoa_r+0x4de>
 800c600:	9b02      	ldr	r3, [sp, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	dd36      	ble.n	800c674 <_dtoa_r+0x464>
 800c606:	9b00      	ldr	r3, [sp, #0]
 800c608:	4650      	mov	r0, sl
 800c60a:	4659      	mov	r1, fp
 800c60c:	1e5f      	subs	r7, r3, #1
 800c60e:	2200      	movs	r2, #0
 800c610:	4b88      	ldr	r3, [pc, #544]	; (800c834 <_dtoa_r+0x624>)
 800c612:	f7f4 f801 	bl	8000618 <__aeabi_dmul>
 800c616:	9e02      	ldr	r6, [sp, #8]
 800c618:	4682      	mov	sl, r0
 800c61a:	468b      	mov	fp, r1
 800c61c:	3501      	adds	r5, #1
 800c61e:	4628      	mov	r0, r5
 800c620:	f7f3 ff90 	bl	8000544 <__aeabi_i2d>
 800c624:	4652      	mov	r2, sl
 800c626:	465b      	mov	r3, fp
 800c628:	f7f3 fff6 	bl	8000618 <__aeabi_dmul>
 800c62c:	4b82      	ldr	r3, [pc, #520]	; (800c838 <_dtoa_r+0x628>)
 800c62e:	2200      	movs	r2, #0
 800c630:	f7f3 fe3c 	bl	80002ac <__adddf3>
 800c634:	46d0      	mov	r8, sl
 800c636:	46d9      	mov	r9, fp
 800c638:	4682      	mov	sl, r0
 800c63a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c63e:	2e00      	cmp	r6, #0
 800c640:	d158      	bne.n	800c6f4 <_dtoa_r+0x4e4>
 800c642:	4b7e      	ldr	r3, [pc, #504]	; (800c83c <_dtoa_r+0x62c>)
 800c644:	2200      	movs	r2, #0
 800c646:	4640      	mov	r0, r8
 800c648:	4649      	mov	r1, r9
 800c64a:	f7f3 fe2d 	bl	80002a8 <__aeabi_dsub>
 800c64e:	4652      	mov	r2, sl
 800c650:	465b      	mov	r3, fp
 800c652:	4680      	mov	r8, r0
 800c654:	4689      	mov	r9, r1
 800c656:	f7f4 fa6f 	bl	8000b38 <__aeabi_dcmpgt>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f040 8295 	bne.w	800cb8a <_dtoa_r+0x97a>
 800c660:	4652      	mov	r2, sl
 800c662:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c666:	4640      	mov	r0, r8
 800c668:	4649      	mov	r1, r9
 800c66a:	f7f4 fa47 	bl	8000afc <__aeabi_dcmplt>
 800c66e:	2800      	cmp	r0, #0
 800c670:	f040 8289 	bne.w	800cb86 <_dtoa_r+0x976>
 800c674:	ec5b ab19 	vmov	sl, fp, d9
 800c678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f2c0 8148 	blt.w	800c910 <_dtoa_r+0x700>
 800c680:	9a00      	ldr	r2, [sp, #0]
 800c682:	2a0e      	cmp	r2, #14
 800c684:	f300 8144 	bgt.w	800c910 <_dtoa_r+0x700>
 800c688:	4b67      	ldr	r3, [pc, #412]	; (800c828 <_dtoa_r+0x618>)
 800c68a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c68e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c694:	2b00      	cmp	r3, #0
 800c696:	f280 80d5 	bge.w	800c844 <_dtoa_r+0x634>
 800c69a:	9b03      	ldr	r3, [sp, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f300 80d1 	bgt.w	800c844 <_dtoa_r+0x634>
 800c6a2:	f040 826f 	bne.w	800cb84 <_dtoa_r+0x974>
 800c6a6:	4b65      	ldr	r3, [pc, #404]	; (800c83c <_dtoa_r+0x62c>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	f7f3 ffb3 	bl	8000618 <__aeabi_dmul>
 800c6b2:	4652      	mov	r2, sl
 800c6b4:	465b      	mov	r3, fp
 800c6b6:	f7f4 fa35 	bl	8000b24 <__aeabi_dcmpge>
 800c6ba:	9e03      	ldr	r6, [sp, #12]
 800c6bc:	4637      	mov	r7, r6
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	f040 8245 	bne.w	800cb4e <_dtoa_r+0x93e>
 800c6c4:	9d01      	ldr	r5, [sp, #4]
 800c6c6:	2331      	movs	r3, #49	; 0x31
 800c6c8:	f805 3b01 	strb.w	r3, [r5], #1
 800c6cc:	9b00      	ldr	r3, [sp, #0]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	e240      	b.n	800cb56 <_dtoa_r+0x946>
 800c6d4:	07f2      	lsls	r2, r6, #31
 800c6d6:	d505      	bpl.n	800c6e4 <_dtoa_r+0x4d4>
 800c6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6dc:	f7f3 ff9c 	bl	8000618 <__aeabi_dmul>
 800c6e0:	3501      	adds	r5, #1
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	1076      	asrs	r6, r6, #1
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	e777      	b.n	800c5da <_dtoa_r+0x3ca>
 800c6ea:	2502      	movs	r5, #2
 800c6ec:	e779      	b.n	800c5e2 <_dtoa_r+0x3d2>
 800c6ee:	9f00      	ldr	r7, [sp, #0]
 800c6f0:	9e03      	ldr	r6, [sp, #12]
 800c6f2:	e794      	b.n	800c61e <_dtoa_r+0x40e>
 800c6f4:	9901      	ldr	r1, [sp, #4]
 800c6f6:	4b4c      	ldr	r3, [pc, #304]	; (800c828 <_dtoa_r+0x618>)
 800c6f8:	4431      	add	r1, r6
 800c6fa:	910d      	str	r1, [sp, #52]	; 0x34
 800c6fc:	9908      	ldr	r1, [sp, #32]
 800c6fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c702:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c706:	2900      	cmp	r1, #0
 800c708:	d043      	beq.n	800c792 <_dtoa_r+0x582>
 800c70a:	494d      	ldr	r1, [pc, #308]	; (800c840 <_dtoa_r+0x630>)
 800c70c:	2000      	movs	r0, #0
 800c70e:	f7f4 f8ad 	bl	800086c <__aeabi_ddiv>
 800c712:	4652      	mov	r2, sl
 800c714:	465b      	mov	r3, fp
 800c716:	f7f3 fdc7 	bl	80002a8 <__aeabi_dsub>
 800c71a:	9d01      	ldr	r5, [sp, #4]
 800c71c:	4682      	mov	sl, r0
 800c71e:	468b      	mov	fp, r1
 800c720:	4649      	mov	r1, r9
 800c722:	4640      	mov	r0, r8
 800c724:	f7f4 fa28 	bl	8000b78 <__aeabi_d2iz>
 800c728:	4606      	mov	r6, r0
 800c72a:	f7f3 ff0b 	bl	8000544 <__aeabi_i2d>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4640      	mov	r0, r8
 800c734:	4649      	mov	r1, r9
 800c736:	f7f3 fdb7 	bl	80002a8 <__aeabi_dsub>
 800c73a:	3630      	adds	r6, #48	; 0x30
 800c73c:	f805 6b01 	strb.w	r6, [r5], #1
 800c740:	4652      	mov	r2, sl
 800c742:	465b      	mov	r3, fp
 800c744:	4680      	mov	r8, r0
 800c746:	4689      	mov	r9, r1
 800c748:	f7f4 f9d8 	bl	8000afc <__aeabi_dcmplt>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d163      	bne.n	800c818 <_dtoa_r+0x608>
 800c750:	4642      	mov	r2, r8
 800c752:	464b      	mov	r3, r9
 800c754:	4936      	ldr	r1, [pc, #216]	; (800c830 <_dtoa_r+0x620>)
 800c756:	2000      	movs	r0, #0
 800c758:	f7f3 fda6 	bl	80002a8 <__aeabi_dsub>
 800c75c:	4652      	mov	r2, sl
 800c75e:	465b      	mov	r3, fp
 800c760:	f7f4 f9cc 	bl	8000afc <__aeabi_dcmplt>
 800c764:	2800      	cmp	r0, #0
 800c766:	f040 80b5 	bne.w	800c8d4 <_dtoa_r+0x6c4>
 800c76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c76c:	429d      	cmp	r5, r3
 800c76e:	d081      	beq.n	800c674 <_dtoa_r+0x464>
 800c770:	4b30      	ldr	r3, [pc, #192]	; (800c834 <_dtoa_r+0x624>)
 800c772:	2200      	movs	r2, #0
 800c774:	4650      	mov	r0, sl
 800c776:	4659      	mov	r1, fp
 800c778:	f7f3 ff4e 	bl	8000618 <__aeabi_dmul>
 800c77c:	4b2d      	ldr	r3, [pc, #180]	; (800c834 <_dtoa_r+0x624>)
 800c77e:	4682      	mov	sl, r0
 800c780:	468b      	mov	fp, r1
 800c782:	4640      	mov	r0, r8
 800c784:	4649      	mov	r1, r9
 800c786:	2200      	movs	r2, #0
 800c788:	f7f3 ff46 	bl	8000618 <__aeabi_dmul>
 800c78c:	4680      	mov	r8, r0
 800c78e:	4689      	mov	r9, r1
 800c790:	e7c6      	b.n	800c720 <_dtoa_r+0x510>
 800c792:	4650      	mov	r0, sl
 800c794:	4659      	mov	r1, fp
 800c796:	f7f3 ff3f 	bl	8000618 <__aeabi_dmul>
 800c79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c79c:	9d01      	ldr	r5, [sp, #4]
 800c79e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7a0:	4682      	mov	sl, r0
 800c7a2:	468b      	mov	fp, r1
 800c7a4:	4649      	mov	r1, r9
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	f7f4 f9e6 	bl	8000b78 <__aeabi_d2iz>
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	f7f3 fec9 	bl	8000544 <__aeabi_i2d>
 800c7b2:	3630      	adds	r6, #48	; 0x30
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4640      	mov	r0, r8
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	f7f3 fd74 	bl	80002a8 <__aeabi_dsub>
 800c7c0:	f805 6b01 	strb.w	r6, [r5], #1
 800c7c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7c6:	429d      	cmp	r5, r3
 800c7c8:	4680      	mov	r8, r0
 800c7ca:	4689      	mov	r9, r1
 800c7cc:	f04f 0200 	mov.w	r2, #0
 800c7d0:	d124      	bne.n	800c81c <_dtoa_r+0x60c>
 800c7d2:	4b1b      	ldr	r3, [pc, #108]	; (800c840 <_dtoa_r+0x630>)
 800c7d4:	4650      	mov	r0, sl
 800c7d6:	4659      	mov	r1, fp
 800c7d8:	f7f3 fd68 	bl	80002ac <__adddf3>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	4640      	mov	r0, r8
 800c7e2:	4649      	mov	r1, r9
 800c7e4:	f7f4 f9a8 	bl	8000b38 <__aeabi_dcmpgt>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d173      	bne.n	800c8d4 <_dtoa_r+0x6c4>
 800c7ec:	4652      	mov	r2, sl
 800c7ee:	465b      	mov	r3, fp
 800c7f0:	4913      	ldr	r1, [pc, #76]	; (800c840 <_dtoa_r+0x630>)
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	f7f3 fd58 	bl	80002a8 <__aeabi_dsub>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	4640      	mov	r0, r8
 800c7fe:	4649      	mov	r1, r9
 800c800:	f7f4 f97c 	bl	8000afc <__aeabi_dcmplt>
 800c804:	2800      	cmp	r0, #0
 800c806:	f43f af35 	beq.w	800c674 <_dtoa_r+0x464>
 800c80a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c80c:	1e6b      	subs	r3, r5, #1
 800c80e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c810:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c814:	2b30      	cmp	r3, #48	; 0x30
 800c816:	d0f8      	beq.n	800c80a <_dtoa_r+0x5fa>
 800c818:	9700      	str	r7, [sp, #0]
 800c81a:	e049      	b.n	800c8b0 <_dtoa_r+0x6a0>
 800c81c:	4b05      	ldr	r3, [pc, #20]	; (800c834 <_dtoa_r+0x624>)
 800c81e:	f7f3 fefb 	bl	8000618 <__aeabi_dmul>
 800c822:	4680      	mov	r8, r0
 800c824:	4689      	mov	r9, r1
 800c826:	e7bd      	b.n	800c7a4 <_dtoa_r+0x594>
 800c828:	08010280 	.word	0x08010280
 800c82c:	08010258 	.word	0x08010258
 800c830:	3ff00000 	.word	0x3ff00000
 800c834:	40240000 	.word	0x40240000
 800c838:	401c0000 	.word	0x401c0000
 800c83c:	40140000 	.word	0x40140000
 800c840:	3fe00000 	.word	0x3fe00000
 800c844:	9d01      	ldr	r5, [sp, #4]
 800c846:	4656      	mov	r6, sl
 800c848:	465f      	mov	r7, fp
 800c84a:	4642      	mov	r2, r8
 800c84c:	464b      	mov	r3, r9
 800c84e:	4630      	mov	r0, r6
 800c850:	4639      	mov	r1, r7
 800c852:	f7f4 f80b 	bl	800086c <__aeabi_ddiv>
 800c856:	f7f4 f98f 	bl	8000b78 <__aeabi_d2iz>
 800c85a:	4682      	mov	sl, r0
 800c85c:	f7f3 fe72 	bl	8000544 <__aeabi_i2d>
 800c860:	4642      	mov	r2, r8
 800c862:	464b      	mov	r3, r9
 800c864:	f7f3 fed8 	bl	8000618 <__aeabi_dmul>
 800c868:	4602      	mov	r2, r0
 800c86a:	460b      	mov	r3, r1
 800c86c:	4630      	mov	r0, r6
 800c86e:	4639      	mov	r1, r7
 800c870:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c874:	f7f3 fd18 	bl	80002a8 <__aeabi_dsub>
 800c878:	f805 6b01 	strb.w	r6, [r5], #1
 800c87c:	9e01      	ldr	r6, [sp, #4]
 800c87e:	9f03      	ldr	r7, [sp, #12]
 800c880:	1bae      	subs	r6, r5, r6
 800c882:	42b7      	cmp	r7, r6
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	d135      	bne.n	800c8f6 <_dtoa_r+0x6e6>
 800c88a:	f7f3 fd0f 	bl	80002ac <__adddf3>
 800c88e:	4642      	mov	r2, r8
 800c890:	464b      	mov	r3, r9
 800c892:	4606      	mov	r6, r0
 800c894:	460f      	mov	r7, r1
 800c896:	f7f4 f94f 	bl	8000b38 <__aeabi_dcmpgt>
 800c89a:	b9d0      	cbnz	r0, 800c8d2 <_dtoa_r+0x6c2>
 800c89c:	4642      	mov	r2, r8
 800c89e:	464b      	mov	r3, r9
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	f7f4 f920 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8a8:	b110      	cbz	r0, 800c8b0 <_dtoa_r+0x6a0>
 800c8aa:	f01a 0f01 	tst.w	sl, #1
 800c8ae:	d110      	bne.n	800c8d2 <_dtoa_r+0x6c2>
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	ee18 1a10 	vmov	r1, s16
 800c8b6:	f000 faf3 	bl	800cea0 <_Bfree>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	9800      	ldr	r0, [sp, #0]
 800c8be:	702b      	strb	r3, [r5, #0]
 800c8c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8c2:	3001      	adds	r0, #1
 800c8c4:	6018      	str	r0, [r3, #0]
 800c8c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f43f acf1 	beq.w	800c2b0 <_dtoa_r+0xa0>
 800c8ce:	601d      	str	r5, [r3, #0]
 800c8d0:	e4ee      	b.n	800c2b0 <_dtoa_r+0xa0>
 800c8d2:	9f00      	ldr	r7, [sp, #0]
 800c8d4:	462b      	mov	r3, r5
 800c8d6:	461d      	mov	r5, r3
 800c8d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8dc:	2a39      	cmp	r2, #57	; 0x39
 800c8de:	d106      	bne.n	800c8ee <_dtoa_r+0x6de>
 800c8e0:	9a01      	ldr	r2, [sp, #4]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d1f7      	bne.n	800c8d6 <_dtoa_r+0x6c6>
 800c8e6:	9901      	ldr	r1, [sp, #4]
 800c8e8:	2230      	movs	r2, #48	; 0x30
 800c8ea:	3701      	adds	r7, #1
 800c8ec:	700a      	strb	r2, [r1, #0]
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	3201      	adds	r2, #1
 800c8f2:	701a      	strb	r2, [r3, #0]
 800c8f4:	e790      	b.n	800c818 <_dtoa_r+0x608>
 800c8f6:	4ba6      	ldr	r3, [pc, #664]	; (800cb90 <_dtoa_r+0x980>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f7f3 fe8d 	bl	8000618 <__aeabi_dmul>
 800c8fe:	2200      	movs	r2, #0
 800c900:	2300      	movs	r3, #0
 800c902:	4606      	mov	r6, r0
 800c904:	460f      	mov	r7, r1
 800c906:	f7f4 f8ef 	bl	8000ae8 <__aeabi_dcmpeq>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d09d      	beq.n	800c84a <_dtoa_r+0x63a>
 800c90e:	e7cf      	b.n	800c8b0 <_dtoa_r+0x6a0>
 800c910:	9a08      	ldr	r2, [sp, #32]
 800c912:	2a00      	cmp	r2, #0
 800c914:	f000 80d7 	beq.w	800cac6 <_dtoa_r+0x8b6>
 800c918:	9a06      	ldr	r2, [sp, #24]
 800c91a:	2a01      	cmp	r2, #1
 800c91c:	f300 80ba 	bgt.w	800ca94 <_dtoa_r+0x884>
 800c920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c922:	2a00      	cmp	r2, #0
 800c924:	f000 80b2 	beq.w	800ca8c <_dtoa_r+0x87c>
 800c928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c92c:	9e07      	ldr	r6, [sp, #28]
 800c92e:	9d04      	ldr	r5, [sp, #16]
 800c930:	9a04      	ldr	r2, [sp, #16]
 800c932:	441a      	add	r2, r3
 800c934:	9204      	str	r2, [sp, #16]
 800c936:	9a05      	ldr	r2, [sp, #20]
 800c938:	2101      	movs	r1, #1
 800c93a:	441a      	add	r2, r3
 800c93c:	4620      	mov	r0, r4
 800c93e:	9205      	str	r2, [sp, #20]
 800c940:	f000 fb66 	bl	800d010 <__i2b>
 800c944:	4607      	mov	r7, r0
 800c946:	2d00      	cmp	r5, #0
 800c948:	dd0c      	ble.n	800c964 <_dtoa_r+0x754>
 800c94a:	9b05      	ldr	r3, [sp, #20]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	dd09      	ble.n	800c964 <_dtoa_r+0x754>
 800c950:	42ab      	cmp	r3, r5
 800c952:	9a04      	ldr	r2, [sp, #16]
 800c954:	bfa8      	it	ge
 800c956:	462b      	movge	r3, r5
 800c958:	1ad2      	subs	r2, r2, r3
 800c95a:	9204      	str	r2, [sp, #16]
 800c95c:	9a05      	ldr	r2, [sp, #20]
 800c95e:	1aed      	subs	r5, r5, r3
 800c960:	1ad3      	subs	r3, r2, r3
 800c962:	9305      	str	r3, [sp, #20]
 800c964:	9b07      	ldr	r3, [sp, #28]
 800c966:	b31b      	cbz	r3, 800c9b0 <_dtoa_r+0x7a0>
 800c968:	9b08      	ldr	r3, [sp, #32]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 80af 	beq.w	800cace <_dtoa_r+0x8be>
 800c970:	2e00      	cmp	r6, #0
 800c972:	dd13      	ble.n	800c99c <_dtoa_r+0x78c>
 800c974:	4639      	mov	r1, r7
 800c976:	4632      	mov	r2, r6
 800c978:	4620      	mov	r0, r4
 800c97a:	f000 fc09 	bl	800d190 <__pow5mult>
 800c97e:	ee18 2a10 	vmov	r2, s16
 800c982:	4601      	mov	r1, r0
 800c984:	4607      	mov	r7, r0
 800c986:	4620      	mov	r0, r4
 800c988:	f000 fb58 	bl	800d03c <__multiply>
 800c98c:	ee18 1a10 	vmov	r1, s16
 800c990:	4680      	mov	r8, r0
 800c992:	4620      	mov	r0, r4
 800c994:	f000 fa84 	bl	800cea0 <_Bfree>
 800c998:	ee08 8a10 	vmov	s16, r8
 800c99c:	9b07      	ldr	r3, [sp, #28]
 800c99e:	1b9a      	subs	r2, r3, r6
 800c9a0:	d006      	beq.n	800c9b0 <_dtoa_r+0x7a0>
 800c9a2:	ee18 1a10 	vmov	r1, s16
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f000 fbf2 	bl	800d190 <__pow5mult>
 800c9ac:	ee08 0a10 	vmov	s16, r0
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f000 fb2c 	bl	800d010 <__i2b>
 800c9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	4606      	mov	r6, r0
 800c9be:	f340 8088 	ble.w	800cad2 <_dtoa_r+0x8c2>
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	4601      	mov	r1, r0
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 fbe2 	bl	800d190 <__pow5mult>
 800c9cc:	9b06      	ldr	r3, [sp, #24]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	4606      	mov	r6, r0
 800c9d2:	f340 8081 	ble.w	800cad8 <_dtoa_r+0x8c8>
 800c9d6:	f04f 0800 	mov.w	r8, #0
 800c9da:	6933      	ldr	r3, [r6, #16]
 800c9dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c9e0:	6918      	ldr	r0, [r3, #16]
 800c9e2:	f000 fac5 	bl	800cf70 <__hi0bits>
 800c9e6:	f1c0 0020 	rsb	r0, r0, #32
 800c9ea:	9b05      	ldr	r3, [sp, #20]
 800c9ec:	4418      	add	r0, r3
 800c9ee:	f010 001f 	ands.w	r0, r0, #31
 800c9f2:	f000 8092 	beq.w	800cb1a <_dtoa_r+0x90a>
 800c9f6:	f1c0 0320 	rsb	r3, r0, #32
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	f340 808a 	ble.w	800cb14 <_dtoa_r+0x904>
 800ca00:	f1c0 001c 	rsb	r0, r0, #28
 800ca04:	9b04      	ldr	r3, [sp, #16]
 800ca06:	4403      	add	r3, r0
 800ca08:	9304      	str	r3, [sp, #16]
 800ca0a:	9b05      	ldr	r3, [sp, #20]
 800ca0c:	4403      	add	r3, r0
 800ca0e:	4405      	add	r5, r0
 800ca10:	9305      	str	r3, [sp, #20]
 800ca12:	9b04      	ldr	r3, [sp, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	dd07      	ble.n	800ca28 <_dtoa_r+0x818>
 800ca18:	ee18 1a10 	vmov	r1, s16
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f000 fc10 	bl	800d244 <__lshift>
 800ca24:	ee08 0a10 	vmov	s16, r0
 800ca28:	9b05      	ldr	r3, [sp, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	dd05      	ble.n	800ca3a <_dtoa_r+0x82a>
 800ca2e:	4631      	mov	r1, r6
 800ca30:	461a      	mov	r2, r3
 800ca32:	4620      	mov	r0, r4
 800ca34:	f000 fc06 	bl	800d244 <__lshift>
 800ca38:	4606      	mov	r6, r0
 800ca3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d06e      	beq.n	800cb1e <_dtoa_r+0x90e>
 800ca40:	ee18 0a10 	vmov	r0, s16
 800ca44:	4631      	mov	r1, r6
 800ca46:	f000 fc6d 	bl	800d324 <__mcmp>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	da67      	bge.n	800cb1e <_dtoa_r+0x90e>
 800ca4e:	9b00      	ldr	r3, [sp, #0]
 800ca50:	3b01      	subs	r3, #1
 800ca52:	ee18 1a10 	vmov	r1, s16
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	220a      	movs	r2, #10
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f000 fa41 	bl	800cee4 <__multadd>
 800ca62:	9b08      	ldr	r3, [sp, #32]
 800ca64:	ee08 0a10 	vmov	s16, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f000 81b1 	beq.w	800cdd0 <_dtoa_r+0xbc0>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	4639      	mov	r1, r7
 800ca72:	220a      	movs	r2, #10
 800ca74:	4620      	mov	r0, r4
 800ca76:	f000 fa35 	bl	800cee4 <__multadd>
 800ca7a:	9b02      	ldr	r3, [sp, #8]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	4607      	mov	r7, r0
 800ca80:	f300 808e 	bgt.w	800cba0 <_dtoa_r+0x990>
 800ca84:	9b06      	ldr	r3, [sp, #24]
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	dc51      	bgt.n	800cb2e <_dtoa_r+0x91e>
 800ca8a:	e089      	b.n	800cba0 <_dtoa_r+0x990>
 800ca8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca92:	e74b      	b.n	800c92c <_dtoa_r+0x71c>
 800ca94:	9b03      	ldr	r3, [sp, #12]
 800ca96:	1e5e      	subs	r6, r3, #1
 800ca98:	9b07      	ldr	r3, [sp, #28]
 800ca9a:	42b3      	cmp	r3, r6
 800ca9c:	bfbf      	itttt	lt
 800ca9e:	9b07      	ldrlt	r3, [sp, #28]
 800caa0:	9607      	strlt	r6, [sp, #28]
 800caa2:	1af2      	sublt	r2, r6, r3
 800caa4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800caa6:	bfb6      	itet	lt
 800caa8:	189b      	addlt	r3, r3, r2
 800caaa:	1b9e      	subge	r6, r3, r6
 800caac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800caae:	9b03      	ldr	r3, [sp, #12]
 800cab0:	bfb8      	it	lt
 800cab2:	2600      	movlt	r6, #0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	bfb7      	itett	lt
 800cab8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cabc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cac0:	1a9d      	sublt	r5, r3, r2
 800cac2:	2300      	movlt	r3, #0
 800cac4:	e734      	b.n	800c930 <_dtoa_r+0x720>
 800cac6:	9e07      	ldr	r6, [sp, #28]
 800cac8:	9d04      	ldr	r5, [sp, #16]
 800caca:	9f08      	ldr	r7, [sp, #32]
 800cacc:	e73b      	b.n	800c946 <_dtoa_r+0x736>
 800cace:	9a07      	ldr	r2, [sp, #28]
 800cad0:	e767      	b.n	800c9a2 <_dtoa_r+0x792>
 800cad2:	9b06      	ldr	r3, [sp, #24]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	dc18      	bgt.n	800cb0a <_dtoa_r+0x8fa>
 800cad8:	f1ba 0f00 	cmp.w	sl, #0
 800cadc:	d115      	bne.n	800cb0a <_dtoa_r+0x8fa>
 800cade:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cae2:	b993      	cbnz	r3, 800cb0a <_dtoa_r+0x8fa>
 800cae4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cae8:	0d1b      	lsrs	r3, r3, #20
 800caea:	051b      	lsls	r3, r3, #20
 800caec:	b183      	cbz	r3, 800cb10 <_dtoa_r+0x900>
 800caee:	9b04      	ldr	r3, [sp, #16]
 800caf0:	3301      	adds	r3, #1
 800caf2:	9304      	str	r3, [sp, #16]
 800caf4:	9b05      	ldr	r3, [sp, #20]
 800caf6:	3301      	adds	r3, #1
 800caf8:	9305      	str	r3, [sp, #20]
 800cafa:	f04f 0801 	mov.w	r8, #1
 800cafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f47f af6a 	bne.w	800c9da <_dtoa_r+0x7ca>
 800cb06:	2001      	movs	r0, #1
 800cb08:	e76f      	b.n	800c9ea <_dtoa_r+0x7da>
 800cb0a:	f04f 0800 	mov.w	r8, #0
 800cb0e:	e7f6      	b.n	800cafe <_dtoa_r+0x8ee>
 800cb10:	4698      	mov	r8, r3
 800cb12:	e7f4      	b.n	800cafe <_dtoa_r+0x8ee>
 800cb14:	f43f af7d 	beq.w	800ca12 <_dtoa_r+0x802>
 800cb18:	4618      	mov	r0, r3
 800cb1a:	301c      	adds	r0, #28
 800cb1c:	e772      	b.n	800ca04 <_dtoa_r+0x7f4>
 800cb1e:	9b03      	ldr	r3, [sp, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	dc37      	bgt.n	800cb94 <_dtoa_r+0x984>
 800cb24:	9b06      	ldr	r3, [sp, #24]
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	dd34      	ble.n	800cb94 <_dtoa_r+0x984>
 800cb2a:	9b03      	ldr	r3, [sp, #12]
 800cb2c:	9302      	str	r3, [sp, #8]
 800cb2e:	9b02      	ldr	r3, [sp, #8]
 800cb30:	b96b      	cbnz	r3, 800cb4e <_dtoa_r+0x93e>
 800cb32:	4631      	mov	r1, r6
 800cb34:	2205      	movs	r2, #5
 800cb36:	4620      	mov	r0, r4
 800cb38:	f000 f9d4 	bl	800cee4 <__multadd>
 800cb3c:	4601      	mov	r1, r0
 800cb3e:	4606      	mov	r6, r0
 800cb40:	ee18 0a10 	vmov	r0, s16
 800cb44:	f000 fbee 	bl	800d324 <__mcmp>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	f73f adbb 	bgt.w	800c6c4 <_dtoa_r+0x4b4>
 800cb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb50:	9d01      	ldr	r5, [sp, #4]
 800cb52:	43db      	mvns	r3, r3
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	f04f 0800 	mov.w	r8, #0
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f000 f99f 	bl	800cea0 <_Bfree>
 800cb62:	2f00      	cmp	r7, #0
 800cb64:	f43f aea4 	beq.w	800c8b0 <_dtoa_r+0x6a0>
 800cb68:	f1b8 0f00 	cmp.w	r8, #0
 800cb6c:	d005      	beq.n	800cb7a <_dtoa_r+0x96a>
 800cb6e:	45b8      	cmp	r8, r7
 800cb70:	d003      	beq.n	800cb7a <_dtoa_r+0x96a>
 800cb72:	4641      	mov	r1, r8
 800cb74:	4620      	mov	r0, r4
 800cb76:	f000 f993 	bl	800cea0 <_Bfree>
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f000 f98f 	bl	800cea0 <_Bfree>
 800cb82:	e695      	b.n	800c8b0 <_dtoa_r+0x6a0>
 800cb84:	2600      	movs	r6, #0
 800cb86:	4637      	mov	r7, r6
 800cb88:	e7e1      	b.n	800cb4e <_dtoa_r+0x93e>
 800cb8a:	9700      	str	r7, [sp, #0]
 800cb8c:	4637      	mov	r7, r6
 800cb8e:	e599      	b.n	800c6c4 <_dtoa_r+0x4b4>
 800cb90:	40240000 	.word	0x40240000
 800cb94:	9b08      	ldr	r3, [sp, #32]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 80ca 	beq.w	800cd30 <_dtoa_r+0xb20>
 800cb9c:	9b03      	ldr	r3, [sp, #12]
 800cb9e:	9302      	str	r3, [sp, #8]
 800cba0:	2d00      	cmp	r5, #0
 800cba2:	dd05      	ble.n	800cbb0 <_dtoa_r+0x9a0>
 800cba4:	4639      	mov	r1, r7
 800cba6:	462a      	mov	r2, r5
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f000 fb4b 	bl	800d244 <__lshift>
 800cbae:	4607      	mov	r7, r0
 800cbb0:	f1b8 0f00 	cmp.w	r8, #0
 800cbb4:	d05b      	beq.n	800cc6e <_dtoa_r+0xa5e>
 800cbb6:	6879      	ldr	r1, [r7, #4]
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f000 f931 	bl	800ce20 <_Balloc>
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	b928      	cbnz	r0, 800cbce <_dtoa_r+0x9be>
 800cbc2:	4b87      	ldr	r3, [pc, #540]	; (800cde0 <_dtoa_r+0xbd0>)
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cbca:	f7ff bb3b 	b.w	800c244 <_dtoa_r+0x34>
 800cbce:	693a      	ldr	r2, [r7, #16]
 800cbd0:	3202      	adds	r2, #2
 800cbd2:	0092      	lsls	r2, r2, #2
 800cbd4:	f107 010c 	add.w	r1, r7, #12
 800cbd8:	300c      	adds	r0, #12
 800cbda:	f000 f913 	bl	800ce04 <memcpy>
 800cbde:	2201      	movs	r2, #1
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f000 fb2e 	bl	800d244 <__lshift>
 800cbe8:	9b01      	ldr	r3, [sp, #4]
 800cbea:	f103 0901 	add.w	r9, r3, #1
 800cbee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	9305      	str	r3, [sp, #20]
 800cbf6:	f00a 0301 	and.w	r3, sl, #1
 800cbfa:	46b8      	mov	r8, r7
 800cbfc:	9304      	str	r3, [sp, #16]
 800cbfe:	4607      	mov	r7, r0
 800cc00:	4631      	mov	r1, r6
 800cc02:	ee18 0a10 	vmov	r0, s16
 800cc06:	f7ff fa77 	bl	800c0f8 <quorem>
 800cc0a:	4641      	mov	r1, r8
 800cc0c:	9002      	str	r0, [sp, #8]
 800cc0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cc12:	ee18 0a10 	vmov	r0, s16
 800cc16:	f000 fb85 	bl	800d324 <__mcmp>
 800cc1a:	463a      	mov	r2, r7
 800cc1c:	9003      	str	r0, [sp, #12]
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4620      	mov	r0, r4
 800cc22:	f000 fb9b 	bl	800d35c <__mdiff>
 800cc26:	68c2      	ldr	r2, [r0, #12]
 800cc28:	f109 3bff 	add.w	fp, r9, #4294967295
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	bb02      	cbnz	r2, 800cc72 <_dtoa_r+0xa62>
 800cc30:	4601      	mov	r1, r0
 800cc32:	ee18 0a10 	vmov	r0, s16
 800cc36:	f000 fb75 	bl	800d324 <__mcmp>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	4620      	mov	r0, r4
 800cc40:	9207      	str	r2, [sp, #28]
 800cc42:	f000 f92d 	bl	800cea0 <_Bfree>
 800cc46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cc4a:	ea43 0102 	orr.w	r1, r3, r2
 800cc4e:	9b04      	ldr	r3, [sp, #16]
 800cc50:	430b      	orrs	r3, r1
 800cc52:	464d      	mov	r5, r9
 800cc54:	d10f      	bne.n	800cc76 <_dtoa_r+0xa66>
 800cc56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cc5a:	d02a      	beq.n	800ccb2 <_dtoa_r+0xaa2>
 800cc5c:	9b03      	ldr	r3, [sp, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	dd02      	ble.n	800cc68 <_dtoa_r+0xa58>
 800cc62:	9b02      	ldr	r3, [sp, #8]
 800cc64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cc68:	f88b a000 	strb.w	sl, [fp]
 800cc6c:	e775      	b.n	800cb5a <_dtoa_r+0x94a>
 800cc6e:	4638      	mov	r0, r7
 800cc70:	e7ba      	b.n	800cbe8 <_dtoa_r+0x9d8>
 800cc72:	2201      	movs	r2, #1
 800cc74:	e7e2      	b.n	800cc3c <_dtoa_r+0xa2c>
 800cc76:	9b03      	ldr	r3, [sp, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	db04      	blt.n	800cc86 <_dtoa_r+0xa76>
 800cc7c:	9906      	ldr	r1, [sp, #24]
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	9904      	ldr	r1, [sp, #16]
 800cc82:	430b      	orrs	r3, r1
 800cc84:	d122      	bne.n	800cccc <_dtoa_r+0xabc>
 800cc86:	2a00      	cmp	r2, #0
 800cc88:	ddee      	ble.n	800cc68 <_dtoa_r+0xa58>
 800cc8a:	ee18 1a10 	vmov	r1, s16
 800cc8e:	2201      	movs	r2, #1
 800cc90:	4620      	mov	r0, r4
 800cc92:	f000 fad7 	bl	800d244 <__lshift>
 800cc96:	4631      	mov	r1, r6
 800cc98:	ee08 0a10 	vmov	s16, r0
 800cc9c:	f000 fb42 	bl	800d324 <__mcmp>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	dc03      	bgt.n	800ccac <_dtoa_r+0xa9c>
 800cca4:	d1e0      	bne.n	800cc68 <_dtoa_r+0xa58>
 800cca6:	f01a 0f01 	tst.w	sl, #1
 800ccaa:	d0dd      	beq.n	800cc68 <_dtoa_r+0xa58>
 800ccac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ccb0:	d1d7      	bne.n	800cc62 <_dtoa_r+0xa52>
 800ccb2:	2339      	movs	r3, #57	; 0x39
 800ccb4:	f88b 3000 	strb.w	r3, [fp]
 800ccb8:	462b      	mov	r3, r5
 800ccba:	461d      	mov	r5, r3
 800ccbc:	3b01      	subs	r3, #1
 800ccbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ccc2:	2a39      	cmp	r2, #57	; 0x39
 800ccc4:	d071      	beq.n	800cdaa <_dtoa_r+0xb9a>
 800ccc6:	3201      	adds	r2, #1
 800ccc8:	701a      	strb	r2, [r3, #0]
 800ccca:	e746      	b.n	800cb5a <_dtoa_r+0x94a>
 800cccc:	2a00      	cmp	r2, #0
 800ccce:	dd07      	ble.n	800cce0 <_dtoa_r+0xad0>
 800ccd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ccd4:	d0ed      	beq.n	800ccb2 <_dtoa_r+0xaa2>
 800ccd6:	f10a 0301 	add.w	r3, sl, #1
 800ccda:	f88b 3000 	strb.w	r3, [fp]
 800ccde:	e73c      	b.n	800cb5a <_dtoa_r+0x94a>
 800cce0:	9b05      	ldr	r3, [sp, #20]
 800cce2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cce6:	4599      	cmp	r9, r3
 800cce8:	d047      	beq.n	800cd7a <_dtoa_r+0xb6a>
 800ccea:	ee18 1a10 	vmov	r1, s16
 800ccee:	2300      	movs	r3, #0
 800ccf0:	220a      	movs	r2, #10
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f000 f8f6 	bl	800cee4 <__multadd>
 800ccf8:	45b8      	cmp	r8, r7
 800ccfa:	ee08 0a10 	vmov	s16, r0
 800ccfe:	f04f 0300 	mov.w	r3, #0
 800cd02:	f04f 020a 	mov.w	r2, #10
 800cd06:	4641      	mov	r1, r8
 800cd08:	4620      	mov	r0, r4
 800cd0a:	d106      	bne.n	800cd1a <_dtoa_r+0xb0a>
 800cd0c:	f000 f8ea 	bl	800cee4 <__multadd>
 800cd10:	4680      	mov	r8, r0
 800cd12:	4607      	mov	r7, r0
 800cd14:	f109 0901 	add.w	r9, r9, #1
 800cd18:	e772      	b.n	800cc00 <_dtoa_r+0x9f0>
 800cd1a:	f000 f8e3 	bl	800cee4 <__multadd>
 800cd1e:	4639      	mov	r1, r7
 800cd20:	4680      	mov	r8, r0
 800cd22:	2300      	movs	r3, #0
 800cd24:	220a      	movs	r2, #10
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 f8dc 	bl	800cee4 <__multadd>
 800cd2c:	4607      	mov	r7, r0
 800cd2e:	e7f1      	b.n	800cd14 <_dtoa_r+0xb04>
 800cd30:	9b03      	ldr	r3, [sp, #12]
 800cd32:	9302      	str	r3, [sp, #8]
 800cd34:	9d01      	ldr	r5, [sp, #4]
 800cd36:	ee18 0a10 	vmov	r0, s16
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	f7ff f9dc 	bl	800c0f8 <quorem>
 800cd40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd44:	9b01      	ldr	r3, [sp, #4]
 800cd46:	f805 ab01 	strb.w	sl, [r5], #1
 800cd4a:	1aea      	subs	r2, r5, r3
 800cd4c:	9b02      	ldr	r3, [sp, #8]
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	dd09      	ble.n	800cd66 <_dtoa_r+0xb56>
 800cd52:	ee18 1a10 	vmov	r1, s16
 800cd56:	2300      	movs	r3, #0
 800cd58:	220a      	movs	r2, #10
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 f8c2 	bl	800cee4 <__multadd>
 800cd60:	ee08 0a10 	vmov	s16, r0
 800cd64:	e7e7      	b.n	800cd36 <_dtoa_r+0xb26>
 800cd66:	9b02      	ldr	r3, [sp, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	bfc8      	it	gt
 800cd6c:	461d      	movgt	r5, r3
 800cd6e:	9b01      	ldr	r3, [sp, #4]
 800cd70:	bfd8      	it	le
 800cd72:	2501      	movle	r5, #1
 800cd74:	441d      	add	r5, r3
 800cd76:	f04f 0800 	mov.w	r8, #0
 800cd7a:	ee18 1a10 	vmov	r1, s16
 800cd7e:	2201      	movs	r2, #1
 800cd80:	4620      	mov	r0, r4
 800cd82:	f000 fa5f 	bl	800d244 <__lshift>
 800cd86:	4631      	mov	r1, r6
 800cd88:	ee08 0a10 	vmov	s16, r0
 800cd8c:	f000 faca 	bl	800d324 <__mcmp>
 800cd90:	2800      	cmp	r0, #0
 800cd92:	dc91      	bgt.n	800ccb8 <_dtoa_r+0xaa8>
 800cd94:	d102      	bne.n	800cd9c <_dtoa_r+0xb8c>
 800cd96:	f01a 0f01 	tst.w	sl, #1
 800cd9a:	d18d      	bne.n	800ccb8 <_dtoa_r+0xaa8>
 800cd9c:	462b      	mov	r3, r5
 800cd9e:	461d      	mov	r5, r3
 800cda0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cda4:	2a30      	cmp	r2, #48	; 0x30
 800cda6:	d0fa      	beq.n	800cd9e <_dtoa_r+0xb8e>
 800cda8:	e6d7      	b.n	800cb5a <_dtoa_r+0x94a>
 800cdaa:	9a01      	ldr	r2, [sp, #4]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d184      	bne.n	800ccba <_dtoa_r+0xaaa>
 800cdb0:	9b00      	ldr	r3, [sp, #0]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	2331      	movs	r3, #49	; 0x31
 800cdb8:	7013      	strb	r3, [r2, #0]
 800cdba:	e6ce      	b.n	800cb5a <_dtoa_r+0x94a>
 800cdbc:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <_dtoa_r+0xbd4>)
 800cdbe:	f7ff ba95 	b.w	800c2ec <_dtoa_r+0xdc>
 800cdc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f47f aa6e 	bne.w	800c2a6 <_dtoa_r+0x96>
 800cdca:	4b07      	ldr	r3, [pc, #28]	; (800cde8 <_dtoa_r+0xbd8>)
 800cdcc:	f7ff ba8e 	b.w	800c2ec <_dtoa_r+0xdc>
 800cdd0:	9b02      	ldr	r3, [sp, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	dcae      	bgt.n	800cd34 <_dtoa_r+0xb24>
 800cdd6:	9b06      	ldr	r3, [sp, #24]
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	f73f aea8 	bgt.w	800cb2e <_dtoa_r+0x91e>
 800cdde:	e7a9      	b.n	800cd34 <_dtoa_r+0xb24>
 800cde0:	080101e7 	.word	0x080101e7
 800cde4:	08010144 	.word	0x08010144
 800cde8:	08010168 	.word	0x08010168

0800cdec <_localeconv_r>:
 800cdec:	4800      	ldr	r0, [pc, #0]	; (800cdf0 <_localeconv_r+0x4>)
 800cdee:	4770      	bx	lr
 800cdf0:	200002cc 	.word	0x200002cc

0800cdf4 <malloc>:
 800cdf4:	4b02      	ldr	r3, [pc, #8]	; (800ce00 <malloc+0xc>)
 800cdf6:	4601      	mov	r1, r0
 800cdf8:	6818      	ldr	r0, [r3, #0]
 800cdfa:	f000 bc17 	b.w	800d62c <_malloc_r>
 800cdfe:	bf00      	nop
 800ce00:	20000178 	.word	0x20000178

0800ce04 <memcpy>:
 800ce04:	440a      	add	r2, r1
 800ce06:	4291      	cmp	r1, r2
 800ce08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce0c:	d100      	bne.n	800ce10 <memcpy+0xc>
 800ce0e:	4770      	bx	lr
 800ce10:	b510      	push	{r4, lr}
 800ce12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce1a:	4291      	cmp	r1, r2
 800ce1c:	d1f9      	bne.n	800ce12 <memcpy+0xe>
 800ce1e:	bd10      	pop	{r4, pc}

0800ce20 <_Balloc>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce24:	4604      	mov	r4, r0
 800ce26:	460d      	mov	r5, r1
 800ce28:	b976      	cbnz	r6, 800ce48 <_Balloc+0x28>
 800ce2a:	2010      	movs	r0, #16
 800ce2c:	f7ff ffe2 	bl	800cdf4 <malloc>
 800ce30:	4602      	mov	r2, r0
 800ce32:	6260      	str	r0, [r4, #36]	; 0x24
 800ce34:	b920      	cbnz	r0, 800ce40 <_Balloc+0x20>
 800ce36:	4b18      	ldr	r3, [pc, #96]	; (800ce98 <_Balloc+0x78>)
 800ce38:	4818      	ldr	r0, [pc, #96]	; (800ce9c <_Balloc+0x7c>)
 800ce3a:	2166      	movs	r1, #102	; 0x66
 800ce3c:	f000 fdd6 	bl	800d9ec <__assert_func>
 800ce40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce44:	6006      	str	r6, [r0, #0]
 800ce46:	60c6      	str	r6, [r0, #12]
 800ce48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce4a:	68f3      	ldr	r3, [r6, #12]
 800ce4c:	b183      	cbz	r3, 800ce70 <_Balloc+0x50>
 800ce4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce56:	b9b8      	cbnz	r0, 800ce88 <_Balloc+0x68>
 800ce58:	2101      	movs	r1, #1
 800ce5a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce5e:	1d72      	adds	r2, r6, #5
 800ce60:	0092      	lsls	r2, r2, #2
 800ce62:	4620      	mov	r0, r4
 800ce64:	f000 fb60 	bl	800d528 <_calloc_r>
 800ce68:	b160      	cbz	r0, 800ce84 <_Balloc+0x64>
 800ce6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce6e:	e00e      	b.n	800ce8e <_Balloc+0x6e>
 800ce70:	2221      	movs	r2, #33	; 0x21
 800ce72:	2104      	movs	r1, #4
 800ce74:	4620      	mov	r0, r4
 800ce76:	f000 fb57 	bl	800d528 <_calloc_r>
 800ce7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce7c:	60f0      	str	r0, [r6, #12]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1e4      	bne.n	800ce4e <_Balloc+0x2e>
 800ce84:	2000      	movs	r0, #0
 800ce86:	bd70      	pop	{r4, r5, r6, pc}
 800ce88:	6802      	ldr	r2, [r0, #0]
 800ce8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce94:	e7f7      	b.n	800ce86 <_Balloc+0x66>
 800ce96:	bf00      	nop
 800ce98:	08010175 	.word	0x08010175
 800ce9c:	080101f8 	.word	0x080101f8

0800cea0 <_Bfree>:
 800cea0:	b570      	push	{r4, r5, r6, lr}
 800cea2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cea4:	4605      	mov	r5, r0
 800cea6:	460c      	mov	r4, r1
 800cea8:	b976      	cbnz	r6, 800cec8 <_Bfree+0x28>
 800ceaa:	2010      	movs	r0, #16
 800ceac:	f7ff ffa2 	bl	800cdf4 <malloc>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	6268      	str	r0, [r5, #36]	; 0x24
 800ceb4:	b920      	cbnz	r0, 800cec0 <_Bfree+0x20>
 800ceb6:	4b09      	ldr	r3, [pc, #36]	; (800cedc <_Bfree+0x3c>)
 800ceb8:	4809      	ldr	r0, [pc, #36]	; (800cee0 <_Bfree+0x40>)
 800ceba:	218a      	movs	r1, #138	; 0x8a
 800cebc:	f000 fd96 	bl	800d9ec <__assert_func>
 800cec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cec4:	6006      	str	r6, [r0, #0]
 800cec6:	60c6      	str	r6, [r0, #12]
 800cec8:	b13c      	cbz	r4, 800ceda <_Bfree+0x3a>
 800ceca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cecc:	6862      	ldr	r2, [r4, #4]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ced4:	6021      	str	r1, [r4, #0]
 800ced6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceda:	bd70      	pop	{r4, r5, r6, pc}
 800cedc:	08010175 	.word	0x08010175
 800cee0:	080101f8 	.word	0x080101f8

0800cee4 <__multadd>:
 800cee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee8:	690d      	ldr	r5, [r1, #16]
 800ceea:	4607      	mov	r7, r0
 800ceec:	460c      	mov	r4, r1
 800ceee:	461e      	mov	r6, r3
 800cef0:	f101 0c14 	add.w	ip, r1, #20
 800cef4:	2000      	movs	r0, #0
 800cef6:	f8dc 3000 	ldr.w	r3, [ip]
 800cefa:	b299      	uxth	r1, r3
 800cefc:	fb02 6101 	mla	r1, r2, r1, r6
 800cf00:	0c1e      	lsrs	r6, r3, #16
 800cf02:	0c0b      	lsrs	r3, r1, #16
 800cf04:	fb02 3306 	mla	r3, r2, r6, r3
 800cf08:	b289      	uxth	r1, r1
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf10:	4285      	cmp	r5, r0
 800cf12:	f84c 1b04 	str.w	r1, [ip], #4
 800cf16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf1a:	dcec      	bgt.n	800cef6 <__multadd+0x12>
 800cf1c:	b30e      	cbz	r6, 800cf62 <__multadd+0x7e>
 800cf1e:	68a3      	ldr	r3, [r4, #8]
 800cf20:	42ab      	cmp	r3, r5
 800cf22:	dc19      	bgt.n	800cf58 <__multadd+0x74>
 800cf24:	6861      	ldr	r1, [r4, #4]
 800cf26:	4638      	mov	r0, r7
 800cf28:	3101      	adds	r1, #1
 800cf2a:	f7ff ff79 	bl	800ce20 <_Balloc>
 800cf2e:	4680      	mov	r8, r0
 800cf30:	b928      	cbnz	r0, 800cf3e <__multadd+0x5a>
 800cf32:	4602      	mov	r2, r0
 800cf34:	4b0c      	ldr	r3, [pc, #48]	; (800cf68 <__multadd+0x84>)
 800cf36:	480d      	ldr	r0, [pc, #52]	; (800cf6c <__multadd+0x88>)
 800cf38:	21b5      	movs	r1, #181	; 0xb5
 800cf3a:	f000 fd57 	bl	800d9ec <__assert_func>
 800cf3e:	6922      	ldr	r2, [r4, #16]
 800cf40:	3202      	adds	r2, #2
 800cf42:	f104 010c 	add.w	r1, r4, #12
 800cf46:	0092      	lsls	r2, r2, #2
 800cf48:	300c      	adds	r0, #12
 800cf4a:	f7ff ff5b 	bl	800ce04 <memcpy>
 800cf4e:	4621      	mov	r1, r4
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7ff ffa5 	bl	800cea0 <_Bfree>
 800cf56:	4644      	mov	r4, r8
 800cf58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf5c:	3501      	adds	r5, #1
 800cf5e:	615e      	str	r6, [r3, #20]
 800cf60:	6125      	str	r5, [r4, #16]
 800cf62:	4620      	mov	r0, r4
 800cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf68:	080101e7 	.word	0x080101e7
 800cf6c:	080101f8 	.word	0x080101f8

0800cf70 <__hi0bits>:
 800cf70:	0c03      	lsrs	r3, r0, #16
 800cf72:	041b      	lsls	r3, r3, #16
 800cf74:	b9d3      	cbnz	r3, 800cfac <__hi0bits+0x3c>
 800cf76:	0400      	lsls	r0, r0, #16
 800cf78:	2310      	movs	r3, #16
 800cf7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf7e:	bf04      	itt	eq
 800cf80:	0200      	lsleq	r0, r0, #8
 800cf82:	3308      	addeq	r3, #8
 800cf84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf88:	bf04      	itt	eq
 800cf8a:	0100      	lsleq	r0, r0, #4
 800cf8c:	3304      	addeq	r3, #4
 800cf8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf92:	bf04      	itt	eq
 800cf94:	0080      	lsleq	r0, r0, #2
 800cf96:	3302      	addeq	r3, #2
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	db05      	blt.n	800cfa8 <__hi0bits+0x38>
 800cf9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cfa0:	f103 0301 	add.w	r3, r3, #1
 800cfa4:	bf08      	it	eq
 800cfa6:	2320      	moveq	r3, #32
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	4770      	bx	lr
 800cfac:	2300      	movs	r3, #0
 800cfae:	e7e4      	b.n	800cf7a <__hi0bits+0xa>

0800cfb0 <__lo0bits>:
 800cfb0:	6803      	ldr	r3, [r0, #0]
 800cfb2:	f013 0207 	ands.w	r2, r3, #7
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	d00b      	beq.n	800cfd2 <__lo0bits+0x22>
 800cfba:	07da      	lsls	r2, r3, #31
 800cfbc:	d423      	bmi.n	800d006 <__lo0bits+0x56>
 800cfbe:	0798      	lsls	r0, r3, #30
 800cfc0:	bf49      	itett	mi
 800cfc2:	085b      	lsrmi	r3, r3, #1
 800cfc4:	089b      	lsrpl	r3, r3, #2
 800cfc6:	2001      	movmi	r0, #1
 800cfc8:	600b      	strmi	r3, [r1, #0]
 800cfca:	bf5c      	itt	pl
 800cfcc:	600b      	strpl	r3, [r1, #0]
 800cfce:	2002      	movpl	r0, #2
 800cfd0:	4770      	bx	lr
 800cfd2:	b298      	uxth	r0, r3
 800cfd4:	b9a8      	cbnz	r0, 800d002 <__lo0bits+0x52>
 800cfd6:	0c1b      	lsrs	r3, r3, #16
 800cfd8:	2010      	movs	r0, #16
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	b90a      	cbnz	r2, 800cfe2 <__lo0bits+0x32>
 800cfde:	3008      	adds	r0, #8
 800cfe0:	0a1b      	lsrs	r3, r3, #8
 800cfe2:	071a      	lsls	r2, r3, #28
 800cfe4:	bf04      	itt	eq
 800cfe6:	091b      	lsreq	r3, r3, #4
 800cfe8:	3004      	addeq	r0, #4
 800cfea:	079a      	lsls	r2, r3, #30
 800cfec:	bf04      	itt	eq
 800cfee:	089b      	lsreq	r3, r3, #2
 800cff0:	3002      	addeq	r0, #2
 800cff2:	07da      	lsls	r2, r3, #31
 800cff4:	d403      	bmi.n	800cffe <__lo0bits+0x4e>
 800cff6:	085b      	lsrs	r3, r3, #1
 800cff8:	f100 0001 	add.w	r0, r0, #1
 800cffc:	d005      	beq.n	800d00a <__lo0bits+0x5a>
 800cffe:	600b      	str	r3, [r1, #0]
 800d000:	4770      	bx	lr
 800d002:	4610      	mov	r0, r2
 800d004:	e7e9      	b.n	800cfda <__lo0bits+0x2a>
 800d006:	2000      	movs	r0, #0
 800d008:	4770      	bx	lr
 800d00a:	2020      	movs	r0, #32
 800d00c:	4770      	bx	lr
	...

0800d010 <__i2b>:
 800d010:	b510      	push	{r4, lr}
 800d012:	460c      	mov	r4, r1
 800d014:	2101      	movs	r1, #1
 800d016:	f7ff ff03 	bl	800ce20 <_Balloc>
 800d01a:	4602      	mov	r2, r0
 800d01c:	b928      	cbnz	r0, 800d02a <__i2b+0x1a>
 800d01e:	4b05      	ldr	r3, [pc, #20]	; (800d034 <__i2b+0x24>)
 800d020:	4805      	ldr	r0, [pc, #20]	; (800d038 <__i2b+0x28>)
 800d022:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d026:	f000 fce1 	bl	800d9ec <__assert_func>
 800d02a:	2301      	movs	r3, #1
 800d02c:	6144      	str	r4, [r0, #20]
 800d02e:	6103      	str	r3, [r0, #16]
 800d030:	bd10      	pop	{r4, pc}
 800d032:	bf00      	nop
 800d034:	080101e7 	.word	0x080101e7
 800d038:	080101f8 	.word	0x080101f8

0800d03c <__multiply>:
 800d03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d040:	4691      	mov	r9, r2
 800d042:	690a      	ldr	r2, [r1, #16]
 800d044:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d048:	429a      	cmp	r2, r3
 800d04a:	bfb8      	it	lt
 800d04c:	460b      	movlt	r3, r1
 800d04e:	460c      	mov	r4, r1
 800d050:	bfbc      	itt	lt
 800d052:	464c      	movlt	r4, r9
 800d054:	4699      	movlt	r9, r3
 800d056:	6927      	ldr	r7, [r4, #16]
 800d058:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d05c:	68a3      	ldr	r3, [r4, #8]
 800d05e:	6861      	ldr	r1, [r4, #4]
 800d060:	eb07 060a 	add.w	r6, r7, sl
 800d064:	42b3      	cmp	r3, r6
 800d066:	b085      	sub	sp, #20
 800d068:	bfb8      	it	lt
 800d06a:	3101      	addlt	r1, #1
 800d06c:	f7ff fed8 	bl	800ce20 <_Balloc>
 800d070:	b930      	cbnz	r0, 800d080 <__multiply+0x44>
 800d072:	4602      	mov	r2, r0
 800d074:	4b44      	ldr	r3, [pc, #272]	; (800d188 <__multiply+0x14c>)
 800d076:	4845      	ldr	r0, [pc, #276]	; (800d18c <__multiply+0x150>)
 800d078:	f240 115d 	movw	r1, #349	; 0x15d
 800d07c:	f000 fcb6 	bl	800d9ec <__assert_func>
 800d080:	f100 0514 	add.w	r5, r0, #20
 800d084:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d088:	462b      	mov	r3, r5
 800d08a:	2200      	movs	r2, #0
 800d08c:	4543      	cmp	r3, r8
 800d08e:	d321      	bcc.n	800d0d4 <__multiply+0x98>
 800d090:	f104 0314 	add.w	r3, r4, #20
 800d094:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d098:	f109 0314 	add.w	r3, r9, #20
 800d09c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d0a0:	9202      	str	r2, [sp, #8]
 800d0a2:	1b3a      	subs	r2, r7, r4
 800d0a4:	3a15      	subs	r2, #21
 800d0a6:	f022 0203 	bic.w	r2, r2, #3
 800d0aa:	3204      	adds	r2, #4
 800d0ac:	f104 0115 	add.w	r1, r4, #21
 800d0b0:	428f      	cmp	r7, r1
 800d0b2:	bf38      	it	cc
 800d0b4:	2204      	movcc	r2, #4
 800d0b6:	9201      	str	r2, [sp, #4]
 800d0b8:	9a02      	ldr	r2, [sp, #8]
 800d0ba:	9303      	str	r3, [sp, #12]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d80c      	bhi.n	800d0da <__multiply+0x9e>
 800d0c0:	2e00      	cmp	r6, #0
 800d0c2:	dd03      	ble.n	800d0cc <__multiply+0x90>
 800d0c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d05a      	beq.n	800d182 <__multiply+0x146>
 800d0cc:	6106      	str	r6, [r0, #16]
 800d0ce:	b005      	add	sp, #20
 800d0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d4:	f843 2b04 	str.w	r2, [r3], #4
 800d0d8:	e7d8      	b.n	800d08c <__multiply+0x50>
 800d0da:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0de:	f1ba 0f00 	cmp.w	sl, #0
 800d0e2:	d024      	beq.n	800d12e <__multiply+0xf2>
 800d0e4:	f104 0e14 	add.w	lr, r4, #20
 800d0e8:	46a9      	mov	r9, r5
 800d0ea:	f04f 0c00 	mov.w	ip, #0
 800d0ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d0f2:	f8d9 1000 	ldr.w	r1, [r9]
 800d0f6:	fa1f fb82 	uxth.w	fp, r2
 800d0fa:	b289      	uxth	r1, r1
 800d0fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d100:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d104:	f8d9 2000 	ldr.w	r2, [r9]
 800d108:	4461      	add	r1, ip
 800d10a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d10e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d112:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d116:	b289      	uxth	r1, r1
 800d118:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d11c:	4577      	cmp	r7, lr
 800d11e:	f849 1b04 	str.w	r1, [r9], #4
 800d122:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d126:	d8e2      	bhi.n	800d0ee <__multiply+0xb2>
 800d128:	9a01      	ldr	r2, [sp, #4]
 800d12a:	f845 c002 	str.w	ip, [r5, r2]
 800d12e:	9a03      	ldr	r2, [sp, #12]
 800d130:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d134:	3304      	adds	r3, #4
 800d136:	f1b9 0f00 	cmp.w	r9, #0
 800d13a:	d020      	beq.n	800d17e <__multiply+0x142>
 800d13c:	6829      	ldr	r1, [r5, #0]
 800d13e:	f104 0c14 	add.w	ip, r4, #20
 800d142:	46ae      	mov	lr, r5
 800d144:	f04f 0a00 	mov.w	sl, #0
 800d148:	f8bc b000 	ldrh.w	fp, [ip]
 800d14c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d150:	fb09 220b 	mla	r2, r9, fp, r2
 800d154:	4492      	add	sl, r2
 800d156:	b289      	uxth	r1, r1
 800d158:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d15c:	f84e 1b04 	str.w	r1, [lr], #4
 800d160:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d164:	f8be 1000 	ldrh.w	r1, [lr]
 800d168:	0c12      	lsrs	r2, r2, #16
 800d16a:	fb09 1102 	mla	r1, r9, r2, r1
 800d16e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d172:	4567      	cmp	r7, ip
 800d174:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d178:	d8e6      	bhi.n	800d148 <__multiply+0x10c>
 800d17a:	9a01      	ldr	r2, [sp, #4]
 800d17c:	50a9      	str	r1, [r5, r2]
 800d17e:	3504      	adds	r5, #4
 800d180:	e79a      	b.n	800d0b8 <__multiply+0x7c>
 800d182:	3e01      	subs	r6, #1
 800d184:	e79c      	b.n	800d0c0 <__multiply+0x84>
 800d186:	bf00      	nop
 800d188:	080101e7 	.word	0x080101e7
 800d18c:	080101f8 	.word	0x080101f8

0800d190 <__pow5mult>:
 800d190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d194:	4615      	mov	r5, r2
 800d196:	f012 0203 	ands.w	r2, r2, #3
 800d19a:	4606      	mov	r6, r0
 800d19c:	460f      	mov	r7, r1
 800d19e:	d007      	beq.n	800d1b0 <__pow5mult+0x20>
 800d1a0:	4c25      	ldr	r4, [pc, #148]	; (800d238 <__pow5mult+0xa8>)
 800d1a2:	3a01      	subs	r2, #1
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1aa:	f7ff fe9b 	bl	800cee4 <__multadd>
 800d1ae:	4607      	mov	r7, r0
 800d1b0:	10ad      	asrs	r5, r5, #2
 800d1b2:	d03d      	beq.n	800d230 <__pow5mult+0xa0>
 800d1b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1b6:	b97c      	cbnz	r4, 800d1d8 <__pow5mult+0x48>
 800d1b8:	2010      	movs	r0, #16
 800d1ba:	f7ff fe1b 	bl	800cdf4 <malloc>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	6270      	str	r0, [r6, #36]	; 0x24
 800d1c2:	b928      	cbnz	r0, 800d1d0 <__pow5mult+0x40>
 800d1c4:	4b1d      	ldr	r3, [pc, #116]	; (800d23c <__pow5mult+0xac>)
 800d1c6:	481e      	ldr	r0, [pc, #120]	; (800d240 <__pow5mult+0xb0>)
 800d1c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d1cc:	f000 fc0e 	bl	800d9ec <__assert_func>
 800d1d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1d4:	6004      	str	r4, [r0, #0]
 800d1d6:	60c4      	str	r4, [r0, #12]
 800d1d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1e0:	b94c      	cbnz	r4, 800d1f6 <__pow5mult+0x66>
 800d1e2:	f240 2171 	movw	r1, #625	; 0x271
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f7ff ff12 	bl	800d010 <__i2b>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	6003      	str	r3, [r0, #0]
 800d1f6:	f04f 0900 	mov.w	r9, #0
 800d1fa:	07eb      	lsls	r3, r5, #31
 800d1fc:	d50a      	bpl.n	800d214 <__pow5mult+0x84>
 800d1fe:	4639      	mov	r1, r7
 800d200:	4622      	mov	r2, r4
 800d202:	4630      	mov	r0, r6
 800d204:	f7ff ff1a 	bl	800d03c <__multiply>
 800d208:	4639      	mov	r1, r7
 800d20a:	4680      	mov	r8, r0
 800d20c:	4630      	mov	r0, r6
 800d20e:	f7ff fe47 	bl	800cea0 <_Bfree>
 800d212:	4647      	mov	r7, r8
 800d214:	106d      	asrs	r5, r5, #1
 800d216:	d00b      	beq.n	800d230 <__pow5mult+0xa0>
 800d218:	6820      	ldr	r0, [r4, #0]
 800d21a:	b938      	cbnz	r0, 800d22c <__pow5mult+0x9c>
 800d21c:	4622      	mov	r2, r4
 800d21e:	4621      	mov	r1, r4
 800d220:	4630      	mov	r0, r6
 800d222:	f7ff ff0b 	bl	800d03c <__multiply>
 800d226:	6020      	str	r0, [r4, #0]
 800d228:	f8c0 9000 	str.w	r9, [r0]
 800d22c:	4604      	mov	r4, r0
 800d22e:	e7e4      	b.n	800d1fa <__pow5mult+0x6a>
 800d230:	4638      	mov	r0, r7
 800d232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d236:	bf00      	nop
 800d238:	08010348 	.word	0x08010348
 800d23c:	08010175 	.word	0x08010175
 800d240:	080101f8 	.word	0x080101f8

0800d244 <__lshift>:
 800d244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d248:	460c      	mov	r4, r1
 800d24a:	6849      	ldr	r1, [r1, #4]
 800d24c:	6923      	ldr	r3, [r4, #16]
 800d24e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d252:	68a3      	ldr	r3, [r4, #8]
 800d254:	4607      	mov	r7, r0
 800d256:	4691      	mov	r9, r2
 800d258:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d25c:	f108 0601 	add.w	r6, r8, #1
 800d260:	42b3      	cmp	r3, r6
 800d262:	db0b      	blt.n	800d27c <__lshift+0x38>
 800d264:	4638      	mov	r0, r7
 800d266:	f7ff fddb 	bl	800ce20 <_Balloc>
 800d26a:	4605      	mov	r5, r0
 800d26c:	b948      	cbnz	r0, 800d282 <__lshift+0x3e>
 800d26e:	4602      	mov	r2, r0
 800d270:	4b2a      	ldr	r3, [pc, #168]	; (800d31c <__lshift+0xd8>)
 800d272:	482b      	ldr	r0, [pc, #172]	; (800d320 <__lshift+0xdc>)
 800d274:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d278:	f000 fbb8 	bl	800d9ec <__assert_func>
 800d27c:	3101      	adds	r1, #1
 800d27e:	005b      	lsls	r3, r3, #1
 800d280:	e7ee      	b.n	800d260 <__lshift+0x1c>
 800d282:	2300      	movs	r3, #0
 800d284:	f100 0114 	add.w	r1, r0, #20
 800d288:	f100 0210 	add.w	r2, r0, #16
 800d28c:	4618      	mov	r0, r3
 800d28e:	4553      	cmp	r3, sl
 800d290:	db37      	blt.n	800d302 <__lshift+0xbe>
 800d292:	6920      	ldr	r0, [r4, #16]
 800d294:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d298:	f104 0314 	add.w	r3, r4, #20
 800d29c:	f019 091f 	ands.w	r9, r9, #31
 800d2a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d2a8:	d02f      	beq.n	800d30a <__lshift+0xc6>
 800d2aa:	f1c9 0e20 	rsb	lr, r9, #32
 800d2ae:	468a      	mov	sl, r1
 800d2b0:	f04f 0c00 	mov.w	ip, #0
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	fa02 f209 	lsl.w	r2, r2, r9
 800d2ba:	ea42 020c 	orr.w	r2, r2, ip
 800d2be:	f84a 2b04 	str.w	r2, [sl], #4
 800d2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2c6:	4298      	cmp	r0, r3
 800d2c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d2cc:	d8f2      	bhi.n	800d2b4 <__lshift+0x70>
 800d2ce:	1b03      	subs	r3, r0, r4
 800d2d0:	3b15      	subs	r3, #21
 800d2d2:	f023 0303 	bic.w	r3, r3, #3
 800d2d6:	3304      	adds	r3, #4
 800d2d8:	f104 0215 	add.w	r2, r4, #21
 800d2dc:	4290      	cmp	r0, r2
 800d2de:	bf38      	it	cc
 800d2e0:	2304      	movcc	r3, #4
 800d2e2:	f841 c003 	str.w	ip, [r1, r3]
 800d2e6:	f1bc 0f00 	cmp.w	ip, #0
 800d2ea:	d001      	beq.n	800d2f0 <__lshift+0xac>
 800d2ec:	f108 0602 	add.w	r6, r8, #2
 800d2f0:	3e01      	subs	r6, #1
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	612e      	str	r6, [r5, #16]
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	f7ff fdd2 	bl	800cea0 <_Bfree>
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d302:	f842 0f04 	str.w	r0, [r2, #4]!
 800d306:	3301      	adds	r3, #1
 800d308:	e7c1      	b.n	800d28e <__lshift+0x4a>
 800d30a:	3904      	subs	r1, #4
 800d30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d310:	f841 2f04 	str.w	r2, [r1, #4]!
 800d314:	4298      	cmp	r0, r3
 800d316:	d8f9      	bhi.n	800d30c <__lshift+0xc8>
 800d318:	e7ea      	b.n	800d2f0 <__lshift+0xac>
 800d31a:	bf00      	nop
 800d31c:	080101e7 	.word	0x080101e7
 800d320:	080101f8 	.word	0x080101f8

0800d324 <__mcmp>:
 800d324:	b530      	push	{r4, r5, lr}
 800d326:	6902      	ldr	r2, [r0, #16]
 800d328:	690c      	ldr	r4, [r1, #16]
 800d32a:	1b12      	subs	r2, r2, r4
 800d32c:	d10e      	bne.n	800d34c <__mcmp+0x28>
 800d32e:	f100 0314 	add.w	r3, r0, #20
 800d332:	3114      	adds	r1, #20
 800d334:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d338:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d33c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d340:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d344:	42a5      	cmp	r5, r4
 800d346:	d003      	beq.n	800d350 <__mcmp+0x2c>
 800d348:	d305      	bcc.n	800d356 <__mcmp+0x32>
 800d34a:	2201      	movs	r2, #1
 800d34c:	4610      	mov	r0, r2
 800d34e:	bd30      	pop	{r4, r5, pc}
 800d350:	4283      	cmp	r3, r0
 800d352:	d3f3      	bcc.n	800d33c <__mcmp+0x18>
 800d354:	e7fa      	b.n	800d34c <__mcmp+0x28>
 800d356:	f04f 32ff 	mov.w	r2, #4294967295
 800d35a:	e7f7      	b.n	800d34c <__mcmp+0x28>

0800d35c <__mdiff>:
 800d35c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d360:	460c      	mov	r4, r1
 800d362:	4606      	mov	r6, r0
 800d364:	4611      	mov	r1, r2
 800d366:	4620      	mov	r0, r4
 800d368:	4690      	mov	r8, r2
 800d36a:	f7ff ffdb 	bl	800d324 <__mcmp>
 800d36e:	1e05      	subs	r5, r0, #0
 800d370:	d110      	bne.n	800d394 <__mdiff+0x38>
 800d372:	4629      	mov	r1, r5
 800d374:	4630      	mov	r0, r6
 800d376:	f7ff fd53 	bl	800ce20 <_Balloc>
 800d37a:	b930      	cbnz	r0, 800d38a <__mdiff+0x2e>
 800d37c:	4b3a      	ldr	r3, [pc, #232]	; (800d468 <__mdiff+0x10c>)
 800d37e:	4602      	mov	r2, r0
 800d380:	f240 2132 	movw	r1, #562	; 0x232
 800d384:	4839      	ldr	r0, [pc, #228]	; (800d46c <__mdiff+0x110>)
 800d386:	f000 fb31 	bl	800d9ec <__assert_func>
 800d38a:	2301      	movs	r3, #1
 800d38c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d394:	bfa4      	itt	ge
 800d396:	4643      	movge	r3, r8
 800d398:	46a0      	movge	r8, r4
 800d39a:	4630      	mov	r0, r6
 800d39c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3a0:	bfa6      	itte	ge
 800d3a2:	461c      	movge	r4, r3
 800d3a4:	2500      	movge	r5, #0
 800d3a6:	2501      	movlt	r5, #1
 800d3a8:	f7ff fd3a 	bl	800ce20 <_Balloc>
 800d3ac:	b920      	cbnz	r0, 800d3b8 <__mdiff+0x5c>
 800d3ae:	4b2e      	ldr	r3, [pc, #184]	; (800d468 <__mdiff+0x10c>)
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d3b6:	e7e5      	b.n	800d384 <__mdiff+0x28>
 800d3b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d3bc:	6926      	ldr	r6, [r4, #16]
 800d3be:	60c5      	str	r5, [r0, #12]
 800d3c0:	f104 0914 	add.w	r9, r4, #20
 800d3c4:	f108 0514 	add.w	r5, r8, #20
 800d3c8:	f100 0e14 	add.w	lr, r0, #20
 800d3cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d3d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d3d4:	f108 0210 	add.w	r2, r8, #16
 800d3d8:	46f2      	mov	sl, lr
 800d3da:	2100      	movs	r1, #0
 800d3dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3e4:	fa1f f883 	uxth.w	r8, r3
 800d3e8:	fa11 f18b 	uxtah	r1, r1, fp
 800d3ec:	0c1b      	lsrs	r3, r3, #16
 800d3ee:	eba1 0808 	sub.w	r8, r1, r8
 800d3f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3fa:	fa1f f888 	uxth.w	r8, r8
 800d3fe:	1419      	asrs	r1, r3, #16
 800d400:	454e      	cmp	r6, r9
 800d402:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d406:	f84a 3b04 	str.w	r3, [sl], #4
 800d40a:	d8e7      	bhi.n	800d3dc <__mdiff+0x80>
 800d40c:	1b33      	subs	r3, r6, r4
 800d40e:	3b15      	subs	r3, #21
 800d410:	f023 0303 	bic.w	r3, r3, #3
 800d414:	3304      	adds	r3, #4
 800d416:	3415      	adds	r4, #21
 800d418:	42a6      	cmp	r6, r4
 800d41a:	bf38      	it	cc
 800d41c:	2304      	movcc	r3, #4
 800d41e:	441d      	add	r5, r3
 800d420:	4473      	add	r3, lr
 800d422:	469e      	mov	lr, r3
 800d424:	462e      	mov	r6, r5
 800d426:	4566      	cmp	r6, ip
 800d428:	d30e      	bcc.n	800d448 <__mdiff+0xec>
 800d42a:	f10c 0203 	add.w	r2, ip, #3
 800d42e:	1b52      	subs	r2, r2, r5
 800d430:	f022 0203 	bic.w	r2, r2, #3
 800d434:	3d03      	subs	r5, #3
 800d436:	45ac      	cmp	ip, r5
 800d438:	bf38      	it	cc
 800d43a:	2200      	movcc	r2, #0
 800d43c:	441a      	add	r2, r3
 800d43e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d442:	b17b      	cbz	r3, 800d464 <__mdiff+0x108>
 800d444:	6107      	str	r7, [r0, #16]
 800d446:	e7a3      	b.n	800d390 <__mdiff+0x34>
 800d448:	f856 8b04 	ldr.w	r8, [r6], #4
 800d44c:	fa11 f288 	uxtah	r2, r1, r8
 800d450:	1414      	asrs	r4, r2, #16
 800d452:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d456:	b292      	uxth	r2, r2
 800d458:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d45c:	f84e 2b04 	str.w	r2, [lr], #4
 800d460:	1421      	asrs	r1, r4, #16
 800d462:	e7e0      	b.n	800d426 <__mdiff+0xca>
 800d464:	3f01      	subs	r7, #1
 800d466:	e7ea      	b.n	800d43e <__mdiff+0xe2>
 800d468:	080101e7 	.word	0x080101e7
 800d46c:	080101f8 	.word	0x080101f8

0800d470 <__d2b>:
 800d470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d474:	4689      	mov	r9, r1
 800d476:	2101      	movs	r1, #1
 800d478:	ec57 6b10 	vmov	r6, r7, d0
 800d47c:	4690      	mov	r8, r2
 800d47e:	f7ff fccf 	bl	800ce20 <_Balloc>
 800d482:	4604      	mov	r4, r0
 800d484:	b930      	cbnz	r0, 800d494 <__d2b+0x24>
 800d486:	4602      	mov	r2, r0
 800d488:	4b25      	ldr	r3, [pc, #148]	; (800d520 <__d2b+0xb0>)
 800d48a:	4826      	ldr	r0, [pc, #152]	; (800d524 <__d2b+0xb4>)
 800d48c:	f240 310a 	movw	r1, #778	; 0x30a
 800d490:	f000 faac 	bl	800d9ec <__assert_func>
 800d494:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d498:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d49c:	bb35      	cbnz	r5, 800d4ec <__d2b+0x7c>
 800d49e:	2e00      	cmp	r6, #0
 800d4a0:	9301      	str	r3, [sp, #4]
 800d4a2:	d028      	beq.n	800d4f6 <__d2b+0x86>
 800d4a4:	4668      	mov	r0, sp
 800d4a6:	9600      	str	r6, [sp, #0]
 800d4a8:	f7ff fd82 	bl	800cfb0 <__lo0bits>
 800d4ac:	9900      	ldr	r1, [sp, #0]
 800d4ae:	b300      	cbz	r0, 800d4f2 <__d2b+0x82>
 800d4b0:	9a01      	ldr	r2, [sp, #4]
 800d4b2:	f1c0 0320 	rsb	r3, r0, #32
 800d4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ba:	430b      	orrs	r3, r1
 800d4bc:	40c2      	lsrs	r2, r0
 800d4be:	6163      	str	r3, [r4, #20]
 800d4c0:	9201      	str	r2, [sp, #4]
 800d4c2:	9b01      	ldr	r3, [sp, #4]
 800d4c4:	61a3      	str	r3, [r4, #24]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bf14      	ite	ne
 800d4ca:	2202      	movne	r2, #2
 800d4cc:	2201      	moveq	r2, #1
 800d4ce:	6122      	str	r2, [r4, #16]
 800d4d0:	b1d5      	cbz	r5, 800d508 <__d2b+0x98>
 800d4d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4d6:	4405      	add	r5, r0
 800d4d8:	f8c9 5000 	str.w	r5, [r9]
 800d4dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4e0:	f8c8 0000 	str.w	r0, [r8]
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	b003      	add	sp, #12
 800d4e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4f0:	e7d5      	b.n	800d49e <__d2b+0x2e>
 800d4f2:	6161      	str	r1, [r4, #20]
 800d4f4:	e7e5      	b.n	800d4c2 <__d2b+0x52>
 800d4f6:	a801      	add	r0, sp, #4
 800d4f8:	f7ff fd5a 	bl	800cfb0 <__lo0bits>
 800d4fc:	9b01      	ldr	r3, [sp, #4]
 800d4fe:	6163      	str	r3, [r4, #20]
 800d500:	2201      	movs	r2, #1
 800d502:	6122      	str	r2, [r4, #16]
 800d504:	3020      	adds	r0, #32
 800d506:	e7e3      	b.n	800d4d0 <__d2b+0x60>
 800d508:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d50c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d510:	f8c9 0000 	str.w	r0, [r9]
 800d514:	6918      	ldr	r0, [r3, #16]
 800d516:	f7ff fd2b 	bl	800cf70 <__hi0bits>
 800d51a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d51e:	e7df      	b.n	800d4e0 <__d2b+0x70>
 800d520:	080101e7 	.word	0x080101e7
 800d524:	080101f8 	.word	0x080101f8

0800d528 <_calloc_r>:
 800d528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d52a:	fba1 2402 	umull	r2, r4, r1, r2
 800d52e:	b94c      	cbnz	r4, 800d544 <_calloc_r+0x1c>
 800d530:	4611      	mov	r1, r2
 800d532:	9201      	str	r2, [sp, #4]
 800d534:	f000 f87a 	bl	800d62c <_malloc_r>
 800d538:	9a01      	ldr	r2, [sp, #4]
 800d53a:	4605      	mov	r5, r0
 800d53c:	b930      	cbnz	r0, 800d54c <_calloc_r+0x24>
 800d53e:	4628      	mov	r0, r5
 800d540:	b003      	add	sp, #12
 800d542:	bd30      	pop	{r4, r5, pc}
 800d544:	220c      	movs	r2, #12
 800d546:	6002      	str	r2, [r0, #0]
 800d548:	2500      	movs	r5, #0
 800d54a:	e7f8      	b.n	800d53e <_calloc_r+0x16>
 800d54c:	4621      	mov	r1, r4
 800d54e:	f7fe f941 	bl	800b7d4 <memset>
 800d552:	e7f4      	b.n	800d53e <_calloc_r+0x16>

0800d554 <_free_r>:
 800d554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d556:	2900      	cmp	r1, #0
 800d558:	d044      	beq.n	800d5e4 <_free_r+0x90>
 800d55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d55e:	9001      	str	r0, [sp, #4]
 800d560:	2b00      	cmp	r3, #0
 800d562:	f1a1 0404 	sub.w	r4, r1, #4
 800d566:	bfb8      	it	lt
 800d568:	18e4      	addlt	r4, r4, r3
 800d56a:	f000 fa9b 	bl	800daa4 <__malloc_lock>
 800d56e:	4a1e      	ldr	r2, [pc, #120]	; (800d5e8 <_free_r+0x94>)
 800d570:	9801      	ldr	r0, [sp, #4]
 800d572:	6813      	ldr	r3, [r2, #0]
 800d574:	b933      	cbnz	r3, 800d584 <_free_r+0x30>
 800d576:	6063      	str	r3, [r4, #4]
 800d578:	6014      	str	r4, [r2, #0]
 800d57a:	b003      	add	sp, #12
 800d57c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d580:	f000 ba96 	b.w	800dab0 <__malloc_unlock>
 800d584:	42a3      	cmp	r3, r4
 800d586:	d908      	bls.n	800d59a <_free_r+0x46>
 800d588:	6825      	ldr	r5, [r4, #0]
 800d58a:	1961      	adds	r1, r4, r5
 800d58c:	428b      	cmp	r3, r1
 800d58e:	bf01      	itttt	eq
 800d590:	6819      	ldreq	r1, [r3, #0]
 800d592:	685b      	ldreq	r3, [r3, #4]
 800d594:	1949      	addeq	r1, r1, r5
 800d596:	6021      	streq	r1, [r4, #0]
 800d598:	e7ed      	b.n	800d576 <_free_r+0x22>
 800d59a:	461a      	mov	r2, r3
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	b10b      	cbz	r3, 800d5a4 <_free_r+0x50>
 800d5a0:	42a3      	cmp	r3, r4
 800d5a2:	d9fa      	bls.n	800d59a <_free_r+0x46>
 800d5a4:	6811      	ldr	r1, [r2, #0]
 800d5a6:	1855      	adds	r5, r2, r1
 800d5a8:	42a5      	cmp	r5, r4
 800d5aa:	d10b      	bne.n	800d5c4 <_free_r+0x70>
 800d5ac:	6824      	ldr	r4, [r4, #0]
 800d5ae:	4421      	add	r1, r4
 800d5b0:	1854      	adds	r4, r2, r1
 800d5b2:	42a3      	cmp	r3, r4
 800d5b4:	6011      	str	r1, [r2, #0]
 800d5b6:	d1e0      	bne.n	800d57a <_free_r+0x26>
 800d5b8:	681c      	ldr	r4, [r3, #0]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	6053      	str	r3, [r2, #4]
 800d5be:	4421      	add	r1, r4
 800d5c0:	6011      	str	r1, [r2, #0]
 800d5c2:	e7da      	b.n	800d57a <_free_r+0x26>
 800d5c4:	d902      	bls.n	800d5cc <_free_r+0x78>
 800d5c6:	230c      	movs	r3, #12
 800d5c8:	6003      	str	r3, [r0, #0]
 800d5ca:	e7d6      	b.n	800d57a <_free_r+0x26>
 800d5cc:	6825      	ldr	r5, [r4, #0]
 800d5ce:	1961      	adds	r1, r4, r5
 800d5d0:	428b      	cmp	r3, r1
 800d5d2:	bf04      	itt	eq
 800d5d4:	6819      	ldreq	r1, [r3, #0]
 800d5d6:	685b      	ldreq	r3, [r3, #4]
 800d5d8:	6063      	str	r3, [r4, #4]
 800d5da:	bf04      	itt	eq
 800d5dc:	1949      	addeq	r1, r1, r5
 800d5de:	6021      	streq	r1, [r4, #0]
 800d5e0:	6054      	str	r4, [r2, #4]
 800d5e2:	e7ca      	b.n	800d57a <_free_r+0x26>
 800d5e4:	b003      	add	sp, #12
 800d5e6:	bd30      	pop	{r4, r5, pc}
 800d5e8:	200021d0 	.word	0x200021d0

0800d5ec <sbrk_aligned>:
 800d5ec:	b570      	push	{r4, r5, r6, lr}
 800d5ee:	4e0e      	ldr	r6, [pc, #56]	; (800d628 <sbrk_aligned+0x3c>)
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	6831      	ldr	r1, [r6, #0]
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	b911      	cbnz	r1, 800d5fe <sbrk_aligned+0x12>
 800d5f8:	f000 f9e8 	bl	800d9cc <_sbrk_r>
 800d5fc:	6030      	str	r0, [r6, #0]
 800d5fe:	4621      	mov	r1, r4
 800d600:	4628      	mov	r0, r5
 800d602:	f000 f9e3 	bl	800d9cc <_sbrk_r>
 800d606:	1c43      	adds	r3, r0, #1
 800d608:	d00a      	beq.n	800d620 <sbrk_aligned+0x34>
 800d60a:	1cc4      	adds	r4, r0, #3
 800d60c:	f024 0403 	bic.w	r4, r4, #3
 800d610:	42a0      	cmp	r0, r4
 800d612:	d007      	beq.n	800d624 <sbrk_aligned+0x38>
 800d614:	1a21      	subs	r1, r4, r0
 800d616:	4628      	mov	r0, r5
 800d618:	f000 f9d8 	bl	800d9cc <_sbrk_r>
 800d61c:	3001      	adds	r0, #1
 800d61e:	d101      	bne.n	800d624 <sbrk_aligned+0x38>
 800d620:	f04f 34ff 	mov.w	r4, #4294967295
 800d624:	4620      	mov	r0, r4
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	200021d4 	.word	0x200021d4

0800d62c <_malloc_r>:
 800d62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d630:	1ccd      	adds	r5, r1, #3
 800d632:	f025 0503 	bic.w	r5, r5, #3
 800d636:	3508      	adds	r5, #8
 800d638:	2d0c      	cmp	r5, #12
 800d63a:	bf38      	it	cc
 800d63c:	250c      	movcc	r5, #12
 800d63e:	2d00      	cmp	r5, #0
 800d640:	4607      	mov	r7, r0
 800d642:	db01      	blt.n	800d648 <_malloc_r+0x1c>
 800d644:	42a9      	cmp	r1, r5
 800d646:	d905      	bls.n	800d654 <_malloc_r+0x28>
 800d648:	230c      	movs	r3, #12
 800d64a:	603b      	str	r3, [r7, #0]
 800d64c:	2600      	movs	r6, #0
 800d64e:	4630      	mov	r0, r6
 800d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d654:	4e2e      	ldr	r6, [pc, #184]	; (800d710 <_malloc_r+0xe4>)
 800d656:	f000 fa25 	bl	800daa4 <__malloc_lock>
 800d65a:	6833      	ldr	r3, [r6, #0]
 800d65c:	461c      	mov	r4, r3
 800d65e:	bb34      	cbnz	r4, 800d6ae <_malloc_r+0x82>
 800d660:	4629      	mov	r1, r5
 800d662:	4638      	mov	r0, r7
 800d664:	f7ff ffc2 	bl	800d5ec <sbrk_aligned>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	4604      	mov	r4, r0
 800d66c:	d14d      	bne.n	800d70a <_malloc_r+0xde>
 800d66e:	6834      	ldr	r4, [r6, #0]
 800d670:	4626      	mov	r6, r4
 800d672:	2e00      	cmp	r6, #0
 800d674:	d140      	bne.n	800d6f8 <_malloc_r+0xcc>
 800d676:	6823      	ldr	r3, [r4, #0]
 800d678:	4631      	mov	r1, r6
 800d67a:	4638      	mov	r0, r7
 800d67c:	eb04 0803 	add.w	r8, r4, r3
 800d680:	f000 f9a4 	bl	800d9cc <_sbrk_r>
 800d684:	4580      	cmp	r8, r0
 800d686:	d13a      	bne.n	800d6fe <_malloc_r+0xd2>
 800d688:	6821      	ldr	r1, [r4, #0]
 800d68a:	3503      	adds	r5, #3
 800d68c:	1a6d      	subs	r5, r5, r1
 800d68e:	f025 0503 	bic.w	r5, r5, #3
 800d692:	3508      	adds	r5, #8
 800d694:	2d0c      	cmp	r5, #12
 800d696:	bf38      	it	cc
 800d698:	250c      	movcc	r5, #12
 800d69a:	4629      	mov	r1, r5
 800d69c:	4638      	mov	r0, r7
 800d69e:	f7ff ffa5 	bl	800d5ec <sbrk_aligned>
 800d6a2:	3001      	adds	r0, #1
 800d6a4:	d02b      	beq.n	800d6fe <_malloc_r+0xd2>
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	442b      	add	r3, r5
 800d6aa:	6023      	str	r3, [r4, #0]
 800d6ac:	e00e      	b.n	800d6cc <_malloc_r+0xa0>
 800d6ae:	6822      	ldr	r2, [r4, #0]
 800d6b0:	1b52      	subs	r2, r2, r5
 800d6b2:	d41e      	bmi.n	800d6f2 <_malloc_r+0xc6>
 800d6b4:	2a0b      	cmp	r2, #11
 800d6b6:	d916      	bls.n	800d6e6 <_malloc_r+0xba>
 800d6b8:	1961      	adds	r1, r4, r5
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	6025      	str	r5, [r4, #0]
 800d6be:	bf18      	it	ne
 800d6c0:	6059      	strne	r1, [r3, #4]
 800d6c2:	6863      	ldr	r3, [r4, #4]
 800d6c4:	bf08      	it	eq
 800d6c6:	6031      	streq	r1, [r6, #0]
 800d6c8:	5162      	str	r2, [r4, r5]
 800d6ca:	604b      	str	r3, [r1, #4]
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f104 060b 	add.w	r6, r4, #11
 800d6d2:	f000 f9ed 	bl	800dab0 <__malloc_unlock>
 800d6d6:	f026 0607 	bic.w	r6, r6, #7
 800d6da:	1d23      	adds	r3, r4, #4
 800d6dc:	1af2      	subs	r2, r6, r3
 800d6de:	d0b6      	beq.n	800d64e <_malloc_r+0x22>
 800d6e0:	1b9b      	subs	r3, r3, r6
 800d6e2:	50a3      	str	r3, [r4, r2]
 800d6e4:	e7b3      	b.n	800d64e <_malloc_r+0x22>
 800d6e6:	6862      	ldr	r2, [r4, #4]
 800d6e8:	42a3      	cmp	r3, r4
 800d6ea:	bf0c      	ite	eq
 800d6ec:	6032      	streq	r2, [r6, #0]
 800d6ee:	605a      	strne	r2, [r3, #4]
 800d6f0:	e7ec      	b.n	800d6cc <_malloc_r+0xa0>
 800d6f2:	4623      	mov	r3, r4
 800d6f4:	6864      	ldr	r4, [r4, #4]
 800d6f6:	e7b2      	b.n	800d65e <_malloc_r+0x32>
 800d6f8:	4634      	mov	r4, r6
 800d6fa:	6876      	ldr	r6, [r6, #4]
 800d6fc:	e7b9      	b.n	800d672 <_malloc_r+0x46>
 800d6fe:	230c      	movs	r3, #12
 800d700:	603b      	str	r3, [r7, #0]
 800d702:	4638      	mov	r0, r7
 800d704:	f000 f9d4 	bl	800dab0 <__malloc_unlock>
 800d708:	e7a1      	b.n	800d64e <_malloc_r+0x22>
 800d70a:	6025      	str	r5, [r4, #0]
 800d70c:	e7de      	b.n	800d6cc <_malloc_r+0xa0>
 800d70e:	bf00      	nop
 800d710:	200021d0 	.word	0x200021d0

0800d714 <__ssputs_r>:
 800d714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d718:	688e      	ldr	r6, [r1, #8]
 800d71a:	429e      	cmp	r6, r3
 800d71c:	4682      	mov	sl, r0
 800d71e:	460c      	mov	r4, r1
 800d720:	4690      	mov	r8, r2
 800d722:	461f      	mov	r7, r3
 800d724:	d838      	bhi.n	800d798 <__ssputs_r+0x84>
 800d726:	898a      	ldrh	r2, [r1, #12]
 800d728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d72c:	d032      	beq.n	800d794 <__ssputs_r+0x80>
 800d72e:	6825      	ldr	r5, [r4, #0]
 800d730:	6909      	ldr	r1, [r1, #16]
 800d732:	eba5 0901 	sub.w	r9, r5, r1
 800d736:	6965      	ldr	r5, [r4, #20]
 800d738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d73c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d740:	3301      	adds	r3, #1
 800d742:	444b      	add	r3, r9
 800d744:	106d      	asrs	r5, r5, #1
 800d746:	429d      	cmp	r5, r3
 800d748:	bf38      	it	cc
 800d74a:	461d      	movcc	r5, r3
 800d74c:	0553      	lsls	r3, r2, #21
 800d74e:	d531      	bpl.n	800d7b4 <__ssputs_r+0xa0>
 800d750:	4629      	mov	r1, r5
 800d752:	f7ff ff6b 	bl	800d62c <_malloc_r>
 800d756:	4606      	mov	r6, r0
 800d758:	b950      	cbnz	r0, 800d770 <__ssputs_r+0x5c>
 800d75a:	230c      	movs	r3, #12
 800d75c:	f8ca 3000 	str.w	r3, [sl]
 800d760:	89a3      	ldrh	r3, [r4, #12]
 800d762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d766:	81a3      	strh	r3, [r4, #12]
 800d768:	f04f 30ff 	mov.w	r0, #4294967295
 800d76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d770:	6921      	ldr	r1, [r4, #16]
 800d772:	464a      	mov	r2, r9
 800d774:	f7ff fb46 	bl	800ce04 <memcpy>
 800d778:	89a3      	ldrh	r3, [r4, #12]
 800d77a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d77e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d782:	81a3      	strh	r3, [r4, #12]
 800d784:	6126      	str	r6, [r4, #16]
 800d786:	6165      	str	r5, [r4, #20]
 800d788:	444e      	add	r6, r9
 800d78a:	eba5 0509 	sub.w	r5, r5, r9
 800d78e:	6026      	str	r6, [r4, #0]
 800d790:	60a5      	str	r5, [r4, #8]
 800d792:	463e      	mov	r6, r7
 800d794:	42be      	cmp	r6, r7
 800d796:	d900      	bls.n	800d79a <__ssputs_r+0x86>
 800d798:	463e      	mov	r6, r7
 800d79a:	6820      	ldr	r0, [r4, #0]
 800d79c:	4632      	mov	r2, r6
 800d79e:	4641      	mov	r1, r8
 800d7a0:	f000 f966 	bl	800da70 <memmove>
 800d7a4:	68a3      	ldr	r3, [r4, #8]
 800d7a6:	1b9b      	subs	r3, r3, r6
 800d7a8:	60a3      	str	r3, [r4, #8]
 800d7aa:	6823      	ldr	r3, [r4, #0]
 800d7ac:	4433      	add	r3, r6
 800d7ae:	6023      	str	r3, [r4, #0]
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	e7db      	b.n	800d76c <__ssputs_r+0x58>
 800d7b4:	462a      	mov	r2, r5
 800d7b6:	f000 f981 	bl	800dabc <_realloc_r>
 800d7ba:	4606      	mov	r6, r0
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d1e1      	bne.n	800d784 <__ssputs_r+0x70>
 800d7c0:	6921      	ldr	r1, [r4, #16]
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	f7ff fec6 	bl	800d554 <_free_r>
 800d7c8:	e7c7      	b.n	800d75a <__ssputs_r+0x46>
	...

0800d7cc <_svfiprintf_r>:
 800d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	4698      	mov	r8, r3
 800d7d2:	898b      	ldrh	r3, [r1, #12]
 800d7d4:	061b      	lsls	r3, r3, #24
 800d7d6:	b09d      	sub	sp, #116	; 0x74
 800d7d8:	4607      	mov	r7, r0
 800d7da:	460d      	mov	r5, r1
 800d7dc:	4614      	mov	r4, r2
 800d7de:	d50e      	bpl.n	800d7fe <_svfiprintf_r+0x32>
 800d7e0:	690b      	ldr	r3, [r1, #16]
 800d7e2:	b963      	cbnz	r3, 800d7fe <_svfiprintf_r+0x32>
 800d7e4:	2140      	movs	r1, #64	; 0x40
 800d7e6:	f7ff ff21 	bl	800d62c <_malloc_r>
 800d7ea:	6028      	str	r0, [r5, #0]
 800d7ec:	6128      	str	r0, [r5, #16]
 800d7ee:	b920      	cbnz	r0, 800d7fa <_svfiprintf_r+0x2e>
 800d7f0:	230c      	movs	r3, #12
 800d7f2:	603b      	str	r3, [r7, #0]
 800d7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f8:	e0d1      	b.n	800d99e <_svfiprintf_r+0x1d2>
 800d7fa:	2340      	movs	r3, #64	; 0x40
 800d7fc:	616b      	str	r3, [r5, #20]
 800d7fe:	2300      	movs	r3, #0
 800d800:	9309      	str	r3, [sp, #36]	; 0x24
 800d802:	2320      	movs	r3, #32
 800d804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d808:	f8cd 800c 	str.w	r8, [sp, #12]
 800d80c:	2330      	movs	r3, #48	; 0x30
 800d80e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d9b8 <_svfiprintf_r+0x1ec>
 800d812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d816:	f04f 0901 	mov.w	r9, #1
 800d81a:	4623      	mov	r3, r4
 800d81c:	469a      	mov	sl, r3
 800d81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d822:	b10a      	cbz	r2, 800d828 <_svfiprintf_r+0x5c>
 800d824:	2a25      	cmp	r2, #37	; 0x25
 800d826:	d1f9      	bne.n	800d81c <_svfiprintf_r+0x50>
 800d828:	ebba 0b04 	subs.w	fp, sl, r4
 800d82c:	d00b      	beq.n	800d846 <_svfiprintf_r+0x7a>
 800d82e:	465b      	mov	r3, fp
 800d830:	4622      	mov	r2, r4
 800d832:	4629      	mov	r1, r5
 800d834:	4638      	mov	r0, r7
 800d836:	f7ff ff6d 	bl	800d714 <__ssputs_r>
 800d83a:	3001      	adds	r0, #1
 800d83c:	f000 80aa 	beq.w	800d994 <_svfiprintf_r+0x1c8>
 800d840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d842:	445a      	add	r2, fp
 800d844:	9209      	str	r2, [sp, #36]	; 0x24
 800d846:	f89a 3000 	ldrb.w	r3, [sl]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f000 80a2 	beq.w	800d994 <_svfiprintf_r+0x1c8>
 800d850:	2300      	movs	r3, #0
 800d852:	f04f 32ff 	mov.w	r2, #4294967295
 800d856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d85a:	f10a 0a01 	add.w	sl, sl, #1
 800d85e:	9304      	str	r3, [sp, #16]
 800d860:	9307      	str	r3, [sp, #28]
 800d862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d866:	931a      	str	r3, [sp, #104]	; 0x68
 800d868:	4654      	mov	r4, sl
 800d86a:	2205      	movs	r2, #5
 800d86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d870:	4851      	ldr	r0, [pc, #324]	; (800d9b8 <_svfiprintf_r+0x1ec>)
 800d872:	f7f2 fcc5 	bl	8000200 <memchr>
 800d876:	9a04      	ldr	r2, [sp, #16]
 800d878:	b9d8      	cbnz	r0, 800d8b2 <_svfiprintf_r+0xe6>
 800d87a:	06d0      	lsls	r0, r2, #27
 800d87c:	bf44      	itt	mi
 800d87e:	2320      	movmi	r3, #32
 800d880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d884:	0711      	lsls	r1, r2, #28
 800d886:	bf44      	itt	mi
 800d888:	232b      	movmi	r3, #43	; 0x2b
 800d88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d88e:	f89a 3000 	ldrb.w	r3, [sl]
 800d892:	2b2a      	cmp	r3, #42	; 0x2a
 800d894:	d015      	beq.n	800d8c2 <_svfiprintf_r+0xf6>
 800d896:	9a07      	ldr	r2, [sp, #28]
 800d898:	4654      	mov	r4, sl
 800d89a:	2000      	movs	r0, #0
 800d89c:	f04f 0c0a 	mov.w	ip, #10
 800d8a0:	4621      	mov	r1, r4
 800d8a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8a6:	3b30      	subs	r3, #48	; 0x30
 800d8a8:	2b09      	cmp	r3, #9
 800d8aa:	d94e      	bls.n	800d94a <_svfiprintf_r+0x17e>
 800d8ac:	b1b0      	cbz	r0, 800d8dc <_svfiprintf_r+0x110>
 800d8ae:	9207      	str	r2, [sp, #28]
 800d8b0:	e014      	b.n	800d8dc <_svfiprintf_r+0x110>
 800d8b2:	eba0 0308 	sub.w	r3, r0, r8
 800d8b6:	fa09 f303 	lsl.w	r3, r9, r3
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	9304      	str	r3, [sp, #16]
 800d8be:	46a2      	mov	sl, r4
 800d8c0:	e7d2      	b.n	800d868 <_svfiprintf_r+0x9c>
 800d8c2:	9b03      	ldr	r3, [sp, #12]
 800d8c4:	1d19      	adds	r1, r3, #4
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	9103      	str	r1, [sp, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	bfbb      	ittet	lt
 800d8ce:	425b      	neglt	r3, r3
 800d8d0:	f042 0202 	orrlt.w	r2, r2, #2
 800d8d4:	9307      	strge	r3, [sp, #28]
 800d8d6:	9307      	strlt	r3, [sp, #28]
 800d8d8:	bfb8      	it	lt
 800d8da:	9204      	strlt	r2, [sp, #16]
 800d8dc:	7823      	ldrb	r3, [r4, #0]
 800d8de:	2b2e      	cmp	r3, #46	; 0x2e
 800d8e0:	d10c      	bne.n	800d8fc <_svfiprintf_r+0x130>
 800d8e2:	7863      	ldrb	r3, [r4, #1]
 800d8e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d8e6:	d135      	bne.n	800d954 <_svfiprintf_r+0x188>
 800d8e8:	9b03      	ldr	r3, [sp, #12]
 800d8ea:	1d1a      	adds	r2, r3, #4
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	9203      	str	r2, [sp, #12]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	bfb8      	it	lt
 800d8f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8f8:	3402      	adds	r4, #2
 800d8fa:	9305      	str	r3, [sp, #20]
 800d8fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9c8 <_svfiprintf_r+0x1fc>
 800d900:	7821      	ldrb	r1, [r4, #0]
 800d902:	2203      	movs	r2, #3
 800d904:	4650      	mov	r0, sl
 800d906:	f7f2 fc7b 	bl	8000200 <memchr>
 800d90a:	b140      	cbz	r0, 800d91e <_svfiprintf_r+0x152>
 800d90c:	2340      	movs	r3, #64	; 0x40
 800d90e:	eba0 000a 	sub.w	r0, r0, sl
 800d912:	fa03 f000 	lsl.w	r0, r3, r0
 800d916:	9b04      	ldr	r3, [sp, #16]
 800d918:	4303      	orrs	r3, r0
 800d91a:	3401      	adds	r4, #1
 800d91c:	9304      	str	r3, [sp, #16]
 800d91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d922:	4826      	ldr	r0, [pc, #152]	; (800d9bc <_svfiprintf_r+0x1f0>)
 800d924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d928:	2206      	movs	r2, #6
 800d92a:	f7f2 fc69 	bl	8000200 <memchr>
 800d92e:	2800      	cmp	r0, #0
 800d930:	d038      	beq.n	800d9a4 <_svfiprintf_r+0x1d8>
 800d932:	4b23      	ldr	r3, [pc, #140]	; (800d9c0 <_svfiprintf_r+0x1f4>)
 800d934:	bb1b      	cbnz	r3, 800d97e <_svfiprintf_r+0x1b2>
 800d936:	9b03      	ldr	r3, [sp, #12]
 800d938:	3307      	adds	r3, #7
 800d93a:	f023 0307 	bic.w	r3, r3, #7
 800d93e:	3308      	adds	r3, #8
 800d940:	9303      	str	r3, [sp, #12]
 800d942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d944:	4433      	add	r3, r6
 800d946:	9309      	str	r3, [sp, #36]	; 0x24
 800d948:	e767      	b.n	800d81a <_svfiprintf_r+0x4e>
 800d94a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d94e:	460c      	mov	r4, r1
 800d950:	2001      	movs	r0, #1
 800d952:	e7a5      	b.n	800d8a0 <_svfiprintf_r+0xd4>
 800d954:	2300      	movs	r3, #0
 800d956:	3401      	adds	r4, #1
 800d958:	9305      	str	r3, [sp, #20]
 800d95a:	4619      	mov	r1, r3
 800d95c:	f04f 0c0a 	mov.w	ip, #10
 800d960:	4620      	mov	r0, r4
 800d962:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d966:	3a30      	subs	r2, #48	; 0x30
 800d968:	2a09      	cmp	r2, #9
 800d96a:	d903      	bls.n	800d974 <_svfiprintf_r+0x1a8>
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d0c5      	beq.n	800d8fc <_svfiprintf_r+0x130>
 800d970:	9105      	str	r1, [sp, #20]
 800d972:	e7c3      	b.n	800d8fc <_svfiprintf_r+0x130>
 800d974:	fb0c 2101 	mla	r1, ip, r1, r2
 800d978:	4604      	mov	r4, r0
 800d97a:	2301      	movs	r3, #1
 800d97c:	e7f0      	b.n	800d960 <_svfiprintf_r+0x194>
 800d97e:	ab03      	add	r3, sp, #12
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	462a      	mov	r2, r5
 800d984:	4b0f      	ldr	r3, [pc, #60]	; (800d9c4 <_svfiprintf_r+0x1f8>)
 800d986:	a904      	add	r1, sp, #16
 800d988:	4638      	mov	r0, r7
 800d98a:	f7fd ffcb 	bl	800b924 <_printf_float>
 800d98e:	1c42      	adds	r2, r0, #1
 800d990:	4606      	mov	r6, r0
 800d992:	d1d6      	bne.n	800d942 <_svfiprintf_r+0x176>
 800d994:	89ab      	ldrh	r3, [r5, #12]
 800d996:	065b      	lsls	r3, r3, #25
 800d998:	f53f af2c 	bmi.w	800d7f4 <_svfiprintf_r+0x28>
 800d99c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d99e:	b01d      	add	sp, #116	; 0x74
 800d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a4:	ab03      	add	r3, sp, #12
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	462a      	mov	r2, r5
 800d9aa:	4b06      	ldr	r3, [pc, #24]	; (800d9c4 <_svfiprintf_r+0x1f8>)
 800d9ac:	a904      	add	r1, sp, #16
 800d9ae:	4638      	mov	r0, r7
 800d9b0:	f7fe fa5c 	bl	800be6c <_printf_i>
 800d9b4:	e7eb      	b.n	800d98e <_svfiprintf_r+0x1c2>
 800d9b6:	bf00      	nop
 800d9b8:	08010354 	.word	0x08010354
 800d9bc:	0801035e 	.word	0x0801035e
 800d9c0:	0800b925 	.word	0x0800b925
 800d9c4:	0800d715 	.word	0x0800d715
 800d9c8:	0801035a 	.word	0x0801035a

0800d9cc <_sbrk_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4d06      	ldr	r5, [pc, #24]	; (800d9e8 <_sbrk_r+0x1c>)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	602b      	str	r3, [r5, #0]
 800d9d8:	f7f3 fd3c 	bl	8001454 <_sbrk>
 800d9dc:	1c43      	adds	r3, r0, #1
 800d9de:	d102      	bne.n	800d9e6 <_sbrk_r+0x1a>
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	b103      	cbz	r3, 800d9e6 <_sbrk_r+0x1a>
 800d9e4:	6023      	str	r3, [r4, #0]
 800d9e6:	bd38      	pop	{r3, r4, r5, pc}
 800d9e8:	200021d8 	.word	0x200021d8

0800d9ec <__assert_func>:
 800d9ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9ee:	4614      	mov	r4, r2
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	4b09      	ldr	r3, [pc, #36]	; (800da18 <__assert_func+0x2c>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	68d8      	ldr	r0, [r3, #12]
 800d9fa:	b14c      	cbz	r4, 800da10 <__assert_func+0x24>
 800d9fc:	4b07      	ldr	r3, [pc, #28]	; (800da1c <__assert_func+0x30>)
 800d9fe:	9100      	str	r1, [sp, #0]
 800da00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da04:	4906      	ldr	r1, [pc, #24]	; (800da20 <__assert_func+0x34>)
 800da06:	462b      	mov	r3, r5
 800da08:	f000 f80e 	bl	800da28 <fiprintf>
 800da0c:	f000 faac 	bl	800df68 <abort>
 800da10:	4b04      	ldr	r3, [pc, #16]	; (800da24 <__assert_func+0x38>)
 800da12:	461c      	mov	r4, r3
 800da14:	e7f3      	b.n	800d9fe <__assert_func+0x12>
 800da16:	bf00      	nop
 800da18:	20000178 	.word	0x20000178
 800da1c:	08010365 	.word	0x08010365
 800da20:	08010372 	.word	0x08010372
 800da24:	080103a0 	.word	0x080103a0

0800da28 <fiprintf>:
 800da28:	b40e      	push	{r1, r2, r3}
 800da2a:	b503      	push	{r0, r1, lr}
 800da2c:	4601      	mov	r1, r0
 800da2e:	ab03      	add	r3, sp, #12
 800da30:	4805      	ldr	r0, [pc, #20]	; (800da48 <fiprintf+0x20>)
 800da32:	f853 2b04 	ldr.w	r2, [r3], #4
 800da36:	6800      	ldr	r0, [r0, #0]
 800da38:	9301      	str	r3, [sp, #4]
 800da3a:	f000 f897 	bl	800db6c <_vfiprintf_r>
 800da3e:	b002      	add	sp, #8
 800da40:	f85d eb04 	ldr.w	lr, [sp], #4
 800da44:	b003      	add	sp, #12
 800da46:	4770      	bx	lr
 800da48:	20000178 	.word	0x20000178

0800da4c <__ascii_mbtowc>:
 800da4c:	b082      	sub	sp, #8
 800da4e:	b901      	cbnz	r1, 800da52 <__ascii_mbtowc+0x6>
 800da50:	a901      	add	r1, sp, #4
 800da52:	b142      	cbz	r2, 800da66 <__ascii_mbtowc+0x1a>
 800da54:	b14b      	cbz	r3, 800da6a <__ascii_mbtowc+0x1e>
 800da56:	7813      	ldrb	r3, [r2, #0]
 800da58:	600b      	str	r3, [r1, #0]
 800da5a:	7812      	ldrb	r2, [r2, #0]
 800da5c:	1e10      	subs	r0, r2, #0
 800da5e:	bf18      	it	ne
 800da60:	2001      	movne	r0, #1
 800da62:	b002      	add	sp, #8
 800da64:	4770      	bx	lr
 800da66:	4610      	mov	r0, r2
 800da68:	e7fb      	b.n	800da62 <__ascii_mbtowc+0x16>
 800da6a:	f06f 0001 	mvn.w	r0, #1
 800da6e:	e7f8      	b.n	800da62 <__ascii_mbtowc+0x16>

0800da70 <memmove>:
 800da70:	4288      	cmp	r0, r1
 800da72:	b510      	push	{r4, lr}
 800da74:	eb01 0402 	add.w	r4, r1, r2
 800da78:	d902      	bls.n	800da80 <memmove+0x10>
 800da7a:	4284      	cmp	r4, r0
 800da7c:	4623      	mov	r3, r4
 800da7e:	d807      	bhi.n	800da90 <memmove+0x20>
 800da80:	1e43      	subs	r3, r0, #1
 800da82:	42a1      	cmp	r1, r4
 800da84:	d008      	beq.n	800da98 <memmove+0x28>
 800da86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da8e:	e7f8      	b.n	800da82 <memmove+0x12>
 800da90:	4402      	add	r2, r0
 800da92:	4601      	mov	r1, r0
 800da94:	428a      	cmp	r2, r1
 800da96:	d100      	bne.n	800da9a <memmove+0x2a>
 800da98:	bd10      	pop	{r4, pc}
 800da9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daa2:	e7f7      	b.n	800da94 <memmove+0x24>

0800daa4 <__malloc_lock>:
 800daa4:	4801      	ldr	r0, [pc, #4]	; (800daac <__malloc_lock+0x8>)
 800daa6:	f000 bc1f 	b.w	800e2e8 <__retarget_lock_acquire_recursive>
 800daaa:	bf00      	nop
 800daac:	200021dc 	.word	0x200021dc

0800dab0 <__malloc_unlock>:
 800dab0:	4801      	ldr	r0, [pc, #4]	; (800dab8 <__malloc_unlock+0x8>)
 800dab2:	f000 bc1a 	b.w	800e2ea <__retarget_lock_release_recursive>
 800dab6:	bf00      	nop
 800dab8:	200021dc 	.word	0x200021dc

0800dabc <_realloc_r>:
 800dabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac0:	4680      	mov	r8, r0
 800dac2:	4614      	mov	r4, r2
 800dac4:	460e      	mov	r6, r1
 800dac6:	b921      	cbnz	r1, 800dad2 <_realloc_r+0x16>
 800dac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dacc:	4611      	mov	r1, r2
 800dace:	f7ff bdad 	b.w	800d62c <_malloc_r>
 800dad2:	b92a      	cbnz	r2, 800dae0 <_realloc_r+0x24>
 800dad4:	f7ff fd3e 	bl	800d554 <_free_r>
 800dad8:	4625      	mov	r5, r4
 800dada:	4628      	mov	r0, r5
 800dadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae0:	f000 fc6a 	bl	800e3b8 <_malloc_usable_size_r>
 800dae4:	4284      	cmp	r4, r0
 800dae6:	4607      	mov	r7, r0
 800dae8:	d802      	bhi.n	800daf0 <_realloc_r+0x34>
 800daea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800daee:	d812      	bhi.n	800db16 <_realloc_r+0x5a>
 800daf0:	4621      	mov	r1, r4
 800daf2:	4640      	mov	r0, r8
 800daf4:	f7ff fd9a 	bl	800d62c <_malloc_r>
 800daf8:	4605      	mov	r5, r0
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d0ed      	beq.n	800dada <_realloc_r+0x1e>
 800dafe:	42bc      	cmp	r4, r7
 800db00:	4622      	mov	r2, r4
 800db02:	4631      	mov	r1, r6
 800db04:	bf28      	it	cs
 800db06:	463a      	movcs	r2, r7
 800db08:	f7ff f97c 	bl	800ce04 <memcpy>
 800db0c:	4631      	mov	r1, r6
 800db0e:	4640      	mov	r0, r8
 800db10:	f7ff fd20 	bl	800d554 <_free_r>
 800db14:	e7e1      	b.n	800dada <_realloc_r+0x1e>
 800db16:	4635      	mov	r5, r6
 800db18:	e7df      	b.n	800dada <_realloc_r+0x1e>

0800db1a <__sfputc_r>:
 800db1a:	6893      	ldr	r3, [r2, #8]
 800db1c:	3b01      	subs	r3, #1
 800db1e:	2b00      	cmp	r3, #0
 800db20:	b410      	push	{r4}
 800db22:	6093      	str	r3, [r2, #8]
 800db24:	da08      	bge.n	800db38 <__sfputc_r+0x1e>
 800db26:	6994      	ldr	r4, [r2, #24]
 800db28:	42a3      	cmp	r3, r4
 800db2a:	db01      	blt.n	800db30 <__sfputc_r+0x16>
 800db2c:	290a      	cmp	r1, #10
 800db2e:	d103      	bne.n	800db38 <__sfputc_r+0x1e>
 800db30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db34:	f000 b94a 	b.w	800ddcc <__swbuf_r>
 800db38:	6813      	ldr	r3, [r2, #0]
 800db3a:	1c58      	adds	r0, r3, #1
 800db3c:	6010      	str	r0, [r2, #0]
 800db3e:	7019      	strb	r1, [r3, #0]
 800db40:	4608      	mov	r0, r1
 800db42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <__sfputs_r>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	4606      	mov	r6, r0
 800db4c:	460f      	mov	r7, r1
 800db4e:	4614      	mov	r4, r2
 800db50:	18d5      	adds	r5, r2, r3
 800db52:	42ac      	cmp	r4, r5
 800db54:	d101      	bne.n	800db5a <__sfputs_r+0x12>
 800db56:	2000      	movs	r0, #0
 800db58:	e007      	b.n	800db6a <__sfputs_r+0x22>
 800db5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5e:	463a      	mov	r2, r7
 800db60:	4630      	mov	r0, r6
 800db62:	f7ff ffda 	bl	800db1a <__sfputc_r>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	d1f3      	bne.n	800db52 <__sfputs_r+0xa>
 800db6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db6c <_vfiprintf_r>:
 800db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db70:	460d      	mov	r5, r1
 800db72:	b09d      	sub	sp, #116	; 0x74
 800db74:	4614      	mov	r4, r2
 800db76:	4698      	mov	r8, r3
 800db78:	4606      	mov	r6, r0
 800db7a:	b118      	cbz	r0, 800db84 <_vfiprintf_r+0x18>
 800db7c:	6983      	ldr	r3, [r0, #24]
 800db7e:	b90b      	cbnz	r3, 800db84 <_vfiprintf_r+0x18>
 800db80:	f000 fb14 	bl	800e1ac <__sinit>
 800db84:	4b89      	ldr	r3, [pc, #548]	; (800ddac <_vfiprintf_r+0x240>)
 800db86:	429d      	cmp	r5, r3
 800db88:	d11b      	bne.n	800dbc2 <_vfiprintf_r+0x56>
 800db8a:	6875      	ldr	r5, [r6, #4]
 800db8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db8e:	07d9      	lsls	r1, r3, #31
 800db90:	d405      	bmi.n	800db9e <_vfiprintf_r+0x32>
 800db92:	89ab      	ldrh	r3, [r5, #12]
 800db94:	059a      	lsls	r2, r3, #22
 800db96:	d402      	bmi.n	800db9e <_vfiprintf_r+0x32>
 800db98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db9a:	f000 fba5 	bl	800e2e8 <__retarget_lock_acquire_recursive>
 800db9e:	89ab      	ldrh	r3, [r5, #12]
 800dba0:	071b      	lsls	r3, r3, #28
 800dba2:	d501      	bpl.n	800dba8 <_vfiprintf_r+0x3c>
 800dba4:	692b      	ldr	r3, [r5, #16]
 800dba6:	b9eb      	cbnz	r3, 800dbe4 <_vfiprintf_r+0x78>
 800dba8:	4629      	mov	r1, r5
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f000 f96e 	bl	800de8c <__swsetup_r>
 800dbb0:	b1c0      	cbz	r0, 800dbe4 <_vfiprintf_r+0x78>
 800dbb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbb4:	07dc      	lsls	r4, r3, #31
 800dbb6:	d50e      	bpl.n	800dbd6 <_vfiprintf_r+0x6a>
 800dbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbbc:	b01d      	add	sp, #116	; 0x74
 800dbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc2:	4b7b      	ldr	r3, [pc, #492]	; (800ddb0 <_vfiprintf_r+0x244>)
 800dbc4:	429d      	cmp	r5, r3
 800dbc6:	d101      	bne.n	800dbcc <_vfiprintf_r+0x60>
 800dbc8:	68b5      	ldr	r5, [r6, #8]
 800dbca:	e7df      	b.n	800db8c <_vfiprintf_r+0x20>
 800dbcc:	4b79      	ldr	r3, [pc, #484]	; (800ddb4 <_vfiprintf_r+0x248>)
 800dbce:	429d      	cmp	r5, r3
 800dbd0:	bf08      	it	eq
 800dbd2:	68f5      	ldreq	r5, [r6, #12]
 800dbd4:	e7da      	b.n	800db8c <_vfiprintf_r+0x20>
 800dbd6:	89ab      	ldrh	r3, [r5, #12]
 800dbd8:	0598      	lsls	r0, r3, #22
 800dbda:	d4ed      	bmi.n	800dbb8 <_vfiprintf_r+0x4c>
 800dbdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbde:	f000 fb84 	bl	800e2ea <__retarget_lock_release_recursive>
 800dbe2:	e7e9      	b.n	800dbb8 <_vfiprintf_r+0x4c>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe8:	2320      	movs	r3, #32
 800dbea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbee:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbf2:	2330      	movs	r3, #48	; 0x30
 800dbf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ddb8 <_vfiprintf_r+0x24c>
 800dbf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbfc:	f04f 0901 	mov.w	r9, #1
 800dc00:	4623      	mov	r3, r4
 800dc02:	469a      	mov	sl, r3
 800dc04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc08:	b10a      	cbz	r2, 800dc0e <_vfiprintf_r+0xa2>
 800dc0a:	2a25      	cmp	r2, #37	; 0x25
 800dc0c:	d1f9      	bne.n	800dc02 <_vfiprintf_r+0x96>
 800dc0e:	ebba 0b04 	subs.w	fp, sl, r4
 800dc12:	d00b      	beq.n	800dc2c <_vfiprintf_r+0xc0>
 800dc14:	465b      	mov	r3, fp
 800dc16:	4622      	mov	r2, r4
 800dc18:	4629      	mov	r1, r5
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	f7ff ff94 	bl	800db48 <__sfputs_r>
 800dc20:	3001      	adds	r0, #1
 800dc22:	f000 80aa 	beq.w	800dd7a <_vfiprintf_r+0x20e>
 800dc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc28:	445a      	add	r2, fp
 800dc2a:	9209      	str	r2, [sp, #36]	; 0x24
 800dc2c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f000 80a2 	beq.w	800dd7a <_vfiprintf_r+0x20e>
 800dc36:	2300      	movs	r3, #0
 800dc38:	f04f 32ff 	mov.w	r2, #4294967295
 800dc3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc40:	f10a 0a01 	add.w	sl, sl, #1
 800dc44:	9304      	str	r3, [sp, #16]
 800dc46:	9307      	str	r3, [sp, #28]
 800dc48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc4c:	931a      	str	r3, [sp, #104]	; 0x68
 800dc4e:	4654      	mov	r4, sl
 800dc50:	2205      	movs	r2, #5
 800dc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc56:	4858      	ldr	r0, [pc, #352]	; (800ddb8 <_vfiprintf_r+0x24c>)
 800dc58:	f7f2 fad2 	bl	8000200 <memchr>
 800dc5c:	9a04      	ldr	r2, [sp, #16]
 800dc5e:	b9d8      	cbnz	r0, 800dc98 <_vfiprintf_r+0x12c>
 800dc60:	06d1      	lsls	r1, r2, #27
 800dc62:	bf44      	itt	mi
 800dc64:	2320      	movmi	r3, #32
 800dc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc6a:	0713      	lsls	r3, r2, #28
 800dc6c:	bf44      	itt	mi
 800dc6e:	232b      	movmi	r3, #43	; 0x2b
 800dc70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc74:	f89a 3000 	ldrb.w	r3, [sl]
 800dc78:	2b2a      	cmp	r3, #42	; 0x2a
 800dc7a:	d015      	beq.n	800dca8 <_vfiprintf_r+0x13c>
 800dc7c:	9a07      	ldr	r2, [sp, #28]
 800dc7e:	4654      	mov	r4, sl
 800dc80:	2000      	movs	r0, #0
 800dc82:	f04f 0c0a 	mov.w	ip, #10
 800dc86:	4621      	mov	r1, r4
 800dc88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc8c:	3b30      	subs	r3, #48	; 0x30
 800dc8e:	2b09      	cmp	r3, #9
 800dc90:	d94e      	bls.n	800dd30 <_vfiprintf_r+0x1c4>
 800dc92:	b1b0      	cbz	r0, 800dcc2 <_vfiprintf_r+0x156>
 800dc94:	9207      	str	r2, [sp, #28]
 800dc96:	e014      	b.n	800dcc2 <_vfiprintf_r+0x156>
 800dc98:	eba0 0308 	sub.w	r3, r0, r8
 800dc9c:	fa09 f303 	lsl.w	r3, r9, r3
 800dca0:	4313      	orrs	r3, r2
 800dca2:	9304      	str	r3, [sp, #16]
 800dca4:	46a2      	mov	sl, r4
 800dca6:	e7d2      	b.n	800dc4e <_vfiprintf_r+0xe2>
 800dca8:	9b03      	ldr	r3, [sp, #12]
 800dcaa:	1d19      	adds	r1, r3, #4
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	9103      	str	r1, [sp, #12]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	bfbb      	ittet	lt
 800dcb4:	425b      	neglt	r3, r3
 800dcb6:	f042 0202 	orrlt.w	r2, r2, #2
 800dcba:	9307      	strge	r3, [sp, #28]
 800dcbc:	9307      	strlt	r3, [sp, #28]
 800dcbe:	bfb8      	it	lt
 800dcc0:	9204      	strlt	r2, [sp, #16]
 800dcc2:	7823      	ldrb	r3, [r4, #0]
 800dcc4:	2b2e      	cmp	r3, #46	; 0x2e
 800dcc6:	d10c      	bne.n	800dce2 <_vfiprintf_r+0x176>
 800dcc8:	7863      	ldrb	r3, [r4, #1]
 800dcca:	2b2a      	cmp	r3, #42	; 0x2a
 800dccc:	d135      	bne.n	800dd3a <_vfiprintf_r+0x1ce>
 800dcce:	9b03      	ldr	r3, [sp, #12]
 800dcd0:	1d1a      	adds	r2, r3, #4
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	9203      	str	r2, [sp, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfb8      	it	lt
 800dcda:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcde:	3402      	adds	r4, #2
 800dce0:	9305      	str	r3, [sp, #20]
 800dce2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ddc8 <_vfiprintf_r+0x25c>
 800dce6:	7821      	ldrb	r1, [r4, #0]
 800dce8:	2203      	movs	r2, #3
 800dcea:	4650      	mov	r0, sl
 800dcec:	f7f2 fa88 	bl	8000200 <memchr>
 800dcf0:	b140      	cbz	r0, 800dd04 <_vfiprintf_r+0x198>
 800dcf2:	2340      	movs	r3, #64	; 0x40
 800dcf4:	eba0 000a 	sub.w	r0, r0, sl
 800dcf8:	fa03 f000 	lsl.w	r0, r3, r0
 800dcfc:	9b04      	ldr	r3, [sp, #16]
 800dcfe:	4303      	orrs	r3, r0
 800dd00:	3401      	adds	r4, #1
 800dd02:	9304      	str	r3, [sp, #16]
 800dd04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd08:	482c      	ldr	r0, [pc, #176]	; (800ddbc <_vfiprintf_r+0x250>)
 800dd0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd0e:	2206      	movs	r2, #6
 800dd10:	f7f2 fa76 	bl	8000200 <memchr>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d03f      	beq.n	800dd98 <_vfiprintf_r+0x22c>
 800dd18:	4b29      	ldr	r3, [pc, #164]	; (800ddc0 <_vfiprintf_r+0x254>)
 800dd1a:	bb1b      	cbnz	r3, 800dd64 <_vfiprintf_r+0x1f8>
 800dd1c:	9b03      	ldr	r3, [sp, #12]
 800dd1e:	3307      	adds	r3, #7
 800dd20:	f023 0307 	bic.w	r3, r3, #7
 800dd24:	3308      	adds	r3, #8
 800dd26:	9303      	str	r3, [sp, #12]
 800dd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd2a:	443b      	add	r3, r7
 800dd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd2e:	e767      	b.n	800dc00 <_vfiprintf_r+0x94>
 800dd30:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd34:	460c      	mov	r4, r1
 800dd36:	2001      	movs	r0, #1
 800dd38:	e7a5      	b.n	800dc86 <_vfiprintf_r+0x11a>
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	3401      	adds	r4, #1
 800dd3e:	9305      	str	r3, [sp, #20]
 800dd40:	4619      	mov	r1, r3
 800dd42:	f04f 0c0a 	mov.w	ip, #10
 800dd46:	4620      	mov	r0, r4
 800dd48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd4c:	3a30      	subs	r2, #48	; 0x30
 800dd4e:	2a09      	cmp	r2, #9
 800dd50:	d903      	bls.n	800dd5a <_vfiprintf_r+0x1ee>
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0c5      	beq.n	800dce2 <_vfiprintf_r+0x176>
 800dd56:	9105      	str	r1, [sp, #20]
 800dd58:	e7c3      	b.n	800dce2 <_vfiprintf_r+0x176>
 800dd5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd5e:	4604      	mov	r4, r0
 800dd60:	2301      	movs	r3, #1
 800dd62:	e7f0      	b.n	800dd46 <_vfiprintf_r+0x1da>
 800dd64:	ab03      	add	r3, sp, #12
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	462a      	mov	r2, r5
 800dd6a:	4b16      	ldr	r3, [pc, #88]	; (800ddc4 <_vfiprintf_r+0x258>)
 800dd6c:	a904      	add	r1, sp, #16
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f7fd fdd8 	bl	800b924 <_printf_float>
 800dd74:	4607      	mov	r7, r0
 800dd76:	1c78      	adds	r0, r7, #1
 800dd78:	d1d6      	bne.n	800dd28 <_vfiprintf_r+0x1bc>
 800dd7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd7c:	07d9      	lsls	r1, r3, #31
 800dd7e:	d405      	bmi.n	800dd8c <_vfiprintf_r+0x220>
 800dd80:	89ab      	ldrh	r3, [r5, #12]
 800dd82:	059a      	lsls	r2, r3, #22
 800dd84:	d402      	bmi.n	800dd8c <_vfiprintf_r+0x220>
 800dd86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd88:	f000 faaf 	bl	800e2ea <__retarget_lock_release_recursive>
 800dd8c:	89ab      	ldrh	r3, [r5, #12]
 800dd8e:	065b      	lsls	r3, r3, #25
 800dd90:	f53f af12 	bmi.w	800dbb8 <_vfiprintf_r+0x4c>
 800dd94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd96:	e711      	b.n	800dbbc <_vfiprintf_r+0x50>
 800dd98:	ab03      	add	r3, sp, #12
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	462a      	mov	r2, r5
 800dd9e:	4b09      	ldr	r3, [pc, #36]	; (800ddc4 <_vfiprintf_r+0x258>)
 800dda0:	a904      	add	r1, sp, #16
 800dda2:	4630      	mov	r0, r6
 800dda4:	f7fe f862 	bl	800be6c <_printf_i>
 800dda8:	e7e4      	b.n	800dd74 <_vfiprintf_r+0x208>
 800ddaa:	bf00      	nop
 800ddac:	080104cc 	.word	0x080104cc
 800ddb0:	080104ec 	.word	0x080104ec
 800ddb4:	080104ac 	.word	0x080104ac
 800ddb8:	08010354 	.word	0x08010354
 800ddbc:	0801035e 	.word	0x0801035e
 800ddc0:	0800b925 	.word	0x0800b925
 800ddc4:	0800db49 	.word	0x0800db49
 800ddc8:	0801035a 	.word	0x0801035a

0800ddcc <__swbuf_r>:
 800ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddce:	460e      	mov	r6, r1
 800ddd0:	4614      	mov	r4, r2
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	b118      	cbz	r0, 800ddde <__swbuf_r+0x12>
 800ddd6:	6983      	ldr	r3, [r0, #24]
 800ddd8:	b90b      	cbnz	r3, 800ddde <__swbuf_r+0x12>
 800ddda:	f000 f9e7 	bl	800e1ac <__sinit>
 800ddde:	4b21      	ldr	r3, [pc, #132]	; (800de64 <__swbuf_r+0x98>)
 800dde0:	429c      	cmp	r4, r3
 800dde2:	d12b      	bne.n	800de3c <__swbuf_r+0x70>
 800dde4:	686c      	ldr	r4, [r5, #4]
 800dde6:	69a3      	ldr	r3, [r4, #24]
 800dde8:	60a3      	str	r3, [r4, #8]
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	071a      	lsls	r2, r3, #28
 800ddee:	d52f      	bpl.n	800de50 <__swbuf_r+0x84>
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	b36b      	cbz	r3, 800de50 <__swbuf_r+0x84>
 800ddf4:	6923      	ldr	r3, [r4, #16]
 800ddf6:	6820      	ldr	r0, [r4, #0]
 800ddf8:	1ac0      	subs	r0, r0, r3
 800ddfa:	6963      	ldr	r3, [r4, #20]
 800ddfc:	b2f6      	uxtb	r6, r6
 800ddfe:	4283      	cmp	r3, r0
 800de00:	4637      	mov	r7, r6
 800de02:	dc04      	bgt.n	800de0e <__swbuf_r+0x42>
 800de04:	4621      	mov	r1, r4
 800de06:	4628      	mov	r0, r5
 800de08:	f000 f93c 	bl	800e084 <_fflush_r>
 800de0c:	bb30      	cbnz	r0, 800de5c <__swbuf_r+0x90>
 800de0e:	68a3      	ldr	r3, [r4, #8]
 800de10:	3b01      	subs	r3, #1
 800de12:	60a3      	str	r3, [r4, #8]
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	1c5a      	adds	r2, r3, #1
 800de18:	6022      	str	r2, [r4, #0]
 800de1a:	701e      	strb	r6, [r3, #0]
 800de1c:	6963      	ldr	r3, [r4, #20]
 800de1e:	3001      	adds	r0, #1
 800de20:	4283      	cmp	r3, r0
 800de22:	d004      	beq.n	800de2e <__swbuf_r+0x62>
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	07db      	lsls	r3, r3, #31
 800de28:	d506      	bpl.n	800de38 <__swbuf_r+0x6c>
 800de2a:	2e0a      	cmp	r6, #10
 800de2c:	d104      	bne.n	800de38 <__swbuf_r+0x6c>
 800de2e:	4621      	mov	r1, r4
 800de30:	4628      	mov	r0, r5
 800de32:	f000 f927 	bl	800e084 <_fflush_r>
 800de36:	b988      	cbnz	r0, 800de5c <__swbuf_r+0x90>
 800de38:	4638      	mov	r0, r7
 800de3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de3c:	4b0a      	ldr	r3, [pc, #40]	; (800de68 <__swbuf_r+0x9c>)
 800de3e:	429c      	cmp	r4, r3
 800de40:	d101      	bne.n	800de46 <__swbuf_r+0x7a>
 800de42:	68ac      	ldr	r4, [r5, #8]
 800de44:	e7cf      	b.n	800dde6 <__swbuf_r+0x1a>
 800de46:	4b09      	ldr	r3, [pc, #36]	; (800de6c <__swbuf_r+0xa0>)
 800de48:	429c      	cmp	r4, r3
 800de4a:	bf08      	it	eq
 800de4c:	68ec      	ldreq	r4, [r5, #12]
 800de4e:	e7ca      	b.n	800dde6 <__swbuf_r+0x1a>
 800de50:	4621      	mov	r1, r4
 800de52:	4628      	mov	r0, r5
 800de54:	f000 f81a 	bl	800de8c <__swsetup_r>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d0cb      	beq.n	800ddf4 <__swbuf_r+0x28>
 800de5c:	f04f 37ff 	mov.w	r7, #4294967295
 800de60:	e7ea      	b.n	800de38 <__swbuf_r+0x6c>
 800de62:	bf00      	nop
 800de64:	080104cc 	.word	0x080104cc
 800de68:	080104ec 	.word	0x080104ec
 800de6c:	080104ac 	.word	0x080104ac

0800de70 <__ascii_wctomb>:
 800de70:	b149      	cbz	r1, 800de86 <__ascii_wctomb+0x16>
 800de72:	2aff      	cmp	r2, #255	; 0xff
 800de74:	bf85      	ittet	hi
 800de76:	238a      	movhi	r3, #138	; 0x8a
 800de78:	6003      	strhi	r3, [r0, #0]
 800de7a:	700a      	strbls	r2, [r1, #0]
 800de7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800de80:	bf98      	it	ls
 800de82:	2001      	movls	r0, #1
 800de84:	4770      	bx	lr
 800de86:	4608      	mov	r0, r1
 800de88:	4770      	bx	lr
	...

0800de8c <__swsetup_r>:
 800de8c:	4b32      	ldr	r3, [pc, #200]	; (800df58 <__swsetup_r+0xcc>)
 800de8e:	b570      	push	{r4, r5, r6, lr}
 800de90:	681d      	ldr	r5, [r3, #0]
 800de92:	4606      	mov	r6, r0
 800de94:	460c      	mov	r4, r1
 800de96:	b125      	cbz	r5, 800dea2 <__swsetup_r+0x16>
 800de98:	69ab      	ldr	r3, [r5, #24]
 800de9a:	b913      	cbnz	r3, 800dea2 <__swsetup_r+0x16>
 800de9c:	4628      	mov	r0, r5
 800de9e:	f000 f985 	bl	800e1ac <__sinit>
 800dea2:	4b2e      	ldr	r3, [pc, #184]	; (800df5c <__swsetup_r+0xd0>)
 800dea4:	429c      	cmp	r4, r3
 800dea6:	d10f      	bne.n	800dec8 <__swsetup_r+0x3c>
 800dea8:	686c      	ldr	r4, [r5, #4]
 800deaa:	89a3      	ldrh	r3, [r4, #12]
 800deac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800deb0:	0719      	lsls	r1, r3, #28
 800deb2:	d42c      	bmi.n	800df0e <__swsetup_r+0x82>
 800deb4:	06dd      	lsls	r5, r3, #27
 800deb6:	d411      	bmi.n	800dedc <__swsetup_r+0x50>
 800deb8:	2309      	movs	r3, #9
 800deba:	6033      	str	r3, [r6, #0]
 800debc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dec0:	81a3      	strh	r3, [r4, #12]
 800dec2:	f04f 30ff 	mov.w	r0, #4294967295
 800dec6:	e03e      	b.n	800df46 <__swsetup_r+0xba>
 800dec8:	4b25      	ldr	r3, [pc, #148]	; (800df60 <__swsetup_r+0xd4>)
 800deca:	429c      	cmp	r4, r3
 800decc:	d101      	bne.n	800ded2 <__swsetup_r+0x46>
 800dece:	68ac      	ldr	r4, [r5, #8]
 800ded0:	e7eb      	b.n	800deaa <__swsetup_r+0x1e>
 800ded2:	4b24      	ldr	r3, [pc, #144]	; (800df64 <__swsetup_r+0xd8>)
 800ded4:	429c      	cmp	r4, r3
 800ded6:	bf08      	it	eq
 800ded8:	68ec      	ldreq	r4, [r5, #12]
 800deda:	e7e6      	b.n	800deaa <__swsetup_r+0x1e>
 800dedc:	0758      	lsls	r0, r3, #29
 800dede:	d512      	bpl.n	800df06 <__swsetup_r+0x7a>
 800dee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dee2:	b141      	cbz	r1, 800def6 <__swsetup_r+0x6a>
 800dee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dee8:	4299      	cmp	r1, r3
 800deea:	d002      	beq.n	800def2 <__swsetup_r+0x66>
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff fb31 	bl	800d554 <_free_r>
 800def2:	2300      	movs	r3, #0
 800def4:	6363      	str	r3, [r4, #52]	; 0x34
 800def6:	89a3      	ldrh	r3, [r4, #12]
 800def8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800defc:	81a3      	strh	r3, [r4, #12]
 800defe:	2300      	movs	r3, #0
 800df00:	6063      	str	r3, [r4, #4]
 800df02:	6923      	ldr	r3, [r4, #16]
 800df04:	6023      	str	r3, [r4, #0]
 800df06:	89a3      	ldrh	r3, [r4, #12]
 800df08:	f043 0308 	orr.w	r3, r3, #8
 800df0c:	81a3      	strh	r3, [r4, #12]
 800df0e:	6923      	ldr	r3, [r4, #16]
 800df10:	b94b      	cbnz	r3, 800df26 <__swsetup_r+0x9a>
 800df12:	89a3      	ldrh	r3, [r4, #12]
 800df14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df1c:	d003      	beq.n	800df26 <__swsetup_r+0x9a>
 800df1e:	4621      	mov	r1, r4
 800df20:	4630      	mov	r0, r6
 800df22:	f000 fa09 	bl	800e338 <__smakebuf_r>
 800df26:	89a0      	ldrh	r0, [r4, #12]
 800df28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df2c:	f010 0301 	ands.w	r3, r0, #1
 800df30:	d00a      	beq.n	800df48 <__swsetup_r+0xbc>
 800df32:	2300      	movs	r3, #0
 800df34:	60a3      	str	r3, [r4, #8]
 800df36:	6963      	ldr	r3, [r4, #20]
 800df38:	425b      	negs	r3, r3
 800df3a:	61a3      	str	r3, [r4, #24]
 800df3c:	6923      	ldr	r3, [r4, #16]
 800df3e:	b943      	cbnz	r3, 800df52 <__swsetup_r+0xc6>
 800df40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df44:	d1ba      	bne.n	800debc <__swsetup_r+0x30>
 800df46:	bd70      	pop	{r4, r5, r6, pc}
 800df48:	0781      	lsls	r1, r0, #30
 800df4a:	bf58      	it	pl
 800df4c:	6963      	ldrpl	r3, [r4, #20]
 800df4e:	60a3      	str	r3, [r4, #8]
 800df50:	e7f4      	b.n	800df3c <__swsetup_r+0xb0>
 800df52:	2000      	movs	r0, #0
 800df54:	e7f7      	b.n	800df46 <__swsetup_r+0xba>
 800df56:	bf00      	nop
 800df58:	20000178 	.word	0x20000178
 800df5c:	080104cc 	.word	0x080104cc
 800df60:	080104ec 	.word	0x080104ec
 800df64:	080104ac 	.word	0x080104ac

0800df68 <abort>:
 800df68:	b508      	push	{r3, lr}
 800df6a:	2006      	movs	r0, #6
 800df6c:	f000 fa54 	bl	800e418 <raise>
 800df70:	2001      	movs	r0, #1
 800df72:	f7f3 f9f7 	bl	8001364 <_exit>
	...

0800df78 <__sflush_r>:
 800df78:	898a      	ldrh	r2, [r1, #12]
 800df7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df7e:	4605      	mov	r5, r0
 800df80:	0710      	lsls	r0, r2, #28
 800df82:	460c      	mov	r4, r1
 800df84:	d458      	bmi.n	800e038 <__sflush_r+0xc0>
 800df86:	684b      	ldr	r3, [r1, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	dc05      	bgt.n	800df98 <__sflush_r+0x20>
 800df8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df8e:	2b00      	cmp	r3, #0
 800df90:	dc02      	bgt.n	800df98 <__sflush_r+0x20>
 800df92:	2000      	movs	r0, #0
 800df94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df9a:	2e00      	cmp	r6, #0
 800df9c:	d0f9      	beq.n	800df92 <__sflush_r+0x1a>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfa4:	682f      	ldr	r7, [r5, #0]
 800dfa6:	602b      	str	r3, [r5, #0]
 800dfa8:	d032      	beq.n	800e010 <__sflush_r+0x98>
 800dfaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	075a      	lsls	r2, r3, #29
 800dfb0:	d505      	bpl.n	800dfbe <__sflush_r+0x46>
 800dfb2:	6863      	ldr	r3, [r4, #4]
 800dfb4:	1ac0      	subs	r0, r0, r3
 800dfb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfb8:	b10b      	cbz	r3, 800dfbe <__sflush_r+0x46>
 800dfba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfbc:	1ac0      	subs	r0, r0, r3
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfc4:	6a21      	ldr	r1, [r4, #32]
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	47b0      	blx	r6
 800dfca:	1c43      	adds	r3, r0, #1
 800dfcc:	89a3      	ldrh	r3, [r4, #12]
 800dfce:	d106      	bne.n	800dfde <__sflush_r+0x66>
 800dfd0:	6829      	ldr	r1, [r5, #0]
 800dfd2:	291d      	cmp	r1, #29
 800dfd4:	d82c      	bhi.n	800e030 <__sflush_r+0xb8>
 800dfd6:	4a2a      	ldr	r2, [pc, #168]	; (800e080 <__sflush_r+0x108>)
 800dfd8:	40ca      	lsrs	r2, r1
 800dfda:	07d6      	lsls	r6, r2, #31
 800dfdc:	d528      	bpl.n	800e030 <__sflush_r+0xb8>
 800dfde:	2200      	movs	r2, #0
 800dfe0:	6062      	str	r2, [r4, #4]
 800dfe2:	04d9      	lsls	r1, r3, #19
 800dfe4:	6922      	ldr	r2, [r4, #16]
 800dfe6:	6022      	str	r2, [r4, #0]
 800dfe8:	d504      	bpl.n	800dff4 <__sflush_r+0x7c>
 800dfea:	1c42      	adds	r2, r0, #1
 800dfec:	d101      	bne.n	800dff2 <__sflush_r+0x7a>
 800dfee:	682b      	ldr	r3, [r5, #0]
 800dff0:	b903      	cbnz	r3, 800dff4 <__sflush_r+0x7c>
 800dff2:	6560      	str	r0, [r4, #84]	; 0x54
 800dff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dff6:	602f      	str	r7, [r5, #0]
 800dff8:	2900      	cmp	r1, #0
 800dffa:	d0ca      	beq.n	800df92 <__sflush_r+0x1a>
 800dffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e000:	4299      	cmp	r1, r3
 800e002:	d002      	beq.n	800e00a <__sflush_r+0x92>
 800e004:	4628      	mov	r0, r5
 800e006:	f7ff faa5 	bl	800d554 <_free_r>
 800e00a:	2000      	movs	r0, #0
 800e00c:	6360      	str	r0, [r4, #52]	; 0x34
 800e00e:	e7c1      	b.n	800df94 <__sflush_r+0x1c>
 800e010:	6a21      	ldr	r1, [r4, #32]
 800e012:	2301      	movs	r3, #1
 800e014:	4628      	mov	r0, r5
 800e016:	47b0      	blx	r6
 800e018:	1c41      	adds	r1, r0, #1
 800e01a:	d1c7      	bne.n	800dfac <__sflush_r+0x34>
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d0c4      	beq.n	800dfac <__sflush_r+0x34>
 800e022:	2b1d      	cmp	r3, #29
 800e024:	d001      	beq.n	800e02a <__sflush_r+0xb2>
 800e026:	2b16      	cmp	r3, #22
 800e028:	d101      	bne.n	800e02e <__sflush_r+0xb6>
 800e02a:	602f      	str	r7, [r5, #0]
 800e02c:	e7b1      	b.n	800df92 <__sflush_r+0x1a>
 800e02e:	89a3      	ldrh	r3, [r4, #12]
 800e030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e034:	81a3      	strh	r3, [r4, #12]
 800e036:	e7ad      	b.n	800df94 <__sflush_r+0x1c>
 800e038:	690f      	ldr	r7, [r1, #16]
 800e03a:	2f00      	cmp	r7, #0
 800e03c:	d0a9      	beq.n	800df92 <__sflush_r+0x1a>
 800e03e:	0793      	lsls	r3, r2, #30
 800e040:	680e      	ldr	r6, [r1, #0]
 800e042:	bf08      	it	eq
 800e044:	694b      	ldreq	r3, [r1, #20]
 800e046:	600f      	str	r7, [r1, #0]
 800e048:	bf18      	it	ne
 800e04a:	2300      	movne	r3, #0
 800e04c:	eba6 0807 	sub.w	r8, r6, r7
 800e050:	608b      	str	r3, [r1, #8]
 800e052:	f1b8 0f00 	cmp.w	r8, #0
 800e056:	dd9c      	ble.n	800df92 <__sflush_r+0x1a>
 800e058:	6a21      	ldr	r1, [r4, #32]
 800e05a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e05c:	4643      	mov	r3, r8
 800e05e:	463a      	mov	r2, r7
 800e060:	4628      	mov	r0, r5
 800e062:	47b0      	blx	r6
 800e064:	2800      	cmp	r0, #0
 800e066:	dc06      	bgt.n	800e076 <__sflush_r+0xfe>
 800e068:	89a3      	ldrh	r3, [r4, #12]
 800e06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e06e:	81a3      	strh	r3, [r4, #12]
 800e070:	f04f 30ff 	mov.w	r0, #4294967295
 800e074:	e78e      	b.n	800df94 <__sflush_r+0x1c>
 800e076:	4407      	add	r7, r0
 800e078:	eba8 0800 	sub.w	r8, r8, r0
 800e07c:	e7e9      	b.n	800e052 <__sflush_r+0xda>
 800e07e:	bf00      	nop
 800e080:	20400001 	.word	0x20400001

0800e084 <_fflush_r>:
 800e084:	b538      	push	{r3, r4, r5, lr}
 800e086:	690b      	ldr	r3, [r1, #16]
 800e088:	4605      	mov	r5, r0
 800e08a:	460c      	mov	r4, r1
 800e08c:	b913      	cbnz	r3, 800e094 <_fflush_r+0x10>
 800e08e:	2500      	movs	r5, #0
 800e090:	4628      	mov	r0, r5
 800e092:	bd38      	pop	{r3, r4, r5, pc}
 800e094:	b118      	cbz	r0, 800e09e <_fflush_r+0x1a>
 800e096:	6983      	ldr	r3, [r0, #24]
 800e098:	b90b      	cbnz	r3, 800e09e <_fflush_r+0x1a>
 800e09a:	f000 f887 	bl	800e1ac <__sinit>
 800e09e:	4b14      	ldr	r3, [pc, #80]	; (800e0f0 <_fflush_r+0x6c>)
 800e0a0:	429c      	cmp	r4, r3
 800e0a2:	d11b      	bne.n	800e0dc <_fflush_r+0x58>
 800e0a4:	686c      	ldr	r4, [r5, #4]
 800e0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d0ef      	beq.n	800e08e <_fflush_r+0xa>
 800e0ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0b0:	07d0      	lsls	r0, r2, #31
 800e0b2:	d404      	bmi.n	800e0be <_fflush_r+0x3a>
 800e0b4:	0599      	lsls	r1, r3, #22
 800e0b6:	d402      	bmi.n	800e0be <_fflush_r+0x3a>
 800e0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0ba:	f000 f915 	bl	800e2e8 <__retarget_lock_acquire_recursive>
 800e0be:	4628      	mov	r0, r5
 800e0c0:	4621      	mov	r1, r4
 800e0c2:	f7ff ff59 	bl	800df78 <__sflush_r>
 800e0c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0c8:	07da      	lsls	r2, r3, #31
 800e0ca:	4605      	mov	r5, r0
 800e0cc:	d4e0      	bmi.n	800e090 <_fflush_r+0xc>
 800e0ce:	89a3      	ldrh	r3, [r4, #12]
 800e0d0:	059b      	lsls	r3, r3, #22
 800e0d2:	d4dd      	bmi.n	800e090 <_fflush_r+0xc>
 800e0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0d6:	f000 f908 	bl	800e2ea <__retarget_lock_release_recursive>
 800e0da:	e7d9      	b.n	800e090 <_fflush_r+0xc>
 800e0dc:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <_fflush_r+0x70>)
 800e0de:	429c      	cmp	r4, r3
 800e0e0:	d101      	bne.n	800e0e6 <_fflush_r+0x62>
 800e0e2:	68ac      	ldr	r4, [r5, #8]
 800e0e4:	e7df      	b.n	800e0a6 <_fflush_r+0x22>
 800e0e6:	4b04      	ldr	r3, [pc, #16]	; (800e0f8 <_fflush_r+0x74>)
 800e0e8:	429c      	cmp	r4, r3
 800e0ea:	bf08      	it	eq
 800e0ec:	68ec      	ldreq	r4, [r5, #12]
 800e0ee:	e7da      	b.n	800e0a6 <_fflush_r+0x22>
 800e0f0:	080104cc 	.word	0x080104cc
 800e0f4:	080104ec 	.word	0x080104ec
 800e0f8:	080104ac 	.word	0x080104ac

0800e0fc <std>:
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	b510      	push	{r4, lr}
 800e100:	4604      	mov	r4, r0
 800e102:	e9c0 3300 	strd	r3, r3, [r0]
 800e106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e10a:	6083      	str	r3, [r0, #8]
 800e10c:	8181      	strh	r1, [r0, #12]
 800e10e:	6643      	str	r3, [r0, #100]	; 0x64
 800e110:	81c2      	strh	r2, [r0, #14]
 800e112:	6183      	str	r3, [r0, #24]
 800e114:	4619      	mov	r1, r3
 800e116:	2208      	movs	r2, #8
 800e118:	305c      	adds	r0, #92	; 0x5c
 800e11a:	f7fd fb5b 	bl	800b7d4 <memset>
 800e11e:	4b05      	ldr	r3, [pc, #20]	; (800e134 <std+0x38>)
 800e120:	6263      	str	r3, [r4, #36]	; 0x24
 800e122:	4b05      	ldr	r3, [pc, #20]	; (800e138 <std+0x3c>)
 800e124:	62a3      	str	r3, [r4, #40]	; 0x28
 800e126:	4b05      	ldr	r3, [pc, #20]	; (800e13c <std+0x40>)
 800e128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e12a:	4b05      	ldr	r3, [pc, #20]	; (800e140 <std+0x44>)
 800e12c:	6224      	str	r4, [r4, #32]
 800e12e:	6323      	str	r3, [r4, #48]	; 0x30
 800e130:	bd10      	pop	{r4, pc}
 800e132:	bf00      	nop
 800e134:	0800e451 	.word	0x0800e451
 800e138:	0800e473 	.word	0x0800e473
 800e13c:	0800e4ab 	.word	0x0800e4ab
 800e140:	0800e4cf 	.word	0x0800e4cf

0800e144 <_cleanup_r>:
 800e144:	4901      	ldr	r1, [pc, #4]	; (800e14c <_cleanup_r+0x8>)
 800e146:	f000 b8af 	b.w	800e2a8 <_fwalk_reent>
 800e14a:	bf00      	nop
 800e14c:	0800e085 	.word	0x0800e085

0800e150 <__sfmoreglue>:
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	2268      	movs	r2, #104	; 0x68
 800e154:	1e4d      	subs	r5, r1, #1
 800e156:	4355      	muls	r5, r2
 800e158:	460e      	mov	r6, r1
 800e15a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e15e:	f7ff fa65 	bl	800d62c <_malloc_r>
 800e162:	4604      	mov	r4, r0
 800e164:	b140      	cbz	r0, 800e178 <__sfmoreglue+0x28>
 800e166:	2100      	movs	r1, #0
 800e168:	e9c0 1600 	strd	r1, r6, [r0]
 800e16c:	300c      	adds	r0, #12
 800e16e:	60a0      	str	r0, [r4, #8]
 800e170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e174:	f7fd fb2e 	bl	800b7d4 <memset>
 800e178:	4620      	mov	r0, r4
 800e17a:	bd70      	pop	{r4, r5, r6, pc}

0800e17c <__sfp_lock_acquire>:
 800e17c:	4801      	ldr	r0, [pc, #4]	; (800e184 <__sfp_lock_acquire+0x8>)
 800e17e:	f000 b8b3 	b.w	800e2e8 <__retarget_lock_acquire_recursive>
 800e182:	bf00      	nop
 800e184:	200021dd 	.word	0x200021dd

0800e188 <__sfp_lock_release>:
 800e188:	4801      	ldr	r0, [pc, #4]	; (800e190 <__sfp_lock_release+0x8>)
 800e18a:	f000 b8ae 	b.w	800e2ea <__retarget_lock_release_recursive>
 800e18e:	bf00      	nop
 800e190:	200021dd 	.word	0x200021dd

0800e194 <__sinit_lock_acquire>:
 800e194:	4801      	ldr	r0, [pc, #4]	; (800e19c <__sinit_lock_acquire+0x8>)
 800e196:	f000 b8a7 	b.w	800e2e8 <__retarget_lock_acquire_recursive>
 800e19a:	bf00      	nop
 800e19c:	200021de 	.word	0x200021de

0800e1a0 <__sinit_lock_release>:
 800e1a0:	4801      	ldr	r0, [pc, #4]	; (800e1a8 <__sinit_lock_release+0x8>)
 800e1a2:	f000 b8a2 	b.w	800e2ea <__retarget_lock_release_recursive>
 800e1a6:	bf00      	nop
 800e1a8:	200021de 	.word	0x200021de

0800e1ac <__sinit>:
 800e1ac:	b510      	push	{r4, lr}
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	f7ff fff0 	bl	800e194 <__sinit_lock_acquire>
 800e1b4:	69a3      	ldr	r3, [r4, #24]
 800e1b6:	b11b      	cbz	r3, 800e1c0 <__sinit+0x14>
 800e1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1bc:	f7ff bff0 	b.w	800e1a0 <__sinit_lock_release>
 800e1c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e1c4:	6523      	str	r3, [r4, #80]	; 0x50
 800e1c6:	4b13      	ldr	r3, [pc, #76]	; (800e214 <__sinit+0x68>)
 800e1c8:	4a13      	ldr	r2, [pc, #76]	; (800e218 <__sinit+0x6c>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e1ce:	42a3      	cmp	r3, r4
 800e1d0:	bf04      	itt	eq
 800e1d2:	2301      	moveq	r3, #1
 800e1d4:	61a3      	streq	r3, [r4, #24]
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f000 f820 	bl	800e21c <__sfp>
 800e1dc:	6060      	str	r0, [r4, #4]
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f000 f81c 	bl	800e21c <__sfp>
 800e1e4:	60a0      	str	r0, [r4, #8]
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f000 f818 	bl	800e21c <__sfp>
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	60e0      	str	r0, [r4, #12]
 800e1f0:	2104      	movs	r1, #4
 800e1f2:	6860      	ldr	r0, [r4, #4]
 800e1f4:	f7ff ff82 	bl	800e0fc <std>
 800e1f8:	68a0      	ldr	r0, [r4, #8]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	2109      	movs	r1, #9
 800e1fe:	f7ff ff7d 	bl	800e0fc <std>
 800e202:	68e0      	ldr	r0, [r4, #12]
 800e204:	2202      	movs	r2, #2
 800e206:	2112      	movs	r1, #18
 800e208:	f7ff ff78 	bl	800e0fc <std>
 800e20c:	2301      	movs	r3, #1
 800e20e:	61a3      	str	r3, [r4, #24]
 800e210:	e7d2      	b.n	800e1b8 <__sinit+0xc>
 800e212:	bf00      	nop
 800e214:	08010130 	.word	0x08010130
 800e218:	0800e145 	.word	0x0800e145

0800e21c <__sfp>:
 800e21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21e:	4607      	mov	r7, r0
 800e220:	f7ff ffac 	bl	800e17c <__sfp_lock_acquire>
 800e224:	4b1e      	ldr	r3, [pc, #120]	; (800e2a0 <__sfp+0x84>)
 800e226:	681e      	ldr	r6, [r3, #0]
 800e228:	69b3      	ldr	r3, [r6, #24]
 800e22a:	b913      	cbnz	r3, 800e232 <__sfp+0x16>
 800e22c:	4630      	mov	r0, r6
 800e22e:	f7ff ffbd 	bl	800e1ac <__sinit>
 800e232:	3648      	adds	r6, #72	; 0x48
 800e234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e238:	3b01      	subs	r3, #1
 800e23a:	d503      	bpl.n	800e244 <__sfp+0x28>
 800e23c:	6833      	ldr	r3, [r6, #0]
 800e23e:	b30b      	cbz	r3, 800e284 <__sfp+0x68>
 800e240:	6836      	ldr	r6, [r6, #0]
 800e242:	e7f7      	b.n	800e234 <__sfp+0x18>
 800e244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e248:	b9d5      	cbnz	r5, 800e280 <__sfp+0x64>
 800e24a:	4b16      	ldr	r3, [pc, #88]	; (800e2a4 <__sfp+0x88>)
 800e24c:	60e3      	str	r3, [r4, #12]
 800e24e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e252:	6665      	str	r5, [r4, #100]	; 0x64
 800e254:	f000 f847 	bl	800e2e6 <__retarget_lock_init_recursive>
 800e258:	f7ff ff96 	bl	800e188 <__sfp_lock_release>
 800e25c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e264:	6025      	str	r5, [r4, #0]
 800e266:	61a5      	str	r5, [r4, #24]
 800e268:	2208      	movs	r2, #8
 800e26a:	4629      	mov	r1, r5
 800e26c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e270:	f7fd fab0 	bl	800b7d4 <memset>
 800e274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e27c:	4620      	mov	r0, r4
 800e27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e280:	3468      	adds	r4, #104	; 0x68
 800e282:	e7d9      	b.n	800e238 <__sfp+0x1c>
 800e284:	2104      	movs	r1, #4
 800e286:	4638      	mov	r0, r7
 800e288:	f7ff ff62 	bl	800e150 <__sfmoreglue>
 800e28c:	4604      	mov	r4, r0
 800e28e:	6030      	str	r0, [r6, #0]
 800e290:	2800      	cmp	r0, #0
 800e292:	d1d5      	bne.n	800e240 <__sfp+0x24>
 800e294:	f7ff ff78 	bl	800e188 <__sfp_lock_release>
 800e298:	230c      	movs	r3, #12
 800e29a:	603b      	str	r3, [r7, #0]
 800e29c:	e7ee      	b.n	800e27c <__sfp+0x60>
 800e29e:	bf00      	nop
 800e2a0:	08010130 	.word	0x08010130
 800e2a4:	ffff0001 	.word	0xffff0001

0800e2a8 <_fwalk_reent>:
 800e2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	4688      	mov	r8, r1
 800e2b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e2b4:	2700      	movs	r7, #0
 800e2b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2ba:	f1b9 0901 	subs.w	r9, r9, #1
 800e2be:	d505      	bpl.n	800e2cc <_fwalk_reent+0x24>
 800e2c0:	6824      	ldr	r4, [r4, #0]
 800e2c2:	2c00      	cmp	r4, #0
 800e2c4:	d1f7      	bne.n	800e2b6 <_fwalk_reent+0xe>
 800e2c6:	4638      	mov	r0, r7
 800e2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2cc:	89ab      	ldrh	r3, [r5, #12]
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d907      	bls.n	800e2e2 <_fwalk_reent+0x3a>
 800e2d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	d003      	beq.n	800e2e2 <_fwalk_reent+0x3a>
 800e2da:	4629      	mov	r1, r5
 800e2dc:	4630      	mov	r0, r6
 800e2de:	47c0      	blx	r8
 800e2e0:	4307      	orrs	r7, r0
 800e2e2:	3568      	adds	r5, #104	; 0x68
 800e2e4:	e7e9      	b.n	800e2ba <_fwalk_reent+0x12>

0800e2e6 <__retarget_lock_init_recursive>:
 800e2e6:	4770      	bx	lr

0800e2e8 <__retarget_lock_acquire_recursive>:
 800e2e8:	4770      	bx	lr

0800e2ea <__retarget_lock_release_recursive>:
 800e2ea:	4770      	bx	lr

0800e2ec <__swhatbuf_r>:
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	460e      	mov	r6, r1
 800e2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f4:	2900      	cmp	r1, #0
 800e2f6:	b096      	sub	sp, #88	; 0x58
 800e2f8:	4614      	mov	r4, r2
 800e2fa:	461d      	mov	r5, r3
 800e2fc:	da08      	bge.n	800e310 <__swhatbuf_r+0x24>
 800e2fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	602a      	str	r2, [r5, #0]
 800e306:	061a      	lsls	r2, r3, #24
 800e308:	d410      	bmi.n	800e32c <__swhatbuf_r+0x40>
 800e30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e30e:	e00e      	b.n	800e32e <__swhatbuf_r+0x42>
 800e310:	466a      	mov	r2, sp
 800e312:	f000 f903 	bl	800e51c <_fstat_r>
 800e316:	2800      	cmp	r0, #0
 800e318:	dbf1      	blt.n	800e2fe <__swhatbuf_r+0x12>
 800e31a:	9a01      	ldr	r2, [sp, #4]
 800e31c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e320:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e324:	425a      	negs	r2, r3
 800e326:	415a      	adcs	r2, r3
 800e328:	602a      	str	r2, [r5, #0]
 800e32a:	e7ee      	b.n	800e30a <__swhatbuf_r+0x1e>
 800e32c:	2340      	movs	r3, #64	; 0x40
 800e32e:	2000      	movs	r0, #0
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	b016      	add	sp, #88	; 0x58
 800e334:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e338 <__smakebuf_r>:
 800e338:	898b      	ldrh	r3, [r1, #12]
 800e33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e33c:	079d      	lsls	r5, r3, #30
 800e33e:	4606      	mov	r6, r0
 800e340:	460c      	mov	r4, r1
 800e342:	d507      	bpl.n	800e354 <__smakebuf_r+0x1c>
 800e344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	6123      	str	r3, [r4, #16]
 800e34c:	2301      	movs	r3, #1
 800e34e:	6163      	str	r3, [r4, #20]
 800e350:	b002      	add	sp, #8
 800e352:	bd70      	pop	{r4, r5, r6, pc}
 800e354:	ab01      	add	r3, sp, #4
 800e356:	466a      	mov	r2, sp
 800e358:	f7ff ffc8 	bl	800e2ec <__swhatbuf_r>
 800e35c:	9900      	ldr	r1, [sp, #0]
 800e35e:	4605      	mov	r5, r0
 800e360:	4630      	mov	r0, r6
 800e362:	f7ff f963 	bl	800d62c <_malloc_r>
 800e366:	b948      	cbnz	r0, 800e37c <__smakebuf_r+0x44>
 800e368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e36c:	059a      	lsls	r2, r3, #22
 800e36e:	d4ef      	bmi.n	800e350 <__smakebuf_r+0x18>
 800e370:	f023 0303 	bic.w	r3, r3, #3
 800e374:	f043 0302 	orr.w	r3, r3, #2
 800e378:	81a3      	strh	r3, [r4, #12]
 800e37a:	e7e3      	b.n	800e344 <__smakebuf_r+0xc>
 800e37c:	4b0d      	ldr	r3, [pc, #52]	; (800e3b4 <__smakebuf_r+0x7c>)
 800e37e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	6020      	str	r0, [r4, #0]
 800e384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e388:	81a3      	strh	r3, [r4, #12]
 800e38a:	9b00      	ldr	r3, [sp, #0]
 800e38c:	6163      	str	r3, [r4, #20]
 800e38e:	9b01      	ldr	r3, [sp, #4]
 800e390:	6120      	str	r0, [r4, #16]
 800e392:	b15b      	cbz	r3, 800e3ac <__smakebuf_r+0x74>
 800e394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e398:	4630      	mov	r0, r6
 800e39a:	f000 f8d1 	bl	800e540 <_isatty_r>
 800e39e:	b128      	cbz	r0, 800e3ac <__smakebuf_r+0x74>
 800e3a0:	89a3      	ldrh	r3, [r4, #12]
 800e3a2:	f023 0303 	bic.w	r3, r3, #3
 800e3a6:	f043 0301 	orr.w	r3, r3, #1
 800e3aa:	81a3      	strh	r3, [r4, #12]
 800e3ac:	89a0      	ldrh	r0, [r4, #12]
 800e3ae:	4305      	orrs	r5, r0
 800e3b0:	81a5      	strh	r5, [r4, #12]
 800e3b2:	e7cd      	b.n	800e350 <__smakebuf_r+0x18>
 800e3b4:	0800e145 	.word	0x0800e145

0800e3b8 <_malloc_usable_size_r>:
 800e3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3bc:	1f18      	subs	r0, r3, #4
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	bfbc      	itt	lt
 800e3c2:	580b      	ldrlt	r3, [r1, r0]
 800e3c4:	18c0      	addlt	r0, r0, r3
 800e3c6:	4770      	bx	lr

0800e3c8 <_raise_r>:
 800e3c8:	291f      	cmp	r1, #31
 800e3ca:	b538      	push	{r3, r4, r5, lr}
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	460d      	mov	r5, r1
 800e3d0:	d904      	bls.n	800e3dc <_raise_r+0x14>
 800e3d2:	2316      	movs	r3, #22
 800e3d4:	6003      	str	r3, [r0, #0]
 800e3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3da:	bd38      	pop	{r3, r4, r5, pc}
 800e3dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e3de:	b112      	cbz	r2, 800e3e6 <_raise_r+0x1e>
 800e3e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3e4:	b94b      	cbnz	r3, 800e3fa <_raise_r+0x32>
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f000 f830 	bl	800e44c <_getpid_r>
 800e3ec:	462a      	mov	r2, r5
 800e3ee:	4601      	mov	r1, r0
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3f6:	f000 b817 	b.w	800e428 <_kill_r>
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d00a      	beq.n	800e414 <_raise_r+0x4c>
 800e3fe:	1c59      	adds	r1, r3, #1
 800e400:	d103      	bne.n	800e40a <_raise_r+0x42>
 800e402:	2316      	movs	r3, #22
 800e404:	6003      	str	r3, [r0, #0]
 800e406:	2001      	movs	r0, #1
 800e408:	e7e7      	b.n	800e3da <_raise_r+0x12>
 800e40a:	2400      	movs	r4, #0
 800e40c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e410:	4628      	mov	r0, r5
 800e412:	4798      	blx	r3
 800e414:	2000      	movs	r0, #0
 800e416:	e7e0      	b.n	800e3da <_raise_r+0x12>

0800e418 <raise>:
 800e418:	4b02      	ldr	r3, [pc, #8]	; (800e424 <raise+0xc>)
 800e41a:	4601      	mov	r1, r0
 800e41c:	6818      	ldr	r0, [r3, #0]
 800e41e:	f7ff bfd3 	b.w	800e3c8 <_raise_r>
 800e422:	bf00      	nop
 800e424:	20000178 	.word	0x20000178

0800e428 <_kill_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4d07      	ldr	r5, [pc, #28]	; (800e448 <_kill_r+0x20>)
 800e42c:	2300      	movs	r3, #0
 800e42e:	4604      	mov	r4, r0
 800e430:	4608      	mov	r0, r1
 800e432:	4611      	mov	r1, r2
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	f7f2 ff85 	bl	8001344 <_kill>
 800e43a:	1c43      	adds	r3, r0, #1
 800e43c:	d102      	bne.n	800e444 <_kill_r+0x1c>
 800e43e:	682b      	ldr	r3, [r5, #0]
 800e440:	b103      	cbz	r3, 800e444 <_kill_r+0x1c>
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	bd38      	pop	{r3, r4, r5, pc}
 800e446:	bf00      	nop
 800e448:	200021d8 	.word	0x200021d8

0800e44c <_getpid_r>:
 800e44c:	f7f2 bf72 	b.w	8001334 <_getpid>

0800e450 <__sread>:
 800e450:	b510      	push	{r4, lr}
 800e452:	460c      	mov	r4, r1
 800e454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e458:	f000 f894 	bl	800e584 <_read_r>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	bfab      	itete	ge
 800e460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e462:	89a3      	ldrhlt	r3, [r4, #12]
 800e464:	181b      	addge	r3, r3, r0
 800e466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e46a:	bfac      	ite	ge
 800e46c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e46e:	81a3      	strhlt	r3, [r4, #12]
 800e470:	bd10      	pop	{r4, pc}

0800e472 <__swrite>:
 800e472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e476:	461f      	mov	r7, r3
 800e478:	898b      	ldrh	r3, [r1, #12]
 800e47a:	05db      	lsls	r3, r3, #23
 800e47c:	4605      	mov	r5, r0
 800e47e:	460c      	mov	r4, r1
 800e480:	4616      	mov	r6, r2
 800e482:	d505      	bpl.n	800e490 <__swrite+0x1e>
 800e484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e488:	2302      	movs	r3, #2
 800e48a:	2200      	movs	r2, #0
 800e48c:	f000 f868 	bl	800e560 <_lseek_r>
 800e490:	89a3      	ldrh	r3, [r4, #12]
 800e492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e49a:	81a3      	strh	r3, [r4, #12]
 800e49c:	4632      	mov	r2, r6
 800e49e:	463b      	mov	r3, r7
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4a6:	f000 b817 	b.w	800e4d8 <_write_r>

0800e4aa <__sseek>:
 800e4aa:	b510      	push	{r4, lr}
 800e4ac:	460c      	mov	r4, r1
 800e4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4b2:	f000 f855 	bl	800e560 <_lseek_r>
 800e4b6:	1c43      	adds	r3, r0, #1
 800e4b8:	89a3      	ldrh	r3, [r4, #12]
 800e4ba:	bf15      	itete	ne
 800e4bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4c6:	81a3      	strheq	r3, [r4, #12]
 800e4c8:	bf18      	it	ne
 800e4ca:	81a3      	strhne	r3, [r4, #12]
 800e4cc:	bd10      	pop	{r4, pc}

0800e4ce <__sclose>:
 800e4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4d2:	f000 b813 	b.w	800e4fc <_close_r>
	...

0800e4d8 <_write_r>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	4d07      	ldr	r5, [pc, #28]	; (800e4f8 <_write_r+0x20>)
 800e4dc:	4604      	mov	r4, r0
 800e4de:	4608      	mov	r0, r1
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	602a      	str	r2, [r5, #0]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	f7f2 ff63 	bl	80013b2 <_write>
 800e4ec:	1c43      	adds	r3, r0, #1
 800e4ee:	d102      	bne.n	800e4f6 <_write_r+0x1e>
 800e4f0:	682b      	ldr	r3, [r5, #0]
 800e4f2:	b103      	cbz	r3, 800e4f6 <_write_r+0x1e>
 800e4f4:	6023      	str	r3, [r4, #0]
 800e4f6:	bd38      	pop	{r3, r4, r5, pc}
 800e4f8:	200021d8 	.word	0x200021d8

0800e4fc <_close_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	4d06      	ldr	r5, [pc, #24]	; (800e518 <_close_r+0x1c>)
 800e500:	2300      	movs	r3, #0
 800e502:	4604      	mov	r4, r0
 800e504:	4608      	mov	r0, r1
 800e506:	602b      	str	r3, [r5, #0]
 800e508:	f7f2 ff6f 	bl	80013ea <_close>
 800e50c:	1c43      	adds	r3, r0, #1
 800e50e:	d102      	bne.n	800e516 <_close_r+0x1a>
 800e510:	682b      	ldr	r3, [r5, #0]
 800e512:	b103      	cbz	r3, 800e516 <_close_r+0x1a>
 800e514:	6023      	str	r3, [r4, #0]
 800e516:	bd38      	pop	{r3, r4, r5, pc}
 800e518:	200021d8 	.word	0x200021d8

0800e51c <_fstat_r>:
 800e51c:	b538      	push	{r3, r4, r5, lr}
 800e51e:	4d07      	ldr	r5, [pc, #28]	; (800e53c <_fstat_r+0x20>)
 800e520:	2300      	movs	r3, #0
 800e522:	4604      	mov	r4, r0
 800e524:	4608      	mov	r0, r1
 800e526:	4611      	mov	r1, r2
 800e528:	602b      	str	r3, [r5, #0]
 800e52a:	f7f2 ff6a 	bl	8001402 <_fstat>
 800e52e:	1c43      	adds	r3, r0, #1
 800e530:	d102      	bne.n	800e538 <_fstat_r+0x1c>
 800e532:	682b      	ldr	r3, [r5, #0]
 800e534:	b103      	cbz	r3, 800e538 <_fstat_r+0x1c>
 800e536:	6023      	str	r3, [r4, #0]
 800e538:	bd38      	pop	{r3, r4, r5, pc}
 800e53a:	bf00      	nop
 800e53c:	200021d8 	.word	0x200021d8

0800e540 <_isatty_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	4d06      	ldr	r5, [pc, #24]	; (800e55c <_isatty_r+0x1c>)
 800e544:	2300      	movs	r3, #0
 800e546:	4604      	mov	r4, r0
 800e548:	4608      	mov	r0, r1
 800e54a:	602b      	str	r3, [r5, #0]
 800e54c:	f7f2 ff69 	bl	8001422 <_isatty>
 800e550:	1c43      	adds	r3, r0, #1
 800e552:	d102      	bne.n	800e55a <_isatty_r+0x1a>
 800e554:	682b      	ldr	r3, [r5, #0]
 800e556:	b103      	cbz	r3, 800e55a <_isatty_r+0x1a>
 800e558:	6023      	str	r3, [r4, #0]
 800e55a:	bd38      	pop	{r3, r4, r5, pc}
 800e55c:	200021d8 	.word	0x200021d8

0800e560 <_lseek_r>:
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	4d07      	ldr	r5, [pc, #28]	; (800e580 <_lseek_r+0x20>)
 800e564:	4604      	mov	r4, r0
 800e566:	4608      	mov	r0, r1
 800e568:	4611      	mov	r1, r2
 800e56a:	2200      	movs	r2, #0
 800e56c:	602a      	str	r2, [r5, #0]
 800e56e:	461a      	mov	r2, r3
 800e570:	f7f2 ff62 	bl	8001438 <_lseek>
 800e574:	1c43      	adds	r3, r0, #1
 800e576:	d102      	bne.n	800e57e <_lseek_r+0x1e>
 800e578:	682b      	ldr	r3, [r5, #0]
 800e57a:	b103      	cbz	r3, 800e57e <_lseek_r+0x1e>
 800e57c:	6023      	str	r3, [r4, #0]
 800e57e:	bd38      	pop	{r3, r4, r5, pc}
 800e580:	200021d8 	.word	0x200021d8

0800e584 <_read_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4d07      	ldr	r5, [pc, #28]	; (800e5a4 <_read_r+0x20>)
 800e588:	4604      	mov	r4, r0
 800e58a:	4608      	mov	r0, r1
 800e58c:	4611      	mov	r1, r2
 800e58e:	2200      	movs	r2, #0
 800e590:	602a      	str	r2, [r5, #0]
 800e592:	461a      	mov	r2, r3
 800e594:	f7f2 fef0 	bl	8001378 <_read>
 800e598:	1c43      	adds	r3, r0, #1
 800e59a:	d102      	bne.n	800e5a2 <_read_r+0x1e>
 800e59c:	682b      	ldr	r3, [r5, #0]
 800e59e:	b103      	cbz	r3, 800e5a2 <_read_r+0x1e>
 800e5a0:	6023      	str	r3, [r4, #0]
 800e5a2:	bd38      	pop	{r3, r4, r5, pc}
 800e5a4:	200021d8 	.word	0x200021d8

0800e5a8 <_init>:
 800e5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5aa:	bf00      	nop
 800e5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ae:	bc08      	pop	{r3}
 800e5b0:	469e      	mov	lr, r3
 800e5b2:	4770      	bx	lr

0800e5b4 <_fini>:
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	bf00      	nop
 800e5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ba:	bc08      	pop	{r3}
 800e5bc:	469e      	mov	lr, r3
 800e5be:	4770      	bx	lr
