
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3e0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce0  0800a58c  0800a58c  0001a58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c26c  0800c26c  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800c26c  0800c26c  0001c26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c274  0800c274  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c274  0800c274  0001c274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c278  0800c278  0001c278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800c27c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020144  2**0
                  CONTENTS
 10 .bss          00001ec0  20000144  20000144  00020144  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20002004  20002004  00020144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c4a  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004161  00000000  00000000  00039dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003df20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  0003f510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028998  00000000  00000000  00040918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d211  00000000  00000000  000692b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1985  00000000  00000000  000864c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00167e46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005aa0  00000000  00000000  00167e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000144 	.word	0x20000144
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a574 	.word	0x0800a574

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000148 	.word	0x20000148
 80001e8:	0800a574 	.word	0x0800a574

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b0e2      	sub	sp, #392	; 0x188
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f001 fc2f 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f917 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f97f 	bl	8000814 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000516:	f009 fae9 	bl	8009aec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 800051a:	f000 fdc5 	bl	80010a8 <BSP_LCD_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 800051e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fe42 	bl	80011ac <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000528:	2001      	movs	r0, #1
 800052a:	f000 fea3 	bl	8001274 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 800052e:	f001 f855 	bl	80015dc <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000532:	4875      	ldr	r0, [pc, #468]	; (8000708 <main+0x204>)
 8000534:	f000 ff10 	bl	8001358 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000538:	4873      	ldr	r0, [pc, #460]	; (8000708 <main+0x204>)
 800053a:	f000 fec3 	bl	80012c4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 800053e:	f04f 30ff 	mov.w	r0, #4294967295
 8000542:	f000 fea7 	bl	8001294 <BSP_LCD_SetTextColor>
  //write text
  BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"Good evening,");
 8000546:	4971      	ldr	r1, [pc, #452]	; (800070c <main+0x208>)
 8000548:	2000      	movs	r0, #0
 800054a:	f001 f82f 	bl	80015ac <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(1, (uint8_t*)" it's too dark");
 800054e:	4970      	ldr	r1, [pc, #448]	; (8000710 <main+0x20c>)
 8000550:	2001      	movs	r0, #1
 8000552:	f001 f82b 	bl	80015ac <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)" here");
 8000556:	496f      	ldr	r1, [pc, #444]	; (8000714 <main+0x210>)
 8000558:	2002      	movs	r0, #2
 800055a:	f001 f827 	bl	80015ac <BSP_LCD_DisplayStringAtLine>
  /* USER CODE END 2 */
  uint8_t a[64] = "Hello STM";
 800055e:	4a6e      	ldr	r2, [pc, #440]	; (8000718 <main+0x214>)
 8000560:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000564:	ca07      	ldmia	r2, {r0, r1, r2}
 8000566:	c303      	stmia	r3!, {r0, r1}
 8000568:	801a      	strh	r2, [r3, #0]
 800056a:	f507 73a7 	add.w	r3, r7, #334	; 0x14e
 800056e:	2236      	movs	r2, #54	; 0x36
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f009 fff6 	bl	800a564 <memset>
  uint8_t b[64] = "Turn on LED 3";
 8000578:	4b68      	ldr	r3, [pc, #416]	; (800071c <main+0x218>)
 800057a:	f507 7482 	add.w	r4, r7, #260	; 0x104
 800057e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000580:	c407      	stmia	r4!, {r0, r1, r2}
 8000582:	8023      	strh	r3, [r4, #0]
 8000584:	f507 7389 	add.w	r3, r7, #274	; 0x112
 8000588:	2232      	movs	r2, #50	; 0x32
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f009 ffe9 	bl	800a564 <memset>
  uint8_t c[64] = "Turn on LED 4";
 8000592:	4b63      	ldr	r3, [pc, #396]	; (8000720 <main+0x21c>)
 8000594:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800059a:	c407      	stmia	r4!, {r0, r1, r2}
 800059c:	8023      	strh	r3, [r4, #0]
 800059e:	f107 03d2 	add.w	r3, r7, #210	; 0xd2
 80005a2:	2232      	movs	r2, #50	; 0x32
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f009 ffdc 	bl	800a564 <memset>
  uint8_t d[64] = "Turn off LED 3";
 80005ac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80005b0:	f5a3 7582 	sub.w	r5, r3, #260	; 0x104
 80005b4:	4b5b      	ldr	r3, [pc, #364]	; (8000724 <main+0x220>)
 80005b6:	462c      	mov	r4, r5
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	c407      	stmia	r4!, {r0, r1, r2}
 80005bc:	8023      	strh	r3, [r4, #0]
 80005be:	3402      	adds	r4, #2
 80005c0:	0c1b      	lsrs	r3, r3, #16
 80005c2:	7023      	strb	r3, [r4, #0]
 80005c4:	f105 030f 	add.w	r3, r5, #15
 80005c8:	2231      	movs	r2, #49	; 0x31
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f009 ffc9 	bl	800a564 <memset>
  uint8_t e[64] = "Turn off LED 4";
 80005d2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80005d6:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
 80005da:	4b53      	ldr	r3, [pc, #332]	; (8000728 <main+0x224>)
 80005dc:	462c      	mov	r4, r5
 80005de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e0:	c407      	stmia	r4!, {r0, r1, r2}
 80005e2:	8023      	strh	r3, [r4, #0]
 80005e4:	3402      	adds	r4, #2
 80005e6:	0c1b      	lsrs	r3, r3, #16
 80005e8:	7023      	strb	r3, [r4, #0]
 80005ea:	f105 030f 	add.w	r3, r5, #15
 80005ee:	2231      	movs	r2, #49	; 0x31
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f009 ffb6 	bl	800a564 <memset>
  uint8_t f[64] = "Good night";
 80005f8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80005fc:	f5a3 74c2 	sub.w	r4, r3, #388	; 0x184
 8000600:	4a4a      	ldr	r2, [pc, #296]	; (800072c <main+0x228>)
 8000602:	4623      	mov	r3, r4
 8000604:	ca07      	ldmia	r2, {r0, r1, r2}
 8000606:	c303      	stmia	r3!, {r0, r1}
 8000608:	801a      	strh	r2, [r3, #0]
 800060a:	3302      	adds	r3, #2
 800060c:	0c12      	lsrs	r2, r2, #16
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	f104 030b 	add.w	r3, r4, #11
 8000614:	2235      	movs	r2, #53	; 0x35
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f009 ffa3 	bl	800a564 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  i = strcmp(a, receive_data);
 800061e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000622:	4943      	ldr	r1, [pc, #268]	; (8000730 <main+0x22c>)
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fde1 	bl	80001ec <strcmp>
 800062a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  if (i == 0){
 800062e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000632:	2b00      	cmp	r3, #0
 8000634:	d107      	bne.n	8000646 <main+0x142>
		  BSP_LCD_DisplayStringAtLine(3, (uint8_t*)"Do you want to");
 8000636:	493f      	ldr	r1, [pc, #252]	; (8000734 <main+0x230>)
 8000638:	2003      	movs	r0, #3
 800063a:	f000 ffb7 	bl	80015ac <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(4, (uint8_t*)" turn on light");
 800063e:	493e      	ldr	r1, [pc, #248]	; (8000738 <main+0x234>)
 8000640:	2004      	movs	r0, #4
 8000642:	f000 ffb3 	bl	80015ac <BSP_LCD_DisplayStringAtLine>
	  }

	  i = strcmp(b, receive_data);
 8000646:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800064a:	4939      	ldr	r1, [pc, #228]	; (8000730 <main+0x22c>)
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fdcd 	bl	80001ec <strcmp>
 8000652:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  if (i == 0) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 1);}
 8000656:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800065a:	2b00      	cmp	r3, #0
 800065c:	d105      	bne.n	800066a <main+0x166>
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000664:	4835      	ldr	r0, [pc, #212]	; (800073c <main+0x238>)
 8000666:	f002 fb29 	bl	8002cbc <HAL_GPIO_WritePin>

	  i = strcmp(c, receive_data);
 800066a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800066e:	4930      	ldr	r1, [pc, #192]	; (8000730 <main+0x22c>)
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fdbb 	bl	80001ec <strcmp>
 8000676:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  if (i == 0) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);}
 800067a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800067e:	2b00      	cmp	r3, #0
 8000680:	d105      	bne.n	800068e <main+0x18a>
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000688:	482c      	ldr	r0, [pc, #176]	; (800073c <main+0x238>)
 800068a:	f002 fb17 	bl	8002cbc <HAL_GPIO_WritePin>

	  i = strcmp(d, receive_data);
 800068e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000692:	4927      	ldr	r1, [pc, #156]	; (8000730 <main+0x22c>)
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fda9 	bl	80001ec <strcmp>
 800069a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  if (i == 0) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);}
 800069e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d105      	bne.n	80006b2 <main+0x1ae>
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0x238>)
 80006ae:	f002 fb05 	bl	8002cbc <HAL_GPIO_WritePin>

	  i = strcmp(e, receive_data);
 80006b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006b6:	491e      	ldr	r1, [pc, #120]	; (8000730 <main+0x22c>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fd97 	bl	80001ec <strcmp>
 80006be:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  if (i == 0) {HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);}
 80006c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d105      	bne.n	80006d6 <main+0x1d2>
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d0:	481a      	ldr	r0, [pc, #104]	; (800073c <main+0x238>)
 80006d2:	f002 faf3 	bl	8002cbc <HAL_GPIO_WritePin>

	  i = strcmp(f, receive_data);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4915      	ldr	r1, [pc, #84]	; (8000730 <main+0x22c>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fd86 	bl	80001ec <strcmp>
 80006e0:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  if (i == 0) {
 80006e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d198      	bne.n	800061e <main+0x11a>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <main+0x238>)
 80006f4:	f002 fae2 	bl	8002cbc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fe:	480f      	ldr	r0, [pc, #60]	; (800073c <main+0x238>)
 8000700:	f002 fadc 	bl	8002cbc <HAL_GPIO_WritePin>
	  i = strcmp(a, receive_data);
 8000704:	e78b      	b.n	800061e <main+0x11a>
 8000706:	bf00      	nop
 8000708:	ff0000ff 	.word	0xff0000ff
 800070c:	0800a58c 	.word	0x0800a58c
 8000710:	0800a59c 	.word	0x0800a59c
 8000714:	0800a5ac 	.word	0x0800a5ac
 8000718:	0800a5d4 	.word	0x0800a5d4
 800071c:	0800a614 	.word	0x0800a614
 8000720:	0800a654 	.word	0x0800a654
 8000724:	0800a694 	.word	0x0800a694
 8000728:	0800a6d4 	.word	0x0800a6d4
 800072c:	0800a714 	.word	0x0800a714
 8000730:	20000160 	.word	0x20000160
 8000734:	0800a5b4 	.word	0x0800a5b4
 8000738:	0800a5c4 	.word	0x0800a5c4
 800073c:	40021800 	.word	0x40021800

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	; 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f009 ff08 	bl	800a564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a27      	ldr	r2, [pc, #156]	; (800080c <SystemClock_Config+0xcc>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b25      	ldr	r3, [pc, #148]	; (800080c <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <SystemClock_Config+0xd0>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079c:	2301      	movs	r3, #1
 800079e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007be:	2307      	movs	r3, #7
 80007c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 ffe8 	bl	800479c <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007d2:	f000 f871 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2105      	movs	r1, #5
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 fa49 	bl	8004c8c <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000800:	f000 f85a 	bl	80008b8 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	; 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a1f      	ldr	r2, [pc, #124]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_GPIO_Init+0x9c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_GPIO_Init+0x9c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <MX_GPIO_Init+0x9c>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LEDR3_Pin|LEDR4_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000886:	f002 fa19 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDR3_Pin LEDR4_Pin */
  GPIO_InitStruct.Pin = LEDR3_Pin|LEDR4_Pin;
 800088a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2302      	movs	r3, #2
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_GPIO_Init+0xa0>)
 80008a4:	f002 f85e 	bl	8002964 <HAL_GPIO_Init>

}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40021800 	.word	0x40021800

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f001 fa56 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <OTG_HS_IRQHandler+0x10>)
 800096e:	f002 fde8 	bl	8003542 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200018d8 	.word	0x200018d8

0800097c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009a6:	490e      	ldr	r1, [pc, #56]	; (80009e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009bc:	4c0b      	ldr	r4, [pc, #44]	; (80009ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ca:	f7ff ffd7 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f009 fd97 	bl	800a500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d2:	f7ff fd97 	bl	8000504 <main>
  bx  lr    
 80009d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 80009e4:	0800c27c 	.word	0x0800c27c
  ldr r2, =_sbss
 80009e8:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 80009ec:	20002004 	.word	0x20002004

080009f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC_IRQHandler>

080009f2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80009f6:	f000 fa5d 	bl	8000eb4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80009fa:	20ca      	movs	r0, #202	; 0xca
 80009fc:	f000 f95d 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000a00:	20c3      	movs	r0, #195	; 0xc3
 8000a02:	f000 f967 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000a06:	2008      	movs	r0, #8
 8000a08:	f000 f964 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000a0c:	2050      	movs	r0, #80	; 0x50
 8000a0e:	f000 f961 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000a12:	20cf      	movs	r0, #207	; 0xcf
 8000a14:	f000 f951 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f000 f95b 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000a1e:	20c1      	movs	r0, #193	; 0xc1
 8000a20:	f000 f958 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000a24:	2030      	movs	r0, #48	; 0x30
 8000a26:	f000 f955 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000a2a:	20ed      	movs	r0, #237	; 0xed
 8000a2c:	f000 f945 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000a30:	2064      	movs	r0, #100	; 0x64
 8000a32:	f000 f94f 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 f94c 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000a3c:	2012      	movs	r0, #18
 8000a3e:	f000 f949 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000a42:	2081      	movs	r0, #129	; 0x81
 8000a44:	f000 f946 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000a48:	20e8      	movs	r0, #232	; 0xe8
 8000a4a:	f000 f936 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000a4e:	2085      	movs	r0, #133	; 0x85
 8000a50:	f000 f940 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 f93d 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000a5a:	2078      	movs	r0, #120	; 0x78
 8000a5c:	f000 f93a 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000a60:	20cb      	movs	r0, #203	; 0xcb
 8000a62:	f000 f92a 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000a66:	2039      	movs	r0, #57	; 0x39
 8000a68:	f000 f934 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000a6c:	202c      	movs	r0, #44	; 0x2c
 8000a6e:	f000 f931 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f92e 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000a78:	2034      	movs	r0, #52	; 0x34
 8000a7a:	f000 f92b 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f000 f928 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000a84:	20f7      	movs	r0, #247	; 0xf7
 8000a86:	f000 f918 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000a8a:	2020      	movs	r0, #32
 8000a8c:	f000 f922 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000a90:	20ea      	movs	r0, #234	; 0xea
 8000a92:	f000 f912 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f91c 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f919 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000aa2:	20b1      	movs	r0, #177	; 0xb1
 8000aa4:	f000 f909 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 f913 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000aae:	201b      	movs	r0, #27
 8000ab0:	f000 f910 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000ab4:	20b6      	movs	r0, #182	; 0xb6
 8000ab6:	f000 f900 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000aba:	200a      	movs	r0, #10
 8000abc:	f000 f90a 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000ac0:	20a2      	movs	r0, #162	; 0xa2
 8000ac2:	f000 f907 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000ac6:	20c0      	movs	r0, #192	; 0xc0
 8000ac8:	f000 f8f7 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000acc:	2010      	movs	r0, #16
 8000ace:	f000 f901 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000ad2:	20c1      	movs	r0, #193	; 0xc1
 8000ad4:	f000 f8f1 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000ad8:	2010      	movs	r0, #16
 8000ada:	f000 f8fb 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000ade:	20c5      	movs	r0, #197	; 0xc5
 8000ae0:	f000 f8eb 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000ae4:	2045      	movs	r0, #69	; 0x45
 8000ae6:	f000 f8f5 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000aea:	2015      	movs	r0, #21
 8000aec:	f000 f8f2 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000af0:	20c7      	movs	r0, #199	; 0xc7
 8000af2:	f000 f8e2 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000af6:	2090      	movs	r0, #144	; 0x90
 8000af8:	f000 f8ec 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000afc:	2036      	movs	r0, #54	; 0x36
 8000afe:	f000 f8dc 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000b02:	20c8      	movs	r0, #200	; 0xc8
 8000b04:	f000 f8e6 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000b08:	20f2      	movs	r0, #242	; 0xf2
 8000b0a:	f000 f8d6 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f8e0 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000b14:	20b0      	movs	r0, #176	; 0xb0
 8000b16:	f000 f8d0 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000b1a:	20c2      	movs	r0, #194	; 0xc2
 8000b1c:	f000 f8da 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000b20:	20b6      	movs	r0, #182	; 0xb6
 8000b22:	f000 f8ca 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000b26:	200a      	movs	r0, #10
 8000b28:	f000 f8d4 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000b2c:	20a7      	movs	r0, #167	; 0xa7
 8000b2e:	f000 f8d1 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000b32:	2027      	movs	r0, #39	; 0x27
 8000b34:	f000 f8ce 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f000 f8cb 	bl	8000cd4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000b3e:	202a      	movs	r0, #42	; 0x2a
 8000b40:	f000 f8bb 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f8c5 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 f8c2 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 f8bf 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000b56:	20ef      	movs	r0, #239	; 0xef
 8000b58:	f000 f8bc 	bl	8000cd4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000b5c:	202b      	movs	r0, #43	; 0x2b
 8000b5e:	f000 f8ac 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f8b6 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 f8b3 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 f8b0 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000b74:	203f      	movs	r0, #63	; 0x3f
 8000b76:	f000 f8ad 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000b7a:	20f6      	movs	r0, #246	; 0xf6
 8000b7c:	f000 f89d 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f000 f8a7 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 f8a4 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000b8c:	2006      	movs	r0, #6
 8000b8e:	f000 f8a1 	bl	8000cd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000b92:	202c      	movs	r0, #44	; 0x2c
 8000b94:	f000 f891 	bl	8000cba <ili9341_WriteReg>
  LCD_Delay(200);
 8000b98:	20c8      	movs	r0, #200	; 0xc8
 8000b9a:	f000 fa79 	bl	8001090 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000b9e:	2026      	movs	r0, #38	; 0x26
 8000ba0:	f000 f88b 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f000 f895 	bl	8000cd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000baa:	20e0      	movs	r0, #224	; 0xe0
 8000bac:	f000 f885 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000bb0:	200f      	movs	r0, #15
 8000bb2:	f000 f88f 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000bb6:	2029      	movs	r0, #41	; 0x29
 8000bb8:	f000 f88c 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000bbc:	2024      	movs	r0, #36	; 0x24
 8000bbe:	f000 f889 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000bc2:	200c      	movs	r0, #12
 8000bc4:	f000 f886 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000bc8:	200e      	movs	r0, #14
 8000bca:	f000 f883 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000bce:	2009      	movs	r0, #9
 8000bd0:	f000 f880 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000bd4:	204e      	movs	r0, #78	; 0x4e
 8000bd6:	f000 f87d 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000bda:	2078      	movs	r0, #120	; 0x78
 8000bdc:	f000 f87a 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000be0:	203c      	movs	r0, #60	; 0x3c
 8000be2:	f000 f877 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000be6:	2009      	movs	r0, #9
 8000be8:	f000 f874 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000bec:	2013      	movs	r0, #19
 8000bee:	f000 f871 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000bf2:	2005      	movs	r0, #5
 8000bf4:	f000 f86e 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f000 f86b 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000bfe:	2011      	movs	r0, #17
 8000c00:	f000 f868 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 f865 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000c0a:	20e1      	movs	r0, #225	; 0xe1
 8000c0c:	f000 f855 	bl	8000cba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 f85f 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000c16:	2016      	movs	r0, #22
 8000c18:	f000 f85c 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000c1c:	201b      	movs	r0, #27
 8000c1e:	f000 f859 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000c22:	2004      	movs	r0, #4
 8000c24:	f000 f856 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000c28:	2011      	movs	r0, #17
 8000c2a:	f000 f853 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f000 f850 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000c34:	2031      	movs	r0, #49	; 0x31
 8000c36:	f000 f84d 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000c3a:	2033      	movs	r0, #51	; 0x33
 8000c3c:	f000 f84a 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000c40:	2042      	movs	r0, #66	; 0x42
 8000c42:	f000 f847 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000c46:	2005      	movs	r0, #5
 8000c48:	f000 f844 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000c4c:	200c      	movs	r0, #12
 8000c4e:	f000 f841 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000c52:	200a      	movs	r0, #10
 8000c54:	f000 f83e 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000c58:	2028      	movs	r0, #40	; 0x28
 8000c5a:	f000 f83b 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000c5e:	202f      	movs	r0, #47	; 0x2f
 8000c60:	f000 f838 	bl	8000cd4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000c64:	200f      	movs	r0, #15
 8000c66:	f000 f835 	bl	8000cd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000c6a:	2011      	movs	r0, #17
 8000c6c:	f000 f825 	bl	8000cba <ili9341_WriteReg>
  LCD_Delay(200);
 8000c70:	20c8      	movs	r0, #200	; 0xc8
 8000c72:	f000 fa0d 	bl	8001090 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000c76:	2029      	movs	r0, #41	; 0x29
 8000c78:	f000 f81f 	bl	8000cba <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000c7c:	202c      	movs	r0, #44	; 0x2c
 8000c7e:	f000 f81c 	bl	8000cba <ili9341_WriteReg>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000c8a:	f000 f913 	bl	8000eb4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000c8e:	2103      	movs	r1, #3
 8000c90:	20d3      	movs	r0, #211	; 0xd3
 8000c92:	f000 f82c 	bl	8000cee <ili9341_ReadData>
 8000c96:	4603      	mov	r3, r0
 8000c98:	b29b      	uxth	r3, r3
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000ca2:	2029      	movs	r0, #41	; 0x29
 8000ca4:	f000 f809 	bl	8000cba <ili9341_WriteReg>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000cb0:	2028      	movs	r0, #40	; 0x28
 8000cb2:	f000 f802 	bl	8000cba <ili9341_WriteReg>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f98e 	bl	8000fe8 <LCD_IO_WriteReg>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f95f 	bl	8000fa4 <LCD_IO_WriteData>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	460a      	mov	r2, r1
 8000cf8:	80fb      	strh	r3, [r7, #6]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000cfe:	797a      	ldrb	r2, [r7, #5]
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f991 	bl	800102c <LCD_IO_ReadData>
 8000d0a:	4603      	mov	r3, r0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000d18:	23f0      	movs	r3, #240	; 0xf0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000d28:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000d3c:	4819      	ldr	r0, [pc, #100]	; (8000da4 <SPIx_Init+0x6c>)
 8000d3e:	f005 f8ac 	bl	8005e9a <HAL_SPI_GetState>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d12b      	bne.n	8000da0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <SPIx_Init+0x6c>)
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <SPIx_Init+0x70>)
 8000d4c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <SPIx_Init+0x6c>)
 8000d50:	2218      	movs	r2, #24
 8000d52:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <SPIx_Init+0x6c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <SPIx_Init+0x6c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <SPIx_Init+0x6c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <SPIx_Init+0x6c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <SPIx_Init+0x6c>)
 8000d6e:	2207      	movs	r2, #7
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <SPIx_Init+0x6c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <SPIx_Init+0x6c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <SPIx_Init+0x6c>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <SPIx_Init+0x6c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SPIx_Init+0x6c>)
 8000d8e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d92:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <SPIx_Init+0x6c>)
 8000d96:	f000 f853 	bl	8000e40 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000d9a:	4802      	ldr	r0, [pc, #8]	; (8000da4 <SPIx_Init+0x6c>)
 8000d9c:	f004 fbc9 	bl	8005532 <HAL_SPI_Init>
  } 
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200001a0 	.word	0x200001a0
 8000da8:	40015000 	.word	0x40015000

08000dac <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <SPIx_Read+0x38>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f107 0108 	add.w	r1, r7, #8
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <SPIx_Read+0x3c>)
 8000dc8:	f004 fdb4 	bl	8005934 <HAL_SPI_Receive>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000dd6:	f000 f827 	bl	8000e28 <SPIx_Error>
  }
  
  return readvalue;
 8000dda:	68bb      	ldr	r3, [r7, #8]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000003c 	.word	0x2000003c
 8000de8:	200001a0 	.word	0x200001a0

08000dec <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <SPIx_Write+0x34>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	1db9      	adds	r1, r7, #6
 8000e00:	2201      	movs	r2, #1
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <SPIx_Write+0x38>)
 8000e04:	f004 fc5a 	bl	80056bc <HAL_SPI_Transmit>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000e12:	f000 f809 	bl	8000e28 <SPIx_Error>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000003c 	.word	0x2000003c
 8000e24:	200001a0 	.word	0x200001a0

08000e28 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <SPIx_Error+0x14>)
 8000e2e:	f004 fc09 	bl	8005644 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000e32:	f7ff ff81 	bl	8000d38 <SPIx_Init>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001a0 	.word	0x200001a0

08000e40 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <SPIx_MspInit+0x6c>)
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e50:	4a16      	ldr	r2, [pc, #88]	; (8000eac <SPIx_MspInit+0x6c>)
 8000e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e56:	6453      	str	r3, [r2, #68]	; 0x44
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <SPIx_MspInit+0x6c>)
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <SPIx_MspInit+0x6c>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <SPIx_MspInit+0x6c>)
 8000e6e:	f043 0320 	orr.w	r3, r3, #32
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <SPIx_MspInit+0x6c>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0320 	and.w	r3, r3, #32
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000e80:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000e92:	2305      	movs	r3, #5
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <SPIx_MspInit+0x70>)
 8000e9e:	f001 fd61 	bl	8002964 <HAL_GPIO_Init>
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40021400 	.word	0x40021400

08000eb4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <LCD_IO_Init+0xe0>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d164      	bne.n	8000f8c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <LCD_IO_Init+0xe0>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <LCD_IO_Init+0xe4>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <LCD_IO_Init+0xe4>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <LCD_IO_Init+0xe4>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4619      	mov	r1, r3
 8000efc:	4827      	ldr	r0, [pc, #156]	; (8000f9c <LCD_IO_Init+0xe8>)
 8000efe:	f001 fd31 	bl	8002964 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <LCD_IO_Init+0xe4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <LCD_IO_Init+0xe4>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <LCD_IO_Init+0xe4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	4819      	ldr	r0, [pc, #100]	; (8000f9c <LCD_IO_Init+0xe8>)
 8000f38:	f001 fd14 	bl	8002964 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <LCD_IO_Init+0xe4>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <LCD_IO_Init+0xe4>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <LCD_IO_Init+0xe4>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LCD_IO_Init+0xec>)
 8000f70:	f001 fcf8 	bl	8002964 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000f74:	2200      	movs	r2, #0
 8000f76:	2104      	movs	r1, #4
 8000f78:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <LCD_IO_Init+0xec>)
 8000f7a:	f001 fe9f 	bl	8002cbc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2104      	movs	r1, #4
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <LCD_IO_Init+0xec>)
 8000f84:	f001 fe9a 	bl	8002cbc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000f88:	f7ff fed6 	bl	8000d38 <SPIx_Init>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200001f8 	.word	0x200001f8
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020c00 	.word	0x40020c00
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <LCD_IO_WriteData+0x3c>)
 8000fb6:	f001 fe81 	bl	8002cbc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <LCD_IO_WriteData+0x40>)
 8000fc0:	f001 fe7c 	bl	8002cbc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff10 	bl	8000dec <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <LCD_IO_WriteData+0x40>)
 8000fd2:	f001 fe73 	bl	8002cbc <HAL_GPIO_WritePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <LCD_IO_WriteReg+0x3c>)
 8000ffa:	f001 fe5f 	bl	8002cbc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000ffe:	2200      	movs	r2, #0
 8001000:	2104      	movs	r1, #4
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <LCD_IO_WriteReg+0x40>)
 8001004:	f001 fe5a 	bl	8002cbc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	b29b      	uxth	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff feed 	bl	8000dec <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001012:	2201      	movs	r2, #1
 8001014:	2104      	movs	r1, #4
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <LCD_IO_WriteReg+0x40>)
 8001018:	f001 fe50 	bl	8002cbc <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40020800 	.word	0x40020800

0800102c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	80fb      	strh	r3, [r7, #6]
 8001038:	4613      	mov	r3, r2
 800103a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001040:	2200      	movs	r2, #0
 8001042:	2104      	movs	r1, #4
 8001044:	4810      	ldr	r0, [pc, #64]	; (8001088 <LCD_IO_ReadData+0x5c>)
 8001046:	f001 fe39 	bl	8002cbc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <LCD_IO_ReadData+0x60>)
 8001052:	f001 fe33 	bl	8002cbc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fec7 	bl	8000dec <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fea3 	bl	8000dac <SPIx_Read>
 8001066:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <LCD_IO_ReadData+0x60>)
 8001070:	f001 fe24 	bl	8002cbc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001074:	2201      	movs	r2, #1
 8001076:	2104      	movs	r1, #4
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <LCD_IO_ReadData+0x5c>)
 800107a:	f001 fe1f 	bl	8002cbc <HAL_GPIO_WritePin>
  
  return readvalue;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00

08001090 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fed9 	bl	8001e50 <HAL_Delay>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010ae:	4a2e      	ldr	r2, [pc, #184]	; (8001168 <BSP_LCD_Init+0xc0>)
 80010b0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010b4:	2209      	movs	r2, #9
 80010b6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010c0:	221d      	movs	r2, #29
 80010c2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010c6:	2203      	movs	r2, #3
 80010c8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010cc:	f240 120d 	movw	r2, #269	; 0x10d
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010d4:	f240 1243 	movw	r2, #323	; 0x143
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010dc:	f240 1217 	movw	r2, #279	; 0x117
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010e4:	f240 1247 	movw	r2, #327	; 0x147
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <BSP_LCD_Init+0xbc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <BSP_LCD_Init+0xc4>)
 8001104:	2208      	movs	r2, #8
 8001106:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <BSP_LCD_Init+0xc4>)
 800110a:	22c0      	movs	r2, #192	; 0xc0
 800110c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <BSP_LCD_Init+0xc4>)
 8001110:	2204      	movs	r2, #4
 8001112:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <BSP_LCD_Init+0xc4>)
 8001116:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800111c:	4813      	ldr	r0, [pc, #76]	; (800116c <BSP_LCD_Init+0xc4>)
 800111e:	f003 ffad 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <BSP_LCD_Init+0xbc>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <BSP_LCD_Init+0xbc>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <BSP_LCD_Init+0xbc>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <BSP_LCD_Init+0xbc>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800113a:	f000 fa5f 	bl	80015fc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <BSP_LCD_Init+0xbc>)
 8001140:	f001 fdd6 	bl	8002cf0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <BSP_LCD_Init+0xc8>)
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <BSP_LCD_Init+0xcc>)
 8001148:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <BSP_LCD_Init+0xc8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001152:	f000 fc41 	bl	80019d8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <BSP_LCD_Init+0xd0>)
 8001158:	f000 f8ce 	bl	80012f8 <BSP_LCD_SetFont>

  return LCD_OK;
 800115c:	2300      	movs	r3, #0
}  
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001fc 	.word	0x200001fc
 8001168:	40016800 	.word	0x40016800
 800116c:	200002e4 	.word	0x200002e4
 8001170:	20000330 	.word	0x20000330
 8001174:	20000004 	.word	0x20000004
 8001178:	20000040 	.word	0x20000040

0800117c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <BSP_LCD_GetXSize+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001186:	4798      	blx	r3
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000330 	.word	0x20000330

08001194 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <BSP_LCD_GetYSize+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	4798      	blx	r3
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000330 	.word	0x20000330

080011ac <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b090      	sub	sp, #64	; 0x40
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80011bc:	f7ff ffde 	bl	800117c <BSP_LCD_GetXSize>
 80011c0:	4603      	mov	r3, r0
 80011c2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80011c8:	f7ff ffe4 	bl	8001194 <BSP_LCD_GetYSize>
 80011cc:	4603      	mov	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80011d8:	23ff      	movs	r3, #255	; 0xff
 80011da:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80011f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80011f8:	2307      	movs	r3, #7
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80011fc:	f7ff ffbe 	bl	800117c <BSP_LCD_GetXSize>
 8001200:	4603      	mov	r3, r0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001204:	f7ff ffc6 	bl	8001194 <BSP_LCD_GetYSize>
 8001208:	4603      	mov	r3, r0
 800120a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800120c:	88fa      	ldrh	r2, [r7, #6]
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4814      	ldr	r0, [pc, #80]	; (8001268 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001216:	f001 fe45 	bl	8002ea4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800121a:	88fa      	ldrh	r2, [r7, #6]
 800121c:	4913      	ldr	r1, [pc, #76]	; (800126c <BSP_LCD_LayerDefaultInit+0xc0>)
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	3304      	adds	r3, #4
 800122a:	f04f 32ff 	mov.w	r2, #4294967295
 800122e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001230:	88fa      	ldrh	r2, [r7, #6]
 8001232:	490e      	ldr	r1, [pc, #56]	; (800126c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	3308      	adds	r3, #8
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001242:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	4909      	ldr	r1, [pc, #36]	; (800126c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001256:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <BSP_LCD_LayerDefaultInit+0xbc>)
 800125a:	f001 fe61 	bl	8002f20 <HAL_LTDC_EnableDither>
}
 800125e:	bf00      	nop
 8001260:	3740      	adds	r7, #64	; 0x40
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200001fc 	.word	0x200001fc
 800126c:	20000318 	.word	0x20000318
 8001270:	20000040 	.word	0x20000040

08001274 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <BSP_LCD_SelectLayer+0x1c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000314 	.word	0x20000314

08001294 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <BSP_LCD_SetTextColor+0x28>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <BSP_LCD_SetTextColor+0x2c>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	20000314 	.word	0x20000314
 80012c0:	20000318 	.word	0x20000318

080012c4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <BSP_LCD_SetBackColor+0x2c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4908      	ldr	r1, [pc, #32]	; (80012f4 <BSP_LCD_SetBackColor+0x30>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3304      	adds	r3, #4
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	601a      	str	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000314 	.word	0x20000314
 80012f4:	20000318 	.word	0x20000318

080012f8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <BSP_LCD_SetFont+0x2c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4908      	ldr	r1, [pc, #32]	; (8001328 <BSP_LCD_SetFont+0x30>)
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	3308      	adds	r3, #8
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	601a      	str	r2, [r3, #0]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000314 	.word	0x20000314
 8001328:	20000318 	.word	0x20000318

0800132c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <BSP_LCD_GetFont+0x24>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <BSP_LCD_GetFont+0x28>)
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	3308      	adds	r3, #8
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000314 	.word	0x20000314
 8001354:	20000318 	.word	0x20000318

08001358 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	b085      	sub	sp, #20
 800135c:	af02      	add	r7, sp, #8
 800135e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <BSP_LCD_Clear+0x48>)
 8001362:	681c      	ldr	r4, [r3, #0]
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <BSP_LCD_Clear+0x48>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <BSP_LCD_Clear+0x4c>)
 800136a:	2134      	movs	r1, #52	; 0x34
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	4413      	add	r3, r2
 8001372:	335c      	adds	r3, #92	; 0x5c
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	461e      	mov	r6, r3
 8001378:	f7ff ff00 	bl	800117c <BSP_LCD_GetXSize>
 800137c:	4605      	mov	r5, r0
 800137e:	f7ff ff09 	bl	8001194 <BSP_LCD_GetYSize>
 8001382:	4602      	mov	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	2300      	movs	r3, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	462a      	mov	r2, r5
 8001390:	4631      	mov	r1, r6
 8001392:	4620      	mov	r0, r4
 8001394:	f000 fae8 	bl	8001968 <FillBuffer>
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	20000314 	.word	0x20000314
 80013a4:	200001fc 	.word	0x200001fc

080013a8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
 80013b2:	460b      	mov	r3, r1
 80013b4:	80bb      	strh	r3, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <BSP_LCD_DisplayChar+0x80>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	491b      	ldr	r1, [pc, #108]	; (800142c <BSP_LCD_DisplayChar+0x84>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3308      	adds	r3, #8
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <BSP_LCD_DisplayChar+0x80>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4c14      	ldr	r4, [pc, #80]	; (800142c <BSP_LCD_DisplayChar+0x84>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4423      	add	r3, r4
 80013e6:	3308      	adds	r3, #8
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ec:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <BSP_LCD_DisplayChar+0x80>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4c0d      	ldr	r4, [pc, #52]	; (800142c <BSP_LCD_DisplayChar+0x84>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4423      	add	r3, r4
 8001400:	3308      	adds	r3, #8
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	889b      	ldrh	r3, [r3, #4]
 8001406:	3307      	adds	r3, #7
 8001408:	2b00      	cmp	r3, #0
 800140a:	da00      	bge.n	800140e <BSP_LCD_DisplayChar+0x66>
 800140c:	3307      	adds	r3, #7
 800140e:	10db      	asrs	r3, r3, #3
 8001410:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001414:	18ca      	adds	r2, r1, r3
 8001416:	88b9      	ldrh	r1, [r7, #4]
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f9ea 	bl	80017f4 <DrawChar>
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	20000314 	.word	0x20000314
 800142c:	20000318 	.word	0x20000318

08001430 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	60ba      	str	r2, [r7, #8]
 8001438:	461a      	mov	r2, r3
 800143a:	4603      	mov	r3, r0
 800143c:	81fb      	strh	r3, [r7, #14]
 800143e:	460b      	mov	r3, r1
 8001440:	81bb      	strh	r3, [r7, #12]
 8001442:	4613      	mov	r3, r2
 8001444:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001446:	2301      	movs	r3, #1
 8001448:	83fb      	strh	r3, [r7, #30]
 800144a:	2300      	movs	r3, #0
 800144c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800145a:	e002      	b.n	8001462 <BSP_LCD_DisplayStringAt+0x32>
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	3301      	adds	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	617a      	str	r2, [r7, #20]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f6      	bne.n	800145c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800146e:	f7ff fe85 	bl	800117c <BSP_LCD_GetXSize>
 8001472:	4601      	mov	r1, r0
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	484b      	ldr	r0, [pc, #300]	; (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4403      	add	r3, r0
 8001484:	3308      	adds	r3, #8
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	889b      	ldrh	r3, [r3, #4]
 800148a:	fbb1 f3f3 	udiv	r3, r1, r3
 800148e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d01c      	beq.n	80014d0 <BSP_LCD_DisplayStringAt+0xa0>
 8001496:	2b03      	cmp	r3, #3
 8001498:	dc33      	bgt.n	8001502 <BSP_LCD_DisplayStringAt+0xd2>
 800149a:	2b01      	cmp	r3, #1
 800149c:	d002      	beq.n	80014a4 <BSP_LCD_DisplayStringAt+0x74>
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d019      	beq.n	80014d6 <BSP_LCD_DisplayStringAt+0xa6>
 80014a2:	e02e      	b.n	8001502 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad1      	subs	r1, r2, r3
 80014aa:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	483e      	ldr	r0, [pc, #248]	; (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4403      	add	r3, r0
 80014ba:	3308      	adds	r3, #8
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	889b      	ldrh	r3, [r3, #4]
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	085b      	lsrs	r3, r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	4413      	add	r3, r2
 80014cc:	83fb      	strh	r3, [r7, #30]
      break;
 80014ce:	e01b      	b.n	8001508 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80014d0:	89fb      	ldrh	r3, [r7, #14]
 80014d2:	83fb      	strh	r3, [r7, #30]
      break;
 80014d4:	e018      	b.n	8001508 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b299      	uxth	r1, r3
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4831      	ldr	r0, [pc, #196]	; (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4403      	add	r3, r0
 80014ee:	3308      	adds	r3, #8
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	889b      	ldrh	r3, [r3, #4]
 80014f4:	fb11 f303 	smulbb	r3, r1, r3
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	4413      	add	r3, r2
 80014fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001500:	e002      	b.n	8001508 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	83fb      	strh	r3, [r7, #30]
      break;
 8001506:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001508:	e01a      	b.n	8001540 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	89b9      	ldrh	r1, [r7, #12]
 8001510:	8bfb      	ldrh	r3, [r7, #30]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff48 	bl	80013a8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4922      	ldr	r1, [pc, #136]	; (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	3308      	adds	r3, #8
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	889a      	ldrh	r2, [r3, #4]
 800152e:	8bfb      	ldrh	r3, [r7, #30]
 8001530:	4413      	add	r3, r2
 8001532:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3301      	adds	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
    i++;
 800153a:	8bbb      	ldrh	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf14      	ite	ne
 8001548:	2301      	movne	r3, #1
 800154a:	2300      	moveq	r3, #0
 800154c:	b2dc      	uxtb	r4, r3
 800154e:	f7ff fe15 	bl	800117c <BSP_LCD_GetXSize>
 8001552:	8bb9      	ldrh	r1, [r7, #28]
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4d13      	ldr	r5, [pc, #76]	; (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	442b      	add	r3, r5
 8001564:	3308      	adds	r3, #8
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	889b      	ldrh	r3, [r3, #4]
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	1ac3      	subs	r3, r0, r3
 8001570:	b299      	uxth	r1, r3
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	480c      	ldr	r0, [pc, #48]	; (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4403      	add	r3, r0
 8001582:	3308      	adds	r3, #8
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	4299      	cmp	r1, r3
 800158a:	bf2c      	ite	cs
 800158c:	2301      	movcs	r3, #1
 800158e:	2300      	movcc	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4023      	ands	r3, r4
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1b7      	bne.n	800150a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bdb0      	pop	{r4, r5, r7, pc}
 80015a4:	20000314 	.word	0x20000314
 80015a8:	20000318 	.word	0x20000318

080015ac <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80015b8:	f7ff feb8 	bl	800132c <BSP_LCD_GetFont>
 80015bc:	4603      	mov	r3, r0
 80015be:	88db      	ldrh	r3, [r3, #6]
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	fb12 f303 	smulbb	r3, r2, r3
 80015c6:	b299      	uxth	r1, r3
 80015c8:	2303      	movs	r3, #3
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff ff2f 	bl	8001430 <BSP_LCD_DisplayStringAt>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <BSP_LCD_DisplayOn+0x1c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80015ea:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <BSP_LCD_DisplayOn+0x1c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4798      	blx	r3
  }
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000330 	.word	0x20000330

080015fc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	4b61      	ldr	r3, [pc, #388]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a60      	ldr	r2, [pc, #384]	; (800178c <BSP_LCD_MspInit+0x190>)
 800160c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b5e      	ldr	r3, [pc, #376]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	4b5a      	ldr	r3, [pc, #360]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a59      	ldr	r2, [pc, #356]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001628:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b57      	ldr	r3, [pc, #348]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	4b53      	ldr	r3, [pc, #332]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a52      	ldr	r2, [pc, #328]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b50      	ldr	r3, [pc, #320]	; (800178c <BSP_LCD_MspInit+0x190>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	4b4c      	ldr	r3, [pc, #304]	; (800178c <BSP_LCD_MspInit+0x190>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a4b      	ldr	r2, [pc, #300]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b45      	ldr	r3, [pc, #276]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a44      	ldr	r2, [pc, #272]	; (800178c <BSP_LCD_MspInit+0x190>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b42      	ldr	r3, [pc, #264]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b3e      	ldr	r3, [pc, #248]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a3d      	ldr	r2, [pc, #244]	; (800178c <BSP_LCD_MspInit+0x190>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <BSP_LCD_MspInit+0x190>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <BSP_LCD_MspInit+0x190>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a36      	ldr	r2, [pc, #216]	; (800178c <BSP_LCD_MspInit+0x190>)
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <BSP_LCD_MspInit+0x190>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b30      	ldr	r3, [pc, #192]	; (800178c <BSP_LCD_MspInit+0x190>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a2f      	ldr	r2, [pc, #188]	; (800178c <BSP_LCD_MspInit+0x190>)
 80016d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <BSP_LCD_MspInit+0x190>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80016e2:	f641 0358 	movw	r3, #6232	; 0x1858
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80016f0:	2302      	movs	r3, #2
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80016f4:	230e      	movs	r3, #14
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4824      	ldr	r0, [pc, #144]	; (8001790 <BSP_LCD_MspInit+0x194>)
 8001700:	f001 f930 	bl	8002964 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001704:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	4820      	ldr	r0, [pc, #128]	; (8001794 <BSP_LCD_MspInit+0x198>)
 8001712:	f001 f927 	bl	8002964 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001716:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	481d      	ldr	r0, [pc, #116]	; (8001798 <BSP_LCD_MspInit+0x19c>)
 8001724:	f001 f91e 	bl	8002964 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001728:	2348      	movs	r3, #72	; 0x48
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	481a      	ldr	r0, [pc, #104]	; (800179c <BSP_LCD_MspInit+0x1a0>)
 8001734:	f001 f916 	bl	8002964 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4816      	ldr	r0, [pc, #88]	; (80017a0 <BSP_LCD_MspInit+0x1a4>)
 8001746:	f001 f90d 	bl	8002964 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800174a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4813      	ldr	r0, [pc, #76]	; (80017a4 <BSP_LCD_MspInit+0x1a8>)
 8001758:	f001 f904 	bl	8002964 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800175c:	2303      	movs	r3, #3
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001760:	2309      	movs	r3, #9
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	480a      	ldr	r0, [pc, #40]	; (8001794 <BSP_LCD_MspInit+0x198>)
 800176c:	f001 f8fa 	bl	8002964 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	4619      	mov	r1, r3
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <BSP_LCD_MspInit+0x1a8>)
 800177e:	f001 f8f1 	bl	8002964 <HAL_GPIO_Init>
}
 8001782:	bf00      	nop
 8001784:	3738      	adds	r7, #56	; 0x38
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	40020400 	.word	0x40020400
 8001798:	40020800 	.word	0x40020800
 800179c:	40020c00 	.word	0x40020c00
 80017a0:	40021400 	.word	0x40021400
 80017a4:	40021800 	.word	0x40021800

080017a8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	603a      	str	r2, [r7, #0]
 80017b2:	80fb      	strh	r3, [r7, #6]
 80017b4:	460b      	mov	r3, r1
 80017b6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <BSP_LCD_DrawPixel+0x44>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <BSP_LCD_DrawPixel+0x48>)
 80017be:	2134      	movs	r1, #52	; 0x34
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	335c      	adds	r3, #92	; 0x5c
 80017c8:	681c      	ldr	r4, [r3, #0]
 80017ca:	88bd      	ldrh	r5, [r7, #4]
 80017cc:	f7ff fcd6 	bl	800117c <BSP_LCD_GetXSize>
 80017d0:	4603      	mov	r3, r0
 80017d2:	fb03 f205 	mul.w	r2, r3, r5
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4423      	add	r3, r4
 80017de:	461a      	mov	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bdb0      	pop	{r4, r5, r7, pc}
 80017ec:	20000314 	.word	0x20000314
 80017f0:	200001fc 	.word	0x200001fc

080017f4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	603a      	str	r2, [r7, #0]
 80017fe:	80fb      	strh	r3, [r7, #6]
 8001800:	460b      	mov	r3, r1
 8001802:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <DrawChar+0x16c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4953      	ldr	r1, [pc, #332]	; (8001964 <DrawChar+0x170>)
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	3308      	adds	r3, #8
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	88db      	ldrh	r3, [r3, #6]
 8001826:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001828:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <DrawChar+0x16c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	494d      	ldr	r1, [pc, #308]	; (8001964 <DrawChar+0x170>)
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	3308      	adds	r3, #8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	889b      	ldrh	r3, [r3, #4]
 800183e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8001840:	8a3b      	ldrh	r3, [r7, #16]
 8001842:	3307      	adds	r3, #7
 8001844:	2b00      	cmp	r3, #0
 8001846:	da00      	bge.n	800184a <DrawChar+0x56>
 8001848:	3307      	adds	r3, #7
 800184a:	10db      	asrs	r3, r3, #3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	b2da      	uxtb	r2, r3
 8001852:	8a3b      	ldrh	r3, [r7, #16]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e076      	b.n	800194e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001860:	8a3b      	ldrh	r3, [r7, #16]
 8001862:	3307      	adds	r3, #7
 8001864:	2b00      	cmp	r3, #0
 8001866:	da00      	bge.n	800186a <DrawChar+0x76>
 8001868:	3307      	adds	r3, #7
 800186a:	10db      	asrs	r3, r3, #3
 800186c:	461a      	mov	r2, r3
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	4413      	add	r3, r2
 8001878:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800187a:	8a3b      	ldrh	r3, [r7, #16]
 800187c:	3307      	adds	r3, #7
 800187e:	2b00      	cmp	r3, #0
 8001880:	da00      	bge.n	8001884 <DrawChar+0x90>
 8001882:	3307      	adds	r3, #7
 8001884:	10db      	asrs	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d002      	beq.n	8001890 <DrawChar+0x9c>
 800188a:	2b02      	cmp	r3, #2
 800188c:	d004      	beq.n	8001898 <DrawChar+0xa4>
 800188e:	e00c      	b.n	80018aa <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	617b      	str	r3, [r7, #20]
      break;
 8001896:	e016      	b.n	80018c6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	3201      	adds	r2, #1
 80018a2:	7812      	ldrb	r2, [r2, #0]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
      break;
 80018a8:	e00d      	b.n	80018c6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3301      	adds	r3, #1
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	4313      	orrs	r3, r2
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	3202      	adds	r2, #2
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
      break;
 80018c4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	e036      	b.n	800193a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80018cc:	8a3a      	ldrh	r2, [r7, #16]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	1ad2      	subs	r2, r2, r3
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	4413      	add	r3, r2
 80018d6:	3b01      	subs	r3, #1
 80018d8:	2201      	movs	r2, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d012      	beq.n	800190e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	4413      	add	r3, r2
 80018f0:	b298      	uxth	r0, r3
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <DrawChar+0x16c>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	491b      	ldr	r1, [pc, #108]	; (8001964 <DrawChar+0x170>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	88bb      	ldrh	r3, [r7, #4]
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff ff4e 	bl	80017a8 <BSP_LCD_DrawPixel>
 800190c:	e012      	b.n	8001934 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	b29a      	uxth	r2, r3
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	4413      	add	r3, r2
 8001916:	b298      	uxth	r0, r3
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <DrawChar+0x16c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4911      	ldr	r1, [pc, #68]	; (8001964 <DrawChar+0x170>)
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3304      	adds	r3, #4
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff ff3a 	bl	80017a8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	3301      	adds	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	8a3b      	ldrh	r3, [r7, #16]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3c4      	bcc.n	80018cc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	3301      	adds	r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	8a7b      	ldrh	r3, [r7, #18]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	429a      	cmp	r2, r3
 8001954:	d384      	bcc.n	8001860 <DrawChar+0x6c>
  }
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000314 	.word	0x20000314
 8001964:	20000318 	.word	0x20000318

08001968 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <FillBuffer+0x68>)
 8001978:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800197c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <FillBuffer+0x68>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <FillBuffer+0x68>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <FillBuffer+0x68>)
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <FillBuffer+0x6c>)
 800198e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001990:	480f      	ldr	r0, [pc, #60]	; (80019d0 <FillBuffer+0x68>)
 8001992:	f000 fd51 	bl	8002438 <HAL_DMA2D_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d115      	bne.n	80019c8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	480c      	ldr	r0, [pc, #48]	; (80019d0 <FillBuffer+0x68>)
 80019a0:	f000 feb2 	bl	8002708 <HAL_DMA2D_ConfigLayer>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10e      	bne.n	80019c8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69f9      	ldr	r1, [r7, #28]
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <FillBuffer+0x68>)
 80019b6:	f000 fd92 	bl	80024de <HAL_DMA2D_Start>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d103      	bne.n	80019c8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80019c0:	210a      	movs	r1, #10
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <FillBuffer+0x68>)
 80019c4:	f000 fdb6 	bl	8002534 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200002a4 	.word	0x200002a4
 80019d4:	4002b000 	.word	0x4002b000

080019d8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 80019de:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <BSP_SDRAM_Init+0xb0>)
 80019e0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <BSP_SDRAM_Init+0xb4>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <BSP_SDRAM_Init+0xb4>)
 80019ea:	2207      	movs	r2, #7
 80019ec:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80019ee:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <BSP_SDRAM_Init+0xb4>)
 80019f0:	2204      	movs	r2, #4
 80019f2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <BSP_SDRAM_Init+0xb4>)
 80019f6:	2207      	movs	r2, #7
 80019f8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <BSP_SDRAM_Init+0xb4>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <BSP_SDRAM_Init+0xb4>)
 8001a02:	2202      	movs	r2, #2
 8001a04:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <BSP_SDRAM_Init+0xb4>)
 8001a08:	2202      	movs	r2, #2
 8001a0a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a20:	2210      	movs	r2, #16
 8001a22:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a2c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a30:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a3e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a52:	f000 f87f 	bl	8001b54 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001a56:	490d      	ldr	r1, [pc, #52]	; (8001a8c <BSP_SDRAM_Init+0xb4>)
 8001a58:	480a      	ldr	r0, [pc, #40]	; (8001a84 <BSP_SDRAM_Init+0xac>)
 8001a5a:	f003 fccf 	bl	80053fc <HAL_SDRAM_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <BSP_SDRAM_Init+0xb8>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	e002      	b.n	8001a72 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <BSP_SDRAM_Init+0xb8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001a72:	f240 506a 	movw	r0, #1386	; 0x56a
 8001a76:	f000 f80d 	bl	8001a94 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <BSP_SDRAM_Init+0xb8>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000334 	.word	0x20000334
 8001a88:	a0000140 	.word	0xa0000140
 8001a8c:	20000368 	.word	0x20000368
 8001a90:	20000048 	.word	0x20000048

08001a94 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abc:	4923      	ldr	r1, [pc, #140]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001abe:	4824      	ldr	r0, [pc, #144]	; (8001b50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ac0:	f003 fcda 	bl	8005478 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f000 f9c3 	bl	8001e50 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae6:	4919      	ldr	r1, [pc, #100]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ae8:	4819      	ldr	r0, [pc, #100]	; (8001b50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001aea:	f003 fcc5 	bl	8005478 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001af0:	2203      	movs	r2, #3
 8001af2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001af6:	2208      	movs	r2, #8
 8001af8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001afc:	2204      	movs	r2, #4
 8001afe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b0a:	4910      	ldr	r1, [pc, #64]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b0c:	4810      	ldr	r0, [pc, #64]	; (8001b50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b0e:	f003 fcb3 	bl	8005478 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001b12:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001b16:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b20:	2208      	movs	r2, #8
 8001b22:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b2e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b34:	4905      	ldr	r1, [pc, #20]	; (8001b4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b38:	f003 fc9e 	bl	8005478 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4804      	ldr	r0, [pc, #16]	; (8001b50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b40:	f003 fccf 	bl	80054e2 <HAL_SDRAM_ProgramRefreshRate>
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000384 	.word	0x20000384
 8001b50:	20000334 	.word	0x20000334

08001b54 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b090      	sub	sp, #64	; 0x40
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80ec 	beq.w	8001d3e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6a:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	4a76      	ldr	r2, [pc, #472]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6393      	str	r3, [r2, #56]	; 0x38
 8001b76:	4b74      	ldr	r3, [pc, #464]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b80:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	4b70      	ldr	r3, [pc, #448]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a6f      	ldr	r2, [pc, #444]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	4b69      	ldr	r3, [pc, #420]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a68      	ldr	r2, [pc, #416]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	4b62      	ldr	r3, [pc, #392]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a61      	ldr	r2, [pc, #388]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b5f      	ldr	r3, [pc, #380]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a5a      	ldr	r2, [pc, #360]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a53      	ldr	r2, [pc, #332]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001bfc:	f043 0310 	orr.w	r3, r3, #16
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001c18:	f043 0320 	orr.w	r3, r3, #32
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a45      	ldr	r2, [pc, #276]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <BSP_SDRAM_MspInit+0x1f4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001c52:	230c      	movs	r3, #12
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001c56:	2360      	movs	r3, #96	; 0x60
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	483a      	ldr	r0, [pc, #232]	; (8001d4c <BSP_SDRAM_MspInit+0x1f8>)
 8001c62:	f000 fe7f 	bl	8002964 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001c66:	2301      	movs	r3, #1
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4837      	ldr	r0, [pc, #220]	; (8001d50 <BSP_SDRAM_MspInit+0x1fc>)
 8001c72:	f000 fe77 	bl	8002964 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001c76:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c80:	4619      	mov	r1, r3
 8001c82:	4834      	ldr	r0, [pc, #208]	; (8001d54 <BSP_SDRAM_MspInit+0x200>)
 8001c84:	f000 fe6e 	bl	8002964 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001c88:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	4830      	ldr	r0, [pc, #192]	; (8001d58 <BSP_SDRAM_MspInit+0x204>)
 8001c96:	f000 fe65 	bl	8002964 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001c9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	482d      	ldr	r0, [pc, #180]	; (8001d5c <BSP_SDRAM_MspInit+0x208>)
 8001ca8:	f000 fe5c 	bl	8002964 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001cac:	f248 1333 	movw	r3, #33075	; 0x8133
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4829      	ldr	r0, [pc, #164]	; (8001d60 <BSP_SDRAM_MspInit+0x20c>)
 8001cba:	f000 fe53 	bl	8002964 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001cbe:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001cd2:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001ce4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001cf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001d00:	2203      	movs	r2, #3
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001d12:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <BSP_SDRAM_MspInit+0x214>)
 8001d14:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1c:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001d22:	4810      	ldr	r0, [pc, #64]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001d24:	f000 fa78 	bl	8002218 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001d28:	480e      	ldr	r0, [pc, #56]	; (8001d64 <BSP_SDRAM_MspInit+0x210>)
 8001d2a:	f000 f9c7 	bl	80020bc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	210f      	movs	r1, #15
 8001d32:	2038      	movs	r0, #56	; 0x38
 8001d34:	f000 f98b 	bl	800204e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001d38:	2038      	movs	r0, #56	; 0x38
 8001d3a:	f000 f9a4 	bl	8002086 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001d3e:	bf00      	nop
 8001d40:	3740      	adds	r7, #64	; 0x40
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	20000394 	.word	0x20000394
 8001d68:	40026410 	.word	0x40026410

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f94f 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7fe fd90 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f967 	bl	80020a2 <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 f92f 	bl	800204e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000050 	.word	0x20000050
 8001e0c:	2000004c 	.word	0x2000004c

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000050 	.word	0x20000050
 8001e34:	200003f4 	.word	0x200003f4

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200003f4 	.word	0x200003f4

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000050 	.word	0x20000050

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4907      	ldr	r1, [pc, #28]	; (8001f34 <__NVIC_EnableIRQ+0x38>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002004:	d301      	bcc.n	800200a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002006:	2301      	movs	r3, #1
 8002008:	e00f      	b.n	800202a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <SysTick_Config+0x40>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002012:	210f      	movs	r1, #15
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f7ff ff8e 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <SysTick_Config+0x40>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <SysTick_Config+0x40>)
 8002024:	2207      	movs	r2, #7
 8002026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff29 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff3e 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ff8e 	bl	8001f8c <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff31 	bl	8001efc <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffa2 	bl	8001ff4 <SysTick_Config>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff feb6 	bl	8001e38 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e099      	b.n	800220c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f8:	e00f      	b.n	800211a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020fa:	f7ff fe9d 	bl	8001e38 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b05      	cmp	r3, #5
 8002106:	d908      	bls.n	800211a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e078      	b.n	800220c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1e8      	bne.n	80020fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_DMA_Init+0x158>)
 8002134:	4013      	ands	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	2b04      	cmp	r3, #4
 8002172:	d107      	bne.n	8002184 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4313      	orrs	r3, r2
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f023 0307 	bic.w	r3, r3, #7
 800219a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d117      	bne.n	80021de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00e      	beq.n	80021de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f8bd 	bl	8002340 <DMA_CheckFifoParam>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2240      	movs	r2, #64	; 0x40
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021da:	2301      	movs	r3, #1
 80021dc:	e016      	b.n	800220c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f874 	bl	80022d4 <DMA_CalcBaseAndBitshift>
 80021ec:	4603      	mov	r3, r0
 80021ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	223f      	movs	r2, #63	; 0x3f
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	f010803f 	.word	0xf010803f

08002218 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e050      	b.n	80022cc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d101      	bne.n	800223a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
 8002238:	e048      	b.n	80022cc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2221      	movs	r2, #33	; 0x21
 8002278:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f82a 	bl	80022d4 <DMA_CalcBaseAndBitshift>
 8002280:	4603      	mov	r3, r0
 8002282:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	223f      	movs	r2, #63	; 0x3f
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3b10      	subs	r3, #16
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <DMA_CalcBaseAndBitshift+0x64>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ee:	4a13      	ldr	r2, [pc, #76]	; (800233c <DMA_CalcBaseAndBitshift+0x68>)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d909      	bls.n	8002316 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	1d1a      	adds	r2, r3, #4
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	659a      	str	r2, [r3, #88]	; 0x58
 8002314:	e007      	b.n	8002326 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	aaaaaaab 	.word	0xaaaaaaab
 800233c:	0800c264 	.word	0x0800c264

08002340 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d11f      	bne.n	800239a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d856      	bhi.n	800240e <DMA_CheckFifoParam+0xce>
 8002360:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <DMA_CheckFifoParam+0x28>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	08002379 	.word	0x08002379
 800236c:	0800238b 	.word	0x0800238b
 8002370:	08002379 	.word	0x08002379
 8002374:	0800240f 	.word	0x0800240f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d046      	beq.n	8002412 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002388:	e043      	b.n	8002412 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002392:	d140      	bne.n	8002416 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e03d      	b.n	8002416 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a2:	d121      	bne.n	80023e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d837      	bhi.n	800241a <DMA_CheckFifoParam+0xda>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <DMA_CheckFifoParam+0x70>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023c7 	.word	0x080023c7
 80023b8:	080023c1 	.word	0x080023c1
 80023bc:	080023d9 	.word	0x080023d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      break;
 80023c4:	e030      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d025      	beq.n	800241e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d6:	e022      	b.n	800241e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023e0:	d11f      	bne.n	8002422 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023e6:	e01c      	b.n	8002422 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d903      	bls.n	80023f6 <DMA_CheckFifoParam+0xb6>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d003      	beq.n	80023fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023f4:	e018      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
      break;
 80023fa:	e015      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00e      	beq.n	8002426 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e00b      	b.n	8002426 <DMA_CheckFifoParam+0xe6>
      break;
 800240e:	bf00      	nop
 8002410:	e00a      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e008      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e006      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e004      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e002      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;   
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
    }
  } 
  
  return status; 
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop

08002438 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e03b      	b.n	80024c2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f833 	bl	80024ca <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	f023 0107 	bic.w	r1, r3, #7
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68d1      	ldr	r1, [r2, #12]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	430b      	orrs	r3, r1
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af02      	add	r7, sp, #8
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_DMA2D_Start+0x1c>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e018      	b.n	800252c <HAL_DMA2D_Start+0x4e>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f989 	bl	800282c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d056      	beq.n	80025fe <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002550:	f7ff fc72 	bl	8001e38 <HAL_GetTick>
 8002554:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002556:	e04b      	b.n	80025f0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002566:	2b00      	cmp	r3, #0
 8002568:	d023      	beq.n	80025b2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	f043 0202 	orr.w	r2, r3, #2
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2221      	movs	r2, #33	; 0x21
 800259c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2204      	movs	r2, #4
 80025a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0a5      	b.n	80026fe <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d01a      	beq.n	80025f0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ba:	f7ff fc3d 	bl	8001e38 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d302      	bcc.n	80025d0 <HAL_DMA2D_PollForTransfer+0x9c>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10f      	bne.n	80025f0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	f043 0220 	orr.w	r2, r3, #32
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2203      	movs	r2, #3
 80025e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e086      	b.n	80026fe <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0ac      	beq.n	8002558 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d061      	beq.n	80026e4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002620:	f7ff fc0a 	bl	8001e38 <HAL_GetTick>
 8002624:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002626:	e056      	b.n	80026d6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002636:	2b00      	cmp	r3, #0
 8002638:	d02e      	beq.n	8002698 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	f043 0204 	orr.w	r2, r3, #4
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	f043 0202 	orr.w	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2229      	movs	r2, #41	; 0x29
 8002682:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2204      	movs	r2, #4
 8002688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e032      	b.n	80026fe <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d01a      	beq.n	80026d6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026a0:	f7ff fbca 	bl	8001e38 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <HAL_DMA2D_PollForTransfer+0x182>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	f043 0220 	orr.w	r2, r3, #32
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2203      	movs	r2, #3
 80026c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e013      	b.n	80026fe <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0a1      	beq.n	8002628 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2212      	movs	r2, #18
 80026ea:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_DMA2D_ConfigLayer+0x20>
 8002724:	2302      	movs	r3, #2
 8002726:	e079      	b.n	800281c <HAL_DMA2D_ConfigLayer+0x114>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	3318      	adds	r3, #24
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002752:	4b35      	ldr	r3, [pc, #212]	; (8002828 <HAL_DMA2D_ConfigLayer+0x120>)
 8002754:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b0a      	cmp	r3, #10
 800275c:	d003      	beq.n	8002766 <HAL_DMA2D_ConfigLayer+0x5e>
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b09      	cmp	r3, #9
 8002764:	d107      	bne.n	8002776 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e005      	b.n	8002782 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d120      	bne.n	80027ca <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	ea02 0103 	and.w	r1, r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	430a      	orrs	r2, r1
 800279e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b0a      	cmp	r3, #10
 80027b0:	d003      	beq.n	80027ba <HAL_DMA2D_ConfigLayer+0xb2>
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b09      	cmp	r3, #9
 80027b8:	d127      	bne.n	800280a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
 80027c8:	e01f      	b.n	800280a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	ea02 0103 	and.w	r1, r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	430a      	orrs	r2, r1
 80027e0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b0a      	cmp	r3, #10
 80027f2:	d003      	beq.n	80027fc <HAL_DMA2D_ConfigLayer+0xf4>
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	d106      	bne.n	800280a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002808:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	ff03000f 	.word	0xff03000f

0800282c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800282c:	b480      	push	{r7}
 800282e:	b08b      	sub	sp, #44	; 0x2c
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	041a      	lsls	r2, r3, #16
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	431a      	orrs	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002864:	d174      	bne.n	8002950 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800286c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002874:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800287c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	431a      	orrs	r2, r3
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	4313      	orrs	r3, r2
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	e053      	b.n	8002946 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d106      	bne.n	80028b4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	e048      	b.n	8002946 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d111      	bne.n	80028e0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	0cdb      	lsrs	r3, r3, #19
 80028c0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	0a9b      	lsrs	r3, r3, #10
 80028c6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	08db      	lsrs	r3, r3, #3
 80028cc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	02db      	lsls	r3, r3, #11
 80028d6:	4313      	orrs	r3, r2
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e032      	b.n	8002946 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d117      	bne.n	8002918 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	0fdb      	lsrs	r3, r3, #31
 80028ec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	0cdb      	lsrs	r3, r3, #19
 80028f2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	0adb      	lsrs	r3, r3, #11
 80028f8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	029b      	lsls	r3, r3, #10
 8002908:	431a      	orrs	r2, r3
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	03db      	lsls	r3, r3, #15
 800290e:	4313      	orrs	r3, r2
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e016      	b.n	8002946 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	0f1b      	lsrs	r3, r3, #28
 800291c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	0d1b      	lsrs	r3, r3, #20
 8002922:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	0b1b      	lsrs	r3, r3, #12
 8002928:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	011a      	lsls	r2, r3, #4
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	431a      	orrs	r2, r3
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	031b      	lsls	r3, r3, #12
 800293e:	4313      	orrs	r3, r2
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800294e:	e003      	b.n	8002958 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	60da      	str	r2, [r3, #12]
}
 8002958:	bf00      	nop
 800295a:	372c      	adds	r7, #44	; 0x2c
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e177      	b.n	8002c70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	429a      	cmp	r2, r3
 800299a:	f040 8166 	bne.w	8002c6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d005      	beq.n	80029b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d130      	bne.n	8002a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	2203      	movs	r2, #3
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029ec:	2201      	movs	r2, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 0201 	and.w	r2, r3, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d017      	beq.n	8002a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d123      	bne.n	8002aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	08da      	lsrs	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3208      	adds	r2, #8
 8002a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	220f      	movs	r2, #15
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	08da      	lsrs	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3208      	adds	r2, #8
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0203 	and.w	r2, r3, #3
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80c0 	beq.w	8002c6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af8:	6453      	str	r3, [r2, #68]	; 0x44
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b06:	4a61      	ldr	r2, [pc, #388]	; (8002c8c <HAL_GPIO_Init+0x328>)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <HAL_GPIO_Init+0x32c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d037      	beq.n	8002ba2 <HAL_GPIO_Init+0x23e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a57      	ldr	r2, [pc, #348]	; (8002c94 <HAL_GPIO_Init+0x330>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d031      	beq.n	8002b9e <HAL_GPIO_Init+0x23a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <HAL_GPIO_Init+0x334>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02b      	beq.n	8002b9a <HAL_GPIO_Init+0x236>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a55      	ldr	r2, [pc, #340]	; (8002c9c <HAL_GPIO_Init+0x338>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d025      	beq.n	8002b96 <HAL_GPIO_Init+0x232>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a54      	ldr	r2, [pc, #336]	; (8002ca0 <HAL_GPIO_Init+0x33c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <HAL_GPIO_Init+0x22e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a53      	ldr	r2, [pc, #332]	; (8002ca4 <HAL_GPIO_Init+0x340>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0x22a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_GPIO_Init+0x344>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x226>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a51      	ldr	r2, [pc, #324]	; (8002cac <HAL_GPIO_Init+0x348>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x222>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a50      	ldr	r2, [pc, #320]	; (8002cb0 <HAL_GPIO_Init+0x34c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x21e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x21a>
 8002b7a:	2309      	movs	r3, #9
 8002b7c:	e012      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b7e:	230a      	movs	r3, #10
 8002b80:	e010      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b82:	2308      	movs	r3, #8
 8002b84:	e00e      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b86:	2307      	movs	r3, #7
 8002b88:	e00c      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	e00a      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b8e:	2305      	movs	r3, #5
 8002b90:	e008      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b92:	2304      	movs	r3, #4
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b96:	2303      	movs	r3, #3
 8002b98:	e004      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e002      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f002 0203 	and.w	r2, r2, #3
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	4093      	lsls	r3, r2
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb4:	4935      	ldr	r1, [pc, #212]	; (8002c8c <HAL_GPIO_Init+0x328>)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be6:	4a34      	ldr	r2, [pc, #208]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c10:	4a29      	ldr	r2, [pc, #164]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	f67f ae84 	bls.w	8002980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40020400 	.word	0x40020400
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40021400 	.word	0x40021400
 8002ca8:	40021800 	.word	0x40021800
 8002cac:	40021c00 	.word	0x40021c00
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40022400 	.word	0x40022400
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0bf      	b.n	8002e82 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8ba 	bl	8002e90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002d32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6999      	ldr	r1, [r3, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d48:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <HAL_LTDC_Init+0x19c>)
 8002d64:	400b      	ands	r3, r1
 8002d66:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68d9      	ldr	r1, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <HAL_LTDC_Init+0x19c>)
 8002d92:	400b      	ands	r3, r1
 8002d94:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	041b      	lsls	r3, r3, #16
 8002d9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68d9      	ldr	r1, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6919      	ldr	r1, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_LTDC_Init+0x19c>)
 8002dc0:	400b      	ands	r3, r1
 8002dc2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6919      	ldr	r1, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6959      	ldr	r1, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <HAL_LTDC_Init+0x19c>)
 8002dee:	400b      	ands	r3, r1
 8002df0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6959      	ldr	r1, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0206 	orr.w	r2, r2, #6
 8002e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	f000f800 	.word	0xf000f800

08002e90 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002ea4:	b5b0      	push	{r4, r5, r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_LTDC_ConfigLayer+0x1a>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e02c      	b.n	8002f18 <HAL_LTDC_ConfigLayer+0x74>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2134      	movs	r1, #52	; 0x34
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	461d      	mov	r5, r3
 8002ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f83b 	bl	8002f74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2201      	movs	r2, #1
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bdb0      	pop	{r4, r5, r7, pc}

08002f20 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_LTDC_EnableDither+0x16>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e016      	b.n	8002f64 <HAL_LTDC_EnableDither+0x44>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_LTDC_EnableDither+0x50>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_LTDC_EnableDither+0x50>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40016800 	.word	0x40016800

08002f74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	0c1b      	lsrs	r3, r3, #16
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	4413      	add	r3, r2
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	01db      	lsls	r3, r3, #7
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3384      	adds	r3, #132	; 0x84
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	4611      	mov	r1, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	01d2      	lsls	r2, r2, #7
 8002fb0:	440a      	add	r2, r1
 8002fb2:	3284      	adds	r2, #132	; 0x84
 8002fb4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002fb8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002fca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002fcc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	01db      	lsls	r3, r3, #7
 8002fd8:	440b      	add	r3, r1
 8002fda:	3384      	adds	r3, #132	; 0x84
 8002fdc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002fe2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff2:	4413      	add	r3, r2
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	01db      	lsls	r3, r3, #7
 8003002:	4413      	add	r3, r2
 8003004:	3384      	adds	r3, #132	; 0x84
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	4611      	mov	r1, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	01d2      	lsls	r2, r2, #7
 8003012:	440a      	add	r2, r1
 8003014:	3284      	adds	r2, #132	; 0x84
 8003016:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800301a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800302a:	4413      	add	r3, r2
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	01db      	lsls	r3, r3, #7
 8003038:	440b      	add	r3, r1
 800303a:	3384      	adds	r3, #132	; 0x84
 800303c:	4619      	mov	r1, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	01db      	lsls	r3, r3, #7
 800304e:	4413      	add	r3, r2
 8003050:	3384      	adds	r3, #132	; 0x84
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	4611      	mov	r1, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	01d2      	lsls	r2, r2, #7
 800305e:	440a      	add	r2, r1
 8003060:	3284      	adds	r2, #132	; 0x84
 8003062:	f023 0307 	bic.w	r3, r3, #7
 8003066:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	01db      	lsls	r3, r3, #7
 8003072:	4413      	add	r3, r2
 8003074:	3384      	adds	r3, #132	; 0x84
 8003076:	461a      	mov	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	061b      	lsls	r3, r3, #24
 8003098:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	01db      	lsls	r3, r3, #7
 80030a4:	4413      	add	r3, r2
 80030a6:	3384      	adds	r3, #132	; 0x84
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	01db      	lsls	r3, r3, #7
 80030b4:	4413      	add	r3, r2
 80030b6:	3384      	adds	r3, #132	; 0x84
 80030b8:	461a      	mov	r2, r3
 80030ba:	2300      	movs	r3, #0
 80030bc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030c4:	461a      	mov	r2, r3
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4619      	mov	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	01db      	lsls	r3, r3, #7
 80030d8:	440b      	add	r3, r1
 80030da:	3384      	adds	r3, #132	; 0x84
 80030dc:	4619      	mov	r1, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	01db      	lsls	r3, r3, #7
 80030ee:	4413      	add	r3, r2
 80030f0:	3384      	adds	r3, #132	; 0x84
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	4611      	mov	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	01d2      	lsls	r2, r2, #7
 80030fe:	440a      	add	r2, r1
 8003100:	3284      	adds	r2, #132	; 0x84
 8003102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003106:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	01db      	lsls	r3, r3, #7
 8003112:	4413      	add	r3, r2
 8003114:	3384      	adds	r3, #132	; 0x84
 8003116:	461a      	mov	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	01db      	lsls	r3, r3, #7
 8003128:	4413      	add	r3, r2
 800312a:	3384      	adds	r3, #132	; 0x84
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	4611      	mov	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	01d2      	lsls	r2, r2, #7
 8003138:	440a      	add	r2, r1
 800313a:	3284      	adds	r2, #132	; 0x84
 800313c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003140:	f023 0307 	bic.w	r3, r3, #7
 8003144:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	68f9      	ldr	r1, [r7, #12]
 8003150:	6809      	ldr	r1, [r1, #0]
 8003152:	4608      	mov	r0, r1
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	01c9      	lsls	r1, r1, #7
 8003158:	4401      	add	r1, r0
 800315a:	3184      	adds	r1, #132	; 0x84
 800315c:	4313      	orrs	r3, r2
 800315e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	01db      	lsls	r3, r3, #7
 800316a:	4413      	add	r3, r2
 800316c:	3384      	adds	r3, #132	; 0x84
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	01db      	lsls	r3, r3, #7
 800317a:	4413      	add	r3, r2
 800317c:	3384      	adds	r3, #132	; 0x84
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	01db      	lsls	r3, r3, #7
 800318e:	4413      	add	r3, r2
 8003190:	3384      	adds	r3, #132	; 0x84
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80031a2:	2304      	movs	r3, #4
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e01b      	b.n	80031e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d102      	bne.n	80031b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80031b0:	2303      	movs	r3, #3
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e014      	b.n	80031e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d00b      	beq.n	80031d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d007      	beq.n	80031d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d003      	beq.n	80031d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031d2:	2b07      	cmp	r3, #7
 80031d4:	d102      	bne.n	80031dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80031d6:	2302      	movs	r3, #2
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e001      	b.n	80031e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80031dc:	2301      	movs	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	01db      	lsls	r3, r3, #7
 80031ea:	4413      	add	r3, r2
 80031ec:	3384      	adds	r3, #132	; 0x84
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	4611      	mov	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	01d2      	lsls	r2, r2, #7
 80031fa:	440a      	add	r2, r1
 80031fc:	3284      	adds	r2, #132	; 0x84
 80031fe:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003202:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1acb      	subs	r3, r1, r3
 800321a:	69f9      	ldr	r1, [r7, #28]
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003222:	68f9      	ldr	r1, [r7, #12]
 8003224:	6809      	ldr	r1, [r1, #0]
 8003226:	4608      	mov	r0, r1
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	01c9      	lsls	r1, r1, #7
 800322c:	4401      	add	r1, r0
 800322e:	3184      	adds	r1, #132	; 0x84
 8003230:	4313      	orrs	r3, r2
 8003232:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	01db      	lsls	r3, r3, #7
 800323e:	4413      	add	r3, r2
 8003240:	3384      	adds	r3, #132	; 0x84
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	4611      	mov	r1, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	01d2      	lsls	r2, r2, #7
 800324e:	440a      	add	r2, r1
 8003250:	3284      	adds	r2, #132	; 0x84
 8003252:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003256:	f023 0307 	bic.w	r3, r3, #7
 800325a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	01db      	lsls	r3, r3, #7
 8003266:	4413      	add	r3, r2
 8003268:	3384      	adds	r3, #132	; 0x84
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	01db      	lsls	r3, r3, #7
 800327c:	4413      	add	r3, r2
 800327e:	3384      	adds	r3, #132	; 0x84
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	4611      	mov	r1, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	01d2      	lsls	r2, r2, #7
 800328c:	440a      	add	r2, r1
 800328e:	3284      	adds	r2, #132	; 0x84
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6013      	str	r3, [r2, #0]
}
 8003296:	bf00      	nop
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a4:	b08f      	sub	sp, #60	; 0x3c
 80032a6:	af0a      	add	r7, sp, #40	; 0x28
 80032a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e10f      	b.n	80034d4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f006 fe00 	bl	8009ed4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 f93f 	bl	8006576 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	687e      	ldr	r6, [r7, #4]
 8003300:	466d      	mov	r5, sp
 8003302:	f106 0410 	add.w	r4, r6, #16
 8003306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800330c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003312:	e885 0003 	stmia.w	r5, {r0, r1}
 8003316:	1d33      	adds	r3, r6, #4
 8003318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	f003 f816 	bl	800634c <USB_CoreInit>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0d0      	b.n	80034d4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f003 f92d 	bl	8006598 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	e04a      	b.n	80033da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	333d      	adds	r3, #61	; 0x3d
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	333c      	adds	r3, #60	; 0x3c
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	b298      	uxth	r0, r3
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3344      	adds	r3, #68	; 0x44
 8003380:	4602      	mov	r2, r0
 8003382:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3340      	adds	r3, #64	; 0x40
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3348      	adds	r3, #72	; 0x48
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	334c      	adds	r3, #76	; 0x4c
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3354      	adds	r3, #84	; 0x54
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	3301      	adds	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3af      	bcc.n	8003344 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e044      	b.n	8003474 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	3301      	adds	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d3b5      	bcc.n	80033ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	687e      	ldr	r6, [r7, #4]
 8003486:	466d      	mov	r5, sp
 8003488:	f106 0410 	add.w	r4, r6, #16
 800348c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003494:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003498:	e885 0003 	stmia.w	r5, {r0, r1}
 800349c:	1d33      	adds	r3, r6, #4
 800349e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034a0:	6838      	ldr	r0, [r7, #0]
 80034a2:	f003 f8c5 	bl	8006630 <USB_DevInit>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e00d      	b.n	80034d4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fa14 	bl	80078fa <USB_DevDisconnect>

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_PCD_Start+0x1c>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e020      	b.n	800353a <HAL_PCD_Start+0x5e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	2b01      	cmp	r3, #1
 8003506:	d109      	bne.n	800351c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800350c:	2b01      	cmp	r3, #1
 800350e:	d005      	beq.n	800351c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f003 f817 	bl	8006554 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f004 f9c4 	bl	80078b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003542:	b590      	push	{r4, r7, lr}
 8003544:	b08d      	sub	sp, #52	; 0x34
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f004 fa82 	bl	8007a62 <USB_GetMode>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	f040 848a 	bne.w	8003e7a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f004 f9e6 	bl	800793c <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8480 	beq.w	8003e78 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f004 f9d3 	bl	800793c <USB_ReadInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d107      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f002 0202 	and.w	r2, r2, #2
 80035ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f004 f9c1 	bl	800793c <USB_ReadInterrupts>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d161      	bne.n	8003688 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0210 	bic.w	r2, r2, #16
 80035d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	3304      	adds	r3, #4
 80035f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	0c5b      	lsrs	r3, r3, #17
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d124      	bne.n	800364a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d035      	beq.n	8003678 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	6a38      	ldr	r0, [r7, #32]
 8003620:	f003 fff8 	bl	8007614 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003630:	441a      	add	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	6a1a      	ldr	r2, [r3, #32]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003642:	441a      	add	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	621a      	str	r2, [r3, #32]
 8003648:	e016      	b.n	8003678 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	0c5b      	lsrs	r3, r3, #17
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	2b06      	cmp	r3, #6
 8003654:	d110      	bne.n	8003678 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800365c:	2208      	movs	r2, #8
 800365e:	4619      	mov	r1, r3
 8003660:	6a38      	ldr	r0, [r7, #32]
 8003662:	f003 ffd7 	bl	8007614 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	6a1a      	ldr	r2, [r3, #32]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003672:	441a      	add	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0210 	orr.w	r2, r2, #16
 8003686:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f004 f955 	bl	800793c <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003698:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800369c:	f040 80a7 	bne.w	80037ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f004 f95a 	bl	8007962 <USB_ReadDevAllOutEpInterrupt>
 80036ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80036b0:	e099      	b.n	80037e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 808e 	beq.w	80037da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f004 f97e 	bl	80079ca <USB_ReadDevOutEPInterrupt>
 80036ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00c      	beq.n	80036f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e6:	461a      	mov	r2, r3
 80036e8:	2301      	movs	r3, #1
 80036ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80036ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fec2 	bl	8004478 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	461a      	mov	r2, r3
 800370c:	2308      	movs	r3, #8
 800370e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 ff98 	bl	8004648 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372e:	461a      	mov	r2, r3
 8003730:	2310      	movs	r3, #16
 8003732:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d030      	beq.n	80037a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d109      	bne.n	800375e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800375c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	78db      	ldrb	r3, [r3, #3]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d108      	bne.n	800378e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2200      	movs	r2, #0
 8003780:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f006 fca5 	bl	800a0d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	461a      	mov	r2, r3
 800379c:	2302      	movs	r3, #2
 800379e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b6:	461a      	mov	r2, r3
 80037b8:	2320      	movs	r3, #32
 80037ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d2:	461a      	mov	r2, r3
 80037d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	3301      	adds	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f47f af62 	bne.w	80036b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f004 f8a2 	bl	800793c <USB_ReadInterrupts>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003802:	f040 80db 	bne.w	80039bc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f004 f8c3 	bl	8007996 <USB_ReadDevAllInEpInterrupt>
 8003810:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003816:	e0cd      	b.n	80039b4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80c2 	beq.w	80039a8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f004 f8e9 	bl	8007a06 <USB_ReadDevInEPInterrupt>
 8003834:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d057      	beq.n	80038f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	2201      	movs	r2, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	69f9      	ldr	r1, [r7, #28]
 800385c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003860:	4013      	ands	r3, r2
 8003862:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003870:	461a      	mov	r2, r3
 8003872:	2301      	movs	r3, #1
 8003874:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d132      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	334c      	adds	r3, #76	; 0x4c
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4403      	add	r3, r0
 800389e:	3348      	adds	r3, #72	; 0x48
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4419      	add	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4403      	add	r3, r0
 80038b2:	334c      	adds	r3, #76	; 0x4c
 80038b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d113      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x3a2>
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3354      	adds	r3, #84	; 0x54
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d108      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038dc:	461a      	mov	r2, r3
 80038de:	2101      	movs	r1, #1
 80038e0:	f004 f8f0 	bl	8007ac4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f006 fb6f 	bl	8009fce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003906:	461a      	mov	r2, r3
 8003908:	2308      	movs	r3, #8
 800390a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003922:	461a      	mov	r2, r3
 8003924:	2310      	movs	r3, #16
 8003926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	461a      	mov	r2, r3
 8003940:	2340      	movs	r3, #64	; 0x40
 8003942:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d023      	beq.n	8003996 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800394e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003950:	6a38      	ldr	r0, [r7, #32]
 8003952:	f002 ffd1 	bl	80068f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	3338      	adds	r3, #56	; 0x38
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	78db      	ldrb	r3, [r3, #3]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d108      	bne.n	8003984 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	b2db      	uxtb	r3, r3
 800397c:	4619      	mov	r1, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f006 fbbc 	bl	800a0fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003990:	461a      	mov	r2, r3
 8003992:	2302      	movs	r3, #2
 8003994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80039a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fcdb 	bl	800435e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	3301      	adds	r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f47f af2e 	bne.w	8003818 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 ffbb 	bl	800793c <USB_ReadInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039d0:	d122      	bne.n	8003a18 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d108      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039f8:	2100      	movs	r1, #0
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fec2 	bl	8004784 <HAL_PCDEx_LPM_Callback>
 8003a00:	e002      	b.n	8003a08 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f006 fb5a 	bl	800a0bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f003 ff8d 	bl	800793c <USB_ReadInterrupts>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2c:	d112      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d102      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f006 fb16 	bl	800a070 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a52:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 ff6f 	bl	800793c <USB_ReadInterrupts>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a68:	f040 80b7 	bne.w	8003bda <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2110      	movs	r1, #16
 8003a86:	4618      	mov	r0, r3
 8003a88:	f002 ff36 	bl	80068f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a90:	e046      	b.n	8003b20 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab6:	0151      	lsls	r1, r2, #5
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	440a      	add	r2, r1
 8003abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ac4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ad8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003af8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d3b3      	bcc.n	8003a92 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b38:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b56:	f043 030b 	orr.w	r3, r3, #11
 8003b5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b6c:	f043 030b 	orr.w	r3, r3, #11
 8003b70:	6453      	str	r3, [r2, #68]	; 0x44
 8003b72:	e015      	b.n	8003ba0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b86:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9a:	f043 030b 	orr.w	r3, r3, #11
 8003b9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003bb2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f003 ff7d 	bl	8007ac4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f003 feac 	bl	800793c <USB_ReadInterrupts>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bee:	d124      	bne.n	8003c3a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f003 ff42 	bl	8007a7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fef7 	bl	80069f2 <USB_GetDevSpeed>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681c      	ldr	r4, [r3, #0]
 8003c10:	f001 fa28 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8003c14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f002 fbf6 	bl	8006410 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f006 f9fa 	bl	800a01e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f003 fe7c 	bl	800793c <USB_ReadInterrupts>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d10a      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f006 f9d7 	bl	800a002 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f002 0208 	and.w	r2, r2, #8
 8003c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f003 fe67 	bl	800793c <USB_ReadInterrupts>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d122      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c84:	2301      	movs	r3, #1
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	e014      	b.n	8003cb4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d105      	bne.n	8003cae <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fb27 	bl	80042fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d3e5      	bcc.n	8003c8a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f003 fe3a 	bl	800793c <USB_ReadInterrupts>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd2:	d13b      	bne.n	8003d4c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd8:	e02b      	b.n	8003d32 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3340      	adds	r3, #64	; 0x40
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d115      	bne.n	8003d2c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da12      	bge.n	8003d2c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	333f      	adds	r3, #63	; 0x3f
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fae8 	bl	80042fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	3301      	adds	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d3ce      	bcc.n	8003cda <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f003 fdf3 	bl	800793c <USB_ReadInterrupts>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d60:	d155      	bne.n	8003e0e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d62:	2301      	movs	r3, #1
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
 8003d66:	e045      	b.n	8003df4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d12e      	bne.n	8003dee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da2b      	bge.n	8003dee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003da2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d121      	bne.n	8003dee <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dea:	6053      	str	r3, [r2, #4]
            break;
 8003dec:	e007      	b.n	8003dfe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	3301      	adds	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3b4      	bcc.n	8003d68 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f003 fd92 	bl	800793c <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e22:	d10a      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f006 f97b 	bl	800a120 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 fd7c 	bl	800793c <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d115      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f006 f96b 	bl	800a13c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	e000      	b.n	8003e7a <HAL_PCD_IRQHandler+0x938>
      return;
 8003e78:	bf00      	nop
    }
  }
}
 8003e7a:	3734      	adds	r7, #52	; 0x34
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd90      	pop	{r4, r7, pc}

08003e80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_PCD_SetAddress+0x1a>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e013      	b.n	8003ec2 <HAL_PCD_SetAddress+0x42>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f003 fcda 	bl	800786c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	4608      	mov	r0, r1
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4603      	mov	r3, r0
 8003eda:	70fb      	strb	r3, [r7, #3]
 8003edc:	460b      	mov	r3, r1
 8003ede:	803b      	strh	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da0f      	bge.n	8003f10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	3338      	adds	r3, #56	; 0x38
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	705a      	strb	r2, [r3, #1]
 8003f0e:	e00f      	b.n	8003f30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	f003 020f 	and.w	r2, r3, #15
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f3c:	883a      	ldrh	r2, [r7, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	78ba      	ldrb	r2, [r7, #2]
 8003f46:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d004      	beq.n	8003f5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f5a:	78bb      	ldrb	r3, [r7, #2]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d102      	bne.n	8003f66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_PCD_EP_Open+0xaa>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e00e      	b.n	8003f92 <HAL_PCD_EP_Open+0xc8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f002 fd5a 	bl	8006a3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003f90:	7afb      	ldrb	r3, [r7, #11]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da0f      	bge.n	8003fce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	f003 020f 	and.w	r2, r3, #15
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3338      	adds	r3, #56	; 0x38
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	705a      	strb	r2, [r3, #1]
 8003fcc:	e00f      	b.n	8003fee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_PCD_EP_Close+0x6e>
 8004004:	2302      	movs	r3, #2
 8004006:	e00e      	b.n	8004026 <HAL_PCD_EP_Close+0x8c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68f9      	ldr	r1, [r7, #12]
 8004016:	4618      	mov	r0, r3
 8004018:	f002 fd98 	bl	8006b4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	460b      	mov	r3, r1
 800403c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800403e:	7afb      	ldrb	r3, [r7, #11]
 8004040:	f003 020f 	and.w	r2, r3, #15
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	3304      	adds	r3, #4
 8004056:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2200      	movs	r2, #0
 8004068:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004070:	7afb      	ldrb	r3, [r7, #11]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	b2da      	uxtb	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800408a:	7afb      	ldrb	r3, [r7, #11]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	2b00      	cmp	r3, #0
 8004092:	d109      	bne.n	80040a8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	6979      	ldr	r1, [r7, #20]
 80040a2:	f003 f877 	bl	8007194 <USB_EP0StartXfer>
 80040a6:	e008      	b.n	80040ba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	6979      	ldr	r1, [r7, #20]
 80040b6:	f002 fe25 	bl	8006d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	f003 020f 	and.w	r2, r3, #15
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80040e6:	681b      	ldr	r3, [r3, #0]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	460b      	mov	r3, r1
 8004102:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004104:	7afb      	ldrb	r3, [r7, #11]
 8004106:	f003 020f 	and.w	r2, r3, #15
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	3338      	adds	r3, #56	; 0x38
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	3304      	adds	r3, #4
 800411a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2200      	movs	r2, #0
 800412c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2201      	movs	r2, #1
 8004132:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004134:	7afb      	ldrb	r3, [r7, #11]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	b2da      	uxtb	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d102      	bne.n	800414e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800414e:	7afb      	ldrb	r3, [r7, #11]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	6979      	ldr	r1, [r7, #20]
 8004166:	f003 f815 	bl	8007194 <USB_EP0StartXfer>
 800416a:	e008      	b.n	800417e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	6979      	ldr	r1, [r7, #20]
 800417a:	f002 fdc3 	bl	8006d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	f003 020f 	and.w	r2, r3, #15
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d901      	bls.n	80041a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e050      	b.n	8004248 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da0f      	bge.n	80041ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	f003 020f 	and.w	r2, r3, #15
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	3338      	adds	r3, #56	; 0x38
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	3304      	adds	r3, #4
 80041c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	705a      	strb	r2, [r3, #1]
 80041cc:	e00d      	b.n	80041ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4413      	add	r3, r2
 80041e0:	3304      	adds	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_PCD_EP_SetStall+0x82>
 8004206:	2302      	movs	r3, #2
 8004208:	e01e      	b.n	8004248 <HAL_PCD_EP_SetStall+0xc0>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	4618      	mov	r0, r3
 800421a:	f003 fa53 	bl	80076c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	b2d9      	uxtb	r1, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004238:	461a      	mov	r2, r3
 800423a:	f003 fc43 	bl	8007ac4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	f003 020f 	and.w	r2, r3, #15
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d901      	bls.n	800426e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e042      	b.n	80042f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800426e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004272:	2b00      	cmp	r3, #0
 8004274:	da0f      	bge.n	8004296 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	f003 020f 	and.w	r2, r3, #15
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	3338      	adds	r3, #56	; 0x38
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	3304      	adds	r3, #4
 800428c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	705a      	strb	r2, [r3, #1]
 8004294:	e00f      	b.n	80042b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	4413      	add	r3, r2
 80042ac:	3304      	adds	r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_PCD_EP_ClrStall+0x86>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e00e      	b.n	80042f4 <HAL_PCD_EP_ClrStall+0xa4>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f003 fa5b 	bl	80077a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800430c:	2b00      	cmp	r3, #0
 800430e:	da0c      	bge.n	800432a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	3338      	adds	r3, #56	; 0x38
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e00c      	b.n	8004344 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	f003 020f 	and.w	r2, r3, #15
 8004330:	4613      	mov	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	3304      	adds	r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68f9      	ldr	r1, [r7, #12]
 800434a:	4618      	mov	r0, r3
 800434c:	f003 f87a 	bl	8007444 <USB_EPStopXfer>
 8004350:	4603      	mov	r3, r0
 8004352:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004354:	7afb      	ldrb	r3, [r7, #11]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b08a      	sub	sp, #40	; 0x28
 8004362:	af02      	add	r7, sp, #8
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	3338      	adds	r3, #56	; 0x38
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	3304      	adds	r3, #4
 8004384:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1a      	ldr	r2, [r3, #32]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	429a      	cmp	r2, r3
 8004390:	d901      	bls.n	8004396 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e06c      	b.n	8004470 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d902      	bls.n	80043b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3303      	adds	r3, #3
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043ba:	e02b      	b.n	8004414 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	699a      	ldr	r2, [r3, #24]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d902      	bls.n	80043d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3303      	adds	r3, #3
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6919      	ldr	r1, [r3, #16]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4603      	mov	r3, r0
 80043f6:	6978      	ldr	r0, [r7, #20]
 80043f8:	f003 f8ce 	bl	8007598 <USB_WritePacket>

    ep->xfer_buff  += len;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	441a      	add	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	441a      	add	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	b29b      	uxth	r3, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	429a      	cmp	r2, r3
 8004428:	d809      	bhi.n	800443e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a1a      	ldr	r2, [r3, #32]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004432:	429a      	cmp	r2, r3
 8004434:	d203      	bcs.n	800443e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1be      	bne.n	80043bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	429a      	cmp	r2, r3
 8004448:	d811      	bhi.n	800446e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2201      	movs	r2, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	43db      	mvns	r3, r3
 8004464:	6939      	ldr	r1, [r7, #16]
 8004466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800446a:	4013      	ands	r3, r2
 800446c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	333c      	adds	r3, #60	; 0x3c
 8004490:	3304      	adds	r3, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d17b      	bne.n	80045a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4a61      	ldr	r2, [pc, #388]	; (8004640 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	f240 80b9 	bls.w	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80b3 	beq.w	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e0:	6093      	str	r3, [r2, #8]
 80044e2:	e0a7      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	461a      	mov	r2, r3
 80044fc:	2320      	movs	r3, #32
 80044fe:	6093      	str	r3, [r2, #8]
 8004500:	e098      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	f040 8093 	bne.w	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4a4b      	ldr	r2, [pc, #300]	; (8004640 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d90f      	bls.n	8004536 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	461a      	mov	r2, r3
 800452e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004532:	6093      	str	r3, [r2, #8]
 8004534:	e07e      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4413      	add	r3, r2
 8004548:	3304      	adds	r3, #4
 800454a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	0159      	lsls	r1, r3, #5
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	440b      	add	r3, r1
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d114      	bne.n	8004598 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004580:	461a      	mov	r2, r3
 8004582:	2101      	movs	r1, #1
 8004584:	f003 fa9e 	bl	8007ac4 <USB_EP0_OutStart>
 8004588:	e006      	b.n	8004598 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	441a      	add	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f005 fcfa 	bl	8009f98 <HAL_PCD_DataOutStageCallback>
 80045a4:	e046      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4a26      	ldr	r2, [pc, #152]	; (8004644 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d124      	bne.n	80045f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	461a      	mov	r2, r3
 80045c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ca:	6093      	str	r3, [r2, #8]
 80045cc:	e032      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	2320      	movs	r3, #32
 80045e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	4619      	mov	r1, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f005 fcd1 	bl	8009f98 <HAL_PCD_DataOutStageCallback>
 80045f6:	e01d      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d114      	bne.n	8004628 <PCD_EP_OutXfrComplete_int+0x1b0>
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004620:	461a      	mov	r2, r3
 8004622:	2100      	movs	r1, #0
 8004624:	f003 fa4e 	bl	8007ac4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f005 fcb2 	bl	8009f98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	4f54300a 	.word	0x4f54300a
 8004644:	4f54310a 	.word	0x4f54310a

08004648 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	333c      	adds	r3, #60	; 0x3c
 8004660:	3304      	adds	r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d90e      	bls.n	800469c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	461a      	mov	r2, r3
 8004696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f005 fc69 	bl	8009f74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a0a      	ldr	r2, [pc, #40]	; (80046d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d90c      	bls.n	80046c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d108      	bne.n	80046c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046bc:	461a      	mov	r2, r3
 80046be:	2101      	movs	r1, #1
 80046c0:	f003 fa00 	bl	8007ac4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	4f54300a 	.word	0x4f54300a

080046d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
 80046e0:	4613      	mov	r3, r2
 80046e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046f2:	883b      	ldrh	r3, [r7, #0]
 80046f4:	0419      	lsls	r1, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004700:	e028      	b.n	8004754 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e00d      	b.n	8004732 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	3340      	adds	r3, #64	; 0x40
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4413      	add	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	3301      	adds	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	3b01      	subs	r3, #1
 8004738:	429a      	cmp	r2, r3
 800473a:	d3ec      	bcc.n	8004716 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800473c:	883b      	ldrh	r3, [r7, #0]
 800473e:	0418      	lsls	r0, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	3b01      	subs	r3, #1
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	4302      	orrs	r2, r0
 800474c:	3340      	adds	r3, #64	; 0x40
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e267      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d075      	beq.n	80048a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ba:	4b88      	ldr	r3, [pc, #544]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d00c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c6:	4b85      	ldr	r3, [pc, #532]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d112      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d2:	4b82      	ldr	r3, [pc, #520]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047de:	d10b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	4b7e      	ldr	r3, [pc, #504]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x108>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d157      	bne.n	80048a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e242      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x74>
 8004802:	4b76      	ldr	r3, [pc, #472]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a75      	ldr	r2, [pc, #468]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e01d      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x98>
 800481a:	4b70      	ldr	r3, [pc, #448]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6f      	ldr	r2, [pc, #444]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4b6d      	ldr	r3, [pc, #436]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a6c      	ldr	r2, [pc, #432]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004834:	4b69      	ldr	r3, [pc, #420]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a68      	ldr	r2, [pc, #416]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800483a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b66      	ldr	r3, [pc, #408]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a65      	ldr	r2, [pc, #404]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fd faf0 	bl	8001e38 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800485c:	f7fd faec 	bl	8001e38 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	; 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e207      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0xc0>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fd fadc 	bl	8001e38 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004884:	f7fd fad8 	bl	8001e38 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e1f3      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004896:	4b51      	ldr	r3, [pc, #324]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0xe8>
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d063      	beq.n	800497a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048b2:	4b4a      	ldr	r3, [pc, #296]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048be:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d11c      	bne.n	8004904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ca:	4b44      	ldr	r3, [pc, #272]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d116      	bne.n	8004904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d6:	4b41      	ldr	r3, [pc, #260]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_RCC_OscConfig+0x152>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d001      	beq.n	80048ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e1c7      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4937      	ldr	r1, [pc, #220]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004902:	e03a      	b.n	800497a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d020      	beq.n	800494e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800490c:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <HAL_RCC_OscConfig+0x244>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fd fa91 	bl	8001e38 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800491a:	f7fd fa8d 	bl	8001e38 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e1a8      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004938:	4b28      	ldr	r3, [pc, #160]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4925      	ldr	r1, [pc, #148]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004948:	4313      	orrs	r3, r2
 800494a:	600b      	str	r3, [r1, #0]
 800494c:	e015      	b.n	800497a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800494e:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <HAL_RCC_OscConfig+0x244>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd fa70 	bl	8001e38 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800495c:	f7fd fa6c 	bl	8001e38 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e187      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d036      	beq.n	80049f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <HAL_RCC_OscConfig+0x248>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fd fa50 	bl	8001e38 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499c:	f7fd fa4c 	bl	8001e38 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e167      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_OscConfig+0x240>)
 80049b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x200>
 80049ba:	e01b      	b.n	80049f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_RCC_OscConfig+0x248>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c2:	f7fd fa39 	bl	8001e38 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	e00e      	b.n	80049e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ca:	f7fd fa35 	bl	8001e38 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d907      	bls.n	80049e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e150      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
 80049dc:	40023800 	.word	0x40023800
 80049e0:	42470000 	.word	0x42470000
 80049e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e8:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 80049ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ea      	bne.n	80049ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8097 	beq.w	8004b30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a02:	2300      	movs	r3, #0
 8004a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a06:	4b81      	ldr	r3, [pc, #516]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10f      	bne.n	8004a32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	4b7d      	ldr	r3, [pc, #500]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	4a7c      	ldr	r2, [pc, #496]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6413      	str	r3, [r2, #64]	; 0x40
 8004a22:	4b7a      	ldr	r3, [pc, #488]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a32:	4b77      	ldr	r3, [pc, #476]	; (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d118      	bne.n	8004a70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a3e:	4b74      	ldr	r3, [pc, #464]	; (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a73      	ldr	r2, [pc, #460]	; (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd f9f5 	bl	8001e38 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a52:	f7fd f9f1 	bl	8001e38 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e10c      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	4b6a      	ldr	r3, [pc, #424]	; (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d106      	bne.n	8004a86 <HAL_RCC_OscConfig+0x2ea>
 8004a78:	4b64      	ldr	r3, [pc, #400]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	4a63      	ldr	r2, [pc, #396]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6713      	str	r3, [r2, #112]	; 0x70
 8004a84:	e01c      	b.n	8004ac0 <HAL_RCC_OscConfig+0x324>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x30c>
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a5e      	ldr	r2, [pc, #376]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a94:	f043 0304 	orr.w	r3, r3, #4
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9a:	4b5c      	ldr	r3, [pc, #368]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a5b      	ldr	r2, [pc, #364]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0x324>
 8004aa8:	4b58      	ldr	r3, [pc, #352]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	4a57      	ldr	r2, [pc, #348]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab4:	4b55      	ldr	r3, [pc, #340]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a54      	ldr	r2, [pc, #336]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 0304 	bic.w	r3, r3, #4
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fd f9b6 	bl	8001e38 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad0:	f7fd f9b2 	bl	8001e38 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e0cb      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0ee      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x334>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af4:	f7fd f9a0 	bl	8001e38 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fd f99c 	bl	8001e38 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0b5      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b12:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ee      	bne.n	8004afc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d105      	bne.n	8004b30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b24:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80a1 	beq.w	8004c7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b3a:	4b34      	ldr	r3, [pc, #208]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d05c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d141      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4e:	4b31      	ldr	r3, [pc, #196]	; (8004c14 <HAL_RCC_OscConfig+0x478>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fd f970 	bl	8001e38 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fd f96c 	bl	8001e38 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e087      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	3b01      	subs	r3, #1
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	491b      	ldr	r1, [pc, #108]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <HAL_RCC_OscConfig+0x478>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004baa:	f7fd f945 	bl	8001e38 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb2:	f7fd f941 	bl	8001e38 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e05c      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x416>
 8004bd0:	e054      	b.n	8004c7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <HAL_RCC_OscConfig+0x478>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fd f92e 	bl	8001e38 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fd f92a 	bl	8001e38 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e045      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x444>
 8004bfe:	e03d      	b.n	8004c7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d107      	bne.n	8004c18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e038      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40007000 	.word	0x40007000
 8004c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_RCC_OscConfig+0x4ec>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d028      	beq.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d121      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d11a      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d111      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800

08004c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0cc      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b68      	ldr	r3, [pc, #416]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d90c      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b65      	ldr	r3, [pc, #404]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b63      	ldr	r3, [pc, #396]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0b8      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce0:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a58      	ldr	r2, [pc, #352]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf8:	4b53      	ldr	r3, [pc, #332]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a52      	ldr	r2, [pc, #328]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d04:	4b50      	ldr	r3, [pc, #320]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	494d      	ldr	r1, [pc, #308]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d044      	beq.n	8004dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d119      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e06f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e067      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4934      	ldr	r1, [pc, #208]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d7c:	f7fd f85c 	bl	8001e38 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d84:	f7fd f858 	bl	8001e38 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e04f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 020c 	and.w	r2, r3, #12
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d1eb      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dac:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d20c      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e032      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4916      	ldr	r1, [pc, #88]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	490e      	ldr	r1, [pc, #56]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e12:	f000 f821 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8004e16:	4602      	mov	r2, r0
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	490a      	ldr	r1, [pc, #40]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004e24:	5ccb      	ldrb	r3, [r1, r3]
 8004e26:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc ffbc 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023c00 	.word	0x40023c00
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	0800a79c 	.word	0x0800a79c
 8004e50:	20000000 	.word	0x20000000
 8004e54:	2000004c 	.word	0x2000004c

08004e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e5c:	b094      	sub	sp, #80	; 0x50
 8004e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	647b      	str	r3, [r7, #68]	; 0x44
 8004e64:	2300      	movs	r3, #0
 8004e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e68:	2300      	movs	r3, #0
 8004e6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e70:	4b79      	ldr	r3, [pc, #484]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d00d      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x40>
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	f200 80e1 	bhi.w	8005044 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x34>
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d003      	beq.n	8004e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e8a:	e0db      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e8c:	4b73      	ldr	r3, [pc, #460]	; (800505c <HAL_RCC_GetSysClockFreq+0x204>)
 8004e8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e90:	e0db      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e92:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e96:	e0d8      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e98:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ea2:	4b6d      	ldr	r3, [pc, #436]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d063      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eae:	4b6a      	ldr	r3, [pc, #424]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	f04f 0000 	mov.w	r0, #0
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	0159      	lsls	r1, r3, #5
 8004ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004edc:	0150      	lsls	r0, r2, #5
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	1a51      	subs	r1, r2, r1
 8004ee6:	6139      	str	r1, [r7, #16]
 8004ee8:	4629      	mov	r1, r5
 8004eea:	eb63 0301 	sbc.w	r3, r3, r1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004efc:	4659      	mov	r1, fp
 8004efe:	018b      	lsls	r3, r1, #6
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f06:	4651      	mov	r1, sl
 8004f08:	018a      	lsls	r2, r1, #6
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004f10:	4659      	mov	r1, fp
 8004f12:	eb63 0901 	sbc.w	r9, r3, r1
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f2a:	4690      	mov	r8, r2
 8004f2c:	4699      	mov	r9, r3
 8004f2e:	4623      	mov	r3, r4
 8004f30:	eb18 0303 	adds.w	r3, r8, r3
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	462b      	mov	r3, r5
 8004f38:	eb49 0303 	adc.w	r3, r9, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	024b      	lsls	r3, r1, #9
 8004f4e:	4621      	mov	r1, r4
 8004f50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f54:	4621      	mov	r1, r4
 8004f56:	024a      	lsls	r2, r1, #9
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	2200      	movs	r2, #0
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f68:	f7fb f94a 	bl	8000200 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4613      	mov	r3, r2
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f74:	e058      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f76:	4b38      	ldr	r3, [pc, #224]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	099b      	lsrs	r3, r3, #6
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	4611      	mov	r1, r2
 8004f82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	0159      	lsls	r1, r3, #5
 8004f9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa2:	0150      	lsls	r0, r2, #5
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4641      	mov	r1, r8
 8004faa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fc8:	ebb2 040a 	subs.w	r4, r2, sl
 8004fcc:	eb63 050b 	sbc.w	r5, r3, fp
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	00eb      	lsls	r3, r5, #3
 8004fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fde:	00e2      	lsls	r2, r4, #3
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	18e3      	adds	r3, r4, r3
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	464b      	mov	r3, r9
 8004fec:	eb45 0303 	adc.w	r3, r5, r3
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ffe:	4629      	mov	r1, r5
 8005000:	028b      	lsls	r3, r1, #10
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005008:	4621      	mov	r1, r4
 800500a:	028a      	lsls	r2, r1, #10
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005012:	2200      	movs	r2, #0
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	61fa      	str	r2, [r7, #28]
 8005018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800501c:	f7fb f8f0 	bl	8000200 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_GetSysClockFreq+0x200>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005042:	e002      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_RCC_GetSysClockFreq+0x204>)
 8005046:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800504c:	4618      	mov	r0, r3
 800504e:	3750      	adds	r7, #80	; 0x50
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	00f42400 	.word	0x00f42400
 8005060:	007a1200 	.word	0x007a1200

08005064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000

0800507c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d075      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050b0:	4b91      	ldr	r3, [pc, #580]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050b6:	f7fc febf 	bl	8001e38 <HAL_GetTick>
 80050ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050be:	f7fc febb 	bl	8001e38 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e189      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050d0:	4b8a      	ldr	r3, [pc, #552]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f0      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d009      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	019a      	lsls	r2, r3, #6
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	071b      	lsls	r3, r3, #28
 80050f4:	4981      	ldr	r1, [pc, #516]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01f      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005108:	4b7c      	ldr	r3, [pc, #496]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800510a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510e:	0f1b      	lsrs	r3, r3, #28
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	019a      	lsls	r2, r3, #6
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	061b      	lsls	r3, r3, #24
 8005122:	431a      	orrs	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	071b      	lsls	r3, r3, #28
 8005128:	4974      	ldr	r1, [pc, #464]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005130:	4b72      	ldr	r3, [pc, #456]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005136:	f023 021f 	bic.w	r2, r3, #31
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	3b01      	subs	r3, #1
 8005140:	496e      	ldr	r1, [pc, #440]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	019a      	lsls	r2, r3, #6
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	061b      	lsls	r3, r3, #24
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	071b      	lsls	r3, r3, #28
 8005168:	4964      	ldr	r1, [pc, #400]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005170:	4b61      	ldr	r3, [pc, #388]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005176:	f7fc fe5f 	bl	8001e38 <HAL_GetTick>
 800517a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800517e:	f7fc fe5b 	bl	8001e38 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e129      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005190:	4b5a      	ldr	r3, [pc, #360]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d105      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d079      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051b4:	4b52      	ldr	r3, [pc, #328]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ba:	f7fc fe3d 	bl	8001e38 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051c2:	f7fc fe39 	bl	8001e38 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e107      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051d4:	4b49      	ldr	r3, [pc, #292]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e0:	d0ef      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051ee:	4b43      	ldr	r3, [pc, #268]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	0f1b      	lsrs	r3, r3, #28
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	019a      	lsls	r2, r3, #6
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	431a      	orrs	r2, r3
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	071b      	lsls	r3, r3, #28
 800520e:	493b      	ldr	r1, [pc, #236]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005216:	4b39      	ldr	r3, [pc, #228]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	3b01      	subs	r3, #1
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	4934      	ldr	r1, [pc, #208]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01e      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800523c:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	0e1b      	lsrs	r3, r3, #24
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	019a      	lsls	r2, r3, #6
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	061b      	lsls	r3, r3, #24
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	071b      	lsls	r3, r3, #28
 800525c:	4927      	ldr	r1, [pc, #156]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	4922      	ldr	r1, [pc, #136]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800527a:	4b21      	ldr	r3, [pc, #132]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005280:	f7fc fdda 	bl	8001e38 <HAL_GetTick>
 8005284:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005288:	f7fc fdd6 	bl	8001e38 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e0a4      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800529a:	4b18      	ldr	r3, [pc, #96]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a6:	d1ef      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 808b 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	4b10      	ldr	r3, [pc, #64]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	4a0f      	ldr	r2, [pc, #60]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c4:	6413      	str	r3, [r2, #64]	; 0x40
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a0b      	ldr	r2, [pc, #44]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80052d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052de:	f7fc fdab 	bl	8001e38 <HAL_GetTick>
 80052e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052e4:	e010      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052e6:	f7fc fda7 	bl	8001e38 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d909      	bls.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e075      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80052f8:	42470068 	.word	0x42470068
 80052fc:	40023800 	.word	0x40023800
 8005300:	42470070 	.word	0x42470070
 8005304:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005308:	4b38      	ldr	r3, [pc, #224]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0e8      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005314:	4b36      	ldr	r3, [pc, #216]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02f      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d028      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005332:	4b2f      	ldr	r3, [pc, #188]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800533c:	4b2d      	ldr	r3, [pc, #180]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005342:	4b2c      	ldr	r3, [pc, #176]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005348:	4a29      	ldr	r2, [pc, #164]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800534e:	4b28      	ldr	r3, [pc, #160]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d114      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800535a:	f7fc fd6d 	bl	8001e38 <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005360:	e00a      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005362:	f7fc fd69 	bl	8001e38 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e035      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0ee      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005390:	d10d      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a6:	4912      	ldr	r1, [pc, #72]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	608b      	str	r3, [r1, #8]
 80053ac:	e005      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80053ae:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	4a0f      	ldr	r2, [pc, #60]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053b8:	6093      	str	r3, [r2, #8]
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c6:	490a      	ldr	r1, [pc, #40]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80053e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40007000 	.word	0x40007000
 80053f0:	40023800 	.word	0x40023800
 80053f4:	42470e40 	.word	0x42470e40
 80053f8:	424711e0 	.word	0x424711e0

080053fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e025      	b.n	800545c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f81d 	bl	8005464 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f000 fe6b 	bl	8006118 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	461a      	mov	r2, r3
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	f000 fec0 	bl	80061d2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800548a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d101      	bne.n	8005496 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005492:	2302      	movs	r3, #2
 8005494:	e021      	b.n	80054da <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005496:	7dfb      	ldrb	r3, [r7, #23]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d002      	beq.n	80054a2 <HAL_SDRAM_SendCommand+0x2a>
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b05      	cmp	r3, #5
 80054a0:	d118      	bne.n	80054d4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2202      	movs	r2, #2
 80054a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fef6 	bl	80062a4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d104      	bne.n	80054ca <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2205      	movs	r2, #5
 80054c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054c8:	e006      	b.n	80054d8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054d2:	e001      	b.n	80054d8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b082      	sub	sp, #8
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d101      	bne.n	80054fc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
 80054fa:	e016      	b.n	800552a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d10f      	bne.n	8005528 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 ff01 	bl	800631e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e000      	b.n	800552a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e07b      	b.n	800563c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	2b00      	cmp	r3, #0
 800554a:	d108      	bne.n	800555e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005554:	d009      	beq.n	800556a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	61da      	str	r2, [r3, #28]
 800555c:	e005      	b.n	800556a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f885 	bl	8005694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	ea42 0103 	orr.w	r1, r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	0c1b      	lsrs	r3, r3, #16
 8005608:	f003 0104 	and.w	r1, r3, #4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	f003 0210 	and.w	r2, r3, #16
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800562a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e01a      	b.n	800568c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f81a 	bl	80056a8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	4613      	mov	r3, r2
 80056ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_SPI_Transmit+0x22>
 80056da:	2302      	movs	r3, #2
 80056dc:	e126      	b.n	800592c <HAL_SPI_Transmit+0x270>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e6:	f7fc fba7 	bl	8001e38 <HAL_GetTick>
 80056ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056ec:	88fb      	ldrh	r3, [r7, #6]
 80056ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d002      	beq.n	8005702 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
 80056fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005700:	e10b      	b.n	800591a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_SPI_Transmit+0x52>
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005712:	e102      	b.n	800591a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2203      	movs	r2, #3
 8005718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	88fa      	ldrh	r2, [r7, #6]
 800572c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575a:	d10f      	bne.n	800577c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800577a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d007      	beq.n	800579a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005798:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a2:	d14b      	bne.n	800583c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Transmit+0xf6>
 80057ac:	8afb      	ldrh	r3, [r7, #22]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d13e      	bne.n	8005830 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	881a      	ldrh	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	1c9a      	adds	r2, r3, #2
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057d6:	e02b      	b.n	8005830 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d112      	bne.n	800580c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	1c9a      	adds	r2, r3, #2
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	86da      	strh	r2, [r3, #54]	; 0x36
 800580a:	e011      	b.n	8005830 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580c:	f7fc fb14 	bl	8001e38 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d803      	bhi.n	8005824 <HAL_SPI_Transmit+0x168>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d102      	bne.n	800582a <HAL_SPI_Transmit+0x16e>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800582e:	e074      	b.n	800591a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1ce      	bne.n	80057d8 <HAL_SPI_Transmit+0x11c>
 800583a:	e04c      	b.n	80058d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_SPI_Transmit+0x18e>
 8005844:	8afb      	ldrh	r3, [r7, #22]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d140      	bne.n	80058cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005870:	e02c      	b.n	80058cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d113      	bne.n	80058a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80058a6:	e011      	b.n	80058cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058a8:	f7fc fac6 	bl	8001e38 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d803      	bhi.n	80058c0 <HAL_SPI_Transmit+0x204>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d102      	bne.n	80058c6 <HAL_SPI_Transmit+0x20a>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058ca:	e026      	b.n	800591a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1cd      	bne.n	8005872 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fbda 	bl	8006094 <SPI_EndRxTxTransaction>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	77fb      	strb	r3, [r7, #31]
 8005916:	e000      	b.n	800591a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005918:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800592a:	7ffb      	ldrb	r3, [r7, #31]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3720      	adds	r7, #32
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005950:	d112      	bne.n	8005978 <HAL_SPI_Receive+0x44>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10e      	bne.n	8005978 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2204      	movs	r2, #4
 800595e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005962:	88fa      	ldrh	r2, [r7, #6]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f8f1 	bl	8005b56 <HAL_SPI_TransmitReceive>
 8005974:	4603      	mov	r3, r0
 8005976:	e0ea      	b.n	8005b4e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_SPI_Receive+0x52>
 8005982:	2302      	movs	r3, #2
 8005984:	e0e3      	b.n	8005b4e <HAL_SPI_Receive+0x21a>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800598e:	f7fc fa53 	bl	8001e38 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d002      	beq.n	80059a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80059a0:	2302      	movs	r3, #2
 80059a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059a4:	e0ca      	b.n	8005b3c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_SPI_Receive+0x7e>
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059b6:	e0c1      	b.n	8005b3c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2204      	movs	r2, #4
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	88fa      	ldrh	r2, [r7, #6]
 80059d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fe:	d10f      	bne.n	8005a20 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a1e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d007      	beq.n	8005a3e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a3c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d162      	bne.n	8005b0c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a46:	e02e      	b.n	8005aa6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d115      	bne.n	8005a82 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f103 020c 	add.w	r2, r3, #12
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a80:	e011      	b.n	8005aa6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a82:	f7fc f9d9 	bl	8001e38 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d803      	bhi.n	8005a9a <HAL_SPI_Receive+0x166>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a98:	d102      	bne.n	8005aa0 <HAL_SPI_Receive+0x16c>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005aa4:	e04a      	b.n	8005b3c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1cb      	bne.n	8005a48 <HAL_SPI_Receive+0x114>
 8005ab0:	e031      	b.n	8005b16 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d113      	bne.n	8005ae8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	b292      	uxth	r2, r2
 8005acc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	1c9a      	adds	r2, r3, #2
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ae6:	e011      	b.n	8005b0c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae8:	f7fc f9a6 	bl	8001e38 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d803      	bhi.n	8005b00 <HAL_SPI_Receive+0x1cc>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afe:	d102      	bne.n	8005b06 <HAL_SPI_Receive+0x1d2>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b0a:	e017      	b.n	8005b3c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1cd      	bne.n	8005ab2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fa54 	bl	8005fc8 <SPI_EndRxTransaction>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	75fb      	strb	r3, [r7, #23]
 8005b38:	e000      	b.n	8005b3c <HAL_SPI_Receive+0x208>
  }

error :
 8005b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b08c      	sub	sp, #48	; 0x30
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b64:	2301      	movs	r3, #1
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x26>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e18a      	b.n	8005e92 <HAL_SPI_TransmitReceive+0x33c>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b84:	f7fc f958 	bl	8001e38 <HAL_GetTick>
 8005b88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b9a:	887b      	ldrh	r3, [r7, #2]
 8005b9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d00f      	beq.n	8005bc6 <HAL_SPI_TransmitReceive+0x70>
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bac:	d107      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x68>
 8005bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d003      	beq.n	8005bc6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005bc4:	e15b      	b.n	8005e7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0x82>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0x82>
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005bde:	e14e      	b.n	8005e7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d003      	beq.n	8005bf4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2205      	movs	r2, #5
 8005bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	887a      	ldrh	r2, [r7, #2]
 8005c04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	887a      	ldrh	r2, [r7, #2]
 8005c0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	887a      	ldrh	r2, [r7, #2]
 8005c16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	887a      	ldrh	r2, [r7, #2]
 8005c1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d007      	beq.n	8005c48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c50:	d178      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_SPI_TransmitReceive+0x10a>
 8005c5a:	8b7b      	ldrh	r3, [r7, #26]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d166      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	881a      	ldrh	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c84:	e053      	b.n	8005d2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d11b      	bne.n	8005ccc <HAL_SPI_TransmitReceive+0x176>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d016      	beq.n	8005ccc <HAL_SPI_TransmitReceive+0x176>
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d113      	bne.n	8005ccc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	881a      	ldrh	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	1c9a      	adds	r2, r3, #2
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d119      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x1b8>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d014      	beq.n	8005d0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	b292      	uxth	r2, r2
 8005cf0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	1c9a      	adds	r2, r3, #2
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d0e:	f7fc f893 	bl	8001e38 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d807      	bhi.n	8005d2e <HAL_SPI_TransmitReceive+0x1d8>
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d003      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d2c:	e0a7      	b.n	8005e7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1a6      	bne.n	8005c86 <HAL_SPI_TransmitReceive+0x130>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1a1      	bne.n	8005c86 <HAL_SPI_TransmitReceive+0x130>
 8005d42:	e07c      	b.n	8005e3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_SPI_TransmitReceive+0x1fc>
 8005d4c:	8b7b      	ldrh	r3, [r7, #26]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d16b      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	7812      	ldrb	r2, [r2, #0]
 8005d5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d78:	e057      	b.n	8005e2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d11c      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x26c>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d017      	beq.n	8005dc2 <HAL_SPI_TransmitReceive+0x26c>
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d114      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	7812      	ldrb	r2, [r2, #0]
 8005da4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d119      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x2ae>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d014      	beq.n	8005e04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e00:	2301      	movs	r3, #1
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e04:	f7fc f818 	bl	8001e38 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d803      	bhi.n	8005e1c <HAL_SPI_TransmitReceive+0x2c6>
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d102      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x2cc>
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e28:	e029      	b.n	8005e7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1a2      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x224>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d19d      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f926 	bl	8006094 <SPI_EndRxTxTransaction>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d006      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005e5a:	e010      	b.n	8005e7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10b      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	e000      	b.n	8005e7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005e7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3730      	adds	r7, #48	; 0x30
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea8:	b2db      	uxtb	r3, r3
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ec8:	f7fb ffb6 	bl	8001e38 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ed8:	f7fb ffae 	bl	8001e38 <HAL_GetTick>
 8005edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ede:	4b39      	ldr	r3, [pc, #228]	; (8005fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	015b      	lsls	r3, r3, #5
 8005ee4:	0d1b      	lsrs	r3, r3, #20
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
 8005eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eee:	e054      	b.n	8005f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d050      	beq.n	8005f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ef8:	f7fb ff9e 	bl	8001e38 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d902      	bls.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d13d      	bne.n	8005f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f26:	d111      	bne.n	8005f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f30:	d004      	beq.n	8005f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3a:	d107      	bne.n	8005f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f54:	d10f      	bne.n	8005f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e017      	b.n	8005fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	bf0c      	ite	eq
 8005faa:	2301      	moveq	r3, #1
 8005fac:	2300      	movne	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d19b      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000000 	.word	0x20000000

08005fc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fdc:	d111      	bne.n	8006002 <SPI_EndRxTransaction+0x3a>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe6:	d004      	beq.n	8005ff2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff0:	d107      	bne.n	8006002 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006000:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800600a:	d12a      	bne.n	8006062 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006014:	d012      	beq.n	800603c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2200      	movs	r2, #0
 800601e:	2180      	movs	r1, #128	; 0x80
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff ff49 	bl	8005eb8 <SPI_WaitFlagStateUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d02d      	beq.n	8006088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e026      	b.n	800608a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	2101      	movs	r1, #1
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff36 	bl	8005eb8 <SPI_WaitFlagStateUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01a      	beq.n	8006088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e013      	b.n	800608a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2200      	movs	r2, #0
 800606a:	2101      	movs	r1, #1
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff ff23 	bl	8005eb8 <SPI_WaitFlagStateUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	f043 0220 	orr.w	r2, r3, #32
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e000      	b.n	800608a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af02      	add	r7, sp, #8
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060a0:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <SPI_EndRxTxTransaction+0x7c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1b      	ldr	r2, [pc, #108]	; (8006114 <SPI_EndRxTxTransaction+0x80>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	0d5b      	lsrs	r3, r3, #21
 80060ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060b0:	fb02 f303 	mul.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060be:	d112      	bne.n	80060e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	2180      	movs	r1, #128	; 0x80
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff fef4 	bl	8005eb8 <SPI_WaitFlagStateUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d016      	beq.n	8006104 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060da:	f043 0220 	orr.w	r2, r3, #32
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e00f      	b.n	8006106 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fc:	2b80      	cmp	r3, #128	; 0x80
 80060fe:	d0f2      	beq.n	80060e6 <SPI_EndRxTxTransaction+0x52>
 8006100:	e000      	b.n	8006104 <SPI_EndRxTxTransaction+0x70>
        break;
 8006102:	bf00      	nop
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000000 	.word	0x20000000
 8006114:	165e9f81 	.word	0x165e9f81

08006118 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d123      	bne.n	8006172 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006132:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	6851      	ldr	r1, [r2, #4]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	6892      	ldr	r2, [r2, #8]
 800613e:	4311      	orrs	r1, r2
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	68d2      	ldr	r2, [r2, #12]
 8006144:	4311      	orrs	r1, r2
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	6912      	ldr	r2, [r2, #16]
 800614a:	4311      	orrs	r1, r2
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	6952      	ldr	r2, [r2, #20]
 8006150:	4311      	orrs	r1, r2
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	6992      	ldr	r2, [r2, #24]
 8006156:	4311      	orrs	r1, r2
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	69d2      	ldr	r2, [r2, #28]
 800615c:	4311      	orrs	r1, r2
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	6a12      	ldr	r2, [r2, #32]
 8006162:	4311      	orrs	r1, r2
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006168:	430a      	orrs	r2, r1
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e028      	b.n	80061c4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	69d9      	ldr	r1, [r3, #28]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	4319      	orrs	r1, r3
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	430b      	orrs	r3, r1
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006198:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	6851      	ldr	r1, [r2, #4]
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	6892      	ldr	r2, [r2, #8]
 80061a4:	4311      	orrs	r1, r2
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	68d2      	ldr	r2, [r2, #12]
 80061aa:	4311      	orrs	r1, r2
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	6912      	ldr	r2, [r2, #16]
 80061b0:	4311      	orrs	r1, r2
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	6952      	ldr	r2, [r2, #20]
 80061b6:	4311      	orrs	r1, r2
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	6992      	ldr	r2, [r2, #24]
 80061bc:	430a      	orrs	r2, r1
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d128      	bne.n	8006236 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	1e59      	subs	r1, r3, #1
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	4319      	orrs	r1, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	3b01      	subs	r3, #1
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	4319      	orrs	r1, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	3b01      	subs	r3, #1
 800620c:	031b      	lsls	r3, r3, #12
 800620e:	4319      	orrs	r1, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	3b01      	subs	r3, #1
 8006216:	041b      	lsls	r3, r3, #16
 8006218:	4319      	orrs	r1, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	3b01      	subs	r3, #1
 8006220:	051b      	lsls	r3, r3, #20
 8006222:	4319      	orrs	r1, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	3b01      	subs	r3, #1
 800622a:	061b      	lsls	r3, r3, #24
 800622c:	430b      	orrs	r3, r1
 800622e:	431a      	orrs	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	609a      	str	r2, [r3, #8]
 8006234:	e02f      	b.n	8006296 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800623e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	68d2      	ldr	r2, [r2, #12]
 8006246:	3a01      	subs	r2, #1
 8006248:	0311      	lsls	r1, r2, #12
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	6952      	ldr	r2, [r2, #20]
 800624e:	3a01      	subs	r2, #1
 8006250:	0512      	lsls	r2, r2, #20
 8006252:	430a      	orrs	r2, r1
 8006254:	431a      	orrs	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	1e59      	subs	r1, r3, #1
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	3b01      	subs	r3, #1
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	4319      	orrs	r1, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	3b01      	subs	r3, #1
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	4319      	orrs	r1, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	3b01      	subs	r3, #1
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	4319      	orrs	r1, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	3b01      	subs	r3, #1
 800628c:	061b      	lsls	r3, r3, #24
 800628e:	430b      	orrs	r3, r1
 8006290:	431a      	orrs	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	0d9b      	lsrs	r3, r3, #22
 80062ba:	059b      	lsls	r3, r3, #22
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	6811      	ldr	r1, [r2, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	6852      	ldr	r2, [r2, #4]
 80062c4:	4311      	orrs	r1, r2
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	6892      	ldr	r2, [r2, #8]
 80062ca:	3a01      	subs	r2, #1
 80062cc:	0152      	lsls	r2, r2, #5
 80062ce:	4311      	orrs	r1, r2
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	68d2      	ldr	r2, [r2, #12]
 80062d4:	0252      	lsls	r2, r2, #9
 80062d6:	430a      	orrs	r2, r1
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80062de:	f7fb fdab 	bl	8001e38 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80062e4:	e010      	b.n	8006308 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d00c      	beq.n	8006308 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <FMC_SDRAM_SendCommand+0x60>
 80062f4:	f7fb fda0 	bl	8001e38 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d201      	bcs.n	8006308 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e006      	b.n	8006316 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b20      	cmp	r3, #32
 8006312:	d0e8      	beq.n	80062e6 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006330:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	0052      	lsls	r2, r2, #1
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800634c:	b084      	sub	sp, #16
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	f107 001c 	add.w	r0, r7, #28
 800635a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	2b01      	cmp	r3, #1
 8006362:	d122      	bne.n	80063aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800638c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d105      	bne.n	800639e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fbee 	bl	8007b80 <USB_CoreReset>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]
 80063a8:	e01a      	b.n	80063e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fbe2 	bl	8007b80 <USB_CoreReset>
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
 80063d2:	e005      	b.n	80063e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10b      	bne.n	80063fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f043 0206 	orr.w	r2, r3, #6
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800640a:	b004      	add	sp, #16
 800640c:	4770      	bx	lr
	...

08006410 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d165      	bne.n	80064f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4a41      	ldr	r2, [pc, #260]	; (800652c <USB_SetTurnaroundTime+0x11c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d906      	bls.n	800643a <USB_SetTurnaroundTime+0x2a>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a40      	ldr	r2, [pc, #256]	; (8006530 <USB_SetTurnaroundTime+0x120>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d202      	bcs.n	800643a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006434:	230f      	movs	r3, #15
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e062      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4a3c      	ldr	r2, [pc, #240]	; (8006530 <USB_SetTurnaroundTime+0x120>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d306      	bcc.n	8006450 <USB_SetTurnaroundTime+0x40>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4a3b      	ldr	r2, [pc, #236]	; (8006534 <USB_SetTurnaroundTime+0x124>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d202      	bcs.n	8006450 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800644a:	230e      	movs	r3, #14
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e057      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4a38      	ldr	r2, [pc, #224]	; (8006534 <USB_SetTurnaroundTime+0x124>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d306      	bcc.n	8006466 <USB_SetTurnaroundTime+0x56>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a37      	ldr	r2, [pc, #220]	; (8006538 <USB_SetTurnaroundTime+0x128>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d202      	bcs.n	8006466 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006460:	230d      	movs	r3, #13
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e04c      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4a33      	ldr	r2, [pc, #204]	; (8006538 <USB_SetTurnaroundTime+0x128>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d306      	bcc.n	800647c <USB_SetTurnaroundTime+0x6c>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4a32      	ldr	r2, [pc, #200]	; (800653c <USB_SetTurnaroundTime+0x12c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d802      	bhi.n	800647c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006476:	230c      	movs	r3, #12
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	e041      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4a2f      	ldr	r2, [pc, #188]	; (800653c <USB_SetTurnaroundTime+0x12c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d906      	bls.n	8006492 <USB_SetTurnaroundTime+0x82>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4a2e      	ldr	r2, [pc, #184]	; (8006540 <USB_SetTurnaroundTime+0x130>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d802      	bhi.n	8006492 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800648c:	230b      	movs	r3, #11
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e036      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4a2a      	ldr	r2, [pc, #168]	; (8006540 <USB_SetTurnaroundTime+0x130>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d906      	bls.n	80064a8 <USB_SetTurnaroundTime+0x98>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4a29      	ldr	r2, [pc, #164]	; (8006544 <USB_SetTurnaroundTime+0x134>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d802      	bhi.n	80064a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064a2:	230a      	movs	r3, #10
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e02b      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4a26      	ldr	r2, [pc, #152]	; (8006544 <USB_SetTurnaroundTime+0x134>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d906      	bls.n	80064be <USB_SetTurnaroundTime+0xae>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4a25      	ldr	r2, [pc, #148]	; (8006548 <USB_SetTurnaroundTime+0x138>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d202      	bcs.n	80064be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064b8:	2309      	movs	r3, #9
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e020      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4a21      	ldr	r2, [pc, #132]	; (8006548 <USB_SetTurnaroundTime+0x138>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d306      	bcc.n	80064d4 <USB_SetTurnaroundTime+0xc4>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4a20      	ldr	r2, [pc, #128]	; (800654c <USB_SetTurnaroundTime+0x13c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d802      	bhi.n	80064d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064ce:	2308      	movs	r3, #8
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e015      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a1d      	ldr	r2, [pc, #116]	; (800654c <USB_SetTurnaroundTime+0x13c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d906      	bls.n	80064ea <USB_SetTurnaroundTime+0xda>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <USB_SetTurnaroundTime+0x140>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d202      	bcs.n	80064ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064e4:	2307      	movs	r3, #7
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e00a      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064ea:	2306      	movs	r3, #6
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e007      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064f6:	2309      	movs	r3, #9
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	e001      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064fc:	2309      	movs	r3, #9
 80064fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	029b      	lsls	r3, r3, #10
 8006514:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006518:	431a      	orrs	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	00d8acbf 	.word	0x00d8acbf
 8006530:	00e4e1c0 	.word	0x00e4e1c0
 8006534:	00f42400 	.word	0x00f42400
 8006538:	01067380 	.word	0x01067380
 800653c:	011a499f 	.word	0x011a499f
 8006540:	01312cff 	.word	0x01312cff
 8006544:	014ca43f 	.word	0x014ca43f
 8006548:	016e3600 	.word	0x016e3600
 800654c:	01a6ab1f 	.word	0x01a6ab1f
 8006550:	01e84800 	.word	0x01e84800

08006554 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f043 0201 	orr.w	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d115      	bne.n	80065e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065c6:	2001      	movs	r0, #1
 80065c8:	f7fb fc42 	bl	8001e50 <HAL_Delay>
      ms++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fa45 	bl	8007a62 <USB_GetMode>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d01e      	beq.n	800661c <USB_SetCurrentMode+0x84>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b31      	cmp	r3, #49	; 0x31
 80065e2:	d9f0      	bls.n	80065c6 <USB_SetCurrentMode+0x2e>
 80065e4:	e01a      	b.n	800661c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d115      	bne.n	8006618 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065f8:	2001      	movs	r0, #1
 80065fa:	f7fb fc29 	bl	8001e50 <HAL_Delay>
      ms++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fa2c 	bl	8007a62 <USB_GetMode>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <USB_SetCurrentMode+0x84>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b31      	cmp	r3, #49	; 0x31
 8006614:	d9f0      	bls.n	80065f8 <USB_SetCurrentMode+0x60>
 8006616:	e001      	b.n	800661c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e005      	b.n	8006628 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b32      	cmp	r3, #50	; 0x32
 8006620:	d101      	bne.n	8006626 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006630:	b084      	sub	sp, #16
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800663e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	e009      	b.n	8006664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3340      	adds	r3, #64	; 0x40
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	2200      	movs	r2, #0
 800665c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3301      	adds	r3, #1
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b0e      	cmp	r3, #14
 8006668:	d9f2      	bls.n	8006650 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11c      	bne.n	80066aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667e:	f043 0302 	orr.w	r3, r3, #2
 8006682:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
 80066a8:	e00b      	b.n	80066c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066c8:	461a      	mov	r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	4619      	mov	r1, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066dc:	461a      	mov	r2, r3
 80066de:	680b      	ldr	r3, [r1, #0]
 80066e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d10c      	bne.n	8006702 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066ee:	2100      	movs	r1, #0
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f965 	bl	80069c0 <USB_SetDevSpeed>
 80066f6:	e008      	b.n	800670a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066f8:	2101      	movs	r1, #1
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f960 	bl	80069c0 <USB_SetDevSpeed>
 8006700:	e003      	b.n	800670a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006702:	2103      	movs	r1, #3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f95b 	bl	80069c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800670a:	2110      	movs	r1, #16
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f8f3 	bl	80068f8 <USB_FlushTxFifo>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f91f 	bl	8006960 <USB_FlushRxFifo>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	461a      	mov	r2, r3
 8006734:	2300      	movs	r3, #0
 8006736:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	461a      	mov	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	461a      	mov	r2, r3
 800674c:	2300      	movs	r3, #0
 800674e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	e043      	b.n	80067de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800676c:	d118      	bne.n	80067a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006780:	461a      	mov	r2, r3
 8006782:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	e013      	b.n	80067b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006796:	461a      	mov	r2, r3
 8006798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e008      	b.n	80067b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	461a      	mov	r2, r3
 80067ae:	2300      	movs	r3, #0
 80067b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067be:	461a      	mov	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d0:	461a      	mov	r2, r3
 80067d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	3301      	adds	r3, #1
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d3b7      	bcc.n	8006756 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	e043      	b.n	8006874 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006802:	d118      	bne.n	8006836 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	461a      	mov	r2, r3
 8006818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e013      	b.n	8006848 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682c:	461a      	mov	r2, r3
 800682e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e008      	b.n	8006848 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	461a      	mov	r2, r3
 8006844:	2300      	movs	r3, #0
 8006846:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	461a      	mov	r2, r3
 8006856:	2300      	movs	r3, #0
 8006858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006866:	461a      	mov	r2, r3
 8006868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800686c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3b7      	bcc.n	80067ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800688e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800689c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f043 0210 	orr.w	r2, r3, #16
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <USB_DevInit+0x2c4>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f043 0208 	orr.w	r2, r3, #8
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d107      	bne.n	80068e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068dc:	f043 0304 	orr.w	r3, r3, #4
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068f0:	b004      	add	sp, #16
 80068f2:	4770      	bx	lr
 80068f4:	803c3800 	.word	0x803c3800

080068f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4a13      	ldr	r2, [pc, #76]	; (800695c <USB_FlushTxFifo+0x64>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e01b      	b.n	8006950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	daf2      	bge.n	8006906 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	019b      	lsls	r3, r3, #6
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a08      	ldr	r2, [pc, #32]	; (800695c <USB_FlushTxFifo+0x64>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e006      	b.n	8006950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b20      	cmp	r3, #32
 800694c:	d0f0      	beq.n	8006930 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	00030d40 	.word	0x00030d40

08006960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a11      	ldr	r2, [pc, #68]	; (80069bc <USB_FlushRxFifo+0x5c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d901      	bls.n	800697e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e018      	b.n	80069b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	daf2      	bge.n	800696c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2210      	movs	r2, #16
 800698e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a08      	ldr	r2, [pc, #32]	; (80069bc <USB_FlushRxFifo+0x5c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e006      	b.n	80069b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b10      	cmp	r3, #16
 80069ac:	d0f0      	beq.n	8006990 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	00030d40 	.word	0x00030d40

080069c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e0:	4313      	orrs	r3, r2
 80069e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 0306 	and.w	r3, r3, #6
 8006a0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d102      	bne.n	8006a18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]
 8006a16:	e00a      	b.n	8006a2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d002      	beq.n	8006a24 <USB_GetDevSpeed+0x32>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b06      	cmp	r3, #6
 8006a22:	d102      	bne.n	8006a2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a24:	2302      	movs	r3, #2
 8006a26:	75fb      	strb	r3, [r7, #23]
 8006a28:	e001      	b.n	8006a2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a2a:	230f      	movs	r3, #15
 8006a2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d13a      	bne.n	8006ace <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	2101      	movs	r1, #1
 8006a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	68f9      	ldr	r1, [r7, #12]
 8006a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a76:	4313      	orrs	r3, r2
 8006a78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d155      	bne.n	8006b3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	791b      	ldrb	r3, [r3, #4]
 8006aaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006aac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	059b      	lsls	r3, r3, #22
 8006ab2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e036      	b.n	8006b3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad4:	69da      	ldr	r2, [r3, #28]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	2101      	movs	r1, #1
 8006ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae4:	041b      	lsls	r3, r3, #16
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aec:	4313      	orrs	r3, r2
 8006aee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d11a      	bne.n	8006b3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	791b      	ldrb	r3, [r3, #4]
 8006b20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b22:	430b      	orrs	r3, r1
 8006b24:	4313      	orrs	r3, r2
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d161      	bne.n	8006c2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b7e:	d11f      	bne.n	8006bc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be0:	4013      	ands	r3, r2
 8006be2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c04:	4013      	ands	r3, r2
 8006c06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	0159      	lsls	r1, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c22:	4619      	mov	r1, r3
 8006c24:	4b35      	ldr	r3, [pc, #212]	; (8006cfc <USB_DeactivateEndpoint+0x1b0>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	600b      	str	r3, [r1, #0]
 8006c2a:	e060      	b.n	8006cee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c42:	d11f      	bne.n	8006c84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	2101      	movs	r1, #1
 8006c96:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	68f9      	ldr	r1, [r7, #12]
 8006ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	2101      	movs	r1, #1
 8006cba:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc8:	4013      	ands	r3, r2
 8006cca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	0159      	lsls	r1, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	440b      	add	r3, r1
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <USB_DeactivateEndpoint+0x1b4>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	ec337800 	.word	0xec337800
 8006d00:	eff37800 	.word	0xeff37800

08006d04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f040 815c 	bne.w	8006fde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d132      	bne.n	8006d94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8c:	0cdb      	lsrs	r3, r3, #19
 8006d8e:	04db      	lsls	r3, r3, #19
 8006d90:	6113      	str	r3, [r2, #16]
 8006d92:	e074      	b.n	8006e7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dae:	0cdb      	lsrs	r3, r3, #19
 8006db0:	04db      	lsls	r3, r3, #19
 8006db2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6999      	ldr	r1, [r3, #24]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	440b      	add	r3, r1
 8006df0:	1e59      	subs	r1, r3, #1
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dfa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006dfc:	4b9d      	ldr	r3, [pc, #628]	; (8007074 <USB_EPStartXfer+0x370>)
 8006dfe:	400b      	ands	r3, r1
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	0148      	lsls	r0, r1, #5
 8006e04:	69f9      	ldr	r1, [r7, #28]
 8006e06:	4401      	add	r1, r0
 8006e08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e26:	69b9      	ldr	r1, [r7, #24]
 8006e28:	0148      	lsls	r0, r1, #5
 8006e2a:	69f9      	ldr	r1, [r7, #28]
 8006e2c:	4401      	add	r1, r0
 8006e2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e32:	4313      	orrs	r3, r2
 8006e34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	791b      	ldrb	r3, [r3, #4]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d11f      	bne.n	8006e7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d14b      	bne.n	8006f1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d009      	beq.n	8006ea0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	791b      	ldrb	r3, [r3, #4]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d128      	bne.n	8006efa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d110      	bne.n	8006eda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e00f      	b.n	8006efa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	e133      	b.n	8007184 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	791b      	ldrb	r3, [r3, #4]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d015      	beq.n	8006f70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 811b 	beq.w	8007184 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	2101      	movs	r1, #1
 8006f60:	fa01 f303 	lsl.w	r3, r1, r3
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	634b      	str	r3, [r1, #52]	; 0x34
 8006f6e:	e109      	b.n	8007184 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d110      	bne.n	8006fa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	e00f      	b.n	8006fc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6919      	ldr	r1, [r3, #16]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	b298      	uxth	r0, r3
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fade 	bl	8007598 <USB_WritePacket>
 8006fdc:	e0d2      	b.n	8007184 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff8:	0cdb      	lsrs	r3, r3, #19
 8006ffa:	04db      	lsls	r3, r3, #19
 8006ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800701c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007020:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d126      	bne.n	8007078 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007040:	69b9      	ldr	r1, [r7, #24]
 8007042:	0148      	lsls	r0, r1, #5
 8007044:	69f9      	ldr	r1, [r7, #28]
 8007046:	4401      	add	r1, r0
 8007048:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800704c:	4313      	orrs	r3, r2
 800704e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800706a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800706e:	6113      	str	r3, [r2, #16]
 8007070:	e03a      	b.n	80070e8 <USB_EPStartXfer+0x3e4>
 8007072:	bf00      	nop
 8007074:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	4413      	add	r3, r2
 8007082:	1e5a      	subs	r2, r3, #1
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	fbb2 f3f3 	udiv	r3, r2, r3
 800708c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	8afa      	ldrh	r2, [r7, #22]
 8007094:	fb03 f202 	mul.w	r2, r3, r2
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	8afb      	ldrh	r3, [r7, #22]
 80070ac:	04d9      	lsls	r1, r3, #19
 80070ae:	4b38      	ldr	r3, [pc, #224]	; (8007190 <USB_EPStartXfer+0x48c>)
 80070b0:	400b      	ands	r3, r1
 80070b2:	69b9      	ldr	r1, [r7, #24]
 80070b4:	0148      	lsls	r0, r1, #5
 80070b6:	69f9      	ldr	r1, [r7, #28]
 80070b8:	4401      	add	r1, r0
 80070ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070be:	4313      	orrs	r3, r2
 80070c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d8:	69b9      	ldr	r1, [r7, #24]
 80070da:	0148      	lsls	r0, r1, #5
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	4401      	add	r1, r0
 80070e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070e4:	4313      	orrs	r3, r2
 80070e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d10d      	bne.n	800710a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6919      	ldr	r1, [r3, #16]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007106:	460a      	mov	r2, r1
 8007108:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	791b      	ldrb	r3, [r3, #4]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d128      	bne.n	8007164 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d110      	bne.n	8007144 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e00f      	b.n	8007164 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007162:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800717e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3720      	adds	r7, #32
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	1ff80000 	.word	0x1ff80000

08007194 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	f040 80ce 	bne.w	8007352 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d132      	bne.n	8007224 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	0cdb      	lsrs	r3, r3, #19
 800721e:	04db      	lsls	r3, r3, #19
 8007220:	6113      	str	r3, [r2, #16]
 8007222:	e04e      	b.n	80072c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723e:	0cdb      	lsrs	r3, r3, #19
 8007240:	04db      	lsls	r3, r3, #19
 8007242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007266:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	429a      	cmp	r2, r3
 8007272:	d903      	bls.n	800727c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b2:	6939      	ldr	r1, [r7, #16]
 80072b4:	0148      	lsls	r0, r1, #5
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	4401      	add	r1, r0
 80072ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072be:	4313      	orrs	r3, r2
 80072c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d11e      	bne.n	8007306 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	461a      	mov	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	e097      	b.n	8007436 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	0151      	lsls	r1, r2, #5
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	440a      	add	r2, r1
 800731c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007324:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8083 	beq.w	8007436 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	2101      	movs	r1, #1
 8007342:	fa01 f303 	lsl.w	r3, r1, r3
 8007346:	6979      	ldr	r1, [r7, #20]
 8007348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800734c:	4313      	orrs	r3, r2
 800734e:	634b      	str	r3, [r1, #52]	; 0x34
 8007350:	e071      	b.n	8007436 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736c:	0cdb      	lsrs	r3, r3, #19
 800736e:	04db      	lsls	r3, r3, #19
 8007370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007394:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073e4:	6939      	ldr	r1, [r7, #16]
 80073e6:	0148      	lsls	r0, r1, #5
 80073e8:	6979      	ldr	r1, [r7, #20]
 80073ea:	4401      	add	r1, r0
 80073ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073f0:	4313      	orrs	r3, r2
 80073f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d10d      	bne.n	8007416 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6919      	ldr	r1, [r3, #16]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007412:	460a      	mov	r2, r1
 8007414:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	440a      	add	r2, r1
 800742c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007434:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d14a      	bne.n	80074f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800747a:	f040 8086 	bne.w	800758a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	7812      	ldrb	r2, [r2, #0]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d902      	bls.n	80074dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
          break;
 80074da:	e056      	b.n	800758a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074f4:	d0e7      	beq.n	80074c6 <USB_EPStopXfer+0x82>
 80074f6:	e048      	b.n	800758a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800750c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007510:	d13b      	bne.n	800758a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	0151      	lsls	r1, r2, #5
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	440a      	add	r2, r1
 800752c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007530:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007534:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	7812      	ldrb	r2, [r2, #0]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	440a      	add	r2, r1
 8007550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007558:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f242 7210 	movw	r2, #10000	; 0x2710
 8007566:	4293      	cmp	r3, r2
 8007568:	d902      	bls.n	8007570 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
          break;
 800756e:	e00c      	b.n	800758a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007588:	d0e7      	beq.n	800755a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007598:	b480      	push	{r7}
 800759a:	b089      	sub	sp, #36	; 0x24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4611      	mov	r1, r2
 80075a4:	461a      	mov	r2, r3
 80075a6:	460b      	mov	r3, r1
 80075a8:	71fb      	strb	r3, [r7, #7]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d123      	bne.n	8007606 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075be:	88bb      	ldrh	r3, [r7, #4]
 80075c0:	3303      	adds	r3, #3
 80075c2:	089b      	lsrs	r3, r3, #2
 80075c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075c6:	2300      	movs	r3, #0
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	e018      	b.n	80075fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	031a      	lsls	r2, r3, #12
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d8:	461a      	mov	r2, r3
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	3301      	adds	r3, #1
 80075e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	3301      	adds	r3, #1
 80075ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	3301      	adds	r3, #1
 80075f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	3301      	adds	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	3301      	adds	r3, #1
 80075fc:	61bb      	str	r3, [r7, #24]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d3e2      	bcc.n	80075cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3724      	adds	r7, #36	; 0x24
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007614:	b480      	push	{r7}
 8007616:	b08b      	sub	sp, #44	; 0x2c
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	089b      	lsrs	r3, r3, #2
 800762e:	b29b      	uxth	r3, r3
 8007630:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007632:	88fb      	ldrh	r3, [r7, #6]
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800763a:	2300      	movs	r3, #0
 800763c:	623b      	str	r3, [r7, #32]
 800763e:	e014      	b.n	800766a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	601a      	str	r2, [r3, #0]
    pDest++;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	3301      	adds	r3, #1
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	3301      	adds	r3, #1
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	3301      	adds	r3, #1
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	3301      	adds	r3, #1
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	3301      	adds	r3, #1
 8007668:	623b      	str	r3, [r7, #32]
 800766a:	6a3a      	ldr	r2, [r7, #32]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	429a      	cmp	r2, r3
 8007670:	d3e6      	bcc.n	8007640 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007672:	8bfb      	ldrh	r3, [r7, #30]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01e      	beq.n	80076b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007682:	461a      	mov	r2, r3
 8007684:	f107 0310 	add.w	r3, r7, #16
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	fa22 f303 	lsr.w	r3, r2, r3
 8007698:	b2da      	uxtb	r2, r3
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	701a      	strb	r2, [r3, #0]
      i++;
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	3301      	adds	r3, #1
 80076a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	3301      	adds	r3, #1
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80076aa:	8bfb      	ldrh	r3, [r7, #30]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076b0:	8bfb      	ldrh	r3, [r7, #30]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1ea      	bne.n	800768c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	372c      	adds	r7, #44	; 0x2c
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d12c      	bne.n	800773a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	db12      	blt.n	8007718 <USB_EPSetStall+0x54>
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00f      	beq.n	8007718 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007716:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	440a      	add	r2, r1
 800772e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	e02b      	b.n	8007792 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	db12      	blt.n	8007772 <USB_EPSetStall+0xae>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00f      	beq.n	8007772 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007770:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007790:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d128      	bne.n	800780e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	791b      	ldrb	r3, [r3, #4]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d003      	beq.n	80077ec <USB_EPClearStall+0x4c>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	791b      	ldrb	r3, [r3, #4]
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d138      	bne.n	800785e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	e027      	b.n	800785e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800782c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	791b      	ldrb	r3, [r3, #4]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d003      	beq.n	800783e <USB_EPClearStall+0x9e>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	2b02      	cmp	r3, #2
 800783c:	d10f      	bne.n	800785e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800785c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800788e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80078a0:	68f9      	ldr	r1, [r7, #12]
 80078a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078a6:	4313      	orrs	r3, r2
 80078a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e6:	f023 0302 	bic.w	r3, r3, #2
 80078ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007914:	f023 0303 	bic.w	r3, r3, #3
 8007918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007928:	f043 0302 	orr.w	r3, r3, #2
 800792c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4013      	ands	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007954:	68fb      	ldr	r3, [r7, #12]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	4013      	ands	r3, r2
 8007984:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	0c1b      	lsrs	r3, r3, #16
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	4013      	ands	r3, r2
 80079b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	b29b      	uxth	r3, r3
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4013      	ands	r3, r2
 80079f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079f8:	68bb      	ldr	r3, [r7, #8]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b087      	sub	sp, #28
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	fa22 f303 	lsr.w	r3, r2, r3
 8007a36:	01db      	lsls	r3, r3, #7
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4013      	ands	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a54:	68bb      	ldr	r3, [r7, #8]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a9c:	f023 0307 	bic.w	r3, r3, #7
 8007aa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	460b      	mov	r3, r1
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	333c      	adds	r3, #60	; 0x3c
 8007ada:	3304      	adds	r3, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	4a26      	ldr	r2, [pc, #152]	; (8007b7c <USB_EP0_OutStart+0xb8>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d90a      	bls.n	8007afe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af8:	d101      	bne.n	8007afe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	e037      	b.n	8007b6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b04:	461a      	mov	r2, r3
 8007b06:	2300      	movs	r3, #0
 8007b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b2c:	f043 0318 	orr.w	r3, r3, #24
 8007b30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007b44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d10f      	bne.n	8007b6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007b6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	4f54300a 	.word	0x4f54300a

08007b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <USB_CoreReset+0x64>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d901      	bls.n	8007b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e01b      	b.n	8007bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	daf2      	bge.n	8007b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f043 0201 	orr.w	r2, r3, #1
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <USB_CoreReset+0x64>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d901      	bls.n	8007bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e006      	b.n	8007bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d0f0      	beq.n	8007bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	00030d40 	.word	0x00030d40

08007be8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bf8:	f002 fc3e 	bl	800a478 <USBD_static_malloc>
 8007bfc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d109      	bne.n	8007c18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	32b0      	adds	r2, #176	; 0xb0
 8007c0e:	2100      	movs	r1, #0
 8007c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c14:	2302      	movs	r3, #2
 8007c16:	e0d4      	b.n	8007dc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f002 fca0 	bl	800a564 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32b0      	adds	r2, #176	; 0xb0
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	32b0      	adds	r2, #176	; 0xb0
 8007c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7c1b      	ldrb	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d138      	bne.n	8007cc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c50:	4b5e      	ldr	r3, [pc, #376]	; (8007dcc <USBD_CDC_Init+0x1e4>)
 8007c52:	7819      	ldrb	r1, [r3, #0]
 8007c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c58:	2202      	movs	r2, #2
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f002 fae9 	bl	800a232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c60:	4b5a      	ldr	r3, [pc, #360]	; (8007dcc <USBD_CDC_Init+0x1e4>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f003 020f 	and.w	r2, r3, #15
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	3324      	adds	r3, #36	; 0x24
 8007c76:	2201      	movs	r2, #1
 8007c78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c7a:	4b55      	ldr	r3, [pc, #340]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007c7c:	7819      	ldrb	r1, [r3, #0]
 8007c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c82:	2202      	movs	r2, #2
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f002 fad4 	bl	800a232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c8a:	4b51      	ldr	r3, [pc, #324]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	f003 020f 	and.w	r2, r3, #15
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ca6:	4b4b      	ldr	r3, [pc, #300]	; (8007dd4 <USBD_CDC_Init+0x1ec>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f003 020f 	and.w	r2, r3, #15
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	3326      	adds	r3, #38	; 0x26
 8007cbc:	2210      	movs	r2, #16
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	e035      	b.n	8007d2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007cc2:	4b42      	ldr	r3, [pc, #264]	; (8007dcc <USBD_CDC_Init+0x1e4>)
 8007cc4:	7819      	ldrb	r1, [r3, #0]
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	2202      	movs	r2, #2
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f002 fab1 	bl	800a232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007cd0:	4b3e      	ldr	r3, [pc, #248]	; (8007dcc <USBD_CDC_Init+0x1e4>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	f003 020f 	and.w	r2, r3, #15
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	3324      	adds	r3, #36	; 0x24
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007cea:	4b39      	ldr	r3, [pc, #228]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007cec:	7819      	ldrb	r1, [r3, #0]
 8007cee:	2340      	movs	r3, #64	; 0x40
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f002 fa9d 	bl	800a232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007cf8:	4b35      	ldr	r3, [pc, #212]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 020f 	and.w	r2, r3, #15
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d10:	2201      	movs	r2, #1
 8007d12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d14:	4b2f      	ldr	r3, [pc, #188]	; (8007dd4 <USBD_CDC_Init+0x1ec>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 020f 	and.w	r2, r3, #15
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	3326      	adds	r3, #38	; 0x26
 8007d2a:	2210      	movs	r2, #16
 8007d2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d2e:	4b29      	ldr	r3, [pc, #164]	; (8007dd4 <USBD_CDC_Init+0x1ec>)
 8007d30:	7819      	ldrb	r1, [r3, #0]
 8007d32:	2308      	movs	r3, #8
 8007d34:	2203      	movs	r2, #3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f002 fa7b 	bl	800a232 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007d3c:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <USBD_CDC_Init+0x1ec>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	3324      	adds	r3, #36	; 0x24
 8007d52:	2201      	movs	r2, #1
 8007d54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	33b0      	adds	r3, #176	; 0xb0
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e018      	b.n	8007dc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	7c1b      	ldrb	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d98:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007d9a:	7819      	ldrb	r1, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f002 fb32 	bl	800a410 <USBD_LL_PrepareReceive>
 8007dac:	e008      	b.n	8007dc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007dae:	4b08      	ldr	r3, [pc, #32]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007db0:	7819      	ldrb	r1, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007db8:	2340      	movs	r3, #64	; 0x40
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f002 fb28 	bl	800a410 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	200000db 	.word	0x200000db
 8007dd0:	200000dc 	.word	0x200000dc
 8007dd4:	200000dd 	.word	0x200000dd

08007dd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007de4:	4b3a      	ldr	r3, [pc, #232]	; (8007ed0 <USBD_CDC_DeInit+0xf8>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f002 fa47 	bl	800a27e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007df0:	4b37      	ldr	r3, [pc, #220]	; (8007ed0 <USBD_CDC_DeInit+0xf8>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f003 020f 	and.w	r2, r3, #15
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	2200      	movs	r2, #0
 8007e08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007e0a:	4b32      	ldr	r3, [pc, #200]	; (8007ed4 <USBD_CDC_DeInit+0xfc>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f002 fa34 	bl	800a27e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e16:	4b2f      	ldr	r3, [pc, #188]	; (8007ed4 <USBD_CDC_DeInit+0xfc>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f003 020f 	and.w	r2, r3, #15
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e2e:	2200      	movs	r2, #0
 8007e30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007e32:	4b29      	ldr	r3, [pc, #164]	; (8007ed8 <USBD_CDC_DeInit+0x100>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f002 fa20 	bl	800a27e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007e3e:	4b26      	ldr	r3, [pc, #152]	; (8007ed8 <USBD_CDC_DeInit+0x100>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	f003 020f 	and.w	r2, r3, #15
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	3324      	adds	r3, #36	; 0x24
 8007e54:	2200      	movs	r2, #0
 8007e56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007e58:	4b1f      	ldr	r3, [pc, #124]	; (8007ed8 <USBD_CDC_DeInit+0x100>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	f003 020f 	and.w	r2, r3, #15
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	3326      	adds	r3, #38	; 0x26
 8007e6e:	2200      	movs	r2, #0
 8007e70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	32b0      	adds	r2, #176	; 0xb0
 8007e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01f      	beq.n	8007ec4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	33b0      	adds	r3, #176	; 0xb0
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	32b0      	adds	r2, #176	; 0xb0
 8007ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f002 faf4 	bl	800a494 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	32b0      	adds	r2, #176	; 0xb0
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	200000db 	.word	0x200000db
 8007ed4:	200000dc 	.word	0x200000dc
 8007ed8:	200000dd 	.word	0x200000dd

08007edc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	32b0      	adds	r2, #176	; 0xb0
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e0bf      	b.n	800808c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d050      	beq.n	8007fba <USBD_CDC_Setup+0xde>
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	f040 80af 	bne.w	800807c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	88db      	ldrh	r3, [r3, #6]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d03a      	beq.n	8007f9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b25b      	sxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	da1b      	bge.n	8007f68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	33b0      	adds	r3, #176	; 0xb0
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007f46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	88d2      	ldrh	r2, [r2, #6]
 8007f4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	88db      	ldrh	r3, [r3, #6]
 8007f52:	2b07      	cmp	r3, #7
 8007f54:	bf28      	it	cs
 8007f56:	2307      	movcs	r3, #7
 8007f58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	89fa      	ldrh	r2, [r7, #14]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 fd43 	bl	80099ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007f66:	e090      	b.n	800808a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	785a      	ldrb	r2, [r3, #1]
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	88db      	ldrh	r3, [r3, #6]
 8007f76:	2b3f      	cmp	r3, #63	; 0x3f
 8007f78:	d803      	bhi.n	8007f82 <USBD_CDC_Setup+0xa6>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	88db      	ldrh	r3, [r3, #6]
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	e000      	b.n	8007f84 <USBD_CDC_Setup+0xa8>
 8007f82:	2240      	movs	r2, #64	; 0x40
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007f8a:	6939      	ldr	r1, [r7, #16]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007f92:	461a      	mov	r2, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 fd55 	bl	8009a44 <USBD_CtlPrepareRx>
      break;
 8007f9a:	e076      	b.n	800808a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	33b0      	adds	r3, #176	; 0xb0
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	7850      	ldrb	r0, [r2, #1]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	4798      	blx	r3
      break;
 8007fb8:	e067      	b.n	800808a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b0b      	cmp	r3, #11
 8007fc0:	d851      	bhi.n	8008066 <USBD_CDC_Setup+0x18a>
 8007fc2:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <USBD_CDC_Setup+0xec>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08007ff9 	.word	0x08007ff9
 8007fcc:	08008075 	.word	0x08008075
 8007fd0:	08008067 	.word	0x08008067
 8007fd4:	08008067 	.word	0x08008067
 8007fd8:	08008067 	.word	0x08008067
 8007fdc:	08008067 	.word	0x08008067
 8007fe0:	08008067 	.word	0x08008067
 8007fe4:	08008067 	.word	0x08008067
 8007fe8:	08008067 	.word	0x08008067
 8007fec:	08008067 	.word	0x08008067
 8007ff0:	08008023 	.word	0x08008023
 8007ff4:	0800804d 	.word	0x0800804d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b03      	cmp	r3, #3
 8008002:	d107      	bne.n	8008014 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008004:	f107 030a 	add.w	r3, r7, #10
 8008008:	2202      	movs	r2, #2
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fced 	bl	80099ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008012:	e032      	b.n	800807a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fc77 	bl	800990a <USBD_CtlError>
            ret = USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	75fb      	strb	r3, [r7, #23]
          break;
 8008020:	e02b      	b.n	800807a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d107      	bne.n	800803e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800802e:	f107 030d 	add.w	r3, r7, #13
 8008032:	2201      	movs	r2, #1
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fcd8 	bl	80099ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800803c:	e01d      	b.n	800807a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 fc62 	bl	800990a <USBD_CtlError>
            ret = USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	75fb      	strb	r3, [r7, #23]
          break;
 800804a:	e016      	b.n	800807a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b03      	cmp	r3, #3
 8008056:	d00f      	beq.n	8008078 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 fc55 	bl	800990a <USBD_CtlError>
            ret = USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008064:	e008      	b.n	8008078 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 fc4e 	bl	800990a <USBD_CtlError>
          ret = USBD_FAIL;
 800806e:	2303      	movs	r3, #3
 8008070:	75fb      	strb	r3, [r7, #23]
          break;
 8008072:	e002      	b.n	800807a <USBD_CDC_Setup+0x19e>
          break;
 8008074:	bf00      	nop
 8008076:	e008      	b.n	800808a <USBD_CDC_Setup+0x1ae>
          break;
 8008078:	bf00      	nop
      }
      break;
 800807a:	e006      	b.n	800808a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 fc43 	bl	800990a <USBD_CtlError>
      ret = USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	75fb      	strb	r3, [r7, #23]
      break;
 8008088:	bf00      	nop
  }

  return (uint8_t)ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	32b0      	adds	r2, #176	; 0xb0
 80080b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e065      	b.n	800818a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	32b0      	adds	r2, #176	; 0xb0
 80080c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	f003 020f 	and.w	r2, r3, #15
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	440b      	add	r3, r1
 80080e0:	3318      	adds	r3, #24
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02f      	beq.n	8008148 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	f003 020f 	and.w	r2, r3, #15
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	3318      	adds	r3, #24
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	f003 010f 	and.w	r1, r3, #15
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	460b      	mov	r3, r1
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	440b      	add	r3, r1
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4403      	add	r3, r0
 8008110:	3348      	adds	r3, #72	; 0x48
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	fbb2 f1f3 	udiv	r1, r2, r3
 8008118:	fb01 f303 	mul.w	r3, r1, r3
 800811c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800811e:	2b00      	cmp	r3, #0
 8008120:	d112      	bne.n	8008148 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	f003 020f 	and.w	r2, r3, #15
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	3318      	adds	r3, #24
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800813a:	78f9      	ldrb	r1, [r7, #3]
 800813c:	2300      	movs	r3, #0
 800813e:	2200      	movs	r2, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f002 f944 	bl	800a3ce <USBD_LL_Transmit>
 8008146:	e01f      	b.n	8008188 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	33b0      	adds	r3, #176	; 0xb0
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d010      	beq.n	8008188 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	33b0      	adds	r3, #176	; 0xb0
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	32b0      	adds	r2, #176	; 0xb0
 80081a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	32b0      	adds	r2, #176	; 0xb0
 80081b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e01a      	b.n	80081fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f002 f942 	bl	800a452 <USBD_LL_GetRxDataSize>
 80081ce:	4602      	mov	r2, r0
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	33b0      	adds	r3, #176	; 0xb0
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80081f4:	4611      	mov	r1, r2
 80081f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	32b0      	adds	r2, #176	; 0xb0
 8008214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008218:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	e025      	b.n	8008270 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	33b0      	adds	r3, #176	; 0xb0
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01a      	beq.n	800826e <USBD_CDC_EP0_RxReady+0x6c>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800823e:	2bff      	cmp	r3, #255	; 0xff
 8008240:	d015      	beq.n	800826e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	33b0      	adds	r3, #176	; 0xb0
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800825a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008262:	b292      	uxth	r2, r2
 8008264:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	22ff      	movs	r2, #255	; 0xff
 800826a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008280:	2182      	movs	r1, #130	; 0x82
 8008282:	4818      	ldr	r0, [pc, #96]	; (80082e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008284:	f000 fd09 	bl	8008c9a <USBD_GetEpDesc>
 8008288:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800828a:	2101      	movs	r1, #1
 800828c:	4815      	ldr	r0, [pc, #84]	; (80082e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800828e:	f000 fd04 	bl	8008c9a <USBD_GetEpDesc>
 8008292:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008294:	2181      	movs	r1, #129	; 0x81
 8008296:	4813      	ldr	r0, [pc, #76]	; (80082e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008298:	f000 fcff 	bl	8008c9a <USBD_GetEpDesc>
 800829c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2210      	movs	r2, #16
 80082a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d006      	beq.n	80082be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b8:	711a      	strb	r2, [r3, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d006      	beq.n	80082d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082cc:	711a      	strb	r2, [r3, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2243      	movs	r2, #67	; 0x43
 80082d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082d8:	4b02      	ldr	r3, [pc, #8]	; (80082e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000098 	.word	0x20000098

080082e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082f0:	2182      	movs	r1, #130	; 0x82
 80082f2:	4818      	ldr	r0, [pc, #96]	; (8008354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80082f4:	f000 fcd1 	bl	8008c9a <USBD_GetEpDesc>
 80082f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082fa:	2101      	movs	r1, #1
 80082fc:	4815      	ldr	r0, [pc, #84]	; (8008354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80082fe:	f000 fccc 	bl	8008c9a <USBD_GetEpDesc>
 8008302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008304:	2181      	movs	r1, #129	; 0x81
 8008306:	4813      	ldr	r0, [pc, #76]	; (8008354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008308:	f000 fcc7 	bl	8008c9a <USBD_GetEpDesc>
 800830c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2210      	movs	r2, #16
 8008318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d006      	beq.n	800832e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2200      	movs	r2, #0
 8008324:	711a      	strb	r2, [r3, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f042 0202 	orr.w	r2, r2, #2
 800832c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d006      	beq.n	8008342 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	711a      	strb	r2, [r3, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f042 0202 	orr.w	r2, r2, #2
 8008340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2243      	movs	r2, #67	; 0x43
 8008346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008348:	4b02      	ldr	r3, [pc, #8]	; (8008354 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000098 	.word	0x20000098

08008358 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008360:	2182      	movs	r1, #130	; 0x82
 8008362:	4818      	ldr	r0, [pc, #96]	; (80083c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008364:	f000 fc99 	bl	8008c9a <USBD_GetEpDesc>
 8008368:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800836a:	2101      	movs	r1, #1
 800836c:	4815      	ldr	r0, [pc, #84]	; (80083c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800836e:	f000 fc94 	bl	8008c9a <USBD_GetEpDesc>
 8008372:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008374:	2181      	movs	r1, #129	; 0x81
 8008376:	4813      	ldr	r0, [pc, #76]	; (80083c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008378:	f000 fc8f 	bl	8008c9a <USBD_GetEpDesc>
 800837c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2210      	movs	r2, #16
 8008388:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d006      	beq.n	800839e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2200      	movs	r2, #0
 8008394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008398:	711a      	strb	r2, [r3, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d006      	beq.n	80083b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ac:	711a      	strb	r2, [r3, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2243      	movs	r2, #67	; 0x43
 80083b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083b8:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000098 	.word	0x20000098

080083c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220a      	movs	r2, #10
 80083d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80083d6:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	20000054 	.word	0x20000054

080083e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e009      	b.n	8008410 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	33b0      	adds	r3, #176	; 0xb0
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	32b0      	adds	r2, #176	; 0xb0
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800843e:	2303      	movs	r3, #3
 8008440:	e008      	b.n	8008454 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	32b0      	adds	r2, #176	; 0xb0
 8008474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008478:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008480:	2303      	movs	r3, #3
 8008482:	e004      	b.n	800848e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
	...

0800849c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32b0      	adds	r2, #176	; 0xb0
 80084ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32b0      	adds	r2, #176	; 0xb0
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e018      	b.n	80084fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7c1b      	ldrb	r3, [r3, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084d2:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <USBD_CDC_ReceivePacket+0x68>)
 80084d4:	7819      	ldrb	r1, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 ff95 	bl	800a410 <USBD_LL_PrepareReceive>
 80084e6:	e008      	b.n	80084fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <USBD_CDC_ReceivePacket+0x68>)
 80084ea:	7819      	ldrb	r1, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 ff8b 	bl	800a410 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	200000dc 	.word	0x200000dc

08008508 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800851c:	2303      	movs	r3, #3
 800851e:	e01f      	b.n	8008560 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	79fa      	ldrb	r2, [r7, #7]
 8008552:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f001 fdff 	bl	800a158 <USBD_LL_Init>
 800855a:	4603      	mov	r3, r0
 800855c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800855e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800857c:	2303      	movs	r3, #3
 800857e:	e025      	b.n	80085cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	32ae      	adds	r2, #174	; 0xae
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00f      	beq.n	80085bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	32ae      	adds	r2, #174	; 0xae
 80085a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	f107 020e 	add.w	r2, r7, #14
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	4602      	mov	r2, r0
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 fe0d 	bl	800a1fc <USBD_LL_Start>
 80085e2:	4603      	mov	r3, r0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008618:	2b00      	cmp	r3, #0
 800861a:	d009      	beq.n	8008630 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	4611      	mov	r1, r2
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	4798      	blx	r3
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	78fa      	ldrb	r2, [r7, #3]
 8008654:	4611      	mov	r1, r2
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008660:	2303      	movs	r3, #3
 8008662:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	f001 f908 	bl	8009896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008694:	461a      	mov	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086a2:	f003 031f 	and.w	r3, r3, #31
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d01a      	beq.n	80086e0 <USBD_LL_SetupStage+0x72>
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d822      	bhi.n	80086f4 <USBD_LL_SetupStage+0x86>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <USBD_LL_SetupStage+0x4a>
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d00a      	beq.n	80086cc <USBD_LL_SetupStage+0x5e>
 80086b6:	e01d      	b.n	80086f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fb5f 	bl	8008d84 <USBD_StdDevReq>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
      break;
 80086ca:	e020      	b.n	800870e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fbc7 	bl	8008e68 <USBD_StdItfReq>
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]
      break;
 80086de:	e016      	b.n	800870e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fc29 	bl	8008f40 <USBD_StdEPReq>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
      break;
 80086f2:	e00c      	b.n	800870e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fdda 	bl	800a2bc <USBD_LL_StallEP>
 8008708:	4603      	mov	r3, r0
 800870a:	73fb      	strb	r3, [r7, #15]
      break;
 800870c:	bf00      	nop
  }

  return ret;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	460b      	mov	r3, r1
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800872a:	7afb      	ldrb	r3, [r7, #11]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d16e      	bne.n	800880e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008736:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800873e:	2b03      	cmp	r3, #3
 8008740:	f040 8098 	bne.w	8008874 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	429a      	cmp	r2, r3
 800874e:	d913      	bls.n	8008778 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	1ad2      	subs	r2, r2, r3
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	4293      	cmp	r3, r2
 8008768:	bf28      	it	cs
 800876a:	4613      	movcs	r3, r2
 800876c:	461a      	mov	r2, r3
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f001 f984 	bl	8009a7e <USBD_CtlContinueRx>
 8008776:	e07d      	b.n	8008874 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800877e:	f003 031f 	and.w	r3, r3, #31
 8008782:	2b02      	cmp	r3, #2
 8008784:	d014      	beq.n	80087b0 <USBD_LL_DataOutStage+0x98>
 8008786:	2b02      	cmp	r3, #2
 8008788:	d81d      	bhi.n	80087c6 <USBD_LL_DataOutStage+0xae>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <USBD_LL_DataOutStage+0x7c>
 800878e:	2b01      	cmp	r3, #1
 8008790:	d003      	beq.n	800879a <USBD_LL_DataOutStage+0x82>
 8008792:	e018      	b.n	80087c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	75bb      	strb	r3, [r7, #22]
            break;
 8008798:	e018      	b.n	80087cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	4619      	mov	r1, r3
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fa5e 	bl	8008c66 <USBD_CoreFindIF>
 80087aa:	4603      	mov	r3, r0
 80087ac:	75bb      	strb	r3, [r7, #22]
            break;
 80087ae:	e00d      	b.n	80087cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	4619      	mov	r1, r3
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 fa60 	bl	8008c80 <USBD_CoreFindEP>
 80087c0:	4603      	mov	r3, r0
 80087c2:	75bb      	strb	r3, [r7, #22]
            break;
 80087c4:	e002      	b.n	80087cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75bb      	strb	r3, [r7, #22]
            break;
 80087ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80087cc:	7dbb      	ldrb	r3, [r7, #22]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d119      	bne.n	8008806 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d113      	bne.n	8008806 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80087de:	7dba      	ldrb	r2, [r7, #22]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	32ae      	adds	r2, #174	; 0xae
 80087e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80087ee:	7dba      	ldrb	r2, [r7, #22]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80087f6:	7dba      	ldrb	r2, [r7, #22]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	32ae      	adds	r2, #174	; 0xae
 80087fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f001 f94a 	bl	8009aa0 <USBD_CtlSendStatus>
 800880c:	e032      	b.n	8008874 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800880e:	7afb      	ldrb	r3, [r7, #11]
 8008810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008814:	b2db      	uxtb	r3, r3
 8008816:	4619      	mov	r1, r3
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fa31 	bl	8008c80 <USBD_CoreFindEP>
 800881e:	4603      	mov	r3, r0
 8008820:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008822:	7dbb      	ldrb	r3, [r7, #22]
 8008824:	2bff      	cmp	r3, #255	; 0xff
 8008826:	d025      	beq.n	8008874 <USBD_LL_DataOutStage+0x15c>
 8008828:	7dbb      	ldrb	r3, [r7, #22]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d122      	bne.n	8008874 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b03      	cmp	r3, #3
 8008838:	d117      	bne.n	800886a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800883a:	7dba      	ldrb	r2, [r7, #22]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	32ae      	adds	r2, #174	; 0xae
 8008840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00f      	beq.n	800886a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800884a:	7dba      	ldrb	r2, [r7, #22]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008852:	7dba      	ldrb	r2, [r7, #22]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	32ae      	adds	r2, #174	; 0xae
 8008858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	7afa      	ldrb	r2, [r7, #11]
 8008860:	4611      	mov	r1, r2
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	4798      	blx	r3
 8008866:	4603      	mov	r3, r0
 8008868:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	e000      	b.n	8008876 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b086      	sub	sp, #24
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	460b      	mov	r3, r1
 8008888:	607a      	str	r2, [r7, #4]
 800888a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d16f      	bne.n	8008972 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3314      	adds	r3, #20
 8008896:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d15a      	bne.n	8008958 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d914      	bls.n	80088d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	1ad2      	subs	r2, r2, r3
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	461a      	mov	r2, r3
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f001 f8ac 	bl	8009a22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ca:	2300      	movs	r3, #0
 80088cc:	2200      	movs	r2, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f001 fd9d 	bl	800a410 <USBD_LL_PrepareReceive>
 80088d6:	e03f      	b.n	8008958 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d11c      	bne.n	800891e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d316      	bcc.n	800891e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d20f      	bcs.n	800891e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088fe:	2200      	movs	r2, #0
 8008900:	2100      	movs	r1, #0
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f001 f88d 	bl	8009a22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008910:	2300      	movs	r3, #0
 8008912:	2200      	movs	r2, #0
 8008914:	2100      	movs	r1, #0
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f001 fd7a 	bl	800a410 <USBD_LL_PrepareReceive>
 800891c:	e01c      	b.n	8008958 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b03      	cmp	r3, #3
 8008928:	d10f      	bne.n	800894a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800894a:	2180      	movs	r1, #128	; 0x80
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f001 fcb5 	bl	800a2bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f001 f8b7 	bl	8009ac6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d03a      	beq.n	80089d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f7ff fe42 	bl	80085ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008970:	e032      	b.n	80089d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008972:	7afb      	ldrb	r3, [r7, #11]
 8008974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008978:	b2db      	uxtb	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 f97f 	bl	8008c80 <USBD_CoreFindEP>
 8008982:	4603      	mov	r3, r0
 8008984:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008986:	7dfb      	ldrb	r3, [r7, #23]
 8008988:	2bff      	cmp	r3, #255	; 0xff
 800898a:	d025      	beq.n	80089d8 <USBD_LL_DataInStage+0x15a>
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d122      	bne.n	80089d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b03      	cmp	r3, #3
 800899c:	d11c      	bne.n	80089d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800899e:	7dfa      	ldrb	r2, [r7, #23]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	32ae      	adds	r2, #174	; 0xae
 80089a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d014      	beq.n	80089d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80089ae:	7dfa      	ldrb	r2, [r7, #23]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80089b6:	7dfa      	ldrb	r2, [r7, #23]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	32ae      	adds	r2, #174	; 0xae
 80089bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	7afa      	ldrb	r2, [r7, #11]
 80089c4:	4611      	mov	r1, r2
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	4798      	blx	r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80089ce:	7dbb      	ldrb	r3, [r7, #22]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80089d4:	7dbb      	ldrb	r3, [r7, #22]
 80089d6:	e000      	b.n	80089da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d014      	beq.n	8008a48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00e      	beq.n	8008a48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6852      	ldr	r2, [r2, #4]
 8008a36:	b2d2      	uxtb	r2, r2
 8008a38:	4611      	mov	r1, r2
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a44:	2303      	movs	r3, #3
 8008a46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a48:	2340      	movs	r3, #64	; 0x40
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fbef 	bl	800a232 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2240      	movs	r2, #64	; 0x40
 8008a60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a64:	2340      	movs	r3, #64	; 0x40
 8008a66:	2200      	movs	r2, #0
 8008a68:	2180      	movs	r1, #128	; 0x80
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fbe1 	bl	800a232 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2240      	movs	r2, #64	; 0x40
 8008a7a:	621a      	str	r2, [r3, #32]

  return ret;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2204      	movs	r2, #4
 8008ac0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d106      	bne.n	8008af4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d110      	bne.n	8008b38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	32ae      	adds	r2, #174	; 0xae
 8008b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e01c      	b.n	8008b9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d115      	bne.n	8008b9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	32ae      	adds	r2, #174	; 0xae
 8008b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	32ae      	adds	r2, #174	; 0xae
 8008b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	4611      	mov	r1, r2
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	32ae      	adds	r2, #174	; 0xae
 8008bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e01c      	b.n	8008c02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b03      	cmp	r3, #3
 8008bd2:	d115      	bne.n	8008c00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	32ae      	adds	r2, #174	; 0xae
 8008bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	32ae      	adds	r2, #174	; 0xae
 8008bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00e      	beq.n	8008c5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6852      	ldr	r2, [r2, #4]
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	4798      	blx	r3
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b086      	sub	sp, #24
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	885b      	ldrh	r3, [r3, #2]
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d920      	bls.n	8008d04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008cca:	e013      	b.n	8008cf4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ccc:	f107 030a 	add.w	r3, r7, #10
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6978      	ldr	r0, [r7, #20]
 8008cd4:	f000 f81b 	bl	8008d0e <USBD_GetNextDesc>
 8008cd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	2b05      	cmp	r3, #5
 8008ce0:	d108      	bne.n	8008cf4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	789b      	ldrb	r3, [r3, #2]
 8008cea:	78fa      	ldrb	r2, [r7, #3]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d008      	beq.n	8008d02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	885b      	ldrh	r3, [r3, #2]
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	897b      	ldrh	r3, [r7, #10]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d8e5      	bhi.n	8008ccc <USBD_GetEpDesc+0x32>
 8008d00:	e000      	b.n	8008d04 <USBD_GetEpDesc+0x6a>
          break;
 8008d02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d04:	693b      	ldr	r3, [r7, #16]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	881a      	ldrh	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	4413      	add	r3, r2
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4413      	add	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d66:	8a3b      	ldrh	r3, [r7, #16]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	b21a      	sxth	r2, r3
 8008d6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	b21b      	sxth	r3, r3
 8008d74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d76:	89fb      	ldrh	r3, [r7, #14]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d9a:	2b40      	cmp	r3, #64	; 0x40
 8008d9c:	d005      	beq.n	8008daa <USBD_StdDevReq+0x26>
 8008d9e:	2b40      	cmp	r3, #64	; 0x40
 8008da0:	d857      	bhi.n	8008e52 <USBD_StdDevReq+0xce>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00f      	beq.n	8008dc6 <USBD_StdDevReq+0x42>
 8008da6:	2b20      	cmp	r3, #32
 8008da8:	d153      	bne.n	8008e52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	32ae      	adds	r2, #174	; 0xae
 8008db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc4:	e04a      	b.n	8008e5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	2b09      	cmp	r3, #9
 8008dcc:	d83b      	bhi.n	8008e46 <USBD_StdDevReq+0xc2>
 8008dce:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <USBD_StdDevReq+0x50>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e29 	.word	0x08008e29
 8008dd8:	08008e3d 	.word	0x08008e3d
 8008ddc:	08008e47 	.word	0x08008e47
 8008de0:	08008e33 	.word	0x08008e33
 8008de4:	08008e47 	.word	0x08008e47
 8008de8:	08008e07 	.word	0x08008e07
 8008dec:	08008dfd 	.word	0x08008dfd
 8008df0:	08008e47 	.word	0x08008e47
 8008df4:	08008e1f 	.word	0x08008e1f
 8008df8:	08008e11 	.word	0x08008e11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fa3c 	bl	800927c <USBD_GetDescriptor>
          break;
 8008e04:	e024      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fba1 	bl	8009550 <USBD_SetAddress>
          break;
 8008e0e:	e01f      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fbe0 	bl	80095d8 <USBD_SetConfig>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e1c:	e018      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fc83 	bl	800972c <USBD_GetConfig>
          break;
 8008e26:	e013      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fcb4 	bl	8009798 <USBD_GetStatus>
          break;
 8008e30:	e00e      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fce3 	bl	8009800 <USBD_SetFeature>
          break;
 8008e3a:	e009      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fd07 	bl	8009852 <USBD_ClrFeature>
          break;
 8008e44:	e004      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fd5e 	bl	800990a <USBD_CtlError>
          break;
 8008e4e:	bf00      	nop
      }
      break;
 8008e50:	e004      	b.n	8008e5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fd58 	bl	800990a <USBD_CtlError>
      break;
 8008e5a:	bf00      	nop
  }

  return ret;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop

08008e68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e7e:	2b40      	cmp	r3, #64	; 0x40
 8008e80:	d005      	beq.n	8008e8e <USBD_StdItfReq+0x26>
 8008e82:	2b40      	cmp	r3, #64	; 0x40
 8008e84:	d852      	bhi.n	8008f2c <USBD_StdItfReq+0xc4>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <USBD_StdItfReq+0x26>
 8008e8a:	2b20      	cmp	r3, #32
 8008e8c:	d14e      	bne.n	8008f2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d840      	bhi.n	8008f1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	889b      	ldrh	r3, [r3, #4]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d836      	bhi.n	8008f14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	889b      	ldrh	r3, [r3, #4]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff fed9 	bl	8008c66 <USBD_CoreFindIF>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2bff      	cmp	r3, #255	; 0xff
 8008ebc:	d01d      	beq.n	8008efa <USBD_StdItfReq+0x92>
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d11a      	bne.n	8008efa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ec4:	7bba      	ldrb	r2, [r7, #14]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	32ae      	adds	r2, #174	; 0xae
 8008eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00f      	beq.n	8008ef4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ed4:	7bba      	ldrb	r2, [r7, #14]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008edc:	7bba      	ldrb	r2, [r7, #14]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	32ae      	adds	r2, #174	; 0xae
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4798      	blx	r3
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ef2:	e004      	b.n	8008efe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ef8:	e001      	b.n	8008efe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008efa:	2303      	movs	r3, #3
 8008efc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	88db      	ldrh	r3, [r3, #6]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d110      	bne.n	8008f28 <USBD_StdItfReq+0xc0>
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10d      	bne.n	8008f28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fdc7 	bl	8009aa0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f12:	e009      	b.n	8008f28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fcf7 	bl	800990a <USBD_CtlError>
          break;
 8008f1c:	e004      	b.n	8008f28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fcf2 	bl	800990a <USBD_CtlError>
          break;
 8008f26:	e000      	b.n	8008f2a <USBD_StdItfReq+0xc2>
          break;
 8008f28:	bf00      	nop
      }
      break;
 8008f2a:	e004      	b.n	8008f36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fceb 	bl	800990a <USBD_CtlError>
      break;
 8008f34:	bf00      	nop
  }

  return ret;
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	889b      	ldrh	r3, [r3, #4]
 8008f52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f5c:	2b40      	cmp	r3, #64	; 0x40
 8008f5e:	d007      	beq.n	8008f70 <USBD_StdEPReq+0x30>
 8008f60:	2b40      	cmp	r3, #64	; 0x40
 8008f62:	f200 817f 	bhi.w	8009264 <USBD_StdEPReq+0x324>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d02a      	beq.n	8008fc0 <USBD_StdEPReq+0x80>
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	f040 817a 	bne.w	8009264 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff fe83 	bl	8008c80 <USBD_CoreFindEP>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f7e:	7b7b      	ldrb	r3, [r7, #13]
 8008f80:	2bff      	cmp	r3, #255	; 0xff
 8008f82:	f000 8174 	beq.w	800926e <USBD_StdEPReq+0x32e>
 8008f86:	7b7b      	ldrb	r3, [r7, #13]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f040 8170 	bne.w	800926e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f8e:	7b7a      	ldrb	r2, [r7, #13]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f96:	7b7a      	ldrb	r2, [r7, #13]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	32ae      	adds	r2, #174	; 0xae
 8008f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 8163 	beq.w	800926e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008fa8:	7b7a      	ldrb	r2, [r7, #13]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	32ae      	adds	r2, #174	; 0xae
 8008fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fbe:	e156      	b.n	800926e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d008      	beq.n	8008fda <USBD_StdEPReq+0x9a>
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	f300 8145 	bgt.w	8009258 <USBD_StdEPReq+0x318>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 809b 	beq.w	800910a <USBD_StdEPReq+0x1ca>
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d03c      	beq.n	8009052 <USBD_StdEPReq+0x112>
 8008fd8:	e13e      	b.n	8009258 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d002      	beq.n	8008fec <USBD_StdEPReq+0xac>
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d016      	beq.n	8009018 <USBD_StdEPReq+0xd8>
 8008fea:	e02c      	b.n	8009046 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00d      	beq.n	800900e <USBD_StdEPReq+0xce>
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b80      	cmp	r3, #128	; 0x80
 8008ff6:	d00a      	beq.n	800900e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 f95d 	bl	800a2bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009002:	2180      	movs	r1, #128	; 0x80
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f001 f959 	bl	800a2bc <USBD_LL_StallEP>
 800900a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800900c:	e020      	b.n	8009050 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc7a 	bl	800990a <USBD_CtlError>
              break;
 8009016:	e01b      	b.n	8009050 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	885b      	ldrh	r3, [r3, #2]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10e      	bne.n	800903e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <USBD_StdEPReq+0xfe>
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b80      	cmp	r3, #128	; 0x80
 800902a:	d008      	beq.n	800903e <USBD_StdEPReq+0xfe>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	88db      	ldrh	r3, [r3, #6]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 f93f 	bl	800a2bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fd2e 	bl	8009aa0 <USBD_CtlSendStatus>

              break;
 8009044:	e004      	b.n	8009050 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fc5e 	bl	800990a <USBD_CtlError>
              break;
 800904e:	bf00      	nop
          }
          break;
 8009050:	e107      	b.n	8009262 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b02      	cmp	r3, #2
 800905c:	d002      	beq.n	8009064 <USBD_StdEPReq+0x124>
 800905e:	2b03      	cmp	r3, #3
 8009060:	d016      	beq.n	8009090 <USBD_StdEPReq+0x150>
 8009062:	e04b      	b.n	80090fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00d      	beq.n	8009086 <USBD_StdEPReq+0x146>
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	2b80      	cmp	r3, #128	; 0x80
 800906e:	d00a      	beq.n	8009086 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 f921 	bl	800a2bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800907a:	2180      	movs	r1, #128	; 0x80
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 f91d 	bl	800a2bc <USBD_LL_StallEP>
 8009082:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009084:	e040      	b.n	8009108 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fc3e 	bl	800990a <USBD_CtlError>
              break;
 800908e:	e03b      	b.n	8009108 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	885b      	ldrh	r3, [r3, #2]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d136      	bne.n	8009106 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d004      	beq.n	80090ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 f927 	bl	800a2fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fcf7 	bl	8009aa0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff fde2 	bl	8008c80 <USBD_CoreFindEP>
 80090bc:	4603      	mov	r3, r0
 80090be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090c0:	7b7b      	ldrb	r3, [r7, #13]
 80090c2:	2bff      	cmp	r3, #255	; 0xff
 80090c4:	d01f      	beq.n	8009106 <USBD_StdEPReq+0x1c6>
 80090c6:	7b7b      	ldrb	r3, [r7, #13]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d11c      	bne.n	8009106 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80090cc:	7b7a      	ldrb	r2, [r7, #13]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80090d4:	7b7a      	ldrb	r2, [r7, #13]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	32ae      	adds	r2, #174	; 0xae
 80090da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d010      	beq.n	8009106 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090e4:	7b7a      	ldrb	r2, [r7, #13]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	32ae      	adds	r2, #174	; 0xae
 80090ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80090fa:	e004      	b.n	8009106 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fc03 	bl	800990a <USBD_CtlError>
              break;
 8009104:	e000      	b.n	8009108 <USBD_StdEPReq+0x1c8>
              break;
 8009106:	bf00      	nop
          }
          break;
 8009108:	e0ab      	b.n	8009262 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b02      	cmp	r3, #2
 8009114:	d002      	beq.n	800911c <USBD_StdEPReq+0x1dc>
 8009116:	2b03      	cmp	r3, #3
 8009118:	d032      	beq.n	8009180 <USBD_StdEPReq+0x240>
 800911a:	e097      	b.n	800924c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d007      	beq.n	8009132 <USBD_StdEPReq+0x1f2>
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b80      	cmp	r3, #128	; 0x80
 8009126:	d004      	beq.n	8009132 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fbed 	bl	800990a <USBD_CtlError>
                break;
 8009130:	e091      	b.n	8009256 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009136:	2b00      	cmp	r3, #0
 8009138:	da0b      	bge.n	8009152 <USBD_StdEPReq+0x212>
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009140:	4613      	mov	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	3310      	adds	r3, #16
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	4413      	add	r3, r2
 800914e:	3304      	adds	r3, #4
 8009150:	e00b      	b.n	800916a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	4413      	add	r3, r2
 8009168:	3304      	adds	r3, #4
 800916a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2202      	movs	r2, #2
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fc37 	bl	80099ec <USBD_CtlSendData>
              break;
 800917e:	e06a      	b.n	8009256 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009184:	2b00      	cmp	r3, #0
 8009186:	da11      	bge.n	80091ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	f003 020f 	and.w	r2, r3, #15
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	440b      	add	r3, r1
 800919a:	3324      	adds	r3, #36	; 0x24
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d117      	bne.n	80091d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fbb0 	bl	800990a <USBD_CtlError>
                  break;
 80091aa:	e054      	b.n	8009256 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	f003 020f 	and.w	r2, r3, #15
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4613      	mov	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	440b      	add	r3, r1
 80091be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fb9d 	bl	800990a <USBD_CtlError>
                  break;
 80091d0:	e041      	b.n	8009256 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	da0b      	bge.n	80091f2 <USBD_StdEPReq+0x2b2>
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	3310      	adds	r3, #16
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	4413      	add	r3, r2
 80091ee:	3304      	adds	r3, #4
 80091f0:	e00b      	b.n	800920a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	4413      	add	r3, r2
 8009208:	3304      	adds	r3, #4
 800920a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800920c:	7bbb      	ldrb	r3, [r7, #14]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <USBD_StdEPReq+0x2d8>
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	2b80      	cmp	r3, #128	; 0x80
 8009216:	d103      	bne.n	8009220 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
 800921e:	e00e      	b.n	800923e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f887 	bl	800a338 <USBD_LL_IsStallEP>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2201      	movs	r2, #1
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	e002      	b.n	800923e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2202      	movs	r2, #2
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fbd1 	bl	80099ec <USBD_CtlSendData>
              break;
 800924a:	e004      	b.n	8009256 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fb5b 	bl	800990a <USBD_CtlError>
              break;
 8009254:	bf00      	nop
          }
          break;
 8009256:	e004      	b.n	8009262 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fb55 	bl	800990a <USBD_CtlError>
          break;
 8009260:	bf00      	nop
      }
      break;
 8009262:	e005      	b.n	8009270 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fb4f 	bl	800990a <USBD_CtlError>
      break;
 800926c:	e000      	b.n	8009270 <USBD_StdEPReq+0x330>
      break;
 800926e:	bf00      	nop
  }

  return ret;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	0a1b      	lsrs	r3, r3, #8
 8009298:	b29b      	uxth	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	2b06      	cmp	r3, #6
 800929e:	f200 8128 	bhi.w	80094f2 <USBD_GetDescriptor+0x276>
 80092a2:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <USBD_GetDescriptor+0x2c>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092c5 	.word	0x080092c5
 80092ac:	080092dd 	.word	0x080092dd
 80092b0:	0800931d 	.word	0x0800931d
 80092b4:	080094f3 	.word	0x080094f3
 80092b8:	080094f3 	.word	0x080094f3
 80092bc:	08009493 	.word	0x08009493
 80092c0:	080094bf 	.word	0x080094bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7c12      	ldrb	r2, [r2, #16]
 80092d0:	f107 0108 	add.w	r1, r7, #8
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
 80092d8:	60f8      	str	r0, [r7, #12]
      break;
 80092da:	e112      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7c1b      	ldrb	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10d      	bne.n	8009300 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f107 0208 	add.w	r2, r7, #8
 80092f0:	4610      	mov	r0, r2
 80092f2:	4798      	blx	r3
 80092f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	2202      	movs	r2, #2
 80092fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092fe:	e100      	b.n	8009502 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	f107 0208 	add.w	r2, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	2202      	movs	r2, #2
 8009318:	701a      	strb	r2, [r3, #0]
      break;
 800931a:	e0f2      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b05      	cmp	r3, #5
 8009324:	f200 80ac 	bhi.w	8009480 <USBD_GetDescriptor+0x204>
 8009328:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <USBD_GetDescriptor+0xb4>)
 800932a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932e:	bf00      	nop
 8009330:	08009349 	.word	0x08009349
 8009334:	0800937d 	.word	0x0800937d
 8009338:	080093b1 	.word	0x080093b1
 800933c:	080093e5 	.word	0x080093e5
 8009340:	08009419 	.word	0x08009419
 8009344:	0800944d 	.word	0x0800944d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7c12      	ldrb	r2, [r2, #16]
 8009360:	f107 0108 	add.w	r1, r7, #8
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936a:	e091      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 facb 	bl	800990a <USBD_CtlError>
            err++;
 8009374:	7afb      	ldrb	r3, [r7, #11]
 8009376:	3301      	adds	r3, #1
 8009378:	72fb      	strb	r3, [r7, #11]
          break;
 800937a:	e089      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	7c12      	ldrb	r2, [r2, #16]
 8009394:	f107 0108 	add.w	r1, r7, #8
 8009398:	4610      	mov	r0, r2
 800939a:	4798      	blx	r3
 800939c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800939e:	e077      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fab1 	bl	800990a <USBD_CtlError>
            err++;
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	3301      	adds	r3, #1
 80093ac:	72fb      	strb	r3, [r7, #11]
          break;
 80093ae:	e06f      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	7c12      	ldrb	r2, [r2, #16]
 80093c8:	f107 0108 	add.w	r1, r7, #8
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093d2:	e05d      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fa97 	bl	800990a <USBD_CtlError>
            err++;
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	3301      	adds	r3, #1
 80093e0:	72fb      	strb	r3, [r7, #11]
          break;
 80093e2:	e055      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	7c12      	ldrb	r2, [r2, #16]
 80093fc:	f107 0108 	add.w	r1, r7, #8
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009406:	e043      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fa7d 	bl	800990a <USBD_CtlError>
            err++;
 8009410:	7afb      	ldrb	r3, [r7, #11]
 8009412:	3301      	adds	r3, #1
 8009414:	72fb      	strb	r3, [r7, #11]
          break;
 8009416:	e03b      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	7c12      	ldrb	r2, [r2, #16]
 8009430:	f107 0108 	add.w	r1, r7, #8
 8009434:	4610      	mov	r0, r2
 8009436:	4798      	blx	r3
 8009438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800943a:	e029      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa63 	bl	800990a <USBD_CtlError>
            err++;
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	3301      	adds	r3, #1
 8009448:	72fb      	strb	r3, [r7, #11]
          break;
 800944a:	e021      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	7c12      	ldrb	r2, [r2, #16]
 8009464:	f107 0108 	add.w	r1, r7, #8
 8009468:	4610      	mov	r0, r2
 800946a:	4798      	blx	r3
 800946c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800946e:	e00f      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa49 	bl	800990a <USBD_CtlError>
            err++;
 8009478:	7afb      	ldrb	r3, [r7, #11]
 800947a:	3301      	adds	r3, #1
 800947c:	72fb      	strb	r3, [r7, #11]
          break;
 800947e:	e007      	b.n	8009490 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa41 	bl	800990a <USBD_CtlError>
          err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800948e:	bf00      	nop
      }
      break;
 8009490:	e037      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7c1b      	ldrb	r3, [r3, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d109      	bne.n	80094ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f107 0208 	add.w	r2, r7, #8
 80094a6:	4610      	mov	r0, r2
 80094a8:	4798      	blx	r3
 80094aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094ac:	e029      	b.n	8009502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fa2a 	bl	800990a <USBD_CtlError>
        err++;
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	3301      	adds	r3, #1
 80094ba:	72fb      	strb	r3, [r7, #11]
      break;
 80094bc:	e021      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7c1b      	ldrb	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10d      	bne.n	80094e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ce:	f107 0208 	add.w	r2, r7, #8
 80094d2:	4610      	mov	r0, r2
 80094d4:	4798      	blx	r3
 80094d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	2207      	movs	r2, #7
 80094de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094e0:	e00f      	b.n	8009502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fa10 	bl	800990a <USBD_CtlError>
        err++;
 80094ea:	7afb      	ldrb	r3, [r7, #11]
 80094ec:	3301      	adds	r3, #1
 80094ee:	72fb      	strb	r3, [r7, #11]
      break;
 80094f0:	e007      	b.n	8009502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fa08 	bl	800990a <USBD_CtlError>
      err++;
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	3301      	adds	r3, #1
 80094fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009500:	bf00      	nop
  }

  if (err != 0U)
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d11e      	bne.n	8009546 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	88db      	ldrh	r3, [r3, #6]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d016      	beq.n	800953e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009510:	893b      	ldrh	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00e      	beq.n	8009534 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	88da      	ldrh	r2, [r3, #6]
 800951a:	893b      	ldrh	r3, [r7, #8]
 800951c:	4293      	cmp	r3, r2
 800951e:	bf28      	it	cs
 8009520:	4613      	movcs	r3, r2
 8009522:	b29b      	uxth	r3, r3
 8009524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009526:	893b      	ldrh	r3, [r7, #8]
 8009528:	461a      	mov	r2, r3
 800952a:	68f9      	ldr	r1, [r7, #12]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fa5d 	bl	80099ec <USBD_CtlSendData>
 8009532:	e009      	b.n	8009548 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f9e7 	bl	800990a <USBD_CtlError>
 800953c:	e004      	b.n	8009548 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 faae 	bl	8009aa0 <USBD_CtlSendStatus>
 8009544:	e000      	b.n	8009548 <USBD_GetDescriptor+0x2cc>
    return;
 8009546:	bf00      	nop
  }
}
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop

08009550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	889b      	ldrh	r3, [r3, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d131      	bne.n	80095c6 <USBD_SetAddress+0x76>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	88db      	ldrh	r3, [r3, #6]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d12d      	bne.n	80095c6 <USBD_SetAddress+0x76>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	885b      	ldrh	r3, [r3, #2]
 800956e:	2b7f      	cmp	r3, #127	; 0x7f
 8009570:	d829      	bhi.n	80095c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800957c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d104      	bne.n	8009594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f9bc 	bl	800990a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009592:	e01d      	b.n	80095d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7bfa      	ldrb	r2, [r7, #15]
 8009598:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fef5 	bl	800a390 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa7a 	bl	8009aa0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d004      	beq.n	80095bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ba:	e009      	b.n	80095d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c4:	e004      	b.n	80095d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f99e 	bl	800990a <USBD_CtlError>
  }
}
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	885b      	ldrh	r3, [r3, #2]
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	4b4e      	ldr	r3, [pc, #312]	; (8009728 <USBD_SetConfig+0x150>)
 80095ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095f0:	4b4d      	ldr	r3, [pc, #308]	; (8009728 <USBD_SetConfig+0x150>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d905      	bls.n	8009604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f985 	bl	800990a <USBD_CtlError>
    return USBD_FAIL;
 8009600:	2303      	movs	r3, #3
 8009602:	e08c      	b.n	800971e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b02      	cmp	r3, #2
 800960e:	d002      	beq.n	8009616 <USBD_SetConfig+0x3e>
 8009610:	2b03      	cmp	r3, #3
 8009612:	d029      	beq.n	8009668 <USBD_SetConfig+0x90>
 8009614:	e075      	b.n	8009702 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009616:	4b44      	ldr	r3, [pc, #272]	; (8009728 <USBD_SetConfig+0x150>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d020      	beq.n	8009660 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800961e:	4b42      	ldr	r3, [pc, #264]	; (8009728 <USBD_SetConfig+0x150>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009628:	4b3f      	ldr	r3, [pc, #252]	; (8009728 <USBD_SetConfig+0x150>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7fe ffe7 	bl	8008602 <USBD_SetClassConfig>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d008      	beq.n	8009650 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f962 	bl	800990a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2202      	movs	r2, #2
 800964a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800964e:	e065      	b.n	800971c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fa25 	bl	8009aa0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2203      	movs	r2, #3
 800965a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800965e:	e05d      	b.n	800971c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fa1d 	bl	8009aa0 <USBD_CtlSendStatus>
      break;
 8009666:	e059      	b.n	800971c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009668:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <USBD_SetConfig+0x150>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d112      	bne.n	8009696 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009678:	4b2b      	ldr	r3, [pc, #172]	; (8009728 <USBD_SetConfig+0x150>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009682:	4b29      	ldr	r3, [pc, #164]	; (8009728 <USBD_SetConfig+0x150>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fe ffd6 	bl	800863a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fa06 	bl	8009aa0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009694:	e042      	b.n	800971c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009696:	4b24      	ldr	r3, [pc, #144]	; (8009728 <USBD_SetConfig+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d02a      	beq.n	80096fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7fe ffc4 	bl	800863a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096b2:	4b1d      	ldr	r3, [pc, #116]	; (8009728 <USBD_SetConfig+0x150>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096bc:	4b1a      	ldr	r3, [pc, #104]	; (8009728 <USBD_SetConfig+0x150>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7fe ff9d 	bl	8008602 <USBD_SetClassConfig>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00f      	beq.n	80096f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f918 	bl	800990a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fe ffa9 	bl	800863a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096f0:	e014      	b.n	800971c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f9d4 	bl	8009aa0 <USBD_CtlSendStatus>
      break;
 80096f8:	e010      	b.n	800971c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f9d0 	bl	8009aa0 <USBD_CtlSendStatus>
      break;
 8009700:	e00c      	b.n	800971c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f900 	bl	800990a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800970a:	4b07      	ldr	r3, [pc, #28]	; (8009728 <USBD_SetConfig+0x150>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7fe ff92 	bl	800863a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009716:	2303      	movs	r3, #3
 8009718:	73fb      	strb	r3, [r7, #15]
      break;
 800971a:	bf00      	nop
  }

  return ret;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	200003f8 	.word	0x200003f8

0800972c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	88db      	ldrh	r3, [r3, #6]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d004      	beq.n	8009748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f8e2 	bl	800990a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009746:	e023      	b.n	8009790 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	dc02      	bgt.n	800975a <USBD_GetConfig+0x2e>
 8009754:	2b00      	cmp	r3, #0
 8009756:	dc03      	bgt.n	8009760 <USBD_GetConfig+0x34>
 8009758:	e015      	b.n	8009786 <USBD_GetConfig+0x5a>
 800975a:	2b03      	cmp	r3, #3
 800975c:	d00b      	beq.n	8009776 <USBD_GetConfig+0x4a>
 800975e:	e012      	b.n	8009786 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3308      	adds	r3, #8
 800976a:	2201      	movs	r2, #1
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f93c 	bl	80099ec <USBD_CtlSendData>
        break;
 8009774:	e00c      	b.n	8009790 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3304      	adds	r3, #4
 800977a:	2201      	movs	r2, #1
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f934 	bl	80099ec <USBD_CtlSendData>
        break;
 8009784:	e004      	b.n	8009790 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f8be 	bl	800990a <USBD_CtlError>
        break;
 800978e:	bf00      	nop
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d81e      	bhi.n	80097ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	88db      	ldrh	r3, [r3, #6]
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d004      	beq.n	80097c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f8a5 	bl	800990a <USBD_CtlError>
        break;
 80097c0:	e01a      	b.n	80097f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f043 0202 	orr.w	r2, r3, #2
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	330c      	adds	r3, #12
 80097e2:	2202      	movs	r2, #2
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f900 	bl	80099ec <USBD_CtlSendData>
      break;
 80097ec:	e004      	b.n	80097f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f88a 	bl	800990a <USBD_CtlError>
      break;
 80097f6:	bf00      	nop
  }
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	885b      	ldrh	r3, [r3, #2]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d107      	bne.n	8009822 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f940 	bl	8009aa0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009820:	e013      	b.n	800984a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	885b      	ldrh	r3, [r3, #2]
 8009826:	2b02      	cmp	r3, #2
 8009828:	d10b      	bne.n	8009842 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	889b      	ldrh	r3, [r3, #4]
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	b29b      	uxth	r3, r3
 8009832:	b2da      	uxtb	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f930 	bl	8009aa0 <USBD_CtlSendStatus>
}
 8009840:	e003      	b.n	800984a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f860 	bl	800990a <USBD_CtlError>
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009862:	b2db      	uxtb	r3, r3
 8009864:	3b01      	subs	r3, #1
 8009866:	2b02      	cmp	r3, #2
 8009868:	d80b      	bhi.n	8009882 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	885b      	ldrh	r3, [r3, #2]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d10c      	bne.n	800988c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f910 	bl	8009aa0 <USBD_CtlSendStatus>
      }
      break;
 8009880:	e004      	b.n	800988c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f840 	bl	800990a <USBD_CtlError>
      break;
 800988a:	e000      	b.n	800988e <USBD_ClrFeature+0x3c>
      break;
 800988c:	bf00      	nop
  }
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	781a      	ldrb	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3301      	adds	r3, #1
 80098be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7ff fa41 	bl	8008d48 <SWAPBYTE>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3301      	adds	r3, #1
 80098d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fa34 	bl	8008d48 <SWAPBYTE>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3301      	adds	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f7ff fa27 	bl	8008d48 <SWAPBYTE>
 80098fa:	4603      	mov	r3, r0
 80098fc:	461a      	mov	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	80da      	strh	r2, [r3, #6]
}
 8009902:	bf00      	nop
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009914:	2180      	movs	r1, #128	; 0x80
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fcd0 	bl	800a2bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800991c:	2100      	movs	r1, #0
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fccc 	bl	800a2bc <USBD_LL_StallEP>
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d036      	beq.n	80099b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009946:	6938      	ldr	r0, [r7, #16]
 8009948:	f000 f836 	bl	80099b8 <USBD_GetLen>
 800994c:	4603      	mov	r3, r0
 800994e:	3301      	adds	r3, #1
 8009950:	b29b      	uxth	r3, r3
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	4413      	add	r3, r2
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	7812      	ldrb	r2, [r2, #0]
 8009964:	701a      	strb	r2, [r3, #0]
  idx++;
 8009966:	7dfb      	ldrb	r3, [r7, #23]
 8009968:	3301      	adds	r3, #1
 800996a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	2203      	movs	r2, #3
 8009974:	701a      	strb	r2, [r3, #0]
  idx++;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	3301      	adds	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800997c:	e013      	b.n	80099a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800997e:	7dfb      	ldrb	r3, [r7, #23]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	4413      	add	r3, r2
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	7812      	ldrb	r2, [r2, #0]
 8009988:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	3301      	adds	r3, #1
 800998e:	613b      	str	r3, [r7, #16]
    idx++;
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	3301      	adds	r3, #1
 8009994:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	4413      	add	r3, r2
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
    idx++;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	3301      	adds	r3, #1
 80099a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e7      	bne.n	800997e <USBD_GetString+0x52>
 80099ae:	e000      	b.n	80099b2 <USBD_GetString+0x86>
    return;
 80099b0:	bf00      	nop
  }
}
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099c8:	e005      	b.n	80099d6 <USBD_GetLen+0x1e>
  {
    len++;
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	3301      	adds	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	3301      	adds	r3, #1
 80099d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1f5      	bne.n	80099ca <USBD_GetLen+0x12>
  }

  return len;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	2100      	movs	r1, #0
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fcdb 	bl	800a3ce <USBD_LL_Transmit>

  return USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	2100      	movs	r1, #0
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 fcca 	bl	800a3ce <USBD_LL_Transmit>

  return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2203      	movs	r2, #3
 8009a54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fcce 	bl	800a410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	2100      	movs	r1, #0
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 fcbd 	bl	800a410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fc89 	bl	800a3ce <USBD_LL_Transmit>

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2205      	movs	r2, #5
 8009ad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2100      	movs	r1, #0
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fc97 	bl	800a410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009af0:	2201      	movs	r2, #1
 8009af2:	4912      	ldr	r1, [pc, #72]	; (8009b3c <MX_USB_DEVICE_Init+0x50>)
 8009af4:	4812      	ldr	r0, [pc, #72]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009af6:	f7fe fd07 	bl	8008508 <USBD_Init>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b00:	f7f6 feda 	bl	80008b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009b04:	490f      	ldr	r1, [pc, #60]	; (8009b44 <MX_USB_DEVICE_Init+0x58>)
 8009b06:	480e      	ldr	r0, [pc, #56]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009b08:	f7fe fd2e 	bl	8008568 <USBD_RegisterClass>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b12:	f7f6 fed1 	bl	80008b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009b16:	490c      	ldr	r1, [pc, #48]	; (8009b48 <MX_USB_DEVICE_Init+0x5c>)
 8009b18:	4809      	ldr	r0, [pc, #36]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009b1a:	f7fe fc65 	bl	80083e8 <USBD_CDC_RegisterInterface>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b24:	f7f6 fec8 	bl	80008b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009b28:	4805      	ldr	r0, [pc, #20]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009b2a:	f7fe fd53 	bl	80085d4 <USBD_Start>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b34:	f7f6 fec0 	bl	80008b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b38:	bf00      	nop
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200000f4 	.word	0x200000f4
 8009b40:	200003fc 	.word	0x200003fc
 8009b44:	20000060 	.word	0x20000060
 8009b48:	200000e0 	.word	0x200000e0

08009b4c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009b50:	2200      	movs	r2, #0
 8009b52:	4905      	ldr	r1, [pc, #20]	; (8009b68 <CDC_Init_HS+0x1c>)
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <CDC_Init_HS+0x20>)
 8009b56:	f7fe fc61 	bl	800841c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8009b5a:	4905      	ldr	r1, [pc, #20]	; (8009b70 <CDC_Init_HS+0x24>)
 8009b5c:	4803      	ldr	r0, [pc, #12]	; (8009b6c <CDC_Init_HS+0x20>)
 8009b5e:	f7fe fc7f 	bl	8008460 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b62:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000ed8 	.word	0x20000ed8
 8009b6c:	200003fc 	.word	0x200003fc
 8009b70:	200006d8 	.word	0x200006d8

08009b74 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009b78:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	71fb      	strb	r3, [r7, #7]
 8009b90:	4613      	mov	r3, r2
 8009b92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	2b23      	cmp	r3, #35	; 0x23
 8009b98:	d84a      	bhi.n	8009c30 <CDC_Control_HS+0xac>
 8009b9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <CDC_Control_HS+0x1c>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009c31 	.word	0x08009c31
 8009ba4:	08009c31 	.word	0x08009c31
 8009ba8:	08009c31 	.word	0x08009c31
 8009bac:	08009c31 	.word	0x08009c31
 8009bb0:	08009c31 	.word	0x08009c31
 8009bb4:	08009c31 	.word	0x08009c31
 8009bb8:	08009c31 	.word	0x08009c31
 8009bbc:	08009c31 	.word	0x08009c31
 8009bc0:	08009c31 	.word	0x08009c31
 8009bc4:	08009c31 	.word	0x08009c31
 8009bc8:	08009c31 	.word	0x08009c31
 8009bcc:	08009c31 	.word	0x08009c31
 8009bd0:	08009c31 	.word	0x08009c31
 8009bd4:	08009c31 	.word	0x08009c31
 8009bd8:	08009c31 	.word	0x08009c31
 8009bdc:	08009c31 	.word	0x08009c31
 8009be0:	08009c31 	.word	0x08009c31
 8009be4:	08009c31 	.word	0x08009c31
 8009be8:	08009c31 	.word	0x08009c31
 8009bec:	08009c31 	.word	0x08009c31
 8009bf0:	08009c31 	.word	0x08009c31
 8009bf4:	08009c31 	.word	0x08009c31
 8009bf8:	08009c31 	.word	0x08009c31
 8009bfc:	08009c31 	.word	0x08009c31
 8009c00:	08009c31 	.word	0x08009c31
 8009c04:	08009c31 	.word	0x08009c31
 8009c08:	08009c31 	.word	0x08009c31
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c31 	.word	0x08009c31
 8009c18:	08009c31 	.word	0x08009c31
 8009c1c:	08009c31 	.word	0x08009c31
 8009c20:	08009c31 	.word	0x08009c31
 8009c24:	08009c31 	.word	0x08009c31
 8009c28:	08009c31 	.word	0x08009c31
 8009c2c:	08009c31 	.word	0x08009c31
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c30:	bf00      	nop
  }

  return (USBD_OK);
 8009c32:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	480e      	ldr	r0, [pc, #56]	; (8009c88 <CDC_Receive_HS+0x48>)
 8009c4e:	f7fe fc07 	bl	8008460 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009c52:	480d      	ldr	r0, [pc, #52]	; (8009c88 <CDC_Receive_HS+0x48>)
 8009c54:	f7fe fc22 	bl	800849c <USBD_CDC_ReceivePacket>

  memset (receive_data, '\0', 64);  // clear the buffer
 8009c58:	2240      	movs	r2, #64	; 0x40
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	480b      	ldr	r0, [pc, #44]	; (8009c8c <CDC_Receive_HS+0x4c>)
 8009c5e:	f000 fc81 	bl	800a564 <memset>
  //uint8_t len = (uint8_t)*Len;
  memcpy(receive_data, Buf, *Len);  // copy the data to the buffer
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	6879      	ldr	r1, [r7, #4]
 8009c6a:	4808      	ldr	r0, [pc, #32]	; (8009c8c <CDC_Receive_HS+0x4c>)
 8009c6c:	f000 fc6c 	bl	800a548 <memcpy>
  memset(Buf, '\0', *Len);   // clear the Buf also
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	461a      	mov	r2, r3
 8009c76:	2100      	movs	r1, #0
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fc73 	bl	800a564 <memset>

  return (USBD_OK);
 8009c7e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	200003fc 	.word	0x200003fc
 8009c8c:	20000160 	.word	0x20000160

08009c90 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2212      	movs	r2, #18
 8009cc4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009cc6:	4b03      	ldr	r3, [pc, #12]	; (8009cd4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	20000110 	.word	0x20000110

08009cd8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cea:	4b03      	ldr	r3, [pc, #12]	; (8009cf8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	20000124 	.word	0x20000124

08009cfc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d105      	bne.n	8009d1a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	4907      	ldr	r1, [pc, #28]	; (8009d30 <USBD_HS_ProductStrDescriptor+0x34>)
 8009d12:	4808      	ldr	r0, [pc, #32]	; (8009d34 <USBD_HS_ProductStrDescriptor+0x38>)
 8009d14:	f7ff fe0a 	bl	800992c <USBD_GetString>
 8009d18:	e004      	b.n	8009d24 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	4904      	ldr	r1, [pc, #16]	; (8009d30 <USBD_HS_ProductStrDescriptor+0x34>)
 8009d1e:	4805      	ldr	r0, [pc, #20]	; (8009d34 <USBD_HS_ProductStrDescriptor+0x38>)
 8009d20:	f7ff fe04 	bl	800992c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d24:	4b02      	ldr	r3, [pc, #8]	; (8009d30 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	200016d8 	.word	0x200016d8
 8009d34:	0800a754 	.word	0x0800a754

08009d38 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	6039      	str	r1, [r7, #0]
 8009d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	4904      	ldr	r1, [pc, #16]	; (8009d58 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009d48:	4804      	ldr	r0, [pc, #16]	; (8009d5c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009d4a:	f7ff fdef 	bl	800992c <USBD_GetString>
  return USBD_StrDesc;
 8009d4e:	4b02      	ldr	r3, [pc, #8]	; (8009d58 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	200016d8 	.word	0x200016d8
 8009d5c:	0800a76c 	.word	0x0800a76c

08009d60 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	6039      	str	r1, [r7, #0]
 8009d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	221a      	movs	r2, #26
 8009d70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d72:	f000 f843 	bl	8009dfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009d76:	4b02      	ldr	r3, [pc, #8]	; (8009d80 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	20000128 	.word	0x20000128

08009d84 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d105      	bne.n	8009da2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	4907      	ldr	r1, [pc, #28]	; (8009db8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009d9a:	4808      	ldr	r0, [pc, #32]	; (8009dbc <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d9c:	f7ff fdc6 	bl	800992c <USBD_GetString>
 8009da0:	e004      	b.n	8009dac <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	4904      	ldr	r1, [pc, #16]	; (8009db8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009da6:	4805      	ldr	r0, [pc, #20]	; (8009dbc <USBD_HS_ConfigStrDescriptor+0x38>)
 8009da8:	f7ff fdc0 	bl	800992c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dac:	4b02      	ldr	r3, [pc, #8]	; (8009db8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	200016d8 	.word	0x200016d8
 8009dbc:	0800a780 	.word	0x0800a780

08009dc0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	6039      	str	r1, [r7, #0]
 8009dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d105      	bne.n	8009dde <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	4907      	ldr	r1, [pc, #28]	; (8009df4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009dd6:	4808      	ldr	r0, [pc, #32]	; (8009df8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009dd8:	f7ff fda8 	bl	800992c <USBD_GetString>
 8009ddc:	e004      	b.n	8009de8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	4904      	ldr	r1, [pc, #16]	; (8009df4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009de2:	4805      	ldr	r0, [pc, #20]	; (8009df8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009de4:	f7ff fda2 	bl	800992c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	200016d8 	.word	0x200016d8
 8009df8:	0800a78c 	.word	0x0800a78c

08009dfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e02:	4b0f      	ldr	r3, [pc, #60]	; (8009e40 <Get_SerialNum+0x44>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e08:	4b0e      	ldr	r3, [pc, #56]	; (8009e44 <Get_SerialNum+0x48>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e0e:	4b0e      	ldr	r3, [pc, #56]	; (8009e48 <Get_SerialNum+0x4c>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4413      	add	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e22:	2208      	movs	r2, #8
 8009e24:	4909      	ldr	r1, [pc, #36]	; (8009e4c <Get_SerialNum+0x50>)
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 f814 	bl	8009e54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e2c:	2204      	movs	r2, #4
 8009e2e:	4908      	ldr	r1, [pc, #32]	; (8009e50 <Get_SerialNum+0x54>)
 8009e30:	68b8      	ldr	r0, [r7, #8]
 8009e32:	f000 f80f 	bl	8009e54 <IntToUnicode>
  }
}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	1fff7a10 	.word	0x1fff7a10
 8009e44:	1fff7a14 	.word	0x1fff7a14
 8009e48:	1fff7a18 	.word	0x1fff7a18
 8009e4c:	2000012a 	.word	0x2000012a
 8009e50:	2000013a 	.word	0x2000013a

08009e54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e66:	2300      	movs	r3, #0
 8009e68:	75fb      	strb	r3, [r7, #23]
 8009e6a:	e027      	b.n	8009ebc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	0f1b      	lsrs	r3, r3, #28
 8009e70:	2b09      	cmp	r3, #9
 8009e72:	d80b      	bhi.n	8009e8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	0f1b      	lsrs	r3, r3, #28
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	4619      	mov	r1, r3
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	440b      	add	r3, r1
 8009e84:	3230      	adds	r2, #48	; 0x30
 8009e86:	b2d2      	uxtb	r2, r2
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	e00a      	b.n	8009ea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	0f1b      	lsrs	r3, r3, #28
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	4619      	mov	r1, r3
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	440b      	add	r3, r1
 8009e9c:	3237      	adds	r2, #55	; 0x37
 8009e9e:	b2d2      	uxtb	r2, r2
 8009ea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	011b      	lsls	r3, r3, #4
 8009ea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	3301      	adds	r3, #1
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009eb6:	7dfb      	ldrb	r3, [r7, #23]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	75fb      	strb	r3, [r7, #23]
 8009ebc:	7dfa      	ldrb	r2, [r7, #23]
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d3d3      	bcc.n	8009e6c <IntToUnicode+0x18>
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
	...

08009ed4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b08a      	sub	sp, #40	; 0x28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009edc:	f107 0314 	add.w	r3, r7, #20
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	605a      	str	r2, [r3, #4]
 8009ee6:	609a      	str	r2, [r3, #8]
 8009ee8:	60da      	str	r2, [r3, #12]
 8009eea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a1d      	ldr	r2, [pc, #116]	; (8009f68 <HAL_PCD_MspInit+0x94>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d134      	bne.n	8009f60 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	613b      	str	r3, [r7, #16]
 8009efa:	4b1c      	ldr	r3, [pc, #112]	; (8009f6c <HAL_PCD_MspInit+0x98>)
 8009efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efe:	4a1b      	ldr	r2, [pc, #108]	; (8009f6c <HAL_PCD_MspInit+0x98>)
 8009f00:	f043 0302 	orr.w	r3, r3, #2
 8009f04:	6313      	str	r3, [r2, #48]	; 0x30
 8009f06:	4b19      	ldr	r3, [pc, #100]	; (8009f6c <HAL_PCD_MspInit+0x98>)
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	613b      	str	r3, [r7, #16]
 8009f10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009f12:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f18:	2302      	movs	r3, #2
 8009f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f20:	2303      	movs	r3, #3
 8009f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009f24:	230c      	movs	r3, #12
 8009f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f28:	f107 0314 	add.w	r3, r7, #20
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4810      	ldr	r0, [pc, #64]	; (8009f70 <HAL_PCD_MspInit+0x9c>)
 8009f30:	f7f8 fd18 	bl	8002964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009f34:	2300      	movs	r3, #0
 8009f36:	60fb      	str	r3, [r7, #12]
 8009f38:	4b0c      	ldr	r3, [pc, #48]	; (8009f6c <HAL_PCD_MspInit+0x98>)
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3c:	4a0b      	ldr	r2, [pc, #44]	; (8009f6c <HAL_PCD_MspInit+0x98>)
 8009f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f42:	6313      	str	r3, [r2, #48]	; 0x30
 8009f44:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <HAL_PCD_MspInit+0x98>)
 8009f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009f50:	2200      	movs	r2, #0
 8009f52:	2100      	movs	r1, #0
 8009f54:	204d      	movs	r0, #77	; 0x4d
 8009f56:	f7f8 f87a 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009f5a:	204d      	movs	r0, #77	; 0x4d
 8009f5c:	f7f8 f893 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009f60:	bf00      	nop
 8009f62:	3728      	adds	r7, #40	; 0x28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	40040000 	.word	0x40040000
 8009f6c:	40023800 	.word	0x40023800
 8009f70:	40020400 	.word	0x40020400

08009f74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f7fe fb6f 	bl	800866e <USBD_LL_SetupStage>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	440b      	add	r3, r1
 8009fb8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	f7fe fba9 	bl	8008718 <USBD_LL_DataOutStage>
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009fe0:	78fa      	ldrb	r2, [r7, #3]
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	00db      	lsls	r3, r3, #3
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	440b      	add	r3, r1
 8009fee:	334c      	adds	r3, #76	; 0x4c
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	78fb      	ldrb	r3, [r7, #3]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	f7fe fc42 	bl	800887e <USBD_LL_DataInStage>
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe fd76 	bl	8008b02 <USBD_LL_SOF>
}
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a026:	2301      	movs	r3, #1
 800a028:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d102      	bne.n	800a038 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a032:	2300      	movs	r3, #0
 800a034:	73fb      	strb	r3, [r7, #15]
 800a036:	e008      	b.n	800a04a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d102      	bne.n	800a046 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a040:	2301      	movs	r3, #1
 800a042:	73fb      	strb	r3, [r7, #15]
 800a044:	e001      	b.n	800a04a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a046:	f7f6 fc37 	bl	80008b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a050:	7bfa      	ldrb	r2, [r7, #15]
 800a052:	4611      	mov	r1, r2
 800a054:	4618      	mov	r0, r3
 800a056:	f7fe fd16 	bl	8008a86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a060:	4618      	mov	r0, r3
 800a062:	f7fe fcbe 	bl	80089e2 <USBD_LL_Reset>
}
 800a066:	bf00      	nop
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
	...

0800a070 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe fd11 	bl	8008aa6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	6812      	ldr	r2, [r2, #0]
 800a092:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a096:	f043 0301 	orr.w	r3, r3, #1
 800a09a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d005      	beq.n	800a0b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0a4:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <HAL_PCD_SuspendCallback+0x48>)
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	4a03      	ldr	r2, [pc, #12]	; (800a0b8 <HAL_PCD_SuspendCallback+0x48>)
 800a0aa:	f043 0306 	orr.w	r3, r3, #6
 800a0ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	e000ed00 	.word	0xe000ed00

0800a0bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fd01 	bl	8008ad2 <USBD_LL_Resume>
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe fd59 	bl	8008ba6 <USBD_LL_IsoOUTIncomplete>
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a10e:	78fa      	ldrb	r2, [r7, #3]
 800a110:	4611      	mov	r1, r2
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fd15 	bl	8008b42 <USBD_LL_IsoINIncomplete>
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe fd6b 	bl	8008c0a <USBD_LL_DevConnected>
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe fd68 	bl	8008c20 <USBD_LL_DevDisconnected>
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d140      	bne.n	800a1ea <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a168:	4a22      	ldr	r2, [pc, #136]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a20      	ldr	r2, [pc, #128]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a174:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a178:	4b1e      	ldr	r3, [pc, #120]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a17a:	4a1f      	ldr	r2, [pc, #124]	; (800a1f8 <USBD_LL_Init+0xa0>)
 800a17c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800a17e:	4b1d      	ldr	r3, [pc, #116]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a180:	2206      	movs	r2, #6
 800a182:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a184:	4b1b      	ldr	r3, [pc, #108]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a186:	2202      	movs	r2, #2
 800a188:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a18a:	4b1a      	ldr	r3, [pc, #104]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a190:	4b18      	ldr	r3, [pc, #96]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a192:	2202      	movs	r2, #2
 800a194:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a196:	4b17      	ldr	r3, [pc, #92]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a198:	2200      	movs	r2, #0
 800a19a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a19c:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a1a2:	4b14      	ldr	r3, [pc, #80]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a1a8:	4b12      	ldr	r3, [pc, #72]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a1ae:	4b11      	ldr	r3, [pc, #68]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a1ba:	480e      	ldr	r0, [pc, #56]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a1bc:	f7f9 f871 	bl	80032a2 <HAL_PCD_Init>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a1c6:	f7f6 fb77 	bl	80008b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a1ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1ce:	4809      	ldr	r0, [pc, #36]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a1d0:	f7fa fac7 	bl	8004762 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a1d4:	2280      	movs	r2, #128	; 0x80
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4806      	ldr	r0, [pc, #24]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a1da:	f7fa fa7b 	bl	80046d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a1de:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	4803      	ldr	r0, [pc, #12]	; (800a1f4 <USBD_LL_Init+0x9c>)
 800a1e6:	f7fa fa75 	bl	80046d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	200018d8 	.word	0x200018d8
 800a1f8:	40040000 	.word	0x40040000

0800a1fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a212:	4618      	mov	r0, r3
 800a214:	f7f9 f962 	bl	80034dc <HAL_PCD_Start>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 f942 	bl	800a4a8 <USBD_Get_USB_Status>
 800a224:	4603      	mov	r3, r0
 800a226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a228:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	4608      	mov	r0, r1
 800a23c:	4611      	mov	r1, r2
 800a23e:	461a      	mov	r2, r3
 800a240:	4603      	mov	r3, r0
 800a242:	70fb      	strb	r3, [r7, #3]
 800a244:	460b      	mov	r3, r1
 800a246:	70bb      	strb	r3, [r7, #2]
 800a248:	4613      	mov	r3, r2
 800a24a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a25a:	78bb      	ldrb	r3, [r7, #2]
 800a25c:	883a      	ldrh	r2, [r7, #0]
 800a25e:	78f9      	ldrb	r1, [r7, #3]
 800a260:	f7f9 fe33 	bl	8003eca <HAL_PCD_EP_Open>
 800a264:	4603      	mov	r3, r0
 800a266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 f91c 	bl	800a4a8 <USBD_Get_USB_Status>
 800a270:	4603      	mov	r3, r0
 800a272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a274:	7bbb      	ldrb	r3, [r7, #14]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	460b      	mov	r3, r1
 800a288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a298:	78fa      	ldrb	r2, [r7, #3]
 800a29a:	4611      	mov	r1, r2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7f9 fe7c 	bl	8003f9a <HAL_PCD_EP_Close>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 f8fd 	bl	800a4a8 <USBD_Get_USB_Status>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2d6:	78fa      	ldrb	r2, [r7, #3]
 800a2d8:	4611      	mov	r1, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f9 ff54 	bl	8004188 <HAL_PCD_EP_SetStall>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f8de 	bl	800a4a8 <USBD_Get_USB_Status>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a314:	78fa      	ldrb	r2, [r7, #3]
 800a316:	4611      	mov	r1, r2
 800a318:	4618      	mov	r0, r3
 800a31a:	f7f9 ff99 	bl	8004250 <HAL_PCD_EP_ClrStall>
 800a31e:	4603      	mov	r3, r0
 800a320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a322:	7bfb      	ldrb	r3, [r7, #15]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 f8bf 	bl	800a4a8 <USBD_Get_USB_Status>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a34a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a34c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a350:	2b00      	cmp	r3, #0
 800a352:	da0b      	bge.n	800a36c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a354:	78fb      	ldrb	r3, [r7, #3]
 800a356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	4613      	mov	r3, r2
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	440b      	add	r3, r1
 800a366:	333e      	adds	r3, #62	; 0x3e
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	e00b      	b.n	800a384 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a36c:	78fb      	ldrb	r3, [r7, #3]
 800a36e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a372:	68f9      	ldr	r1, [r7, #12]
 800a374:	4613      	mov	r3, r2
 800a376:	00db      	lsls	r3, r3, #3
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	440b      	add	r3, r1
 800a37e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a382:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	460b      	mov	r3, r1
 800a39a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7f9 fd66 	bl	8003e80 <HAL_PCD_SetAddress>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 f874 	bl	800a4a8 <USBD_Get_USB_Status>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b086      	sub	sp, #24
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	60f8      	str	r0, [r7, #12]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a3ec:	7af9      	ldrb	r1, [r7, #11]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	f7f9 fe7f 	bl	80040f4 <HAL_PCD_EP_Transmit>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 f853 	bl	800a4a8 <USBD_Get_USB_Status>
 800a402:	4603      	mov	r3, r0
 800a404:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a406:	7dbb      	ldrb	r3, [r7, #22]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	607a      	str	r2, [r7, #4]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	460b      	mov	r3, r1
 800a41e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a42e:	7af9      	ldrb	r1, [r7, #11]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	f7f9 fdfb 	bl	800402e <HAL_PCD_EP_Receive>
 800a438:	4603      	mov	r3, r0
 800a43a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 f832 	bl	800a4a8 <USBD_Get_USB_Status>
 800a444:	4603      	mov	r3, r0
 800a446:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a448:	7dbb      	ldrb	r3, [r7, #22]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	460b      	mov	r3, r1
 800a45c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a464:	78fa      	ldrb	r2, [r7, #3]
 800a466:	4611      	mov	r1, r2
 800a468:	4618      	mov	r0, r3
 800a46a:	f7f9 fe2b 	bl	80040c4 <HAL_PCD_EP_GetRxCount>
 800a46e:	4603      	mov	r3, r0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a480:	4b03      	ldr	r3, [pc, #12]	; (800a490 <USBD_static_malloc+0x18>)
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	20001de4 	.word	0x20001de4

0800a494 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]

}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d817      	bhi.n	800a4ec <USBD_Get_USB_Status+0x44>
 800a4bc:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <USBD_Get_USB_Status+0x1c>)
 800a4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c2:	bf00      	nop
 800a4c4:	0800a4d5 	.word	0x0800a4d5
 800a4c8:	0800a4db 	.word	0x0800a4db
 800a4cc:	0800a4e1 	.word	0x0800a4e1
 800a4d0:	0800a4e7 	.word	0x0800a4e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d8:	e00b      	b.n	800a4f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a4de:	e008      	b.n	800a4f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e4:	e005      	b.n	800a4f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ea:	e002      	b.n	800a4f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f0:	bf00      	nop
  }
  return usb_status;
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <__libc_init_array>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4d0d      	ldr	r5, [pc, #52]	; (800a538 <__libc_init_array+0x38>)
 800a504:	4c0d      	ldr	r4, [pc, #52]	; (800a53c <__libc_init_array+0x3c>)
 800a506:	1b64      	subs	r4, r4, r5
 800a508:	10a4      	asrs	r4, r4, #2
 800a50a:	2600      	movs	r6, #0
 800a50c:	42a6      	cmp	r6, r4
 800a50e:	d109      	bne.n	800a524 <__libc_init_array+0x24>
 800a510:	4d0b      	ldr	r5, [pc, #44]	; (800a540 <__libc_init_array+0x40>)
 800a512:	4c0c      	ldr	r4, [pc, #48]	; (800a544 <__libc_init_array+0x44>)
 800a514:	f000 f82e 	bl	800a574 <_init>
 800a518:	1b64      	subs	r4, r4, r5
 800a51a:	10a4      	asrs	r4, r4, #2
 800a51c:	2600      	movs	r6, #0
 800a51e:	42a6      	cmp	r6, r4
 800a520:	d105      	bne.n	800a52e <__libc_init_array+0x2e>
 800a522:	bd70      	pop	{r4, r5, r6, pc}
 800a524:	f855 3b04 	ldr.w	r3, [r5], #4
 800a528:	4798      	blx	r3
 800a52a:	3601      	adds	r6, #1
 800a52c:	e7ee      	b.n	800a50c <__libc_init_array+0xc>
 800a52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a532:	4798      	blx	r3
 800a534:	3601      	adds	r6, #1
 800a536:	e7f2      	b.n	800a51e <__libc_init_array+0x1e>
 800a538:	0800c274 	.word	0x0800c274
 800a53c:	0800c274 	.word	0x0800c274
 800a540:	0800c274 	.word	0x0800c274
 800a544:	0800c278 	.word	0x0800c278

0800a548 <memcpy>:
 800a548:	440a      	add	r2, r1
 800a54a:	4291      	cmp	r1, r2
 800a54c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a550:	d100      	bne.n	800a554 <memcpy+0xc>
 800a552:	4770      	bx	lr
 800a554:	b510      	push	{r4, lr}
 800a556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a55a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a55e:	4291      	cmp	r1, r2
 800a560:	d1f9      	bne.n	800a556 <memcpy+0xe>
 800a562:	bd10      	pop	{r4, pc}

0800a564 <memset>:
 800a564:	4402      	add	r2, r0
 800a566:	4603      	mov	r3, r0
 800a568:	4293      	cmp	r3, r2
 800a56a:	d100      	bne.n	800a56e <memset+0xa>
 800a56c:	4770      	bx	lr
 800a56e:	f803 1b01 	strb.w	r1, [r3], #1
 800a572:	e7f9      	b.n	800a568 <memset+0x4>

0800a574 <_init>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	bf00      	nop
 800a578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57a:	bc08      	pop	{r3}
 800a57c:	469e      	mov	lr, r3
 800a57e:	4770      	bx	lr

0800a580 <_fini>:
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	bf00      	nop
 800a584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a586:	bc08      	pop	{r3}
 800a588:	469e      	mov	lr, r3
 800a58a:	4770      	bx	lr
